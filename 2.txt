diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/DVDPlayer/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/DVDPlayer/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/DVDPlayer/plugin.py	2020-06-21 10:16:12.675432853 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/DVDPlayer/plugin.py	2020-06-21 10:20:02.327321556 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import os
 from Tools.Directories import fileExists
 from Plugins.Plugin import PluginDescriptor
@@ -33,7 +34,7 @@
 		cd = harddiskmanager.getCD()
 		if cd and (os.path.exists(os.path.join(harddiskmanager.getAutofsMountpoint(cd), "VIDEO_TS"))
 				or os.path.exists(os.path.join(harddiskmanager.getAutofsMountpoint(cd), "video_ts"))):
-			print "[DVDplayer] found device /dev/%s", " mount path ", harddiskmanager.getAutofsMountpoint(cd)
+			print("[DVDplayer] found device /dev/%s", " mount path ", harddiskmanager.getAutofsMountpoint(cd))
 			session.open(DVD.DVDPlayer, dvd_device="/dev/%s" %(harddiskmanager.getAutofsMountpoint(cd)))
 			return
 	else:
@@ -42,7 +43,7 @@
 			if x.mimetype == "video/x-dvd-iso":
 				dvd_filelist.append(x.path)
 			if x.mimetype == "video/x-dvd":
-				dvd_filelist.append(x.path.rsplit('/',1)[0])
+				dvd_filelist.append(x.path.rsplit('/', 1)[0])
 		session.open(DVD.DVDPlayer, dvd_filelist=dvd_filelist)
 
 def filescan(**kwargs):
@@ -54,7 +55,7 @@
 			return fileExists(file.path)
 
 	return [
-		LocalScanner(mimetypes = ["video/x-dvd","video/x-dvd-iso"],
+		LocalScanner(mimetypes = ["video/x-dvd", "video/x-dvd-iso"],
 			paths_to_scan =
 				[
 					ScanPath(path = "video_ts", with_subdirs = False),
@@ -67,14 +68,14 @@
 		)]
 
 def onPartitionChange(action, partition):
-	print "[@] onPartitionChange", action, partition
+	print("[@] onPartitionChange", action, partition)
 	if partition != harddiskmanager.getCD():
 		global detected_DVD
 		if action == 'remove':
-			print "[DVDplayer] DVD removed"
+			print("[DVDplayer] DVD removed")
 			detected_DVD = False
 		elif action == 'add':
-			print "[DVDplayer] DVD Inserted"
+			print("[DVDplayer] DVD Inserted")
 			detected_DVD = None
 
 def menu(menuid, **kwargs):
@@ -84,7 +85,7 @@
 			cd = harddiskmanager.getCD()
 			if cd and (os.path.exists(os.path.join(harddiskmanager.getAutofsMountpoint(cd), "VIDEO_TS"))
 					or os.path.exists(os.path.join(harddiskmanager.getAutofsMountpoint(cd), "video_ts"))):
-				print "[DVDplayer] Mountpoint is present and is", harddiskmanager.getAutofsMountpoint(cd)
+				print("[DVDplayer] Mountpoint is present and is", harddiskmanager.getAutofsMountpoint(cd))
 				detected_DVD = True
 			else:
 				detected_DVD = False
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/FileList.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/FileList.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/FileList.py	2020-06-21 10:16:12.675432853 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/FileList.py	2020-06-21 10:20:02.327321556 -0400
@@ -1,3 +1,4 @@
+from __future__ import absolute_import
 import os
 import re
 from Components.FileList import FileList as FileListBase, EXTENSIONS as BASE_EXTENSIONS
@@ -8,7 +9,7 @@
 from enigma import RT_HALIGN_LEFT, BT_SCALE, eListboxPythonMultiContent, \
 	eServiceReference, eServiceReferenceFS, eServiceCenter
 from Tools.LoadPixmap import LoadPixmap
-from addons.key_actions import TEXT_EXTENSIONS
+from .addons.key_actions import TEXT_EXTENSIONS
 import skin
 
 LOCAL_EXTENSIONS = {
@@ -55,7 +56,7 @@
 
 def FileEntryComponent(name, absolute=None, isDir=False, isLink=False):
 	res = [(absolute, isDir, isLink)]
-	x, y, w, h = skin.parameters.get("FileListName",(55, 1, 1175, 25))
+	x, y, w, h = skin.parameters.get("FileListName", (55, 1, 1175, 25))
 	res.append((eListboxPythonMultiContent.TYPE_TEXT, x, y, w-x, h, 0, RT_HALIGN_LEFT, name))
 	if isLink:
 		link_png = LoadPixmap(path=os.path.join(imagePath, "link-arrow.png"))
@@ -69,10 +70,10 @@
 	else:
 		png = getPNGByExt(name)
 	if png is not None:
-		x, y, w, h = skin.parameters.get("FileListIcon",(10, 4, 20, 20))
+		x, y, w, h = skin.parameters.get("FileListIcon", (10, 4, 20, 20))
 		res.append((eListboxPythonMultiContent.TYPE_PIXMAP_ALPHABLEND, x, y, w, h, png, None, None, BT_SCALE))
 		if link_png is not None:
-			res.append((eListboxPythonMultiContent.TYPE_PIXMAP_ALPHABLEND, x, y, w, h, link_png, None ,None, BT_SCALE))
+			res.append((eListboxPythonMultiContent.TYPE_PIXMAP_ALPHABLEND, x, y, w, h, link_png, None, None, BT_SCALE))
 
 	return res
 
@@ -147,7 +148,7 @@
 				root.setName(self.additional_extensions)
 			serviceHandler = eServiceCenter.getInstance()
 			list = serviceHandler.list(root)
-			while 1:
+			while True:
 				s = list.getNext()
 				if not s.valid():
 					del list
@@ -248,7 +249,7 @@
 
 def MultiFileSelectEntryComponent(name, absolute=None, isDir=False, isLink=False, selected=False):
 	res = [(absolute, isDir, isLink, selected, name)]
-	x, y, w, h = skin.parameters.get("FileListMultiName",(55, 1, 1175, 25))
+	x, y, w, h = skin.parameters.get("FileListMultiName", (55, 1, 1175, 25))
 	res.append((eListboxPythonMultiContent.TYPE_TEXT, x, y, w, h, 0, RT_HALIGN_LEFT, name))
 
 	if isLink:
@@ -263,23 +264,23 @@
 	else:
 		png = getPNGByExt(name)
 	if png is not None:
-		x, y, w, h = skin.parameters.get("FileListMultiIcon",(30, 4, 20, 20))
-		res.append((eListboxPythonMultiContent.TYPE_PIXMAP_ALPHABLEND, x, y, w, h, png, None ,None, BT_SCALE))
+		x, y, w, h = skin.parameters.get("FileListMultiIcon", (30, 4, 20, 20))
+		res.append((eListboxPythonMultiContent.TYPE_PIXMAP_ALPHABLEND, x, y, w, h, png, None, None, BT_SCALE))
 		if link_png is not None:
-			res.append((eListboxPythonMultiContent.TYPE_PIXMAP_ALPHABLEND, x, y, w, h, link_png, None ,None, BT_SCALE))
+			res.append((eListboxPythonMultiContent.TYPE_PIXMAP_ALPHABLEND, x, y, w, h, link_png, None, None, BT_SCALE))
 
 	if not name.startswith('<'):
-		x, y, w, h = skin.parameters.get("FileListMultiLock",(4, 0, 25, 25))
+		x, y, w, h = skin.parameters.get("FileListMultiLock", (4, 0, 25, 25))
 		if selected is False:
 			icon = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "skin_default/icons/lock_off.png"))
 			if not icon:
 				icon = LoadPixmap(path=os.path.join(imagePath, "lock_off.png"))
-			res.append((eListboxPythonMultiContent.TYPE_PIXMAP_ALPHABLEND, x, y, w, h, icon, None ,None, BT_SCALE))
+			res.append((eListboxPythonMultiContent.TYPE_PIXMAP_ALPHABLEND, x, y, w, h, icon, None, None, BT_SCALE))
 		else:
 			icon = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "skin_default/icons/lock_on.png"))
 			if not icon:
 				icon = LoadPixmap(path=os.path.join(imagePath, "lock_on.png"))
-			res.append((eListboxPythonMultiContent.TYPE_PIXMAP_ALPHABLEND, x, y, w, h, icon, None ,None, BT_SCALE))
+			res.append((eListboxPythonMultiContent.TYPE_PIXMAP_ALPHABLEND, x, y, w, h, icon, None, None, BT_SCALE))
 	return res
 
 class MultiFileSelectList(FileList):
@@ -361,7 +362,7 @@
 			serviceHandler = eServiceCenter.getInstance()
 			list = serviceHandler.list(root)
 
-			while 1:
+			while True:
 				s = list.getNext()
 				if not s.valid():
 					del list
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/dmnapi.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/dmnapi.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/dmnapi.py	2020-06-21 10:16:12.675432853 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/dmnapi.py	2020-06-21 10:20:02.327321556 -0400
@@ -2,6 +2,8 @@
 # -*- coding: UTF-8 -*-
 # napiprojekt.pl API is used with napiproject administration consent
 
+from __future__ import print_function
+from __future__ import absolute_import
 import re
 import os
 import os.path
@@ -21,7 +23,7 @@
 				try:
 					dmnapim.get_sub_from_napi(os.path.join(dir, f))
 				except:
-					print "  Error: %s" % (sys.exc_info()[1])
+					print("  Error: %s" % (sys.exc_info()[1]))
 
 try:
 	# opt fps videofile [subtitlefile]
@@ -46,10 +48,10 @@
 			do = "opkg install " + ipk
 		else:
 			do = "ipkg install " + ipk
-		print "Upgrade to:\n", file, "\n"
+		print("Upgrade to:\n", file, "\n")
 		os.system("cd /tmp ; rm -f enigma2-plugin-extensions-dmnapi*.ipk ; opkg update && wget -c %s && ls -al enigma2-plugin-extensions-dmnapi*.ipk && %s" % (file, do))
 	elif opt == "n24":
 		file = os.path.abspath(sys.argv[3])
 		dmnapim.get_sub_from_n24(file, sys.argv[4], fps=fps)
 except:
-	print "  Error: %s" % (sys.exc_info()[1])
+	print("  Error: %s" % (sys.exc_info()[1]))
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/dmnapim.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/dmnapim.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/dmnapim.py	2020-06-21 10:16:12.675432853 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/dmnapim.py	2020-06-21 10:20:02.327321556 -0400
@@ -3,14 +3,17 @@
 
 # napiprojekt.pl API is used with napiproject administration consent
 
+from __future__ import print_function
 import os
 import re
 import sys
 import time
-import urllib2
 from hashlib import md5
 import struct
 
+from six.moves import urllib
+
+
 class GetFPS(object):
     def __init__(self, filename):
         self.filename = filename
@@ -51,7 +54,7 @@
     def get_mkv_fps(self):
         track = 0
         self.file.seek(0)
-        while 1:
+        while True:
             class_id, length = self.eblm()
             # print "class_id: %X length %i position:%i" % (class_id, length, self.file.tell())
             if (class_id == 0x83):
@@ -87,7 +90,7 @@
     add = [0, 0xd, 0x10, 0xb, 0x5]
 
     b = []
-    for i in xrange(len(idx)):
+    for i in list(range(len(idx))):
         a = add[i]
         m = mul[i]
         i = idx[i]
@@ -108,11 +111,11 @@
     while repeat > 0:
         repeat = repeat - 1
         try:
-            sub = urllib2.urlopen(url)
+            sub = urllib.request.urlopen(url)
             if hasattr(sub, 'getcode'):
                 http_code = sub.getcode()
             sub = sub.read()
-        except (IOError, OSError), e:
+        except (IOError, OSError) as e:
             error = error + " %s" % (e)
             time.sleep(0.5)
             continue
@@ -177,7 +180,7 @@
                 time2 = int(time1) + 20
             subt.append(int(time2) / fps)
             texts = m.group(3).strip().split("|")
-            for i in range(len(texts)):
+            for i in list(range(len(texts))):
                 text = texts[i]
                 if text.lower().startswith('{c:') or text.lower().startswith('{y:'):
                     end_marker = text.index('}')
@@ -223,7 +226,7 @@
                 subt.append(int(m.group(5)) * 3600 + int(m.group(6)) * 60 + int(m.group(7)) + int(m.group(8)) / 100.0)
                 l = list.pop(0).strip()
                 lines = l.split("[br]")
-                for i in range(0, len(lines)):
+                for i in list(range(0, len(lines))):
                     subt.append(lines[i])
                 subtitles.append(subt)
     except IndexError:
@@ -274,9 +277,9 @@
             else:
                 subs[time] = m.group(4).strip().split("|")
 
-    times = subs.keys()
+    times = list(subs.keys())
     times.sort()
-    for i in range(0, len(times)):
+    for i in list(range(0, len(times))):
         next_time = 1
         while (times[i] + next_time) not in subs and next_time < 4:
             next_time = next_time + 1
@@ -308,7 +311,7 @@
 
 
 def sub_fix_times(sub):
-    for i in range(len(sub) - 2):
+    for i in list(range(len(sub) - 2)):
         approx = min(1 + (len(" ".join(sub[i][2:])) / 10), 9.9)                 # 10 char per second
 #       print sub[i][0],sub[i][1], sub[i][1] - sub[i][0], approx
         if (sub[i + 1][0] <= sub[i][0]):
@@ -374,11 +377,11 @@
         sys.exit(1)
 
 def napiprojekt_fps(digest):
-    url = "http://napiprojekt.pl/api/api.php?mode=file_info&client=dreambox&id=%s" % (urllib2.quote(digest))
-#    element = ET.parse(urllib2.urlopen(url))
+    url = "http://napiprojekt.pl/api/api.php?mode=file_info&client=dreambox&id=%s" % (urllib.parse.quote(digest))
+#    element = ET.parse(urllib.request.urlopen(url))
 #    fps = element.find("video_info/fps").text
     try:
-        fps = float([re.match(r".*<fps>(.*)</fps>.*", x).groups(0)[0] for x in urllib2.urlopen(url) if x.find('<fps>') > 0][0])
+        fps = float([re.match(r".*<fps>(.*)</fps>.*", x).groups(0)[0] for x in urllib.request.urlopen(url) if x.find('<fps>') > 0][0])
     except:
         fps = 23.976
     return floatfps
@@ -395,38 +398,38 @@
 
 def to_srt_utf8(subs_org, file, digest=0, info="", fps=0):
     p, f = os.path.split(file)
-    print "Processing subtitle for:\n Path: %s\n File: %s %s" % (p, f, info)
+    print("Processing subtitle for:\n Path: %s\n File: %s %s" % (p, f, info))
     try:
         subs_org = subs_org.replace("\r", "")
         dest = file[:-4] + '.srt'
         subs_u, org_cod = convert_to_unicode(subs_org)
         subs = subs_u.split('\n')
         fmt = detect_format(subs)
-        print " Oryginal subtitle format: ", fmt, org_cod,
+        print(" Oryginal subtitle format: ", fmt, org_cod, end=' ')
 
         if fmt == "mdvd":
             if fps < 22 < 32:
                 f = GetFPS(file)
                 fps = f.fps()
             if not 22 < fps < 32:
-                print " failback to napifps ",
+                print(" failback to napifps ", end=' ')
                 fps = napiprojekt_fps(digest)
-            print "FPS:", str(fps)[0:5],
+            print("FPS:", str(fps)[0:5], end=' ')
             subs = "".join(to_srt(sub_fix_times(read_mdvd(subs, fps))))
         elif fmt != "srt":
             subs = "".join(to_srt(sub_fix_times(read_sub(fmt, subs))))
         else:
             subs = subs_u
 
-        print "     Saved as SRT utf8."
+        print("     Saved as SRT utf8.")
 
         dst = open(dest, 'w')
         dst.write(subs.encode("utf-8-sig"))
         dst.close()
-        print " Saved:", dest
+        print(" Saved:", dest)
 
     except:
-        print "  Error: %s" % (sys.exc_info()[1])
+        print("  Error: %s" % (sys.exc_info()[1]))
 
 def get_sub_from_napi(file, fps=0):
         digest = hashFile(file)['npb']
@@ -439,7 +442,7 @@
             raise Exception('Suspicious file size: %s %i' % (src, os.path.getsize(src)))
         to_srt_utf8(subs_org=open(src).read(), file=file, info="\n Convert from: " + os.path.split(src)[1], fps=fps)
     except:
-        print "  Error: %s" % (sys.exc_info()[1])
+        print("  Error: %s" % (sys.exc_info()[1]))
 
 
 prere = (
@@ -533,7 +536,7 @@
 #       print "[DMnapi] hashFile: ", name, ret
         return ret
     except:
-        print "[DMnapi] Error hashFile: ", name
+        print("[DMnapi] Error hashFile: ", name)
         return dict(osb="%016x" % 0, npb=d.hexdigest(), fsize=filesize)
 
 def get_sub_from_n24(file, id, fps=0):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/gz.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/gz.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/gz.py	2020-06-21 10:16:12.675432853 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/gz.py	2020-06-21 10:20:02.327321556 -0400
@@ -1,6 +1,7 @@
 #!/usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 
+from __future__ import print_function
 from Components.config import config
 from Tools.Directories import shellquote
 from Plugins.Extensions.FileCommander.addons.unarchiver import ArchiverMenuScreen, ArchiverInfoScreen
@@ -24,7 +25,7 @@
 		self.pversion = pversion
 
 	def unpackModus(self, id):
-		print "[GunzipMenuScreen] unpackModus", id
+		print("[GunzipMenuScreen] unpackModus", id)
 		pathName = self.sourceDir + self.filename
 		if id == 1:
 			cmd = ("gunzip", pathName)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/key_actions.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/key_actions.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/key_actions.py	2020-06-21 10:16:12.675432853 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/key_actions.py	2020-06-21 10:20:02.327321556 -0400
@@ -2,6 +2,8 @@
 # -*- coding: iso-8859-1 -*-
 
 # Components
+from __future__ import print_function
+from __future__ import absolute_import
 from Components.config import config
 from Components.Scanner import openFile
 from Components.MovieList import AUDIO_EXTENSIONS, IMAGE_EXTENSIONS, MOVIE_EXTENSIONS, DVD_EXTENSIONS
@@ -17,12 +19,12 @@
 # Tools
 from Tools.Directories import fileExists
 from Tools.UnitConversions import UnitScaler, UnitMultipliers
-from Tools import Notifications
+import Tools.Notifications
 
 # Various
 from mimetypes import guess_type
 from enigma import eServiceReference, eActionMap
-from sys import maxint
+from sys import maxsize
 
 import stat
 import pwd
@@ -33,19 +35,19 @@
 import os
 
 # Addons
-from unrar import RarMenuScreen
-from tar import TarMenuScreen
-from unzip import UnzipMenuScreen
-from gz import GunzipMenuScreen
-from ipk import ipkMenuScreen
-from type_utils import ImageViewer, MoviePlayer, vEditor
+from .unrar import RarMenuScreen
+from .tar import TarMenuScreen
+from .unzip import UnzipMenuScreen
+from .gz import GunzipMenuScreen
+from .ipk import ipkMenuScreen
+from .type_utils import ImageViewer, MoviePlayer, vEditor
 
 TEXT_EXTENSIONS = frozenset((".txt", ".log", ".py", ".xml", ".html", ".meta", ".bak", ".lst", ".cfg", ".conf", ".srt"))
 
 try:
 	from Screens import DVD
 	DVDPlayerAvailable = True
-except Exception, e:
+except Exception as e:
 	DVDPlayerAvailable = False
 
 ##################################
@@ -166,7 +168,7 @@
 		if InfoBar.instance and not inStandby:
 			InfoBar.instance.openInfoBarMessage(message, messageboxtyp, timeout)
 		else:
-			Notifications.AddNotification(MessageBox, message, type=messageboxtyp, timeout=timeout)
+			Tools.Notifications.AddNotification(MessageBox, message, type=messageboxtyp, timeout=timeout)
 
 def task_processStdout(data):
 	global task_Stout
@@ -369,7 +371,7 @@
 				nice = 'nice -n %d ' %nice
 			if ionice:
 				ionice = 'ionice -c %d ' %ionice
-			priority = '%s%s' %(nice,ionice)
+			priority = '%s%s' %(nice, ionice)
 			if self.commando.endswith('.sh'):
 				if os.access(self.commando, os.X_OK):
 					if 'PAR' in answer:
@@ -395,7 +397,7 @@
 			if (yfile.st_size < 1000000):
 				self.session.open(vEditor, self.commando)
 
-		if answer and answer not in ("NO","VIEW"):
+		if answer and answer not in ("NO", "VIEW"):
 			if answer.endswith('_BG'):
 				global task_Stout, task_Sterr
 				task_Stout = []
@@ -636,7 +638,7 @@
 		testFileName = filename.lower()
 		filetype = os.path.splitext(testFileName)[1]
 		longname = sourceDir + filename
-		print "[Filebrowser]:", filename, sourceDir, testFileName
+		print("[Filebrowser]:", filename, sourceDir, testFileName)
 		if not fileExists(longname):
 			self.session.open(MessageBox, _("File not found: %s") % longname, type=MessageBox.TYPE_ERROR)
 			return
@@ -681,9 +683,9 @@
 			savetext = ''
 			stat = os.statvfs('/tmp/')
 			if stat.f_bavail * stat.f_bsize > 1000000:
-				choice.append((_("Show as Picture and save as file ('%s')")%self.tmp_file , "save"))
+				choice.append((_("Show as Picture and save as file ('%s')")%self.tmp_file, "save"))
 				savetext = _(" or save additional the picture to a file")
-			self.session.openWithCallback(self.mviFileCB, MessageBox, _("Show '%s' as picture%s?\nThe current service must interrupted!") %(longname,savetext), simple=True, list=choice)
+			self.session.openWithCallback(self.mviFileCB, MessageBox, _("Show '%s' as picture%s?\nThe current service must interrupted!") %(longname, savetext), simple=True, list=choice)
 		elif filetype in TEXT_EXTENSIONS or config.plugins.filecommander.unknown_extension_as_text.value:
 			try:
 				xfile = os.stat(longname)
@@ -696,7 +698,7 @@
 		else:
 			try:
 				found_viewer = openFile(self.session, guess_type(longname)[0], longname)
-			except TypeError, e:
+			except TypeError as e:
 				found_viewer = False
 			if not found_viewer:
 				self.session.open(MessageBox, _("No viewer installed for this file type: %s") % filename, type=MessageBox.TYPE_ERROR, timeout=5, close_on_any_key=True)
@@ -709,7 +711,7 @@
 			self.session.nav.stopService()
 			self.hide()
 		if ret == 'show':
-			eActionMap.getInstance().bindAction('', -maxint - 1, self.showCB)
+			eActionMap.getInstance().bindAction('', -maxsize - 1, self.showCB)
 			console().ePopen(cmd)
 		elif ret == 'save':
 			if os.path.isfile(self.tmp_file):
@@ -722,25 +724,25 @@
 		self.show()
 		self.session.nav.playService(last_service)
 		eActionMap.getInstance().unbindAction('', self.showCB)
-		self.disableActions_Timer.start(100,True)
+		self.disableActions_Timer.start(100, True)
 
 	def saveCB(self, extra_args):
+		global last_service
 		if hasattr(self, 'session'):
 			self.disableActions_Timer.startLongTimer(1)
 			self.session.nav.playService(last_service)
 			self.show()
 			if os.path.isfile(self.tmp_file):
 				filename = self.tmp_file.split('/')[-1]
-				self.session.open(ImageViewer, [((filename,''),'')],0, self.tmp_file.replace(filename,''), filename)
+				self.session.open(ImageViewer, [((filename, ''), '')], 0, self.tmp_file.replace(filename, ''), filename)
 			else:
 				self.session.open(MessageBox, _("File not found: %s") %self.tmp_file, type=MessageBox.TYPE_ERROR)
 		else:
 			import NavigationInstance
 			if last_service and NavigationInstance.instance:
 				NavigationInstance.instance.playService(last_service)
-				global last_service
 				last_service = None
-			Notifications.AddNotification(MessageBox, _("The function has interrupted.\nDon't press in the next time any key until the picture from mvi-file is displayed!"), type=MessageBox.TYPE_ERROR, timeout=10)
+			Tools.Notifications.AddNotification(MessageBox, _("The function has interrupted.\nDon't press in the next time any key until the picture from mvi-file is displayed!"), type=MessageBox.TYPE_ERROR, timeout=10)
 
 	def onFileActionCB(self, result):
 		# os.system('echo %s > /tmp/test.log' % (result))
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/tar.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/tar.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/tar.py	2020-06-21 10:16:12.675432853 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/tar.py	2020-06-21 10:20:02.327321556 -0400
@@ -1,6 +1,7 @@
 #!/usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 
+from __future__ import print_function
 from Components.config import config
 from Plugins.Extensions.FileCommander.addons.unarchiver import ArchiverMenuScreen, ArchiverInfoScreen
 
@@ -23,7 +24,7 @@
 		self.pversion = pversion
 
 	def unpackModus(self, id):
-		print "[TarMenuScreen] unpackModus", id
+		print("[TarMenuScreen] unpackModus", id)
 		if id == 1:
 			cmd = ("tar", "-tf", self.sourceDir + self.filename)
 			self.unpackPopen(cmd, UnpackInfoScreen)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/type_utils.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/type_utils.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/type_utils.py	2020-06-21 10:16:12.675432853 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/type_utils.py	2020-06-21 10:20:02.327321556 -0400
@@ -2,6 +2,7 @@
 # -*- coding: iso-8859-1 -*-
 
 # Components
+from __future__ import print_function
 from Components.config import config
 from Components.Label import Label
 from Components.ActionMap import HelpableActionMap
@@ -166,7 +167,7 @@
 						if length > len(editableText):
 							break
 				else:
-					while getTextBoundarySize(self.instance, gFont(font[0], font[1]), eSize(fieldwidth, font[2]), editableText.replace(' ','')[:length], True).width() <= fieldwidth:
+					while getTextBoundarySize(self.instance, gFont(font[0], font[1]), eSize(fieldwidth, font[2]), editableText.replace(' ', '')[:length], True).width() <= fieldwidth:
 						length+=1
 						if length > len(editableText):
 							break
@@ -424,7 +425,7 @@
 		self["status"].show()
 
 	def cbSlideShow(self):
-		print "slide to next Picture index=" + str(self.lsatIndex)
+		print("slide to next Picture index=" + str(self.lsatIndex))
 		if not config.pic.loop.value and self.lsatIndex == self.fileListLen:
 			self.PlayPause()
 		self.displayNow = True
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/unarchiver.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/unarchiver.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/unarchiver.py	2020-06-21 10:16:12.675432853 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/unarchiver.py	2020-06-21 10:20:02.327321556 -0400
@@ -1,6 +1,7 @@
 #!/usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 
+from __future__ import print_function
 from Screens.MessageBox import MessageBox
 from Components.Label import Label
 from Screens.Screen import Screen
@@ -11,6 +12,7 @@
 from enigma import eConsoleAppContainer, eListboxPythonMultiContent, gFont, RT_HALIGN_LEFT, RT_HALIGN_CENTER, RT_VALIGN_CENTER
 import subprocess
 import skin
+import six
 
 pname = _("File Commander - generalised archive handler")
 pdesc = _("unpack archives")
@@ -83,7 +85,7 @@
 		self.chooseMenuList.setList(map(self.ListEntry, self.list))
 
 	def ListEntry(self, entry):
-		x, y, w, h = skin.parameters.get("FileListName",(10, 0, 1180, 25))
+		x, y, w, h = skin.parameters.get("FileListName", (10, 0, 1180, 25))
 		x = 10
 		w = self['list_left'].l.getItemSize().width()
 		return [
@@ -95,7 +97,7 @@
 		# print "[ArchiverMenuScreen] UnpackListEntry", entry
 		currentProgress = int(float(100) / float(int(100)) * int(entry))
 		progpercent = str(currentProgress) + "%"
-		x, y, w, h = skin.parameters.get("FileListMultiName",(60, 0, 1180, 25))
+		x, y, w, h = skin.parameters.get("FileListMultiName", (60, 0, 1180, 25))
 		x2 = x
 		x = 10
 		w = self['list_left'].l.getItemSize().width()
@@ -108,7 +110,7 @@
 	def ok(self):
 		selectName = self['list_left'].getCurrent()[0][0]
 		self.selectId = self['list_left'].getCurrent()[0][1]
-		print "[ArchiverMenuScreen] Select:", selectName, self.selectId
+		print("[ArchiverMenuScreen] Select:", selectName, self.selectId)
 		self.unpackModus(self.selectId)
 
 	def unpackModus(self, id):
@@ -128,17 +130,17 @@
 		# of the command. It must have an API compatible
 		# with ArchiverInfoScreen.
 
-		print "[ArchiverMenuScreen] unpackPopen", cmd
+		print("[ArchiverMenuScreen] unpackPopen", cmd)
 		try:
 			shellcmd = type(cmd) not in (tuple, list)
 			p = subprocess.Popen(cmd, shell=shellcmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
 		except OSError as ex:
 			cmdname = cmd.split()[0] if shellcmd else cmd[0]
 			msg = _("Can not run %s: %s.\n%s may be in a plugin that is not installed.") % (cmdname, ex.strerror, cmdname)
-			print "[ArchiverMenuScreen]", msg
+			print("[ArchiverMenuScreen]", msg)
 			self.session.open(MessageBox, msg, MessageBox.TYPE_ERROR)
 			return
-		output = map(str.splitlines, p.communicate())
+		output = list(map(str.splitlines, p.communicate()))
 		if output[0] and output[1]:
 			output[1].append("----------")
 		self.extractlist = [(l,) for l in output[1] + output[0]]
@@ -161,7 +163,7 @@
 		# progress indicator using the command output
 		# (see unrar.py)
 
-		print "[ArchiverMenuScreen] unpackEConsoleApp", cmd
+		print("[ArchiverMenuScreen] unpackEConsoleApp", cmd)
 		self.errlog = ""
 		self.container = eConsoleAppContainer()
 		self.container.appClosed.append(boundFunction(self.extractDone, self.filename))
@@ -176,7 +178,7 @@
 			self.container.execute(cmd)
 
 	def extractDone(self, filename, data):
-		print "[ArchiverMenuScreen] extractDone", data
+		print("[ArchiverMenuScreen] extractDone", data)
 		if data:
 			type = MessageBox.TYPE_ERROR
 			timeout = 15
@@ -195,6 +197,7 @@
 		self.session.open(MessageBox, message, type, timeout=timeout)
 
 	def logerrs(self, data):
+		data = six.ensure_str(data)
 		self.errlog += data
 
 	def cancel(self):
@@ -251,14 +254,14 @@
 	def onLayout(self):
 		self.setTitle(self.pname)
 		if len(self.list) != 0:
-			self.chooseMenuList.setList(map(self.ListEntry, self.list))
+			self.chooseMenuList.setList(list(map(self.ListEntry, self.list)))
 
 	def ListEntry(self, entry):
-		x, y, w, h = skin.parameters.get("FileListName",(10, 0, 1180, 25))
+		x, y, w, h = skin.parameters.get("FileListName", (10, 0, 1180, 25))
 		x = 10
 		w = self['list_left'].l.getItemSize().width()
 		flags = RT_HALIGN_LEFT
-		if 'Plugins.Extensions.FileCommander.addons.unzip.UnpackInfoScreen' in `self`:
+		if 'Plugins.Extensions.FileCommander.addons.unzip.UnpackInfoScreen' in repr(self):
 			flags = RT_HALIGN_LEFT | RT_VALIGN_CENTER
 			y *= 2
 		return [
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/unrar.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/unrar.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/unrar.py	2020-06-21 10:16:12.675432853 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/unrar.py	2020-06-21 10:20:02.327321556 -0400
@@ -1,6 +1,7 @@
 #!/usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 
+from __future__ import print_function
 from Screens.MessageBox import MessageBox
 from Components.config import config
 from Plugins.Extensions.FileCommander.addons.unarchiver import ArchiverMenuScreen, ArchiverInfoScreen
@@ -35,31 +36,31 @@
 	def ok(self):
 		selectName = self['list_left'].getCurrent()[0][0]
 		self.selectId = self['list_left'].getCurrent()[0][1]
-		print "[RarMenuScreen] Select:", selectName, self.selectId
+		print("[RarMenuScreen] Select:", selectName, self.selectId)
 		self.checkPW(self.defaultPW)
 
 	def checkPW(self, pwd):
 		self.defaultPW = pwd
-		print "[RarMenuScreen] Current pw:", self.defaultPW
+		print("[RarMenuScreen] Current pw:", self.defaultPW)
 		cmd = (self.unrar, "t", "-p" + self.defaultPW, self.sourceDir + self.filename)
 		try:
 			p = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
 		except OSError as ex:
 			msg = _("Can not run %s: %s.\n%s may be in a plugin that is not installed.") % (cmd[0], ex.strerror, cmd[0])
-			print "[RarMenuScreen]", msg
+			print("[RarMenuScreen]", msg)
 			self.session.open(MessageBox, msg, MessageBox.TYPE_ERROR)
 			return
 		stdlog = p.stdout.read()
 		if stdlog:
-			print "[RarMenuScreen] checkPW stdout", len(stdlog)
-			print stdlog
+			print("[RarMenuScreen] checkPW stdout", len(stdlog))
+			print(stdlog)
 			if 'Corrupt file or wrong password.' in stdlog:
-				print "[RarMenuScreen] pw incorrect!"
+				print("[RarMenuScreen] pw incorrect!")
 				#length = config.plugins.filecommander.input_length.value
 				#self.session.openWithCallback(self.setPW, InputBox, text="", visible_width=length, overwrite=False, firstpos_end=True, allmarked=False, title=_("Please enter password"), windowTitle=_("%s is password protected.") % self.filename)
 				self.session.openWithCallback(self.setPW, VirtualKeyBoard, title=_("%s is password protected.")% self.filename + " " + _("Please enter password"), text="")
 			else:
-				print "[RarMenuScreen] pw correct!"
+				print("[RarMenuScreen] pw correct!")
 				self.unpackModus(self.selectId)
 
 	def setPW(self, pwd):
@@ -69,7 +70,7 @@
 			self.checkPW(pwd)
 
 	def unpackModus(self, id):
-		print "[RarMenuScreen] unpackModus", id
+		print("[RarMenuScreen] unpackModus", id)
 		if id == 1:
 			cmd = (self.unrar, "lb", "-p" + self.defaultPW, self.sourceDir + self.filename)
 			self.unpackPopen(cmd, UnpackInfoScreen)
@@ -89,11 +90,11 @@
 		if status:
 			if not status[0] in self.ulist:
 				self.ulist.append((status[0]))
-				self.chooseMenuList2.setList(map(self.UnpackListEntry, status))
+				self.chooseMenuList2.setList(list(map(self.UnpackListEntry, status)))
 				self['unpacking'].selectionEnabled(0)
 
 		if 'All OK' in data:
-			self.chooseMenuList2.setList(map(self.UnpackListEntry, ['100']))
+			self.chooseMenuList2.setList(list(map(self.UnpackListEntry, ['100'])))
 			self['unpacking'].selectionEnabled(0)
 
 	def extractDone(self, filename, data):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/unzip.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/unzip.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/addons/unzip.py	2020-06-21 10:16:12.675432853 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/addons/unzip.py	2020-06-21 10:20:02.327321556 -0400
@@ -1,6 +1,7 @@
 #!/usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 
+from __future__ import print_function
 from Components.config import config
 from enigma import gFont
 from Plugins.Extensions.FileCommander.addons.unarchiver import ArchiverMenuScreen, ArchiverInfoScreen
@@ -25,7 +26,7 @@
 		self.pversion = pversion
 
 	def unpackModus(self, id):
-		print "[UnzipMenuScreen] unpackModus", id
+		print("[UnzipMenuScreen] unpackModus", id)
 		if id == 1:
 			cmd = ("unzip", "-l", self.sourceDir + self.filename)
 			self.unpackPopen(cmd, UnpackInfoScreen)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/FileCommander/plugin.py	2020-06-21 10:16:12.679433652 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/FileCommander/plugin.py	2020-06-21 10:20:02.331322106 -0400
@@ -1,6 +1,8 @@
 #!/usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 
+from __future__ import print_function
+from __future__ import absolute_import
 from Plugins.Plugin import PluginDescriptor
 
 # Components
@@ -29,7 +31,7 @@
 # Tools
 from Tools.BoundFunction import boundFunction
 from Tools.UnitConversions import UnitScaler, UnitMultipliers
-from Tools import Notifications
+import Tools.Notifications
 
 # Various
 from enigma import eConsoleAppContainer, RT_HALIGN_LEFT, RT_HALIGN_RIGHT, eTimer
@@ -38,22 +40,23 @@
 import stat
 import string
 import re
+import six
 
 # System mods
-from InputBox import InputBox
-from FileList import FileList, MultiFileSelectList, EXTENSIONS
+from .InputBox import InputBox
+from .FileList import FileList, MultiFileSelectList, EXTENSIONS
 
 # Addons
-from addons.key_actions import key_actions, stat_info
-from addons.type_utils import vEditor
+from .addons.key_actions import key_actions, stat_info
+from .addons.type_utils import vEditor
 
 MOVIEEXTENSIONS = {"cuts": "movieparts", "meta": "movieparts", "ap": "movieparts", "sc": "movieparts", "eit": "movieparts"}
 
 def _make_filter(media_type):
-	return "(?i)^.*\.(" + '|'.join(sorted((ext for ext, type in EXTENSIONS.iteritems() if type == media_type))) + ")$"
+	return "(?i)^.*\.(" + '|'.join(sorted((ext for ext, type in six.iteritems(EXTENSIONS) if type == media_type))) + ")$"
 
 def _make_rec_filter():
-	return "(?i)^.*\.(" + '|'.join(sorted(["ts"] + [ext == "eit" and ext or "ts." + ext  for ext in MOVIEEXTENSIONS.iterkeys()])) + ")$"
+	return "(?i)^.*\.(" + '|'.join(sorted(["ts"] + [ext == "eit" and ext or "ts." + ext  for ext in six.iterkeys(MOVIEEXTENSIONS)])) + ")$"
 
 movie = _make_filter("movie")
 music = _make_filter("music")
@@ -102,7 +105,7 @@
 config.plugins.filecommander.path_left_selected = ConfigYesNo(default=True)
 config.plugins.filecommander.showTaskCompleted_message = ConfigYesNo(default=True)
 config.plugins.filecommander.showScriptCompleted_message = ConfigYesNo(default=True)
-config.plugins.filecommander.hashes = ConfigSet(key_actions.hashes.keys(), default=["MD5"])
+config.plugins.filecommander.hashes = ConfigSet(list(key_actions.hashes.keys()), default=["MD5"])
 config.plugins.filecommander.bookmarks = ConfigLocations()
 config.plugins.filecommander.fake_entry = NoSave(ConfigNothing())
 
@@ -133,11 +136,11 @@
 def formatSortingTyp(sortDirs, sortFiles):
 	sortDirs, reverseDirs = [int(x) for x in sortDirs.split('.')]
 	sortFiles, reverseFiles = [int(x) for x in sortFiles.split('.')]
-	sD = ('n','d','s')[sortDirs] #name, date, size
-	sF = ('n','d','s')[sortFiles]
-	rD = ('+','-')[reverseDirs] #normal, reverse
-	rF = ('+','-')[reverseFiles]
-	return '[D]%s%s[F]%s%s' %(sD,rD,sF,rF)
+	sD = ('n', 'd', 's')[sortDirs] #name, date, size
+	sF = ('n', 'd', 's')[sortFiles]
+	rD = ('+', '-')[reverseDirs] #normal, reverse
+	rF = ('+', '-')[reverseFiles]
+	return '[D]%s%s[F]%s%s' %(sD, rD, sF, rF)
 
 ###################
 # ## Main Screen ###
@@ -247,8 +250,8 @@
 		self["list_left"] = FileList(path_left, matchingPattern=filter, sortDirs=sortDirs, sortFiles=sortFilesLeft, firstDirs=firstDirs)
 		self["list_right"] = FileList(path_right, matchingPattern=filter, sortDirs=sortDirs, sortFiles=sortFilesRight, firstDirs=firstDirs)
 
-		sortLeft = formatSortingTyp(sortDirs,sortFilesLeft)
-		sortRight = formatSortingTyp(sortDirs,sortFilesRight)
+		sortLeft = formatSortingTyp(sortDirs, sortFilesLeft)
+		sortRight = formatSortingTyp(sortDirs, sortFilesRight)
 		self["sort_left"] = Label(sortLeft)
 		self["sort_right"] = Label(sortRight)
 
@@ -572,7 +575,7 @@
 		for job in job_manager.getPendingJobs():
 			#self.tasklist.append((job, job.name, job.getStatustext(), int(100 * job.progress / float(job.end)), str(100 * job.progress / float(job.end)) + "%"))
 			progress = job.getProgress()
-			self.tasklist.append((job,job.name,job.getStatustext(),progress,str(progress) + " %" ))
+			self.tasklist.append((job, job.name, job.getStatustext(), progress, str(progress) + " %" ))
 		self.session.open(TaskListScreen, self.tasklist)
 
 	def addJob(self, job, updateDirs):
@@ -598,7 +601,7 @@
 		if InfoBar.instance and not inStandby:
 			InfoBar.instance.openInfoBarMessage(message, messageboxtyp, timeout)
 		else:
-			Notifications.AddNotification(MessageBox, message, type=messageboxtyp, timeout=timeout)
+			Tools.Notifications.AddNotification(MessageBox, message, type=messageboxtyp, timeout=timeout)
 		if hasattr(self, "jobs"):
 			self.finishedCB(None)
 		return False
@@ -624,7 +627,7 @@
 			if InfoBar.instance and not inStandby:
 				InfoBar.instance.openInfoBarMessage(message, messageboxtyp, timeout)
 			else:
-				Notifications.AddNotification(MessageBox, message, type=messageboxtyp, timeout=timeout)
+				Tools.Notifications.AddNotification(MessageBox, message, type=messageboxtyp, timeout=timeout)
 
 	def setSort(self, list, setDirs = False):
 		sortDirs, sortFiles = list.getSortBy().split(',')
@@ -942,7 +945,7 @@
 			return
 		subFile = sourceDir + testFileName
 		if (testFileName.endswith(".mpg")) or (testFileName.endswith(".mpeg")) or (testFileName.endswith(".mkv")) or (testFileName.endswith(".m2ts")) or (testFileName.endswith(".vob")) or (testFileName.endswith(".mod")) or (testFileName.endswith(".avi")) or (testFileName.endswith(".mp4")) or (testFileName.endswith(".divx")) or (testFileName.endswith(".mkv")) or (testFileName.endswith(".wmv")) or (testFileName.endswith(".mov")) or (testFileName.endswith(".flv")) or (testFileName.endswith(".3gp")):
-			print "[FileCommander] Downloading subtitle for: ", subFile
+			print("[FileCommander] Downloading subtitle for: ", subFile)
 			# For Future USE
 
 	def subCallback(self, answer=False):
@@ -1141,8 +1144,8 @@
 		sortDirsRight, sortFilesRight = config.plugins.filecommander.sortingRight_tmp.value.split(',')
 		firstDirs = config.plugins.filecommander.firstDirs.value
 
-		sortLeft = formatSortingTyp(sortDirsLeft,sortFilesLeft)
-		sortRight = formatSortingTyp(sortDirsRight,sortFilesRight)
+		sortLeft = formatSortingTyp(sortDirsLeft, sortFilesLeft)
+		sortRight = formatSortingTyp(sortDirsRight, sortFilesRight)
 		self["sort_left"] = Label(sortLeft)
 		self["sort_right"] = Label(sortRight)
 
@@ -1208,7 +1211,7 @@
 		if self.ACTIVELIST == self.SOURCELIST:
 			self.ACTIVELIST.changeSelectionState()
 			self.selectedFiles = self.ACTIVELIST.getSelectedList()
-			print "[FileCommander] selectedFiles:", self.selectedFiles
+			print("[FileCommander] selectedFiles:", self.selectedFiles)
 			self.goDown()
 
 	def exit(self, jobs=None, updateDirs=None):
@@ -1264,7 +1267,7 @@
 		for job in job_manager.getPendingJobs():
 			#self.tasklist.append((job, job.name, job.getStatustext(), int(100 * job.progress / float(job.end)), str(100 * job.progress / float(job.end)) + "%"))
 			progress = job.getProgress()
-			self.tasklist.append((job,job.name,job.getStatustext(),progress,str(progress) + " %" ))
+			self.tasklist.append((job, job.name, job.getStatustext(), progress, str(progress) + " %" ))
 		self.session.open(TaskListScreen, self.tasklist)
 
 # ## delete select ###
@@ -1279,7 +1282,7 @@
 		self.delete_files = []
 		self.delete_updateDirs = [self.SOURCELIST.getCurrentDirectory()]
 		for file in self.selectedFiles:
-			print 'delete: %s' %file
+			print('delete: %s' %file)
 			if not cnt:
 				filename += '%s' %file
 			elif cnt < 5:
@@ -1301,7 +1304,7 @@
 		if result is not None:
 			if result[1]:
 				for file in self.delete_files:
-					print 'delete:', file
+					print('delete:', file)
 					os.remove(file)
 				self.exit([self.delete_dirs], self.delete_updateDirs)
 
@@ -1416,7 +1419,7 @@
 				self[side + "_head2"].updateList(())
 
 	def doRefresh(self):
-		print "[FileCommander] selectedFiles:", self.selectedFiles
+		print("[FileCommander] selectedFiles:", self.selectedFiles)
 		self.SOURCELIST.refresh()
 		self.TARGETLIST.refresh()
 		self.updateHead()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/GraphMultiEPG/GraphMultiEpg.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/GraphMultiEPG/GraphMultiEpg.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/GraphMultiEPG/GraphMultiEpg.py	2020-06-21 10:16:12.679433652 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/GraphMultiEPG/GraphMultiEpg.py	2020-06-21 10:20:02.331322106 -0400
@@ -1,3 +1,5 @@
+from __future__ import division
+from __future__ import print_function
 from skin import parseColor, parseFont, parseSize
 from Components.config import config, ConfigClock, ConfigInteger, ConfigSubsection, ConfigYesNo, ConfigSelection, ConfigSelectionNumber
 from Components.Pixmap import Pixmap
@@ -25,7 +27,7 @@
 from ServiceReference import ServiceReference, isPlayableForCur
 from Tools.LoadPixmap import LoadPixmap
 from Tools.Alternatives import CompareWithAlternatives
-from Tools import Notifications
+import Tools.Notifications
 from enigma import eEPGCache, eListbox, gFont, eListboxPythonMultiContent, RT_HALIGN_LEFT, RT_HALIGN_RIGHT, RT_HALIGN_CENTER, RT_VALIGN_CENTER, RT_WRAP, BT_SCALE, BT_KEEP_ASPECT_RATIO, BT_ALIGN_CENTER, eSize, eRect, eTimer, getBestPlayableServiceReference, loadPNG
 from GraphMultiEpgSetup import GraphMultiEpgSetup
 from time import localtime, time, strftime
@@ -48,12 +50,12 @@
 config.misc.graph_mepg.roundTo = ConfigSelection(default = "900", choices = [("900", _("%d minutes") % 15), ("1800", _("%d minutes") % 30), ("3600", _("%d minutes") % 60)])
 config.misc.graph_mepg.OKButton = ConfigSelection(default = "info", choices = [("info", _("Show detailed event info")), ("zap", _("Zap to selected channel"))])
 possibleAlignmentChoices = [
-	( str(RT_HALIGN_LEFT   | RT_VALIGN_CENTER          ) , _("left")),
-	( str(RT_HALIGN_CENTER | RT_VALIGN_CENTER          ) , _("centered")),
-	( str(RT_HALIGN_RIGHT  | RT_VALIGN_CENTER          ) , _("right")),
-	( str(RT_HALIGN_LEFT   | RT_VALIGN_CENTER | RT_WRAP) , _("left, wrapped")),
-	( str(RT_HALIGN_CENTER | RT_VALIGN_CENTER | RT_WRAP) , _("centered, wrapped")),
-	( str(RT_HALIGN_RIGHT  | RT_VALIGN_CENTER | RT_WRAP) , _("right, wrapped"))]
+	( str(RT_HALIGN_LEFT   | RT_VALIGN_CENTER          ), _("left")),
+	( str(RT_HALIGN_CENTER | RT_VALIGN_CENTER          ), _("centered")),
+	( str(RT_HALIGN_RIGHT  | RT_VALIGN_CENTER          ), _("right")),
+	( str(RT_HALIGN_LEFT   | RT_VALIGN_CENTER | RT_WRAP), _("left, wrapped")),
+	( str(RT_HALIGN_CENTER | RT_VALIGN_CENTER | RT_WRAP), _("centered, wrapped")),
+	( str(RT_HALIGN_RIGHT  | RT_VALIGN_CENTER | RT_WRAP), _("right, wrapped"))]
 config.misc.graph_mepg.event_alignment = ConfigSelection(default = possibleAlignmentChoices[0][0], choices = possibleAlignmentChoices)
 config.misc.graph_mepg.servicename_alignment = ConfigSelection(default = possibleAlignmentChoices[0][0], choices = possibleAlignmentChoices)
 config.misc.graph_mepg.extension_menu = ConfigYesNo(default = True)
@@ -146,7 +148,7 @@
 				elif attrib == "EntryBorderColor":
 					self.borderColor = parseColor(value).argb()
 				elif attrib == "EntryFont":
-					font = parseFont(value, ((1,1),(1,1)) )
+					font = parseFont(value, ((1, 1), (1, 1)) )
 					self.entryFontName = font.family
 					self.entryFontSize = font.pointSize
 				elif attrib == "ServiceForegroundColor" or attrib == "ServiceNameForegroundColor":
@@ -164,7 +166,7 @@
 				elif attrib == "ServiceBorderColor":
 					self.borderColorService = parseColor(value).argb()
 				elif attrib == "ServiceFont":
-					self.serviceFont = parseFont(value, ((1,1),(1,1)) )
+					self.serviceFont = parseFont(value, ((1, 1), (1, 1)) )
 				elif attrib == "EntryBackgroundColorNow":
 					self.backColorNow = parseColor(value).argb()
 				elif attrib == "EntryForegroundColorNow":
@@ -178,7 +180,7 @@
 				elif attrib == "EventNamePadding":
 					self.eventNamePadding = int(value)
 				else:
-					attribs.append((attrib,value))
+					attribs.append((attrib, value))
 			self.skinAttributes = attribs
 		self.l.setFont(0, self.serviceFont)
 		self.setEventFontsize()
@@ -220,7 +222,7 @@
 
 	def getIndexFromService(self, serviceref):
 		if serviceref is not None:
-			for x in range(len(self.list)):
+			for x in list(range(len(self.list))):
 				if CompareWithAlternatives(self.list[x][0], serviceref.toString()):
 					return x
 		return 0
@@ -333,7 +335,7 @@
 		width = esize.width()
 		height = esize.height()
 		if self.showServiceTitle:
-			w = width / 10 * 2;
+			w = width // 10 * 2;
 		else:     # if self.showPicon:    # this must be set if showServiceTitle is None
 			w = 2 * height - 2 * self.serviceBorderWidth  # FIXME: could do better...
 		self.service_rect = Rect(0, 0, w, height)
@@ -345,8 +347,8 @@
 		self.picon_size = eSize(piconWidth, piconHeight)
 
 	def calcEntryPosAndWidthHelper(self, stime, duration, start, end, width):
-		xpos = (stime - start) * width / (end - start)
-		ewidth = (stime + duration - start) * width / (end - start)
+		xpos = (stime - start) * width // (end - start)
+		ewidth = (stime + duration - start) * width // (end - start)
 		ewidth -= xpos;
 		if xpos < 0:
 			ewidth += xpos;
@@ -504,7 +506,7 @@
 						color_sel = foreColorSelected))
 				# recording icons
 				if rec is not None:
-					for i in range(len(rec[1])):
+					for i in list(range(len(rec[1]))):
 						if ewidth < (i + 1) * 22:
 							break
 						res.append(MultiContentEntryPixmapAlphaTest(
@@ -566,7 +568,7 @@
 			entry = entries[self.cur_event] #(event_id, event_title, begin_time, duration)
 			time_base = self.time_base + self.offs*self.time_epoch * 60
 			xpos, width = self.calcEntryPosAndWidth(self.event_rect, time_base, self.time_epoch, entry[2], entry[3])
-			self.select_rect = Rect(xpos ,0, width, self.event_rect.height)
+			self.select_rect = Rect(xpos, 0, width, self.event_rect.height)
 			self.l.setSelectionClip(eRect(xpos, 0, width, self.event_rect.h), visible and update)
 		else:
 			self.select_rect = self.event_rect
@@ -657,7 +659,7 @@
 				elif attrib == "font":
 					self.font = parseFont(value,  ((1, 1), (1, 1)) )
 				else:
-					attribs.append((attrib,value))
+					attribs.append((attrib, value))
 			self.skinAttributes = attribs
 		self.l.setFont(0, self.font)
 		return GUIComponent.applySkin(self, desktop, screen)
@@ -688,7 +690,7 @@
 			service_rect = l.getServiceRect()
 			itemHeight = self.l.getItemSize().height()
 			time_steps = 60 if time_epoch > 180 else 30
-			num_lines = time_epoch / time_steps
+			num_lines = time_epoch // time_steps
 			timeStepsCalc = time_steps * 60
 			incWidth = event_rect.width() / num_lines
 			if int(config.misc.graph_mepg.center_timeline.value):
@@ -707,7 +709,7 @@
 					backcolor = self.backColor, backcolor_sel = self.backColor) )
 
 			xpos = 0 # eventLeft
-			for x in range(0, num_lines):
+			for x in list(range(0, num_lines)):
 				res.append( MultiContentEntryText(
 					pos = (service_rect.width() + xpos-tlMove, 0),
 					size = (incWidth, itemHeight),
@@ -720,7 +722,7 @@
 				line.setPosition(xpos + eventLeft, old_pos[1])
 				line.visible = True
 				xpos += incWidth
-			for x in range(num_lines, MAX_TIMELINES):
+			for x in list(range(num_lines, MAX_TIMELINES)):
 				time_lines[x].visible = False
 			self.l.setList([res])
 			self.time_base = time_base
@@ -767,7 +769,7 @@
 		self["Service"] = ServiceEvent()
 		self["Event"] = Event()
 		self.time_lines = [ ]
-		for x in range(0, MAX_TIMELINES):
+		for x in list(range(0, MAX_TIMELINES)):
 			pm = Pixmap()
 			self.time_lines.append(pm)
 			self["timeline%d"%(x)] = pm
@@ -1030,7 +1032,7 @@
 		refstr = ':'.join(serviceref.ref.toString().split(':')[:11])
 		for timer in self.session.nav.RecordTimer.timer_list:
 			if timer.eit == eventid and ':'.join(timer.service_ref.ref.toString().split(':')[:11]) == refstr:
-				menu = [(_("Delete timer"), "delete"),(_("Edit timer"), "edit")]
+				menu = [(_("Delete timer"), "delete"), (_("Edit timer"), "edit")]
 				buttons = ["red", "green"]
 				def timerAction(choice):
 					if choice is not None:
@@ -1045,7 +1047,7 @@
 			self.session.openWithCallback(self.finishedTimerAdd, TimerEntry, newEntry)
 
 	def finishedTimerAdd(self, answer):
-		print "finished add"
+		print("finished add")
 		if answer[0]:
 			entry = answer[1]
 			simulTimerList = self.session.nav.RecordTimer.record(entry)
@@ -1074,7 +1076,7 @@
 		else:
 			self["key_green"].setText(_("Add timer"))
 			self.key_green_choice = self.ADD_TIMER
-			print "Timeredit aborted"
+			print("Timeredit aborted")
 	
 	def finishSanityCorrection(self, answer):
 		self.finishedTimerAdd(answer)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/MountManager.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/MountManager.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/MountManager.py	2020-06-21 10:16:12.679433652 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/MountManager.py	2020-06-21 10:20:02.331322106 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from enigma import eTimer
 from boxbranding import getMachineBrand, getMachineName, getBoxType, getMachineBuild
@@ -74,7 +75,7 @@
 		if self.sel:
 			try:
 				name = str(self.sel[0])
-				desc = str(self.sel[1].replace('\t','  '))
+				desc = str(self.sel[1].replace('\t', '  '))
 			except:
 				name = ""
 				desc = ""
@@ -99,11 +100,11 @@
 			if not parts:
 				continue
 			device = parts[3]
-			if not search('sd[a-z][1-9]',device) and not search('mmcblk[0-9]p[1-9]',device):
+			if not search('sd[a-z][1-9]', device) and not search('mmcblk[0-9]p[1-9]', device):
 				continue
-			if getMachineBuild() in ('gbmv200','h9combo','h10','v8plus','hd60','hd61','vuduo4k','ustym4kpro','beyonwizv2','viper4k','sf8008','sf8008m','cc1','dags72604','u51','u52','u53','u532','u533','u54','u56','vuzero4k','u5','sf5008','et13000','et1x000','vuuno4k','vuuno4kse', 'vuultimo4k', 'vusolo4k', 'hd51', 'hd52', 'dm820', 'dm7080', 'sf4008', 'dm900', 'dm920', 'gb7252', 'gb72604', 'dags7252', 'vs1500','h7','8100s') and search('mmcblk0p[1-9]',device):
+			if getMachineBuild() in ('gbmv200', 'h9combo', 'h10', 'v8plus', 'hd60', 'hd61', 'vuduo4k', 'ustym4kpro', 'beyonwizv2', 'viper4k', 'sf8008', 'sf8008m', 'cc1', 'dags72604', 'u51', 'u52', 'u53', 'u532', 'u533', 'u54', 'u56', 'vuzero4k', 'u5', 'sf5008', 'et13000', 'et1x000', 'vuuno4k', 'vuuno4kse', 'vuultimo4k', 'vusolo4k', 'hd51', 'hd52', 'dm820', 'dm7080', 'sf4008', 'dm900', 'dm920', 'gb7252', 'gb72604', 'dags7252', 'vs1500', 'h7', '8100s') and search('mmcblk0p[1-9]', device):
 				continue
-			if getMachineBuild() in ('xc7439','osmio4k','osmio4kplus','osmini4k') and search('mmcblk1p[1-9]',device):
+			if getMachineBuild() in ('xc7439', 'osmio4k', 'osmio4kplus', 'osmini4k') and search('mmcblk1p[1-9]', device):
 				continue
 			if device in list2:
 				continue
@@ -202,14 +203,14 @@
 		mypixmap = '/usr/lib/enigma2/python/Plugins/Extensions/Infopanel/icons/dev_usbstick.png'
 		if device2.startswith('mmcblk'):
 			try:
-				model = file('/sys/block/' + device2 + '/device/name').read()
+				model = open('/sys/block/' + device2 + '/device/name').read()
 			except:
 				model = ''
 			mypixmap = '/usr/lib/enigma2/python/Plugins/Extensions/Infopanel/icons/dev_mmc.png'
 			name = 'MMC: '
 		else:
 			try:
-				model = file('/sys/block/' + device2 + '/device/model').read()
+				model = open('/sys/block/' + device2 + '/device/model').read()
 			except:
 				model = ''
 		model = str(model).replace('\n', '')
@@ -229,7 +230,7 @@
 			swapdevices = ' '
 		if path.exists('/tmp/devices.tmp'):
 			remove('/tmp/devices.tmp')
-		swapdevices = swapdevices.replace('\n','')
+		swapdevices = swapdevices.replace('\n', '')
 		swapdevices = swapdevices.split('/')
 		f = open('/proc/mounts', 'r')
 		for line in f.readlines():
@@ -259,20 +260,20 @@
 				parts = line.strip().split()
 				size = int(parts[2])
 				if (((float(size) / 1024) / 1024) / 1024) > 1:
-					des = _("Size: ") + str(round((((float(size) / 1024) / 1024) / 1024),2)) + _("TB")
+					des = _("Size: ") + str(round((((float(size) / 1024) / 1024) / 1024), 2)) + _("TB")
 				elif ((size / 1024) / 1024) > 1:
 					des = _("Size: ") + str((size / 1024) / 1024) + _("GB")
 				else:
 					des = _("Size: ") + str(size / 1024) + _("MB")
 			else:
 				try:
-					size = file('/sys/block/' + device2 + '/' + device + '/size').read()
+					size = open('/sys/block/' + device2 + '/' + device + '/size').read()
 					size = str(size).replace('\n', '')
 					size = int(size)
 				except:
 					size = 0
 				if ((((float(size) / 2) / 1024) / 1024) / 1024) > 1:
-					des = _("Size: ") + str(round(((((float(size) / 2) / 1024) / 1024) / 1024),2)) + _("TB")
+					des = _("Size: ") + str(round(((((float(size) / 2) / 1024) / 1024) / 1024), 2)) + _("TB")
 				elif (((size / 2) / 1024) / 1024) > 1:
 					des = _("Size: ") + str(((size / 2) / 1024) / 1024) + _("GB")
 				else:
@@ -336,7 +337,7 @@
 			if self.mountp.find('/media/hdd') < 0:
 				self.Console.ePopen('umount ' + self.device)
 				if not path.exists('/media/hdd'):
-					mkdir('/media/hdd', 0755)
+					mkdir('/media/hdd', 0o755)
 				else:
 					self.Console.ePopen('umount /media/hdd')
 				self.Console.ePopen('mount ' + self.device + ' /media/hdd')
@@ -348,18 +349,18 @@
 		self.device = extra_args[0]
 		self.mountp = extra_args[1]
 		self.device_uuid_tmp = result.split('UUID=')
-		self.device_uuid_tmp = self.device_uuid_tmp[1].replace('"',"")
-		self.device_uuid_tmp = self.device_uuid_tmp.replace('\n',"")
+		self.device_uuid_tmp = self.device_uuid_tmp[1].replace('"', "")
+		self.device_uuid_tmp = self.device_uuid_tmp.replace('\n', "")
 		self.device_uuid_tmp = self.device_uuid_tmp.split()[0]
 		self.device_uuid = 'UUID=' + self.device_uuid_tmp
 		if not path.exists(self.mountp):
-			mkdir(self.mountp, 0755)
-		file('/etc/fstab.tmp', 'w').writelines([l for l in file('/etc/fstab').readlines() if '/media/hdd' not in l])
-		rename('/etc/fstab.tmp','/etc/fstab')
-		file('/etc/fstab.tmp', 'w').writelines([l for l in file('/etc/fstab').readlines() if self.device not in l])
-		rename('/etc/fstab.tmp','/etc/fstab')
-		file('/etc/fstab.tmp', 'w').writelines([l for l in file('/etc/fstab').readlines() if self.device_uuid not in l])
-		rename('/etc/fstab.tmp','/etc/fstab')
+			mkdir(self.mountp, 0o755)
+		open('/etc/fstab.tmp', 'w').writelines([l for l in open('/etc/fstab').readlines() if '/media/hdd' not in l])
+		rename('/etc/fstab.tmp', '/etc/fstab')
+		open('/etc/fstab.tmp', 'w').writelines([l for l in open('/etc/fstab').readlines() if self.device not in l])
+		rename('/etc/fstab.tmp', '/etc/fstab')
+		open('/etc/fstab.tmp', 'w').writelines([l for l in open('/etc/fstab').readlines() if self.device_uuid not in l])
+		rename('/etc/fstab.tmp', '/etc/fstab')
 		out = open('/etc/fstab', 'a')
 		line = self.device_uuid + '\t/media/hdd\tauto\tdefaults\t0 0\n'
 		out.write(line)
@@ -407,7 +408,7 @@
 		f.close()
 		if path.exists('/tmp/devices.tmp'):
 			remove('/tmp/devices.tmp')
-		swapdevices = swapdevices.replace('\n','')
+		swapdevices = swapdevices.replace('\n', '')
 		swapdevices = swapdevices.split('/')
 		f = open('/proc/partitions', 'r')
 		for line in f.readlines():
@@ -415,11 +416,11 @@
 			if not parts:
 				continue
 			device = parts[3]
-			if not search('sd[a-z][1-9]',device) and not search('mmcblk[0-9]p[1-9]',device):
+			if not search('sd[a-z][1-9]', device) and not search('mmcblk[0-9]p[1-9]', device):
 				continue
-			if getMachineBuild() in ('gbmv200','multibox','h9combo','h10','v8plus','hd60','hd61','vuduo4k','ustym4kpro','beyonwizv2','viper4k','sf8008','sf8008m','cc1','dags72604','u51','u52','u53','u532','u533','u54','u56','vuzero4k','u5','sf5008','et13000','et1x000','vuuno4k','vuuno4kse', 'vuultimo4k', 'vusolo4k', 'hd51', 'hd52', 'dm820', 'dm7080', 'sf4008', 'dm900', 'dm920', 'gb7252', 'gb72604', 'dags7252', 'vs1500','h7','8100s') and search('mmcblk0p[1-9]',device):
+			if getMachineBuild() in ('gbmv200', 'multibox', 'h9combo', 'h10', 'v8plus', 'hd60', 'hd61', 'vuduo4k', 'ustym4kpro', 'beyonwizv2', 'viper4k', 'sf8008', 'sf8008m', 'cc1', 'dags72604', 'u51', 'u52', 'u53', 'u532', 'u533', 'u54', 'u56', 'vuzero4k', 'u5', 'sf5008', 'et13000', 'et1x000', 'vuuno4k', 'vuuno4kse', 'vuultimo4k', 'vusolo4k', 'hd51', 'hd52', 'dm820', 'dm7080', 'sf4008', 'dm900', 'dm920', 'gb7252', 'gb72604', 'dags7252', 'vs1500', 'h7', '8100s') and search('mmcblk0p[1-9]', device):
 				continue
-			if getMachineBuild() in ('xc7439','osmio4k','osmio4kplus','osmini4k') and search('mmcblk1p[1-9]',device):
+			if getMachineBuild() in ('xc7439', 'osmio4k', 'osmio4kplus', 'osmini4k') and search('mmcblk1p[1-9]', device):
 				continue
 			if device in list2:
 				continue
@@ -518,14 +519,14 @@
 		name = 'USB: '
 		mypixmap = '/usr/lib/enigma2/python/Plugins/Extensions/Infopanel/icons/dev_usbstick.png'
 		if device2.startswith('mmcblk'):
-			model = file('/sys/block/' + device2 + '/device/name').read()
+			model = open('/sys/block/' + device2 + '/device/name').read()
 			mypixmap = '/usr/lib/enigma2/python/Plugins/Extensions/Infopanel/icons/dev_mmc.png'
 			name = 'MMC: '
 		else:
-			model = file('/sys/block/' + device2 + '/device/model').read()
+			model = open('/sys/block/' + device2 + '/device/model').read()
 		model = str(model).replace('\n', '')
 		des = ''
-		print "test:" 
+		print("test:") 
 		if devicetype.find('/devices/pci') != -1 or devicetype.find('ahci') != -1:
 			name = _("HARD DISK: ")
 			mypixmap = '/usr/lib/enigma2/python/Plugins/Extensions/Infopanel/icons/dev_hdd.png'
@@ -548,20 +549,20 @@
 				parts = line.strip().split()
 				size = int(parts[2])
 				if (((float(size) / 1024) / 1024) / 1024) > 1:
-					des = _("Size: ") + str(round((((float(size) / 1024) / 1024) / 1024),2)) + _("TB")
+					des = _("Size: ") + str(round((((float(size) / 1024) / 1024) / 1024), 2)) + _("TB")
 				elif ((size / 1024) / 1024) > 1:
 					des = _("Size: ") + str((size / 1024) / 1024) + _("GB")
 				else:
 					des = _("Size: ") + str(size / 1024) + _("MB")
 			else:
 				try:
-					size = file('/sys/block/' + device2 + '/' + device + '/size').read()
+					size = open('/sys/block/' + device2 + '/' + device + '/size').read()
 					size = str(size).replace('\n', '')
 					size = int(size)
 				except:
 					size = 0
 				if ((((float(size) / 2) / 1024) / 1024) / 1024) > 1:
-					des = _("Size: ") + str(round(((((float(size) / 2) / 1024) / 1024) / 1024),2)) + _("TB")
+					des = _("Size: ") + str(round(((((float(size) / 2) / 1024) / 1024) / 1024), 2)) + _("TB")
 				elif (((size / 2) / 1024) / 1024) > 1:
 					des = _("Size: ") + str(((size / 2) / 1024) / 1024) + _("GB")
 				else:
@@ -612,38 +613,38 @@
 		self.mountp = extra_args[1]
 		self.device_tmp = result.split(' ')
 		if self.device_tmp[0].startswith('UUID='):
-			self.device_uuid = self.device_tmp[0].replace('"',"")
-			self.device_uuid = self.device_uuid.replace('\n',"")
+			self.device_uuid = self.device_tmp[0].replace('"', "")
+			self.device_uuid = self.device_uuid.replace('\n', "")
 		elif self.device_tmp[1].startswith('UUID='):
-			self.device_uuid = self.device_tmp[1].replace('"',"")
-			self.device_uuid = self.device_uuid.replace('\n',"")
+			self.device_uuid = self.device_tmp[1].replace('"', "")
+			self.device_uuid = self.device_uuid.replace('\n', "")
 		elif self.device_tmp[2].startswith('UUID='):
-			self.device_uuid = self.device_tmp[2].replace('"',"")
-			self.device_uuid = self.device_uuid.replace('\n',"")
+			self.device_uuid = self.device_tmp[2].replace('"', "")
+			self.device_uuid = self.device_uuid.replace('\n', "")
 		elif self.device_tmp[3].startswith('UUID='):
-			self.device_uuid = self.device_tmp[3].replace('"',"")
-			self.device_uuid = self.device_uuid.replace('\n',"")
+			self.device_uuid = self.device_tmp[3].replace('"', "")
+			self.device_uuid = self.device_uuid.replace('\n', "")
 		try:
 			if self.device_tmp[0].startswith('TYPE='):
-				self.device_type = self.device_tmp[0].replace('TYPE=',"")
-				self.device_type = self.device_type.replace('"',"")
-				self.device_type = self.device_type.replace('\n',"")
+				self.device_type = self.device_tmp[0].replace('TYPE=', "")
+				self.device_type = self.device_type.replace('"', "")
+				self.device_type = self.device_type.replace('\n', "")
 			elif self.device_tmp[1].startswith('TYPE='):
-				self.device_type = self.device_tmp[1].replace('TYPE=',"")
-				self.device_type = self.device_type.replace('"',"")
-				self.device_type = self.device_type.replace('\n',"")
+				self.device_type = self.device_tmp[1].replace('TYPE=', "")
+				self.device_type = self.device_type.replace('"', "")
+				self.device_type = self.device_type.replace('\n', "")
 			elif self.device_tmp[2].startswith('TYPE='):
-				self.device_type = self.device_tmp[2].replace('TYPE=',"")
-				self.device_type = self.device_type.replace('"',"")
-				self.device_type = self.device_type.replace('\n',"")
+				self.device_type = self.device_tmp[2].replace('TYPE=', "")
+				self.device_type = self.device_type.replace('"', "")
+				self.device_type = self.device_type.replace('\n', "")
 			elif self.device_tmp[3].startswith('TYPE='):
-				self.device_type = self.device_tmp[3].replace('TYPE=',"")
-				self.device_type = self.device_type.replace('"',"")
-				self.device_type = self.device_type.replace('\n',"")
+				self.device_type = self.device_tmp[3].replace('TYPE=', "")
+				self.device_type = self.device_type.replace('"', "")
+				self.device_type = self.device_type.replace('\n', "")
 			elif self.device_tmp[4].startswith('TYPE='):
-				self.device_type = self.device_tmp[4].replace('TYPE=',"")
-				self.device_type = self.device_type.replace('"',"")
-				self.device_type = self.device_type.replace('\n',"")
+				self.device_type = self.device_tmp[4].replace('TYPE=', "")
+				self.device_type = self.device_type.replace('"', "")
+				self.device_type = self.device_type.replace('\n', "")
 		except:
 			self.device_type = 'auto'
 				
@@ -651,11 +652,11 @@
 			self.device_type = 'auto'
 
 		if not path.exists(self.mountp):
-			mkdir(self.mountp, 0755)
-		file('/etc/fstab.tmp', 'w').writelines([l for l in file('/etc/fstab').readlines() if self.device not in l])
-		rename('/etc/fstab.tmp','/etc/fstab')
-		file('/etc/fstab.tmp', 'w').writelines([l for l in file('/etc/fstab').readlines() if self.device_uuid not in l])
-		rename('/etc/fstab.tmp','/etc/fstab')
+			mkdir(self.mountp, 0o755)
+		open('/etc/fstab.tmp', 'w').writelines([l for l in file('/etc/fstab').readlines() if self.device not in l])
+		rename('/etc/fstab.tmp', '/etc/fstab')
+		open('/etc/fstab.tmp', 'w').writelines([l for l in file('/etc/fstab').readlines() if self.device_uuid not in l])
+		rename('/etc/fstab.tmp', '/etc/fstab')
 		out = open('/etc/fstab', 'a')
 		line = self.device_uuid + '\t' + self.mountp + '\t' + self.device_type + '\tdefaults\t0 0\n'
 		out.write(line)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/QuickMenu.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/QuickMenu.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/QuickMenu.py	2020-06-21 10:16:12.679433652 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/QuickMenu.py	2020-06-21 10:20:02.331322106 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 
 from enigma import eListboxPythonMultiContent, gFont, eEnv, getDesktop, pNavigation
 from boxbranding import getMachineBrand, getMachineName, getBoxType, getBrandOEM
@@ -111,8 +112,8 @@
 			if fs.strip().endswith(filesystem):
 				return True
 		return False
-	except Exception, ex:
-		print "[Harddisk] Failed to read /proc/filesystems:", ex
+	except Exception as ex:
+		print("[Harddisk] Failed to read /proc/filesystems:", ex)
 
 class QuickMenu(Screen, ProtectedScreen):
 	skin = """
@@ -156,7 +157,7 @@
 		self["list"].onSelectionChanged.append(self.selectionChanged)
 		self["sublist"].onSelectionChanged.append(self.selectionSubChanged)
 
-		self["actions"] = ActionMap(["SetupActions","WizardActions","MenuActions","MoviePlayerActions"],
+		self["actions"] = ActionMap(["SetupActions", "WizardActions", "MenuActions", "MoviePlayerActions"],
 		{
 			"ok": self.ok,
 			"back": self.keyred,
@@ -205,7 +206,7 @@
 				self["summary_description"].text = item[0]
 
 	def goLeft(self):
-		if self.menu <> 0:
+		if self.menu != 0:
 			self.menu = 0
 			self.selectedList = self["list"]
 			self["list"].selectionEnabled(1)
@@ -241,137 +242,137 @@
 		self.menu = 0
 		self.list = []
 		self.oldlist = []
-		self.list.append(QuickMenuEntryComponent("Software Manager",_("Update/Backup/Restore your box"),_("Update/Backup your firmware, Backup/Restore settings")))
+		self.list.append(QuickMenuEntryComponent("Software Manager", _("Update/Backup/Restore your box"), _("Update/Backup your firmware, Backup/Restore settings")))
 		if Check_Softcam():
-			self.list.append(QuickMenuEntryComponent("Softcam",_("Start/stop/select cam"),_("Start/stop/select your cam, You need to install first a softcam")))
-		self.list.append(QuickMenuEntryComponent("System",_("System Setup"),_("Setup your System")))
-		self.list.append(QuickMenuEntryComponent("Mounts",_("Mount Setup"),_("Setup your mounts for network")))
-		self.list.append(QuickMenuEntryComponent("Network",_("Setup your local network"),_("Setup your local network. For Wlan you need to boot with a USB-Wlan stick")))
-		self.list.append(QuickMenuEntryComponent("AV Setup",_("Setup Video/Audio"),_("Setup your Video Mode, Video Output and other Video Settings")))
-		self.list.append(QuickMenuEntryComponent("Tuner Setup",_("Setup Tuner"),_("Setup your Tuner and search for channels")))
-		self.list.append(QuickMenuEntryComponent("Plugins",_("Setup Plugins"),_("Shows available plugins. Here you can download and install them")))
-		self.list.append(QuickMenuEntryComponent("Harddisk",_("Harddisk Setup"),_("Setup your Harddisk")))
+			self.list.append(QuickMenuEntryComponent("Softcam", _("Start/stop/select cam"), _("Start/stop/select your cam, You need to install first a softcam")))
+		self.list.append(QuickMenuEntryComponent("System", _("System Setup"), _("Setup your System")))
+		self.list.append(QuickMenuEntryComponent("Mounts", _("Mount Setup"), _("Setup your mounts for network")))
+		self.list.append(QuickMenuEntryComponent("Network", _("Setup your local network"), _("Setup your local network. For Wlan you need to boot with a USB-Wlan stick")))
+		self.list.append(QuickMenuEntryComponent("AV Setup", _("Setup Video/Audio"), _("Setup your Video Mode, Video Output and other Video Settings")))
+		self.list.append(QuickMenuEntryComponent("Tuner Setup", _("Setup Tuner"), _("Setup your Tuner and search for channels")))
+		self.list.append(QuickMenuEntryComponent("Plugins", _("Setup Plugins"), _("Shows available plugins. Here you can download and install them")))
+		self.list.append(QuickMenuEntryComponent("Harddisk", _("Harddisk Setup"), _("Setup your Harddisk")))
 		self["list"].l.setList(self.list)
 
 ######## System Setup Menu ##############################
 	def Qsystem(self):
 		self.sublist = []
-		self.sublist.append(QuickSubMenuEntryComponent("Customise",_("Setup Enigma2"),_("Customise enigma2 personal settings")))
-		self.sublist.append(QuickSubMenuEntryComponent("OSD settings",_("OSD Setup"),_("Setup your OSD")))
-		self.sublist.append(QuickSubMenuEntryComponent("Button Setup",_("Button Setup"),_("Setup your remote buttons")))
+		self.sublist.append(QuickSubMenuEntryComponent("Customise", _("Setup Enigma2"), _("Customise enigma2 personal settings")))
+		self.sublist.append(QuickSubMenuEntryComponent("OSD settings", _("OSD Setup"), _("Setup your OSD")))
+		self.sublist.append(QuickSubMenuEntryComponent("Button Setup", _("Button Setup"), _("Setup your remote buttons")))
 		if SystemInfo["FrontpanelDisplay"] and SystemInfo["Display"]:
-			self.sublist.append(QuickSubMenuEntryComponent("Display Settings",_("Display Setup"),_("Setup your display")))
+			self.sublist.append(QuickSubMenuEntryComponent("Display Settings", _("Display Setup"), _("Setup your display")))
 		if SystemInfo["LCDSKINSetup"]:
-			self.sublist.append(QuickSubMenuEntryComponent("LCD Skin Setup",_("Select LCD Skin"),_("Setup your LCD")))
-		self.sublist.append(QuickSubMenuEntryComponent("Skin Setup",_("Select Enigma2 Skin"),_("Setup your Skin")))
-		self.sublist.append(QuickSubMenuEntryComponent("Channel selection",_("Channel selection configuration"),_("Setup your Channel selection configuration")))
-		self.sublist.append(QuickSubMenuEntryComponent("Recording settings",_("Recording Setup"),_("Setup your recording config")))
-		self.sublist.append(QuickSubMenuEntryComponent("EPG settings",_("EPG Setup"),_("Setup your EPG config")))
+			self.sublist.append(QuickSubMenuEntryComponent("LCD Skin Setup", _("Select LCD Skin"), _("Setup your LCD")))
+		self.sublist.append(QuickSubMenuEntryComponent("Skin Setup", _("Select Enigma2 Skin"), _("Setup your Skin")))
+		self.sublist.append(QuickSubMenuEntryComponent("Channel selection", _("Channel selection configuration"), _("Setup your Channel selection configuration")))
+		self.sublist.append(QuickSubMenuEntryComponent("Recording settings", _("Recording Setup"), _("Setup your recording config")))
+		self.sublist.append(QuickSubMenuEntryComponent("EPG settings", _("EPG Setup"), _("Setup your EPG config")))
 		self["sublist"].l.setList(self.sublist)
 
 ######## Network Menu ##############################
 	def Qnetwork(self):
 		self.sublist = []
-		self.sublist.append(QuickSubMenuEntryComponent("Network Wizard",_("Configure your Network"),_("Use the Networkwizard to configure your Network. The wizard will help you to setup your network")))
+		self.sublist.append(QuickSubMenuEntryComponent("Network Wizard", _("Configure your Network"), _("Use the Networkwizard to configure your Network. The wizard will help you to setup your network")))
 		if len(self.adapters) > 1: # show only adapter selection if more as 1 adapter is installed
-			self.sublist.append(QuickSubMenuEntryComponent("Network Adapter Selection",_("Select Lan/Wlan"),_("Setup your network interface. If no Wlan stick is used, you only can select Lan")))
+			self.sublist.append(QuickSubMenuEntryComponent("Network Adapter Selection", _("Select Lan/Wlan"), _("Setup your network interface. If no Wlan stick is used, you only can select Lan")))
 		if not self.activeInterface == None: # show only if there is already a adapter up
-			self.sublist.append(QuickSubMenuEntryComponent("Network Interface",_("Setup interface"),_("Setup network. Here you can setup DHCP, IP, DNS")))
-		self.sublist.append(QuickSubMenuEntryComponent("Network Restart",_("Restart network to with current setup"),_("Restart network and remount connections")))
-		self.sublist.append(QuickSubMenuEntryComponent("Network Services",_("Setup Network Services"),_("Setup Network Services (Samba, Ftp, NFS, ...)")))
+			self.sublist.append(QuickSubMenuEntryComponent("Network Interface", _("Setup interface"), _("Setup network. Here you can setup DHCP, IP, DNS")))
+		self.sublist.append(QuickSubMenuEntryComponent("Network Restart", _("Restart network to with current setup"), _("Restart network and remount connections")))
+		self.sublist.append(QuickSubMenuEntryComponent("Network Services", _("Setup Network Services"), _("Setup Network Services (Samba, Ftp, NFS, ...)")))
 		self["sublist"].l.setList(self.sublist)
 
 #### Network Services Menu ##############################
 	def Qnetworkservices(self):
 		self.sublist = []
-		self.sublist.append(QuickSubMenuEntryComponent("Samba",_("Setup Samba"),_("Setup Samba")))
-		self.sublist.append(QuickSubMenuEntryComponent("NFS",_("Setup NFS"),_("Setup NFS")))
-		self.sublist.append(QuickSubMenuEntryComponent("FTP",_("Setup FTP"),_("Setup FTP")))
-		self.sublist.append(QuickSubMenuEntryComponent("AFP",_("Setup AFP"),_("Setup AFP")))
-		self.sublist.append(QuickSubMenuEntryComponent("OpenVPN",_("Setup OpenVPN"),_("Setup OpenVPN")))
-		self.sublist.append(QuickSubMenuEntryComponent("MiniDLNA",_("Setup MiniDLNA"),_("Setup MiniDLNA")))
-		self.sublist.append(QuickSubMenuEntryComponent("Inadyn",_("Setup Inadyn"),_("Setup Inadyn")))
-		self.sublist.append(QuickSubMenuEntryComponent("SABnzbd",_("Setup SABnzbd"),_("Setup SABnzbd")))
-		self.sublist.append(QuickSubMenuEntryComponent("uShare",_("Setup uShare"),_("Setup uShare")))
-		self.sublist.append(QuickSubMenuEntryComponent("Telnet",_("Setup Telnet"),_("Setup Telnet")))
+		self.sublist.append(QuickSubMenuEntryComponent("Samba", _("Setup Samba"), _("Setup Samba")))
+		self.sublist.append(QuickSubMenuEntryComponent("NFS", _("Setup NFS"), _("Setup NFS")))
+		self.sublist.append(QuickSubMenuEntryComponent("FTP", _("Setup FTP"), _("Setup FTP")))
+		self.sublist.append(QuickSubMenuEntryComponent("AFP", _("Setup AFP"), _("Setup AFP")))
+		self.sublist.append(QuickSubMenuEntryComponent("OpenVPN", _("Setup OpenVPN"), _("Setup OpenVPN")))
+		self.sublist.append(QuickSubMenuEntryComponent("MiniDLNA", _("Setup MiniDLNA"), _("Setup MiniDLNA")))
+		self.sublist.append(QuickSubMenuEntryComponent("Inadyn", _("Setup Inadyn"), _("Setup Inadyn")))
+		self.sublist.append(QuickSubMenuEntryComponent("SABnzbd", _("Setup SABnzbd"), _("Setup SABnzbd")))
+		self.sublist.append(QuickSubMenuEntryComponent("uShare", _("Setup uShare"), _("Setup uShare")))
+		self.sublist.append(QuickSubMenuEntryComponent("Telnet", _("Setup Telnet"), _("Setup Telnet")))
 		self["sublist"].l.setList(self.sublist)
 
 ######## Mount Settings Menu ##############################
 	def Qmount(self):
 		self.sublist = []
 		if NETWORKBROWSER == True:
-			self.sublist.append(QuickSubMenuEntryComponent("Mount Manager",_("Manage network mounts"),_("Setup your network mounts")))
-			self.sublist.append(QuickSubMenuEntryComponent("Network Browser",_("Search for network shares"),_("Search for network shares")))
-		self.sublist.append(QuickSubMenuEntryComponent("Device Manager",_("Mounts Devices"),_("Setup your Device mounts (USB, HDD, others...)")))
+			self.sublist.append(QuickSubMenuEntryComponent("Mount Manager", _("Manage network mounts"), _("Setup your network mounts")))
+			self.sublist.append(QuickSubMenuEntryComponent("Network Browser", _("Search for network shares"), _("Search for network shares")))
+		self.sublist.append(QuickSubMenuEntryComponent("Device Manager", _("Mounts Devices"), _("Setup your Device mounts (USB, HDD, others...)")))
 		self["sublist"].l.setList(self.sublist)
 
 ######## Softcam Menu ##############################
 	def Qsoftcam(self):
 		self.sublist = []
 		if Check_Softcam(): # show only when there is a softcam installed
-			self.sublist.append(QuickSubMenuEntryComponent("Softcam Setup",_("Control your Softcams"),_("Use the Softcam Panel to control your Cam. This let you start/stop/select a cam")))
-		self.sublist.append(QuickSubMenuEntryComponent("Download Softcams",_("Download and install cam"),_("Shows available softcams. Here you can download and install them")))
+			self.sublist.append(QuickSubMenuEntryComponent("Softcam Setup", _("Control your Softcams"), _("Use the Softcam Panel to control your Cam. This let you start/stop/select a cam")))
+		self.sublist.append(QuickSubMenuEntryComponent("Download Softcams", _("Download and install cam"), _("Shows available softcams. Here you can download and install them")))
 		self["sublist"].l.setList(self.sublist)
 
 ######## A/V Settings Menu ##############################
 	def Qavsetup(self):
 		self.sublist = []
-		self.sublist.append(QuickSubMenuEntryComponent("Video Settings",_("Setup Videomode"),_("Setup your Video Mode, Video Output and other Video Settings")))
-		self.sublist.append(QuickSubMenuEntryComponent("Audio Settings",_("Setup Audiomode"),_("Setup your Audio Mode")))
+		self.sublist.append(QuickSubMenuEntryComponent("Video Settings", _("Setup Videomode"), _("Setup your Video Mode, Video Output and other Video Settings")))
+		self.sublist.append(QuickSubMenuEntryComponent("Audio Settings", _("Setup Audiomode"), _("Setup your Audio Mode")))
 		if AUDIOSYNC == True:
-			self.sublist.append(QuickSubMenuEntryComponent("Audio Sync",_("Setup Audio Sync"),_("Setup Audio Sync settings")))
-		self.sublist.append(QuickSubMenuEntryComponent("Auto Language",_("Auto Language Selection"),_("Select your Language for Audio/Subtitles")))
+			self.sublist.append(QuickSubMenuEntryComponent("Audio Sync", _("Setup Audio Sync"), _("Setup Audio Sync settings")))
+		self.sublist.append(QuickSubMenuEntryComponent("Auto Language", _("Auto Language Selection"), _("Select your Language for Audio/Subtitles")))
 		if os_path.exists("/proc/stb/vmpeg/0/pep_apply") and VIDEOENH == True:
-			self.sublist.append(QuickSubMenuEntryComponent("VideoEnhancement",_("VideoEnhancement Setup"),_("VideoEnhancement Setup")))
+			self.sublist.append(QuickSubMenuEntryComponent("VideoEnhancement", _("VideoEnhancement Setup"), _("VideoEnhancement Setup")))
 
 		self["sublist"].l.setList(self.sublist)
 
 ######## Tuner Menu ##############################
 	def Qtuner(self):
 		self.sublist = []
-		self.sublist.append(QuickSubMenuEntryComponent("Tuner Configuration",_("Setup tuner(s)"),_("Setup each tuner for your satellite system")))
+		self.sublist.append(QuickSubMenuEntryComponent("Tuner Configuration", _("Setup tuner(s)"), _("Setup each tuner for your satellite system")))
 		if POSSETUP == True:
-			self.sublist.append(QuickSubMenuEntryComponent("Positioner Setup",_("Setup rotor"),_("Setup your positioner for your satellite system")))
-		self.sublist.append(QuickSubMenuEntryComponent("Automatic Scan",_("Automatic Service Searching"),_("Automatic scan for services")))
-		self.sublist.append(QuickSubMenuEntryComponent("Manual Scan",_("Manual Service Searching"),_("Manual scan for services")))
+			self.sublist.append(QuickSubMenuEntryComponent("Positioner Setup", _("Setup rotor"), _("Setup your positioner for your satellite system")))
+		self.sublist.append(QuickSubMenuEntryComponent("Automatic Scan", _("Automatic Service Searching"), _("Automatic scan for services")))
+		self.sublist.append(QuickSubMenuEntryComponent("Manual Scan", _("Manual Service Searching"), _("Manual scan for services")))
 		if SATFINDER == True:
-			self.sublist.append(QuickSubMenuEntryComponent("Sat Finder",_("Search Sats"),_("Search Sats, check signal and lock")))
+			self.sublist.append(QuickSubMenuEntryComponent("Sat Finder", _("Search Sats"), _("Search Sats, check signal and lock")))
 		self["sublist"].l.setList(self.sublist)
 
 ######## Software Manager Menu ##############################
 	def Qsoftware(self):
 		self.sublist = []
-		self.sublist.append(QuickSubMenuEntryComponent("Software Update",_("Online software update"),_("Check/Install online updates (you must have a working internet connection)")))
-		if not getBoxType().startswith('az') and not getBoxType() in ('dm500hd','dm500hdv2','dm520','dm800','dm800se','dm800sev2','dm820','dm7020hd','dm7020hdv2','dm7080','dm8000') and not getBrandOEM().startswith('cube') and not getBrandOEM().startswith('wetek') and not getBoxType().startswith('alien'):
-			self.sublist.append(QuickSubMenuEntryComponent("Flash Online",_("Flash Online a new image"),_("Flash on the fly your your Receiver software.")))
+		self.sublist.append(QuickSubMenuEntryComponent("Software Update", _("Online software update"), _("Check/Install online updates (you must have a working internet connection)")))
+		if not getBoxType().startswith('az') and not getBoxType() in ('dm500hd', 'dm500hdv2', 'dm520', 'dm800', 'dm800se', 'dm800sev2', 'dm820', 'dm7020hd', 'dm7020hdv2', 'dm7080', 'dm8000') and not getBrandOEM().startswith('cube') and not getBrandOEM().startswith('wetek') and not getBoxType().startswith('alien'):
+			self.sublist.append(QuickSubMenuEntryComponent("Flash Online", _("Flash Online a new image"), _("Flash on the fly your your Receiver software.")))
 		if not getBoxType().startswith('az') and not getBrandOEM().startswith('cube') and not getBrandOEM().startswith('wetek') and not getBoxType().startswith('alien'):
-			self.sublist.append(QuickSubMenuEntryComponent("Complete Backup",_("Backup your current image"),_("Backup your current image to HDD or USB. This will make a 1:1 copy of your box")))
-		self.sublist.append(QuickSubMenuEntryComponent("Backup Settings",_("Backup your current settings"),_("Backup your current settings. This includes E2-setup, channels, network and all selected files")))
-		self.sublist.append(QuickSubMenuEntryComponent("Restore Settings",_("Restore settings from a backup"),_("Restore your settings back from a backup. After restore the box will restart to activated the new settings")))
-		self.sublist.append(QuickSubMenuEntryComponent("Show default backup files",_("Show files backed up by default"),_("Here you can browse (but not modify) the files that are added to the backupfile by default (E2-setup, channels, network).")))
-		self.sublist.append(QuickSubMenuEntryComponent("Select additional backup files",_("Select additional files to backup"),_("Here you can specify additional files that should be added to the backup file.")))
-		self.sublist.append(QuickSubMenuEntryComponent("Select excluded backup files",_("Select files to exclude from backup"),_("Here you can select which files should be excluded from the backup.")))
-		self.sublist.append(QuickSubMenuEntryComponent("Software Manager Setup",_("Manage your online update files"),_("Here you can select which files should be updated with a online update")))
+			self.sublist.append(QuickSubMenuEntryComponent("Complete Backup", _("Backup your current image"), _("Backup your current image to HDD or USB. This will make a 1:1 copy of your box")))
+		self.sublist.append(QuickSubMenuEntryComponent("Backup Settings", _("Backup your current settings"), _("Backup your current settings. This includes E2-setup, channels, network and all selected files")))
+		self.sublist.append(QuickSubMenuEntryComponent("Restore Settings", _("Restore settings from a backup"), _("Restore your settings back from a backup. After restore the box will restart to activated the new settings")))
+		self.sublist.append(QuickSubMenuEntryComponent("Show default backup files", _("Show files backed up by default"), _("Here you can browse (but not modify) the files that are added to the backupfile by default (E2-setup, channels, network).")))
+		self.sublist.append(QuickSubMenuEntryComponent("Select additional backup files", _("Select additional files to backup"), _("Here you can specify additional files that should be added to the backup file.")))
+		self.sublist.append(QuickSubMenuEntryComponent("Select excluded backup files", _("Select files to exclude from backup"), _("Here you can select which files should be excluded from the backup.")))
+		self.sublist.append(QuickSubMenuEntryComponent("Software Manager Setup", _("Manage your online update files"), _("Here you can select which files should be updated with a online update")))
 		self["sublist"].l.setList(self.sublist)
 
 ######## Plugins Menu ##############################
 	def Qplugin(self):
 		self.sublist = []
-		self.sublist.append(QuickSubMenuEntryComponent("Plugin Browser",_("Open the Plugin Browser"),_("Shows Plugins Browser. Here you can setup installed Plugin")))
-		self.sublist.append(QuickSubMenuEntryComponent("Download Plugins",_("Download and install Plugins"),_("Shows available plugins. Here you can download and install them")))
-		self.sublist.append(QuickSubMenuEntryComponent("Remove Plugins",_("Delete Plugins"),_("Delete and uninstall Plugins. This will remove the Plugin from your box")))
-		self.sublist.append(QuickSubMenuEntryComponent("Plugin Filter",_("Setup Plugin filter"),_("Setup Plugin filter. Here you can select which Plugins are showed in the PluginBrowser")))
-		self.sublist.append(QuickSubMenuEntryComponent("IPK Installer",_("Install local extension"),_("Scan for local extensions and install them")))
+		self.sublist.append(QuickSubMenuEntryComponent("Plugin Browser", _("Open the Plugin Browser"), _("Shows Plugins Browser. Here you can setup installed Plugin")))
+		self.sublist.append(QuickSubMenuEntryComponent("Download Plugins", _("Download and install Plugins"), _("Shows available plugins. Here you can download and install them")))
+		self.sublist.append(QuickSubMenuEntryComponent("Remove Plugins", _("Delete Plugins"), _("Delete and uninstall Plugins. This will remove the Plugin from your box")))
+		self.sublist.append(QuickSubMenuEntryComponent("Plugin Filter", _("Setup Plugin filter"), _("Setup Plugin filter. Here you can select which Plugins are showed in the PluginBrowser")))
+		self.sublist.append(QuickSubMenuEntryComponent("IPK Installer", _("Install local extension"), _("Scan for local extensions and install them")))
 		self["sublist"].l.setList(self.sublist)
 
 ######## Harddisk Menu ##############################
 	def Qharddisk(self):
 		self.sublist = []
-		self.sublist.append(QuickSubMenuEntryComponent("Harddisk Setup",_("Harddisk Setup"),_("Setup your Harddisk")))
-		self.sublist.append(QuickSubMenuEntryComponent("Initialization",_("Format HDD"),_("Format your Harddisk")))
-		self.sublist.append(QuickSubMenuEntryComponent("Filesystem Check",_("Check HDD"),_("Filesystem check your Harddisk")))
+		self.sublist.append(QuickSubMenuEntryComponent("Harddisk Setup", _("Harddisk Setup"), _("Setup your Harddisk")))
+		self.sublist.append(QuickSubMenuEntryComponent("Initialization", _("Format HDD"), _("Format your Harddisk")))
+		self.sublist.append(QuickSubMenuEntryComponent("Filesystem Check", _("Check HDD"), _("Filesystem check your Harddisk")))
 		if isFileSystemSupported("ext4"):
-			self.sublist.append(QuickSubMenuEntryComponent("Convert ext3 to ext4",_("Convert filesystem ext3 to ext4"),_("Convert filesystem ext3 to ext4")))
+			self.sublist.append(QuickSubMenuEntryComponent("Convert ext3 to ext4", _("Convert filesystem ext3 to ext4"), _("Convert filesystem ext3 to ext4")))
 		self["sublist"].l.setList(self.sublist)
 
 	def ok(self):
@@ -432,7 +433,7 @@
 		elif item[0] == _("Network Adapter Selection"):
 			self.session.open(NetworkAdapterSelection)
 		elif item[0] == _("Network Interface"):
-			self.session.open(AdapterSetup,self.activeInterface)
+			self.session.open(AdapterSetup, self.activeInterface)
 		elif item[0] == _("Network Restart"):
 			self.session.open(RestartNetwork)
 		elif item[0] == _("Network Services"):
@@ -524,7 +525,7 @@
 			else:
 				self.session.open(ImageBackup)
 		elif item[0] == _("Backup Settings"):
-			self.session.openWithCallback(self.backupDone,BackupScreen, runBackup = True)
+			self.session.openWithCallback(self.backupDone, BackupScreen, runBackup = True)
 		elif item[0] == _("Restore Settings"):
 			self.backuppath = getBackupPath()
 			if not path.isdir(self.backuppath):
@@ -532,15 +533,15 @@
 			self.backupfile = getBackupFilename()
 			self.fullbackupfilename = self.backuppath + "/" + self.backupfile
 			if os_path.exists(self.fullbackupfilename):
-				self.session.openWithCallback(self.startRestore, MessageBox, _("Are you sure you want to restore your %s %s backup?\nSTB will restart after the restore") % (getMachineBrand(), getMachineName()),default = False)
+				self.session.openWithCallback(self.startRestore, MessageBox, _("Are you sure you want to restore your %s %s backup?\nSTB will restart after the restore") % (getMachineBrand(), getMachineName()), default = False)
 			else:
 				self.session.open(MessageBox, _("Sorry no backups found!"), MessageBox.TYPE_INFO, timeout = 10)
 		elif item[0] == _("Show default backup files"):
-			self.session.open(BackupSelection,title=_("Default files/folders to backup"),configBackupDirs=config.plugins.configurationbackup.backupdirs_default,readOnly=True)
+			self.session.open(BackupSelection, title=_("Default files/folders to backup"), configBackupDirs=config.plugins.configurationbackup.backupdirs_default, readOnly=True)
 		elif item[0] == _("Select additional backup files"):
-			self.session.open(BackupSelection,title=_("Additional files/folders to backup"),configBackupDirs=config.plugins.configurationbackup.backupdirs,readOnly=False)
+			self.session.open(BackupSelection, title=_("Additional files/folders to backup"), configBackupDirs=config.plugins.configurationbackup.backupdirs, readOnly=False)
 		elif item[0] == _("Select excluded backup files"):
-			self.session.open(BackupSelection,title=_("Files/folders to exclude from backup"),configBackupDirs=config.plugins.configurationbackup.backupdirs_exclude,readOnly=False)
+			self.session.open(BackupSelection, title=_("Files/folders to exclude from backup"), configBackupDirs=config.plugins.configurationbackup.backupdirs_exclude, readOnly=False)
 		elif item[0] == _("Software Manager Setup"):
 			self.session.open(SoftwareManagerSetup)
 ######## Select PluginDownloadBrowser Menu ##############################
@@ -577,13 +578,13 @@
 
 ######## NETWORK TOOLS #######################
 	def GetNetworkInterfaces(self):
-		self.adapters = [(iNetwork.getFriendlyAdapterName(x),x) for x in iNetwork.getAdapterList()]
+		self.adapters = [(iNetwork.getFriendlyAdapterName(x), x) for x in iNetwork.getAdapterList()]
 
 		if not self.adapters:
-			self.adapters = [(iNetwork.getFriendlyAdapterName(x),x) for x in iNetwork.getConfiguredAdapters()]
+			self.adapters = [(iNetwork.getFriendlyAdapterName(x), x) for x in iNetwork.getConfiguredAdapters()]
 
 		if len(self.adapters) == 0:
-			self.adapters = [(iNetwork.getFriendlyAdapterName(x),x) for x in iNetwork.getInstalledAdapters()]
+			self.adapters = [(iNetwork.getFriendlyAdapterName(x), x) for x in iNetwork.getInstalledAdapters()]
 
 		self.activeInterface = None
 	
@@ -598,7 +599,7 @@
 		if len(nimList) == 0:
 			self.session.open(MessageBox, _("No positioner capable frontend found."), MessageBox.TYPE_ERROR)
 		else:
-			if len(NavigationInstance.instance.getRecordings(False,pNavigation.isAnyRecording)) > 0:
+			if len(NavigationInstance.instance.getRecordings(False, pNavigation.isAnyRecording)) > 0:
 				self.session.open(MessageBox, _("A recording is currently running. Please stop the recording before trying to configure the positioner."), MessageBox.TYPE_ERROR)
 			else:
 				usableNims = []
@@ -614,7 +615,7 @@
 					self.session.open(MessageBox, _("No tuner is configured for use with a diseqc positioner!"), MessageBox.TYPE_ERROR)
 
 	def SatfinderMain(self):
-		if len(NavigationInstance.instance.getRecordings(False,pNavigation.isAnyRecording)) > 0:
+		if len(NavigationInstance.instance.getRecordings(False, pNavigation.isAnyRecording)) > 0:
 			self.session.open(MessageBox, _("A recording is currently running. Please stop the recording before trying to start the satfinder."), MessageBox.TYPE_ERROR)
 		else:
 			self.session.open(Satfinder)
@@ -634,7 +635,7 @@
 
 ######## Create MENULIST format #######################
 def QuickMenuEntryComponent(name, description, long_description = None, width=540):
-	pngname = name.replace(" ","_") 
+	pngname = name.replace(" ", "_") 
 	png = LoadPixmap("/usr/lib/enigma2/python/Plugins/Extensions/Infopanel/icons/" + pngname + ".png")
 	if png is None:
 		png = LoadPixmap("/usr/lib/enigma2/python/Plugins/Extensions/Infopanel/icons/default.png")
@@ -721,7 +722,7 @@
 			if not parts:
 				continue
 			device = parts[3]
-			if not search('sd[a-z][1-9]',device):
+			if not search('sd[a-z][1-9]', device):
 				continue
 			if device in list2:
 				continue
@@ -741,7 +742,7 @@
 		d2 = device
 		name = 'USB: '
 		mypixmap = '/usr/lib/enigma2/python/Plugins/Extensions/Infopanel/icons/dev_usbstick.png'
-		model = file('/sys/block/' + device2 + '/device/model').read()
+		model = open('/sys/block/' + device2 + '/device/model').read()
 		model = str(model).replace('\n', '')
 		des = ''
 		if devicetype.find('/devices/pci') != -1:
@@ -756,7 +757,7 @@
 		f = open('/tmp/devices.tmp', 'r')
 		swapdevices = f.read()
 		f.close()
-		swapdevices = swapdevices.replace('\n','')
+		swapdevices = swapdevices.replace('\n', '')
 		swapdevices = swapdevices.split('/')
 		f = open('/proc/mounts', 'r')
 		for line in f.readlines():
@@ -791,7 +792,7 @@
 					des = _("Size: ") + str(size / 1024) + " " + _("MB")
 			else:
 				try:
-					size = file('/sys/block/' + device2 + '/' + device + '/size').read()
+					size = open('/sys/block/' + device2 + '/' + device + '/size').read()
 					size = str(size).replace('\n', '')
 					size = int(size)
 				except:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/ScriptRunner.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/ScriptRunner.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/ScriptRunner.py	2020-06-21 10:16:12.679433652 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/ScriptRunner.py	2020-06-21 10:20:02.331322106 -0400
@@ -48,7 +48,7 @@
 		
 	def populate_List(self):
 		if not path.exists('/usr/script'):
-			mkdir('/usr/script', 0755)
+			mkdir('/usr/script', 0o755)
 		self['lab1'].setText(_("Select a script to run:"))
 		del self.list[:]
 		f = listdir('/usr/script')
@@ -68,10 +68,10 @@
 		else:
 			self.session.open(MessageBox, _("You have no script to run."), MessageBox.TYPE_INFO, timeout = 10)
 
-	def Run(self,answer):
+	def Run(self, answer):
 		if answer is True:
 			if not access("/usr/script/" + self.sel, X_OK):
-				chmod("/usr/script/" + self.sel, 0755)
+				chmod("/usr/script/" + self.sel, 0o755)
 			cmd1 = ". /usr/script/" + self.sel
 			self.session.open(Console, title=self.sel, cmdlist = [cmd1], closeOnSuccess = False)	
 					
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/SoftcamPanel.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/SoftcamPanel.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/SoftcamPanel.py	2020-06-21 10:16:12.679433652 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/SoftcamPanel.py	2020-06-21 10:20:02.331322106 -0400
@@ -123,15 +123,15 @@
 			divpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_SKIN, "skin_default/div-h.png"))
 			if status == 'update':
 				statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "Extensions/Infopanel/icons/upgrade.png"))
-				self.statuslist.append(( _("Package list update"), '', _("Trying to download a new updatelist. Please wait..." ),'', statuspng, divpng ))
+				self.statuslist.append(( _("Package list update"), '', _("Trying to download a new updatelist. Please wait..." ), '', statuspng, divpng ))
 				self['list'].setList(self.statuslist)
 			if status == 'list':
 				statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "Extensions/Infopanel/icons/upgrade.png"))
-				self.statuslist.append(( _("Package list"), '', _("Getting Softcam list. Please wait..." ),'', statuspng, divpng ))
+				self.statuslist.append(( _("Package list"), '', _("Getting Softcam list. Please wait..." ), '', statuspng, divpng ))
 				self['list'].setList(self.statuslist)
 			elif status == 'error':
 				statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "Extensions/Infopanel/icons/remove.png"))
-				self.statuslist.append(( _("Error"), '', _("There was an error downloading the updatelist. Please try again." ),'', statuspng, divpng ))
+				self.statuslist.append(( _("Error"), '', _("There was an error downloading the updatelist. Please try again." ), '', statuspng, divpng ))
 				self['list'].setList(self.statuslist)				
 
 	def startupdateList(self):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/SoftwarePanel.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/SoftwarePanel.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/SoftwarePanel.py	2020-06-21 10:16:12.679433652 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/SoftwarePanel.py	2020-06-21 10:20:02.331322106 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Plugins.Plugin import PluginDescriptor
 from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
@@ -92,7 +93,7 @@
 				self.session.open(UpdatePlugin)
 				self.close()
 			else:
-				print "DO NOT UPDATE !!!"
+				print("DO NOT UPDATE !!!")
 				message = _("There are to many update packages !!\n\n"
 				"There is a risk that your %s %s will not\n"
 				"boot after online-update, or will show disfunction in running Image.\n\n"
@@ -101,7 +102,7 @@
 				self.session.openWithCallback(self.checkPackagesCallback, MessageBox, message, default = True)
 
 	def checkPackagesCallback(self, ret):
-		print ret
+		print(ret)
 		if ret:
 			from Plugins.SystemPlugins.SoftwareManager.Flash_online import FlashOnline
 			self.session.open(FlashOnline)
@@ -113,8 +114,8 @@
 
 	def UpdatePackageNr(self):
 		self.packages = len(self.list)
-		print self.packages
-		print"packagenr" + str(self.packages)
+		print(self.packages)
+		print("packagenr" + str(self.packages))
 		self["packagenr"].setText(str(self.packages))
 		if self.packages == 0:
 			self['key_green'].hide()
@@ -124,8 +125,8 @@
 			self['key_green_pic'].show()
 
 	def checkTraficLight(self):
-		print"checkTraficLight"
-		from urllib import urlopen
+		print("checkTraficLight")
+		from six.moves.urllib.request import urlopen
 		import socket
 		self['a_red'].hide()
 		self['a_yellow'].hide()
@@ -164,19 +165,19 @@
 					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_SKIN, "icons/upgrade.png"))
 				else:
 					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/upgrade.png"))
-				self.statuslist.append(( _("Package list update"), '', _("Trying to download a new updatelist. Please wait..." ),'',statuspng, divpng ))
+				self.statuslist.append(( _("Package list update"), '', _("Trying to download a new updatelist. Please wait..." ), '', statuspng, divpng ))
 			elif status == 'error':
 				if os_path.exists(resolveFilename(SCOPE_CURRENT_SKIN, "icons/remove.png")):
 					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_SKIN, "icons/remove.png"))
 				else:
 					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/remove.png"))
-				self.statuslist.append(( _("Error"), '', _("There was an error downloading the updatelist. Please try again." ),'',statuspng, divpng ))
+				self.statuslist.append(( _("Error"), '', _("There was an error downloading the updatelist. Please try again." ), '', statuspng, divpng ))
 			elif status == 'noupdate':
 				if os_path.exists(resolveFilename(SCOPE_CURRENT_SKIN, "icons/installed.png")):
 					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_SKIN, "icons/installed.png"))
 				else:
 					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/installed.png"))
-				self.statuslist.append(( _("Nothing to upgrade"), '', _("There are no updates available." ),'',statuspng, divpng ))
+				self.statuslist.append(( _("Nothing to upgrade"), '', _("There are no updates available." ), '', statuspng, divpng ))
 
 			self['list'].setList(self.statuslist)
 
@@ -228,7 +229,7 @@
 				try:
 					self.list.append(self.buildEntryComponent(x[0], x[1], x[2], "upgradeable"))
 				except:
-					print "[SOFTWAREPANEL] " + x[0] + " no valid architecture, ignoring !!"
+					print("[SOFTWAREPANEL] " + x[0] + " no valid architecture, ignoring !!")
 #					self.list.append(self.buildEntryComponent(x[0], '', 'no valid architecture, ignoring !!', "installable"))
 #			if len(excludeList) > 0:
 #				for x in excludeList:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/SwapManager.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/SwapManager.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/SwapManager.py	2020-06-21 10:16:12.679433652 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/SwapManager.py	2020-06-21 10:20:02.331322106 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
 from Screens.ChoiceBox import ChoiceBox
@@ -12,6 +13,7 @@
 from enigma import eTimer
 from glob import glob
 import stat
+import six
 
 config.plugins.infopanel = ConfigSubsection()
 config.plugins.infopanel.swapautostart = ConfigYesNo(default = False)
@@ -22,7 +24,7 @@
 	global startswap
 	if reason == 0:
 		if config.plugins.infopanel.swapautostart.value:
-			print "[SwapManager] autostart"
+			print("[SwapManager] autostart")
 			startswap = StartSwap()
 			startswap.start()
 	
@@ -34,15 +36,17 @@
 	 	self.Console.ePopen("sfdisk -l /dev/sd? 2>/dev/null | grep swap", self.startSwap2)
 
 	def startSwap2(self, result = None, retval = None, extra_args = None):
+		if result != None:
+			result = six.ensure_str(result)
 		swap_place = ""
 		if result and result.find('sd') != -1:
 			for line in result.split('\n'):
 				if line.find('sd') != -1:
 					parts = line.strip().split()
 					swap_place = parts[0]
-					file('/etc/fstab.tmp', 'w').writelines([l for l in file('/etc/fstab').readlines() if swap_place not in l])
-					rename('/etc/fstab.tmp','/etc/fstab')
-					print "[SwapManager] Found a swap partition:", swap_place
+					open('/etc/fstab.tmp', 'w').writelines([l for l in file('/etc/fstab').readlines() if swap_place not in l])
+					rename('/etc/fstab.tmp', '/etc/fstab')
+					print("[SwapManager] Found a swap partition:", swap_place)
 		else:
 			devicelist = []
 			for p in harddiskmanager.getMountedPartitions():
@@ -54,14 +58,14 @@
 					for filename in glob(device[1] + '/swap*'):
 						if path.exists(filename):
 							swap_place = filename
-							print "[SwapManager] Found a swapfile on ", swap_place
+							print("[SwapManager] Found a swapfile on ", swap_place)
 
-		f = file('/proc/swaps').read()
+		f = open('/proc/swaps').read()
 		if f.find(swap_place) == -1:
-			print "[SwapManager] Starting swapfile on ", swap_place
+			print("[SwapManager] Starting swapfile on ", swap_place)
 			system('swapon ' + swap_place)
 		else:
-			print "[SwapManager] Swapfile is already active on ", swap_place
+			print("[SwapManager] Swapfile is already active on ", swap_place)
 	
 #######################################################################
 class Swap(Screen):
@@ -136,6 +140,8 @@
 		self.Console.ePopen("sfdisk -l /dev/sd? 2>/dev/null | grep swap", self.updateSwap2)
 
 	def updateSwap2(self, result = None, retval = None, extra_args = None):
+		if result != None:
+			result = six.ensure_str(result)
 		self.swapsize = 0
 		self.swap_place = ''
 		self.swap_active = False
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Infopanel/plugin.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Infopanel/plugin.py	2020-06-21 10:20:02.331322106 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Plugins.Plugin import PluginDescriptor
 from Screens.PluginBrowser import *
 from Screens.Ipkg import Ipkg
@@ -74,9 +75,9 @@
 
 
 if Check_Softcam():
-	redSelection = [('0',_("Default (Instant Record)")), ('1',_("Infopanel")),('2',_("Timer List")),('3',_("Show Movies")), ('4',_("SoftcamSetup"))]
+	redSelection = [('0', _("Default (Instant Record)")), ('1', _("Infopanel")), ('2', _("Timer List")), ('3', _("Show Movies")), ('4', _("SoftcamSetup"))]
 else:
-	redSelection = [('0',_("Default (Instant Record)")), ('1',_("Infopanel")),('2',_("Timer List")),('3',_("Show Movies"))]
+	redSelection = [('0', _("Default (Instant Record)")), ('1', _("Infopanel")), ('2', _("Timer List")), ('3', _("Show Movies"))]
 
 def timerEvent():
 	pluginlist = plugins.getPlugins(PluginDescriptor.WHERE_PLUGINMENU)
@@ -92,7 +93,7 @@
 timer.timeout.get().append(timerEvent)
 timer.startLongTimer(1)
 
-choicelist = [('0',_("Audio Selection")),('1',_("Default (Timeshift)")), ('2',_("Toggle Pillarbox <> Pan&Scan")),('3',_("Teletext"))]
+choicelist = [('0', _("Audio Selection")), ('1', _("Default (Timeshift)")), ('2', _("Toggle Pillarbox <> Pan&Scan")), ('3', _("Teletext"))]
 config.plugins.infopanel_yellowkey = ConfigSubsection()
 if getBoxType() == "dm800":
 	config.plugins.infopanel_yellowkey.list = ConfigSelection(default='1', choices = choicelist)
@@ -102,7 +103,7 @@
 	config.plugins.infopanel_yellowkey.listLong = ConfigSelection(default='0', choices = choicelist)
 config.plugins.showinfopanelextensions = ConfigYesNo(default=False)
 config.plugins.infopanel_frozencheck = ConfigSubsection()
-config.plugins.infopanel_frozencheck.list = ConfigSelection([('0',_("Off")),('1',_("1 min.")), ('5',_("5 min.")),('10',_("10 min.")),('15',_("15 min.")),('30',_("30 min."))])
+config.plugins.infopanel_frozencheck.list = ConfigSelection([('0', _("Off")), ('1', _("1 min.")), ('5', _("5 min.")), ('10', _("10 min.")), ('15', _("15 min.")), ('30', _("30 min."))])
 	
 if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/MultiQuickButton/plugin.pyo") is True:
 	try:
@@ -137,7 +138,7 @@
 		setDefaultKeymap()
 		
 def setDefaultKeymap():
-	print "[Info-Panel] Set Keymap to Default"
+	print("[Info-Panel] Set Keymap to Default")
 	config.usage.keymap.value = eEnv.resolve("${datadir}/enigma2/keymap.xml")
 	config.save()
 
@@ -168,10 +169,10 @@
 OEMname = getBrandOEM()
 
 INFO_Panel_Version = 'Info-Panel V1.2'
-print "[Info-Panel] machinebrand: %s"  % (machinebrand)
-print "[Info-Panel] machinename: %s"  % (machinename)
-print "[Info-Panel] oem name: %s"  % (OEMname)
-print "[Info-Panel] boxtype: %s"  % (boxversion)
+print("[Info-Panel] machinebrand: %s"  % (machinebrand))
+print("[Info-Panel] machinename: %s"  % (machinename))
+print("[Info-Panel] oem name: %s"  % (OEMname))
+print("[Info-Panel] boxtype: %s"  % (boxversion))
 panel = open("/tmp/infopanel.ver", "w")
 panel.write(INFO_Panel_Version + '\n')
 panel.write("Machinebrand: %s " % (machinebrand)+ '\n')
@@ -189,7 +190,7 @@
 
 class ConfigPORT(ConfigSequence):
 	def __init__(self, default):
-		ConfigSequence.__init__(self, seperator = ".", limits = [(1,65535)], default = default)
+		ConfigSequence.__init__(self, seperator = ".", limits = [(1, 65535)], default = default)
 
 def main(session, **kwargs):
 		session.open(Infopanel)
@@ -206,7 +207,7 @@
 	#// show Infopanel in Main Menu
 	PluginDescriptor(name=_("Info Panel"), description="Info panel GUI 27/12/2013", where = PluginDescriptor.WHERE_MENU, fnc = Apanel),
 	#// SwapAutostart
-	PluginDescriptor(where = [PluginDescriptor.WHERE_SESSIONSTART,PluginDescriptor.WHERE_AUTOSTART],fnc = SwapAutostart),
+	PluginDescriptor(where = [PluginDescriptor.WHERE_SESSIONSTART, PluginDescriptor.WHERE_AUTOSTART], fnc = SwapAutostart),
 	#// show Infopanel in EXTENSIONS Menu
 	PluginDescriptor(name=_("Info Panel"), description="Info panel GUI 27/12/2013", where = PluginDescriptor.WHERE_EXTENSIONSMENU, fnc = main) ]
 
@@ -291,11 +292,11 @@
 		INFOCONF = 0
 		pluginlist="False"
 		try:
-			print '[INFO-Panel] SHOW'
+			print('[INFO-Panel] SHOW')
 			global inINFOPanel
 			inINFOPanel = self
 		except:
-			print '[INFO-Panel] Error Hide'
+			print('[INFO-Panel] Error Hide')
 #		global servicelist
 		if services is not None:
 			self.servicelist = services
@@ -306,8 +307,8 @@
 		self["actions"] = ActionMap(["OkCancelActions", "DirectionActions", "ColorActions"],
 			{
 				"cancel": self.Exit,
-				"upUp": self.up,
-				"downUp": self.down,
+				"up": self.up,
+				"down": self.down,
 				"ok": self.ok,
 			}, 1)
 		
@@ -317,9 +318,9 @@
 		self.Mlist = []
 		if Check_Softcam():
 			self.Mlist.append(MenuEntryItem((InfoEntryComponent('SoftcamSetup'), _("Softcam-Setup"), 'SoftcamSetup')))
-		if Check_SysSoftcam() is "oscam":
+		if Check_SysSoftcam() == "oscam":
 			self.Mlist.append(MenuEntryItem((InfoEntryComponent('OScamInfo'), _("OScamInfo"), 'OScamInfo')))
-		if Check_SysSoftcam() is "ncam":
+		if Check_SysSoftcam() == "ncam":
 			self.Mlist.append(MenuEntryItem((InfoEntryComponent('OScamInfo'), _("NcamInfo"), 'OScamInfo')))
 		#self.Mlist.append(MenuEntryItem((InfoEntryComponent ("SoftwareManager" ), _("Software update"), ("software-update"))))
 		self.Mlist.append(MenuEntryItem((InfoEntryComponent ("SoftwareManager" ), _("Software Manager"), ("software-manager"))))
@@ -356,12 +357,10 @@
 		self.selectionChanged()
 
 	def up(self):
-		#self["Mlist"].up()
-		pass
+		self["Mlist"].up()
 
 	def down(self):
-		#self["Mlist"].down()
-		pass
+		self["Mlist"].down()
 
 	def left(self):
 		pass
@@ -393,11 +392,11 @@
 				self.service = self.session.nav.getCurrentlyPlayingServiceReference()
 				service = self.service.toCompareString()
 				servicename = ServiceReference.ServiceReference(service).getServiceName().replace('\xc2\x87', '').replace('\xc2\x86', '').ljust(16)
-				print '[INFO-Panel] HIDE'
+				print('[INFO-Panel] HIDE')
 				global inINFOPanel
 				inINFOPanel = None
 			except:
-				print '[INFO-Panel] Error Hide'
+				print('[INFO-Panel] Error Hide')
 			self.close()
 		elif menu == 1:
 			self["Mlist"].moveToIndex(0)
@@ -417,7 +416,7 @@
 #		menu = self["Mlist"].getCurrent()
 		global INFOCONF
 		menu = self['Mlist'].l.getCurrentSelection()[0][2]
-		print '[INFO-Panel] MenuItem: ' + menu
+		print('[INFO-Panel] MenuItem: ' + menu)
 		if menu == "Plugins":
 			self.Plugins()
 		elif menu == "Pluginbrowser":
@@ -470,7 +469,7 @@
 		elif menu == "software-update":
 			self.session.open(SoftwarePanel)
 		elif menu == "backup-settings":
-			self.session.openWithCallback(self.backupDone,BackupScreen, runBackup = True)
+			self.session.openWithCallback(self.backupDone, BackupScreen, runBackup = True)
 		elif menu == "restore-settings":
 			self.backuppath = getBackupPath()
 			self.backupfile = getBackupFilename()
@@ -480,11 +479,11 @@
 			else:
 				self.session.open(MessageBox, _("Sorry no backups found!"), MessageBox.TYPE_INFO, timeout = 10)
 		elif menu == "backup-files":
-			self.session.open(BackupSelection,title=_("Default files/folders to backup"),configBackupDirs=config.plugins.configurationbackup.backupdirs_default,readOnly=True)
+			self.session.open(BackupSelection, title=_("Default files/folders to backup"), configBackupDirs=config.plugins.configurationbackup.backupdirs_default, readOnly=True)
 		elif menu == "backup-files-additional":
-			self.session.open(BackupSelection,title=_("Additional files/folders to backup"),configBackupDirs=config.plugins.configurationbackup.backupdirs,readOnly=False)
+			self.session.open(BackupSelection, title=_("Additional files/folders to backup"), configBackupDirs=config.plugins.configurationbackup.backupdirs, readOnly=False)
 		elif menu == "backup-files-excluded":
-			self.session.open(BackupSelection,title=_("Files/folders to exclude from backup"),configBackupDirs=config.plugins.configurationbackup.backupdirs_exclude,readOnly=False)
+			self.session.open(BackupSelection, title=_("Files/folders to exclude from backup"), configBackupDirs=config.plugins.configurationbackup.backupdirs_exclude, readOnly=False)
 		elif menu == "MultiQuickButton":
 			self.session.open(MultiQuickButton)
 		elif menu == "MountManager":
@@ -611,13 +610,13 @@
 		ntrkey = eEnv.resolve("${datadir}/enigma2/keymap.ntr")
 		u80key = eEnv.resolve("${datadir}/enigma2/keymap.u80")
 		self.actkeymap = self.getKeymap(config.usage.keymap.value)
-		keySel = [ ('keymap.xml',_("Default  (keymap.xml)"))]
+		keySel = [ ('keymap.xml', _("Default  (keymap.xml)"))]
 		if os.path.isfile(usrkey):
-			keySel.append(('keymap.usr',_("User  (keymap.usr)")))
+			keySel.append(('keymap.usr', _("User  (keymap.usr)")))
 		if os.path.isfile(ntrkey):
-			keySel.append(('keymap.ntr',_("Neutrino  (keymap.ntr)")))
+			keySel.append(('keymap.ntr', _("Neutrino  (keymap.ntr)")))
 		if os.path.isfile(u80key):
-			keySel.append(('keymap.u80',_("UP80  (keymap.u80)")))
+			keySel.append(('keymap.u80', _("UP80  (keymap.u80)")))
 		if self.actkeymap == usrkey and not os.path.isfile(usrkey):
 			setDefaultKeymap()
 		if self.actkeymap == ntrkey and not os.path.isfile(ntrkey):
@@ -783,7 +782,7 @@
 			info1 = self.Do_cmd("cat", "/etc/motd", None)
 			if info1.find('wElc0me') > -1:
 				info1 = info1[info1.find('wElc0me'):len(info1)] + "\n"
-				info1 = info1.replace('|','')
+				info1 = info1.replace('|', '')
 			else:
 				info1 = info1[info1.find('INFO'):len(info1)] + "\n"
 			info2 = self.Do_cmd("cat", "/etc/image-version", None)
@@ -853,7 +852,7 @@
 			info0 = self.Do_cmd("cat", "/proc/version", None)
 			info = info0.split('(')
 			info1 = "Name = " + info[0] + "\n"
-			info2 =  "Owner = " + info[1].replace(')','') + "\n"
+			info2 =  "Owner = " + info[1].replace(')', '') + "\n"
 			info3 =  "Mainimage = " + info[2][0:info[2].find(')')] + "\n"
 			info4 = "Date = " + info[3][info[3].find('SMP')+4:len(info[3])]
 			info5 = self.Do_cut(info1 + info2 + info3 + info4)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/MediaPlayer/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/MediaPlayer/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/MediaPlayer/plugin.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/MediaPlayer/plugin.py	2020-06-21 10:20:02.331322106 -0400
@@ -1,3 +1,5 @@
+from __future__ import print_function
+from __future__ import absolute_import
 import os
 import time
 import random
@@ -15,7 +17,7 @@
 from Screens.InfoBarGenerics import InfoBarSeek, InfoBarScreenSaver, InfoBarAudioSelection, InfoBarAspectSelection, InfoBarCueSheetSupport, InfoBarNotifications, InfoBarSubtitleSupport, InfoBarResolutionSelection
 from Components.ActionMap import NumberActionMap, HelpableActionMap
 from Components.Label import Label
-from Components.Pixmap import Pixmap,MultiPixmap
+from Components.Pixmap import Pixmap, MultiPixmap
 from Components.FileList import FileList
 from Components.MediaPlayer import PlayList
 from Components.MovieList import AUDIO_EXTENSIONS
@@ -27,7 +29,7 @@
 from Components.config import config
 from Tools.Directories import fileExists, resolveFilename, SCOPE_CONFIG, SCOPE_PLAYLIST, SCOPE_ACTIVE_SKIN
 from Tools.BoundFunction import boundFunction
-from settings import MediaPlayerSettings, Load_defaults
+from .settings import MediaPlayerSettings, Load_defaults
 
 
 class MyPlayList(PlayList):
@@ -90,7 +92,7 @@
 		self.instance.setPixmap(self.noCoverPixmap)
 
 	def embeddedCoverArt(self):
-		print "[embeddedCoverArt] found"
+		print("[embeddedCoverArt] found")
 		self.coverArtFileName = "/tmp/.id3coverart"
 		self.picload.startDecode(self.coverArtFileName)
 
@@ -163,8 +165,8 @@
 		try:
 			from Plugins.SystemPlugins.Hotplug.plugin import hotplugNotifier
 			hotplugNotifier.append(self.hotplugCB)
-		except Exception, ex:
-			print "[MediaPlayer] No hotplug support", ex
+		except Exception as ex:
+			print("[MediaPlayer] No hotplug support", ex)
 
 		class MoviePlayerActionMap(NumberActionMap):
 			def __init__(self, player, contexts=None, actions=None, prio=0):
@@ -301,7 +303,7 @@
 				try:
 					self.playlistIOInternal.save(resolveFilename(SCOPE_CONFIG, "playlist.e2pls"))
 				except IOError:
-					print "couldn't save playlist.e2pls"
+					print("couldn't save playlist.e2pls")
 			if config.mediaplayer.saveDirOnExit.value:
 				config.mediaplayer.defaultDir.setValue(self.filelist.getCurrentDirectory())
 				config.mediaplayer.defaultDir.save()
@@ -337,26 +339,26 @@
 		sTagTrackCount = currPlay.info().getInfo(iServiceInformation.sTagTrackCount)
 		sTagTitle = currPlay.info().getInfoString(iServiceInformation.sTagTitle)
 		if sTagTrackNumber or sTagTrackCount or sTagTitle:
-			print "[__evUpdatedInfo] title %d of %d (%s)" % (sTagTrackNumber, sTagTrackCount, sTagTitle)
+			print("[__evUpdatedInfo] title %d of %d (%s)" % (sTagTrackNumber, sTagTrackCount, sTagTitle))
 		self.readTitleInformation()
 
 	def __evAudioDecodeError(self):
 		currPlay = self.session.nav.getCurrentService()
 		sTagAudioCodec = currPlay.info().getInfoString(iServiceInformation.sTagAudioCodec)
-		print "[__evAudioDecodeError] audio-codec %s can't be decoded by hardware" % sTagAudioCodec
-		self.session.open(MessageBox, _("This %s %s cannot decode %s streams!") % (getMachineBrand(), getMachineName(), sTagAudioCodec), type = MessageBox.TYPE_INFO,timeout = 20 )
+		print("[__evAudioDecodeError] audio-codec %s can't be decoded by hardware" % sTagAudioCodec)
+		self.session.open(MessageBox, _("This %s %s cannot decode %s streams!") % (getMachineBrand(), getMachineName(), sTagAudioCodec), type = MessageBox.TYPE_INFO, timeout = 20 )
 
 	def __evVideoDecodeError(self):
 		currPlay = self.session.nav.getCurrentService()
 		sTagVideoCodec = currPlay.info().getInfoString(iServiceInformation.sTagVideoCodec)
-		print "[__evVideoDecodeError] video-codec %s can't be decoded by hardware" % sTagVideoCodec
-		self.session.open(MessageBox, _("This %s %s cannot decode %s streams!") % (getMachineBrand(), getMachineName(), sTagVideoCodec), type = MessageBox.TYPE_INFO,timeout = 20 )
+		print("[__evVideoDecodeError] video-codec %s can't be decoded by hardware" % sTagVideoCodec)
+		self.session.open(MessageBox, _("This %s %s cannot decode %s streams!") % (getMachineBrand(), getMachineName(), sTagVideoCodec), type = MessageBox.TYPE_INFO, timeout = 20 )
 
 	def __evPluginError(self):
 		currPlay = self.session.nav.getCurrentService()
 		message = currPlay.info().getInfoString(iServiceInformation.sUser+12)
-		print "[__evPluginError]" , message
-		self.session.open(MessageBox, message, type = MessageBox.TYPE_INFO,timeout = 20 )
+		print("[__evPluginError]", message)
+		self.session.open(MessageBox, message, type = MessageBox.TYPE_INFO, timeout = 20 )
 
 	def __embeddedCoverArt(self):
 		self.embeddedCoverArtTimer = eTimer()
@@ -424,14 +426,14 @@
 				self[name].setText(info)
 				if info != "":
 					if name == "artist":
-						self.summaries.setText(info,1)
+						self.summaries.setText(info, 1)
 					elif name == "title":
 						idx = self.playlist.getCurrentIndex()
 						currref = self.playlist.getServiceRefList()[idx]
 						if info != self.getIdentifier(currref):
-							self.summaries.setText(info,3)
+							self.summaries.setText(info, 3)
 					elif name == "album":
-						self.summaries.setText(info,4)
+						self.summaries.setText(info, 4)
 
 	def leftDown(self):
 		if self.hiding:
@@ -541,7 +543,7 @@
 					text += " "
 				if text[:2] != "..":
 					text = "/" + text
-			self.summaries.setText(text,1)
+			self.summaries.setText(text, 1)
 
 			idx += 1
 			if idx < len(self.filelist.list):
@@ -549,9 +551,9 @@
 				text = r[1][7]
 				if r[0][1]:
 					text = "/" + text
-				self.summaries.setText(text,3)
+				self.summaries.setText(text, 3)
 			else:
-				self.summaries.setText(" ",3)
+				self.summaries.setText(" ", 3)
 
 			idx += 1
 			if idx < len(self.filelist.list):
@@ -559,9 +561,9 @@
 				text = r[1][7]
 				if r[0][1]:
 					text = "/" + text
-				self.summaries.setText(text,4)
+				self.summaries.setText(text, 4)
 			else:
-				self.summaries.setText(" ",4)
+				self.summaries.setText(" ", 4)
 
 			text = ""
 			if not self.filelist.canDescent():
@@ -577,24 +579,24 @@
 				return
 			#display current selected entry on LCD
 			text = self.getIdentifier(t)
-			self.summaries.setText(text,1)
+			self.summaries.setText(text, 1)
 			self["currenttext"].setText(text)
 			idx = self.playlist.getSelectionIndex()
 			idx += 1
 			if idx < len(self.playlist):
 				currref = self.playlist.getServiceRefList()[idx]
 				text = self.getIdentifier(currref)
-				self.summaries.setText(text,3)
+				self.summaries.setText(text, 3)
 			else:
-				self.summaries.setText(" ",3)
+				self.summaries.setText(" ", 3)
 
 			idx += 1
 			if idx < len(self.playlist):
 				currref = self.playlist.getServiceRefList()[idx]
 				text = self.getIdentifier(currref)
-				self.summaries.setText(text,4)
+				self.summaries.setText(text, 4)
 			else:
-				self.summaries.setText(" ",4)
+				self.summaries.setText(" ", 4)
 
 	def ok(self):
 		if self.currList == "filelist":
@@ -624,7 +626,7 @@
 	def showMenu(self):
 		menulist = []
 		if len(self.cdAudioTrackFiles):
-			menulist.insert(0,(_("Play audio-CD..."), "audiocd"))
+			menulist.insert(0, (_("Play audio-CD..."), "audiocd"))
 		if self.currList == "filelist":
 			if self.filelist.canDescent():
 				menulist.append((_("Add directory to playlist"), "copydir"))
@@ -742,7 +744,7 @@
 		self.updateCurrentInfo()
 
 	def save_playlist(self):
-		self.session.openWithCallback(self.save_playlist2,InputBox, title=_("Please enter filename (empty = use current date)"),windowTitle = _("Save playlist"), text=self.playlistname)
+		self.session.openWithCallback(self.save_playlist2, InputBox, title=_("Please enter filename (empty = use current date)"), windowTitle = _("Save playlist"), text=self.playlistname)
 
 	def save_playlist2(self, name):
 		if name is not None:
@@ -761,19 +763,19 @@
 		playlistdir = resolveFilename(SCOPE_PLAYLIST)
 		try:
 			for i in os.listdir(playlistdir):
-				listpath.append((i,playlistdir + i))
-		except IOError,e:
-			print "Error while scanning subdirs ",e
+				listpath.append((i, playlistdir + i))
+		except IOError as e:
+			print("Error while scanning subdirs ", e)
 		if config.mediaplayer.sortPlaylists.value:
 			listpath.sort()
 		self.session.openWithCallback(self.PlaylistSelected, ChoiceBox, title=_("Please select a playlist..."), list = listpath)
 
-	def PlaylistSelected(self,path):
+	def PlaylistSelected(self, path):
 		if path is not None:
-			self.playlistname = path[0].rsplit('.',1)[-2]
+			self.playlistname = path[0].rsplit('.', 1)[-2]
 			self.clear_playlist()
-			extension = path[0].rsplit('.',1)[-1]
-			if self.playlistparsers.has_key(extension):
+			extension = path[0].rsplit('.', 1)[-1]
+			if extension in self.playlistparsers:
 				playlist = self.playlistparsers[extension]()
 				list = playlist.open(path[1])
 				for x in list:
@@ -785,14 +787,14 @@
 		playlistdir = resolveFilename(SCOPE_PLAYLIST)
 		try:
 			for i in os.listdir(playlistdir):
-				listpath.append((i,playlistdir + i))
-		except IOError,e:
-			print "Error while scanning subdirs ",e
+				listpath.append((i, playlistdir + i))
+		except IOError as e:
+			print("Error while scanning subdirs ", e)
 		if config.mediaplayer.sortPlaylists.value:
 			listpath.sort()
 		self.session.openWithCallback(self.DeletePlaylistSelected, ChoiceBox, title=_("Please select a playlist to delete..."), list = listpath)
 
-	def DeletePlaylistSelected(self,path):
+	def DeletePlaylistSelected(self, path):
 		if path is not None:
 			self.delname = path[1]
 			self.session.openWithCallback(self.deleteConfirmed, MessageBox, _("Do you really want to delete %s?") % (path[1]))
@@ -801,8 +803,8 @@
 		if confirmed:
 			try:
 				os.remove(self.delname)
-			except OSError,e:
-				print "delete failed:", e
+			except OSError as e:
+				print("delete failed:", e)
 				self.session.open(MessageBox, _("Delete failed!"), MessageBox.TYPE_ERROR)
 
 	def clear_playlist(self):
@@ -812,9 +814,9 @@
 		self.switchToFileList()
 
 	def copyDirectory(self, directory, recursive = True):
-		print "copyDirectory", directory
+		print("copyDirectory", directory)
 		if directory == '/':
-			print "refusing to operate on /"
+			print("refusing to operate on /")
 			return
 		filelist = FileList(directory, useServiceRef = True, showMountpoints = False, isTop = True)
 
@@ -897,7 +899,7 @@
 		if self.filelist.getServiceRef().type == 4098: # playlist
 			ServiceRef = self.filelist.getServiceRef()
 			extension = ServiceRef.getPath()[ServiceRef.getPath().rfind('.') + 1:]
-			if self.playlistparsers.has_key(extension):
+			if extension in self.playlistparsers:
 				playlist = self.playlistparsers[extension]()
 				list = playlist.open(ServiceRef.getPath())
 				for x in list:
@@ -960,7 +962,7 @@
 
 	def playServiceRefEntry(self, serviceref):
 		serviceRefList = self.playlist.getServiceRefList()
-		for count in range(len(serviceRefList)):
+		for count in list(range(len(serviceRefList))):
 			if serviceRefList[count] == serviceref:
 				self.changeEntry(count)
 				break
@@ -1003,24 +1005,24 @@
 					self.hideAndInfoBar()
 				else:
 					needsInfoUpdate = True
-				self.summaries.setText(text,1)
+				self.summaries.setText(text, 1)
 
 				# get the next two entries
 				idx += 1
 				if idx < len(self.playlist):
 					currref = self.playlist.getServiceRefList()[idx]
 					text = self.getIdentifier(currref)
-					self.summaries.setText(text,3)
+					self.summaries.setText(text, 3)
 				else:
-					self.summaries.setText(" ",3)
+					self.summaries.setText(" ", 3)
 
 				idx += 1
 				if idx < len(self.playlist):
 					currref = self.playlist.getServiceRefList()[idx]
 					text = self.getIdentifier(currref)
-					self.summaries.setText(text,4)
+					self.summaries.setText(text, 4)
 				else:
-					self.summaries.setText(" ",4)
+					self.summaries.setText(" ", 4)
 			else:
 				idx = self.playlist.getCurrentIndex()
 				currref = self.playlist.getServiceRefList()[idx]
@@ -1230,8 +1232,8 @@
 def audiocdscan(menuid, **kwargs):
 	try:
 		from Plugins.SystemPlugins.Hotplug.plugin import AudiocdAdded
-	except Exception, e:
-		print "[Mediaplayer.plugin] no hotplug support",e
+	except Exception as e:
+		print("[Mediaplayer.plugin] no hotplug support", e)
 		return []
 	if menuid == "mainmenu" and AudiocdAdded() and os.path.isfile('/media/audiocd/cdplaylist.cdpls'):
 		return [(_("Play audio-CD..."), audioCD_open_mn, "play_cd", 45)]
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/MediaPlayer/settings.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/MediaPlayer/settings.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/MediaPlayer/settings.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/MediaPlayer/settings.py	2020-06-21 10:20:02.331322106 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Screens.HelpMenu import HelpableScreen
 from Components.FileList import FileList
@@ -66,7 +67,7 @@
 	def exit(self):
 		self.close(False)
 
-class MediaPlayerSettings(Screen,ConfigListScreen):
+class MediaPlayerSettings(Screen, ConfigListScreen):
 
 	def __init__(self, session, parent):
 		Screen.__init__(self, session)
@@ -99,7 +100,7 @@
 		self.setTitle(self.setup_title)
 
 	def initConfigList(self, element=None):
-		print "[initConfigList]", element
+		print("[initConfigList]", element)
 		try:
 			self.list = []
 			self.list.append(getConfigListEntry(_("repeat playlist"), config.mediaplayer.repeat))
@@ -112,7 +113,7 @@
 			self.list.append(getConfigListEntry(_("show mediaplayer on mainmenu"), config.mediaplayer.onMainMenu))
 			self["config"].setList(self.list)
 		except KeyError:
-			print "keyError"
+			print("keyError")
 
 	def changedConfigList(self):
 		self.initConfigList()
@@ -122,7 +123,7 @@
 			self.session.openWithCallback(self.DirectoryBrowserClosed, DirectoryBrowser, self.parent.filelist.getCurrentDirectory())
 
 	def DirectoryBrowserClosed(self, path):
-		print "PathBrowserClosed:" + str(path)
+		print("PathBrowserClosed:" + str(path))
 		if path:
 			config.mediaplayer.defaultDir.setValue(path)
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/PicturePlayer/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/PicturePlayer/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/PicturePlayer/plugin.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/PicturePlayer/plugin.py	2020-06-21 10:20:02.331322106 -0400
@@ -1,24 +1,25 @@
+from __future__ import absolute_import
 from Plugins.Plugin import PluginDescriptor
 from enigma import getDesktop
 
 #------------------------------------------------------------------------------------------
 
 def Pic_Thumb(*args, **kwa):
-	import ui
+	from . import ui
 	return ui.Pic_Thumb(*args, **kwa)
 
 def picshow(*args, **kwa):
-	import ui
+	from . import ui
 	return ui.picshow(*args, **kwa)
 
 def main(session, **kwargs):
-	from ui import picshow
+	from .ui import picshow
 	session.open(picshow)
 
 def filescan_open(list, session, **kwargs):
 	# Recreate List as expected by PicView
 	filelist = [((file.path, False), None) for file in list]
-	from ui import Pic_Full_View
+	from .ui import Pic_Full_View
 	session.open(Pic_Full_View, filelist, 0, file.path)
 
 def filescan(**kwargs):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/PicturePlayer/ui.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/PicturePlayer/ui.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/PicturePlayer/ui.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/PicturePlayer/ui.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from boxbranding import getMachineBrand
 
 from enigma import ePicLoad, eTimer, getDesktop, gMainDC, eSize
@@ -26,8 +27,8 @@
 config.pic.lastDir = ConfigText(default=resolveFilename(SCOPE_MEDIA))
 config.pic.infoline = ConfigYesNo(default=True)
 config.pic.loop = ConfigYesNo(default=True)
-config.pic.bgcolor = ConfigSelection(default="#00000000", choices = [("#00000000", _("black")),("#009eb9ff", _("blue")),("#00ff5a51", _("red")), ("#00ffe875", _("yellow")), ("#0038FF48", _("green"))])
-config.pic.textcolor = ConfigSelection(default="#0038FF48", choices = [("#00000000", _("black")),("#009eb9ff", _("blue")),("#00ff5a51", _("red")), ("#00ffe875", _("yellow")), ("#0038FF48", _("green"))])
+config.pic.bgcolor = ConfigSelection(default="#00000000", choices = [("#00000000", _("black")), ("#009eb9ff", _("blue")), ("#00ff5a51", _("red")), ("#00ffe875", _("yellow")), ("#0038FF48", _("green"))])
+config.pic.textcolor = ConfigSelection(default="#0038FF48", choices = [("#00000000", _("black")), ("#009eb9ff", _("blue")), ("#00ff5a51", _("red")), ("#00ffe875", _("yellow")), ("#0038FF48", _("green"))])
 
 class picshow(Screen):
 	skin = """
@@ -84,7 +85,7 @@
 			self["thn"].instance.setPixmap(ptr.__deref__())
 			self["thn"].show()
 
-		text = picInfo.split('\n',1)
+		text = picInfo.split('\n', 1)
 		self["label"].setText(text[1])
 		self["key_yellow"].setText(_("Exif"))
 
@@ -111,7 +112,7 @@
 			self.session.open(Pic_Exif, self.picload.getInfo(self.filelist.getCurrentDirectory() + self.filelist.getFilename()))
 
 	def KeyMenu(self):
-		self.session.openWithCallback(self.setConf ,Pic_Setup)
+		self.session.openWithCallback(self.setConf, Pic_Setup)
 
 	def KeyOk(self):
 		if self.filelist.canDescent():
@@ -242,7 +243,7 @@
 		exifdesc = [_("filename")+':', "EXIF-Version:", "Make:", "Camera:", "Date/Time:", "Width / Height:", "Flash used:", "Orientation:", "User Comments:", "Metering Mode:", "Exposure Program:", "Light Source:", "CompressedBitsPerPixel:", "ISO Speed Rating:", "X-Resolution:", "Y-Resolution:", "Resolution Unit:", "Brightness:", "Exposure Time:", "Exposure Bias:", "Distance:", "CCD-Width:", "ApertureFNumber:"]
 		list = []
 
-		for x in range(len(exiflist)):
+		for x in list(range(len(exiflist))):
 			if x>0:
 				list.append((exifdesc[x], exiflist[x]))
 			else:
@@ -267,7 +268,7 @@
 
 		self.textcolor = config.pic.textcolor.value
 		self.color = config.pic.bgcolor.value
-		self.spaceX, self.picX, self.spaceY, self.picY, textsize, thumtxt  = skin.parameters.get("PicturePlayerThumb",(35, 190, 30, 200, 20, 14))
+		self.spaceX, self.picX, self.spaceY, self.picY, textsize, thumtxt  = skin.parameters.get("PicturePlayerThumb", (35, 190, 30, 200, 20, 14))
 
 		pic_frame = resolveFilename(SCOPE_ACTIVE_SKIN, "icons/pic_frame.png")
 
@@ -281,7 +282,7 @@
 		skincontent = ""
 
 		posX = -1
-		for x in range(self.thumbsC):
+		for x in list(range(self.thumbsC)):
 			posY = x / self.thumbsX
 			posX += 1
 			if posX >= self.thumbsX:
@@ -314,7 +315,7 @@
 		}, -1)
 
 		self["frame"] = MovingPixmap()
-		for x in range(self.thumbsC):
+		for x in list(range(self.thumbsC)):
 			self["label"+str(x)] = StaticText()
 			self["thumb"+str(x)] = Pixmap()
 
@@ -372,7 +373,7 @@
 	def newPage(self):
 		self.Thumbnaillist = []
 		#clear Labels and Thumbnail
-		for x in range(self.thumbsC):
+		for x in list(range(self.thumbsC)):
 			self["label"+str(x)].setText("")
 			self["thumb"+str(x)].hide()
 		#paint Labels and fill Thumbnail-List
@@ -385,7 +386,7 @@
 		self.showPic()
 
 	def showPic(self, picInfo=""):
-		for x in range(len(self.Thumbnaillist)):
+		for x in list(range(len(self.Thumbnaillist))):
 			if self.Thumbnaillist[x][0] == 0:
 				if self.picload.getThumbnail(self.Thumbnaillist[x][2]) == 1: #zu tun probier noch mal
 					self.ThumbTimer.start(500, True)
@@ -548,7 +549,7 @@
 		if ptr is not None:
 			text = ""
 			try:
-				text = picInfo.split('\n',1)
+				text = picInfo.split('\n', 1)
 				text = "(" + str(self.index+1) + "/" + str(self.maxentry+1) + ") " + text[0].split('/')[-1]
 			except:
 				pass
@@ -573,7 +574,7 @@
 			self.index = self.maxentry
 
 	def slidePic(self):
-		print "slide to next Picture index=" + str(self.lastindex)
+		print("slide to next Picture index=" + str(self.lastindex))
 		if config.pic.loop.value == False and self.lastindex == self.maxentry:
 			self.PlayPause()
 		self.shownow = True
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/ProgrammlistenUpdater/downloader.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/ProgrammlistenUpdater/downloader.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/ProgrammlistenUpdater/downloader.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/ProgrammlistenUpdater/downloader.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,26 +1,30 @@
-import re, os, urllib2, sys
+from __future__ import print_function
+import re, os, sys
+from six.moves.urllib.request import urlopen
+from six.moves.urllib.request import Request
+import six
 
 
 def DownloadSetting(url):
-    list = []
+    _list = []
     try:
-        req = urllib2.Request(url)
+        req = Request(url)
         req.add_header('User-Agent', 'VAS')
-        response = urllib2.urlopen(req)
-        link = response.read()
+        response = urlopen(req)
+        link = six.ensure_str(response.read())
         response.close()
         xx = re.compile('<td><a href="(.+?)">(.+?)</a></td>.*?<td>(.+?)</td>', re.DOTALL).findall(link)
         for link, name, date in xx:
-            print link, name, date
+            #print(link, name, date)
             prelink = ''
             if not link.startswith("http://"):
-                prelink = url.replace('asd.php','')
-            list.append((date, name, prelink + link))
+                prelink = url.replace('asd.php', '')
+            _list.append((date, name, prelink + link))
 
     except:
-        print"ERROR DownloadSetting %s" %(url)
+        print("ERROR DownloadSetting %s" %(url))
 
-    return list
+    return _list
 
 def ConverDate(data):
     year = data[:2]
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/ProgrammlistenUpdater/history.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/ProgrammlistenUpdater/history.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/ProgrammlistenUpdater/history.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/ProgrammlistenUpdater/history.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,22 +1,26 @@
+from __future__ import print_function
 from Components.ActionMap import ActionMap
 from Components.ScrollLabel import ScrollLabel
 from Components.Sources.StaticText import StaticText
 from Screens.Screen import Screen
-import re, os, urllib2, sys
+import re, os, sys
+import six
+from six.moves.urllib.request import urlopen
+from six.moves.urllib.request import Request
 
 URL ='http://www.sattechnik.de/programmlisten-update/history.txt'
 
 def DownloadInfo(url):
     text = ""
     try:
-        req = urllib2.Request(url)
-        response = urllib2.urlopen(req)
+        req = Request(url)
+        response = urlopen(req)
         link = response.read().decode("windows-1252")
         response.close()
-        text = link.encode("utf-8")
+        text = six.ensure_str(link)
 
     except:
-        print"ERROR Download History %s" %(url)
+        print("ERROR Download History %s" %(url))
 
     return text
 
@@ -43,11 +47,11 @@
         self["History"] = ScrollLabel()
 
 
-        self["Actions"] = ActionMap(['OkCancelActions', 'ShortcutActions',"ColorActions","DirectionActions"],
+        self["Actions"] = ActionMap(['OkCancelActions', 'ShortcutActions', "ColorActions", "DirectionActions"],
             {
             "red": self.keyOk,
-            "cancel" : self.keyOk,
-            "ok" : self.keyOk,
+            "cancel": self.keyOk,
+            "ok": self.keyOk,
             "up": self["History"].pageUp,
             "down": self["History"].pageDown,
             "left": self["History"].pageUp,
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/ProgrammlistenUpdater/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/ProgrammlistenUpdater/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/ProgrammlistenUpdater/plugin.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/ProgrammlistenUpdater/plugin.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,3 +1,4 @@
+from __future__ import absolute_import
 from Components.ConfigList import ConfigListScreen, ConfigList
 from Components.config import ConfigSubsection, ConfigYesNo, ConfigText, config, configfile
 from Components.ActionMap import ActionMap
@@ -9,11 +10,11 @@
 from Screens.MessageBox import MessageBox
 from Plugins.Plugin import PluginDescriptor
 from enigma import *
-from downloader import DownloadSetting, ConverDate
+from .downloader import DownloadSetting, ConverDate
 from Components.NimManager import nimmanager
-from settinglist import *
-from restore import *
-from history import *
+from .settinglist import *
+from .restore import *
+from .history import *
 import os
 import skin
 
@@ -32,10 +33,10 @@
 
     def __init__(self, list):
         MenuList.__init__(self, list, True, eListboxPythonMultiContent)
-        font, size = skin.parameters.get("ProgrammlistenUpdaterListFont", ('Regular',25))
+        font, size = skin.parameters.get("ProgrammlistenUpdaterListFont", ('Regular', 25))
         self.l.setFont(0, gFont(font, size))
 
-class Programmlisten_Updater(Screen,ConfigListScreen):
+class Programmlisten_Updater(Screen, ConfigListScreen):
 
     skin =  """
         <screen name="Programmlisten_Updater" position="center,center" size="710,500">
@@ -67,15 +68,15 @@
         self["key_yellow"] = StaticText(_("AutoUpdate"))
 
 
-        self["ColorActions"] = ActionMap(['OkCancelActions', 'MenuActions', 'ShortcutActions',"ColorActions","InfobarEPGActions"],
+        self["ColorActions"] = ActionMap(['OkCancelActions', 'MenuActions', 'ShortcutActions', "ColorActions", "InfobarEPGActions"],
             {
             "red": self.keyCancel,
             "green": self.keyOk,
-            "yellow" : self.keyAutoUpdate,
-            "cancel" : self.keyCancel,
-            "ok" : self.keyOk,
-            "menu" : self.keyMenu,
-            "InfoPressed" : self.keyHistory,
+            "yellow": self.keyAutoUpdate,
+            "cancel": self.keyCancel,
+            "ok": self.keyOk,
+            "menu": self.keyMenu,
+            "InfoPressed": self.keyHistory,
             })
 
         self.List = DownloadSetting(URL)
@@ -143,9 +144,9 @@
     def ListEntryMenuSettings(self, name, date, link, name1, date1):
         res = [(name, date, link, name1, date1)]
         try:
-            x, y, w1, w2, h = skin.parameters.get("ProgrammlistenUpdaterList", (15,7,420,210,40))
+            x, y, w1, w2, h = skin.parameters.get("ProgrammlistenUpdaterList", (15, 7, 420, 210, 40))
         except ValueError:
-            x, y, w1, w2, h = (15,7,420,210,40)
+            x, y, w1, w2, h = (15, 7, 420, 210, 40)
         res.append(MultiContentEntryText(pos=(x, y), size=(w1, h), font=0, text=name, flags=RT_HALIGN_LEFT))
         res.append(MultiContentEntryText(pos=(x+w1, y), size=(w2, h), font=0, color=16777215, text=date1, flags=RT_HALIGN_RIGHT))
         res.append(MultiContentEntryText(pos=(0, 0), size=(0, 0), font=0, text=link, flags=RT_HALIGN_LEFT))
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/ProgrammlistenUpdater/restore.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/ProgrammlistenUpdater/restore.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/ProgrammlistenUpdater/restore.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/ProgrammlistenUpdater/restore.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,3 +1,4 @@
+from __future__ import absolute_import
 from Components.ConfigList import ConfigListScreen
 from Components.config import config, configfile
 from Components.ActionMap import ActionMap
@@ -5,13 +6,13 @@
 from Components.Sources.StaticText import StaticText
 from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
-from downloader import ConverDate
+from .downloader import ConverDate
 import glob, os, urllib, sys
 from enigma import *
 
 Directory = os.path.dirname(sys.modules[__name__].__file__)
 
-class PU_Restore(Screen,ConfigListScreen):
+class PU_Restore(Screen, ConfigListScreen):
 
     skin =  """
         <screen name="PU_Restore" position="center,center" size="600,470">
@@ -38,13 +39,13 @@
         self["key_yellow"] = StaticText(_("Delete"))
 
 
-        self["ColorActions"] = ActionMap(['OkCancelActions', 'ShortcutActions',"ColorActions"],
+        self["ColorActions"] = ActionMap(['OkCancelActions', 'ShortcutActions', "ColorActions"],
             {
             "red": self.keyCancel,
             "green": self.keyGreen,
-            "yellow" : self.keyYellow,
-            "cancel" : self.keyCancel,
-            "ok" : self.keyOk,
+            "yellow": self.keyYellow,
+            "cancel": self.keyCancel,
+            "ok": self.keyOk,
             })
 
         self.List = self.Search_Settings()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/ProgrammlistenUpdater/settinglist.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/ProgrammlistenUpdater/settinglist.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/ProgrammlistenUpdater/settinglist.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/ProgrammlistenUpdater/settinglist.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,41 +1,39 @@
-from enigma import eTimer
-import re, glob, shutil, os, urllib2, urllib, time, sys
-from Screens.Screen import Screen
-from Components.config import ConfigSubsection, ConfigYesNo, ConfigText, config, configfile
+from __future__ import print_function
+from __future__ import absolute_import
+from enigma import eTimer, eDVBDB
+import os, time, sys
+from Components.config import config, configfile
 from Screens.MessageBox import MessageBox
-from downloader import DownloadSetting, ConverDate, ConverDateBack
-from enigma import *
-
-try:
-    import zipfile
-except:
-    pass
+from .downloader import DownloadSetting, ConverDate, ConverDateBack
+from six.moves.urllib.request import urlopen
+from six.moves.urllib.request import Request
+import six
 
 Directory = os.path.dirname(sys.modules[__name__].__file__)
 
 def InstallSettings(name, link, date):
 
     def DownloadSetting(link):
-        req = urllib2.Request(link)
+        req = Request(link)
         req.add_header('User-Agent', 'VAS')
-        response = urllib2.urlopen(req)
+        response = urlopen(req)
         newlink = response.read()
         response.close()
-        Setting = open(Directory + '/Settings/tmp/listE2.zip', 'w')
+        Setting = open(Directory + '/Settings/tmp/listE2.zip', 'wb')
         Setting.write(newlink)
         Setting.close()
         if os.path.exists(Directory + '/Settings/tmp/listE2.zip'):
             os.system('mkdir ' + Directory + '/Settings/tmp/listE2_unzip')
             try:
-                os.system('unzip ' + Directory + '/Settings/tmp/listE2.zip -d  ' + Directory + '/Settings/tmp/listE2_unzip')
+                os.system('unzip -q ' + Directory + '/Settings/tmp/listE2.zip -d  ' + Directory + '/Settings/tmp/listE2_unzip')
             except:
-                print "ERROR unzip listE2.zip"
+                print("ERROR unzip listE2.zip")
             if not os.path.exists(Directory + '/Settings/tmp/setting'):
                 os.system('mkdir ' + Directory + '/Settings/tmp/setting')
                 try:
-                    os.system('unzip ' + Directory + '/Settings/tmp/listE2_unzip/*.zip -d  ' + Directory + '/Settings/tmp/setting')
+                    os.system('unzip -q ' + Directory + '/Settings/tmp/listE2_unzip/*.zip -d  ' + Directory + '/Settings/tmp/setting')
                 except:
-                    print "ERROR unzip %s.zip", name
+                    print("ERROR unzip %s.zip", name)
         return False
 
     Status = True
@@ -62,9 +60,8 @@
         inhaltfile = Directory + '/Settings/tmp/setting/inhalt.lst'
         if os.path.isfile(inhaltfile):
             with open(inhaltfile, 'r') as f:
-                data = f.read().decode("utf-8-sig").encode("utf-8")
+                data = six.ensure_str(f.read())
             RemoveList = data.splitlines()
-
         return RemoveList
 
     if not DownloadSetting(link):
@@ -155,7 +152,7 @@
 
         def OnDsl():
             try:
-                urllib2.urlopen('http://www.google.de', None, 3)
+                urlopen('http://www.google.de', None, 3)
                 return (True and config.pud.showmessage.value)
             except:
                 return False
@@ -163,7 +160,7 @@
             return
 
         if OnDsl():
-            print "Programmlisten-Updater: CHECK FOR UPDATE"
+            print("Programmlisten-Updater: CHECK FOR UPDATE")
             sList = DownloadSetting(self.url)
             for date, name, link in sList:
                 if name == config.pud.satname.value:
@@ -173,7 +170,7 @@
                         self.name = name
                         self.link = link
                         yesno_default = config.pud.update_question.value
-                        print "Programmlisten-Updater: NEW SETTINGS DXANDY"
+                        print("Programmlisten-Updater: NEW SETTINGS DXANDY")
                         if config.pud.just_update.value:
                             # Update without information
                             self.startDownload(self.name, self.link, ConverDate(self.date))
@@ -181,7 +178,7 @@
                             # Auto update with confrimation
                             self.session.openWithCallback(self.CBupdate, MessageBox, _('New Setting DXAndy ') + name + _(' of ') + ConverDate(date) + _(' available !!' + "\n\n" + "Do you want to install the new settingslist?"), MessageBox.TYPE_YESNO, default=yesno_default, timeout=60)
                     else:
-                        print "Programmlisten-Updater: NO NEW UPDATE AVAILBLE"
+                        print("Programmlisten-Updater: NO NEW UPDATE AVAILBLE")
                     break
  
         self.TimerSetting()
\ No newline at end of file
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/QuadPip/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/QuadPip/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/QuadPip/plugin.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/QuadPip/plugin.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,9 +1,10 @@
+from __future__ import absolute_import
 from Plugins.Plugin import PluginDescriptor
 from Components.PluginComponent import plugins
 from Components.config import config, ConfigSubsection, ConfigSelection
 from enigma import eDBoxLCD
 
-from qpip import QuadPipScreen, setDecoderMode
+from .qpip import QuadPipScreen, setDecoderMode
 
 def main(session, **kwargs):
 	session.open(QuadPipScreen)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/QuadPip/qpip.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/QuadPip/qpip.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/QuadPip/qpip.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/QuadPip/qpip.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Components.ConfigList import ConfigListScreen
 from Components.config import config, ConfigSubsection, ConfigSelection, getConfigListEntry
@@ -42,20 +43,20 @@
 
 def setDecoderMode(value):
 	if os.access(ENABLE_QPIP_PROCPATH, os.F_OK):
-		open(ENABLE_QPIP_PROCPATH,"w").write(value)
-		return open(ENABLE_QPIP_PROCPATH,"r").read().strip() == value
+		open(ENABLE_QPIP_PROCPATH, "w").write(value)
+		return open(ENABLE_QPIP_PROCPATH, "r").read().strip() == value
 
 class QuadPipChannelEntry:
 	def __init__(self, name, idx, ch1, ch2, ch3, ch4):
 		self.name = name
 		self.idx = idx
-		self.channel = {"1" : ch1, "2" : ch2, "3" : ch1, "4" : ch1,}
+		self.channel = {"1": ch1, "2": ch2, "3": ch1, "4": ch1,}
 
 	def __str__(self):
 		return "idx : %d, name : %s, ch0 : %s, ch1 : %s, ch2 : %s, ch3 : %s"\
 					% (self.idx, self.name, self.channel.get("1"), self.channel.get("2"), self.channel.get("3"), self.channel.get("4"))
 
-	def __cmp__(self, other):
+	def __lt__(self, other):
 		return self.idx - other.idx
 
 	def getName(self):
@@ -65,14 +66,14 @@
 		return self.idx
 
 	def setChannel(self, idx, chName, sref):
-		if self.channel.has_key(idx):
+		if idx in self.channel:
 			self.channel[idx] = (chName, sref)
 			return True
 
 		return False
 
 	def deleteChannel(self, idx):
-		if self.channel.has_key(idx):
+		if idx in self.channel:
 			self.channel[idx] = None
 			return True
 
@@ -245,8 +246,8 @@
 		{
 			"cancel": self.Exit,
 			"ok": self.channelSelected,
-			"toggleList" : self.toggleCurrList,
-			"editName" : self.editEntryName,
+			"toggleList": self.toggleCurrList,
+			"editName": self.editEntryName,
 			"up": self.goUp,
 			"down": self.goDown,
 		}, -1)
@@ -304,7 +305,7 @@
 
 	def updateDescChannels(self):
 		self.descChannels = []
-		for idx in range(1,5):
+		for idx in list(range(1, 5)):
 			sIdx = str(idx)
 			_isEmpty = False
 			chName = self.newChannel.getChannelName(sIdx)
@@ -358,7 +359,7 @@
 				#self.addChannel(serviceName, sref)
 				_title = _('Choice where to put "%s"') % serviceName
 				_list = []
-				for idx in range(1,5):
+				for idx in list(range(1, 5)):
 					sIdx = str(idx)
 					_isEmpty = False
 					chName = self.newChannel.getChannelName(sIdx)
@@ -387,7 +388,7 @@
 				self.updateDescChannelList()
 
 	def getNewChannel(self):
-		for idx in range(1,5):
+		for idx in list(range(1, 5)):
 			sIdx = str(idx)
 			ch = self.newChannel.getChannel(sIdx)
 			if ch is not None:
@@ -439,7 +440,7 @@
 		button_margin = 5
 		button_h = 40
 		list_y = 40+button_margin*3
-		self.fontSize = {1080:(28, 24), 720:(24,20), 576:(20,18)}.get(dh, (28, 24))
+		self.fontSize = {1080:(28, 24), 720:(24, 20), 576:(20, 18)}.get(dh, (28, 24))
 		self.skin = QuadPiPChannelSelection.skin % (pw, ph, \
 														sw, sh+list_y, \
 														sw/8-70, button_margin, \
@@ -656,12 +657,12 @@
 			"right": (self.keyRight, _("Select channel audio")),
 			"up": (self.keyUp, _("Select channel audio")),
 			"down": (self.keyDown, _("Select channel audio")),
-			"channelup" : (self.KeyChannel, _("Show channel selection")),
-			"channeldown" : (self.KeyChannel, _("Show channel selection")),
-			"menu" : (self.KeyChannel, _("Show channel selection")),
-			"channelPrev" : (self.KeyPrev, _("Prev quad PiP channel")),
-			"channelNext" : (self.KeyNext, _("Next quad PiP channel")),
-			"red" : (self.KeyRed, _("Show/Hide focus bar")),
+			"channelup": (self.KeyChannel, _("Show channel selection")),
+			"channeldown": (self.KeyChannel, _("Show channel selection")),
+			"menu": (self.KeyChannel, _("Show channel selection")),
+			"channelPrev": (self.KeyPrev, _("Prev quad PiP channel")),
+			"channelNext": (self.KeyNext, _("Next quad PiP channel")),
+			"red": (self.KeyRed, _("Show/Hide focus bar")),
 		}, -1)
 
 		self["ch1"] = Label(_(" "))
@@ -910,7 +911,7 @@
 		return channel
 
 	def playChannel(self, channel):
-		print "[playChannel] channel : ", channel
+		print("[playChannel] channel : ", channel)
 
 		if self.curChannel and self.curChannel == channel.channel:
 			return
@@ -921,7 +922,7 @@
 		self.curChannel = channel.channel.copy()
 
 		self.session.qPips = []
-		for idx in range(1,5):
+		for idx in list(range(1, 5)):
 			chInfo = channel.getChannel(str(idx))
 			if chInfo is None:
 				continue
@@ -951,7 +952,7 @@
 			if qPipInstance.playService(eServiceReference(sref), isPlayAudio):
 				self.session.qPips.append(qPipInstance)
 			else:
-				print "play failed, ", sref
+				print("play failed, ", sref)
 				del qPipInstance
 
 		self.updateChannelName(channel)
@@ -967,7 +968,7 @@
 			self.curPlayAudio = -1
 
 	def updateChannelName(self, channel):
-		for idx in range(1,5):
+		for idx in list(range(1, 5)):
 			self["ch%d" % idx].setText((channel and channel.getChannelName(str(idx))) or _("No channel"))
 
 	def disableFCC(self):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/SocketMMI/SocketMMI.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/SocketMMI/SocketMMI.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/SocketMMI/SocketMMI.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/SocketMMI/SocketMMI.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,5 +1,6 @@
+from __future__ import absolute_import
 from Screens.Ci import MMIDialog
-import socketmmi
+from . import socketmmi
 
 class SocketMMIMessageHandler:
 	def __init__(self):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/SocketMMI/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/SocketMMI/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/SocketMMI/plugin.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/SocketMMI/plugin.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,5 +1,6 @@
+from __future__ import absolute_import
 from Plugins.Plugin import PluginDescriptor
-from SocketMMI import SocketMMIMessageHandler
+from .SocketMMI import SocketMMIMessageHandler
 
 socketHandler = None
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/SocketMMI/src/socket_mmi.cpp /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/SocketMMI/src/socket_mmi.cpp
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/SocketMMI/src/socket_mmi.cpp	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/SocketMMI/src/socket_mmi.cpp	2020-06-21 10:20:02.335322655 -0400
@@ -3,6 +3,7 @@
 #include <unistd.h>
 #include <fcntl.h>
 #include <sys/ioctl.h>
+#include <Python.h>
 
 #include <lib/base/ebase.h>
 #include <lib/base/init.h>
@@ -470,10 +471,30 @@
 	{NULL, NULL, 0, NULL}   /* Sentinel */
 };
 
+#if PY_MAJOR_VERSION >= 3
+	static struct PyModuleDef moduledef = {
+		PyModuleDef_HEAD_INIT,
+		"socketmmi",											/* m_name */
+		"Module that implements mmi via unix domain socket.",	/* m_doc */
+		-1,														/* m_size */
+		module_methods,											/* m_methods */
+		NULL,													/* m_reload */
+		NULL,													/* m_traverse */
+		NULL,													/* m_clear */
+		NULL,													/* m_free */
+	};
+
+PyMODINIT_FUNC PyInit_socketmmi(void)
+{
+    return PyModule_Create(&moduledef);
+}
+
+#else
 PyMODINIT_FUNC
 initsocketmmi(void)
 {
 	Py_InitModule3("socketmmi", module_methods,
 		"Module that implements mmi via unix domain socket.");
 }
+#endif
 };
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/StartKodi/installsomething.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/StartKodi/installsomething.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/StartKodi/installsomething.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/StartKodi/installsomething.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from enigma import quitMainloop
 from Screens.MessageBox import MessageBox
@@ -18,11 +19,11 @@
 # for restart question install invoke with:     self.KodiInstallation.__installRST__()
 
 class InstallSomething():
-	def __init__(self,session, url_to_download):
+	def __init__(self, session, url_to_download):
 		self.session = session
 		self.cmdList = []
 		for item in url_to_download:
-			print "----INSTALL SOMETHING---item ",  item
+			print("----INSTALL SOMETHING---item ",  item)
 			self.cmdList.append((IpkgComponent.CMD_INSTALL, { "package": item }))
 
 # plain install, just finish and exit
@@ -34,7 +35,7 @@
 		self.session.openWithCallback(self.__restartMessage__, Ipkg, cmdList = self.cmdList)
 
 	def __restartMessage__(self):
-		self.session.openWithCallback(self.__restartGUI__, MessageBox,_("Restart Enigma2 to apply the changes?"), MessageBox.TYPE_YESNO, default = True)
+		self.session.openWithCallback(self.__restartGUI__, MessageBox, _("Restart Enigma2 to apply the changes?"), MessageBox.TYPE_YESNO, default = True)
 
 	def __restartGUI__(self, callback = None):
 		if callback == True:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/StartKodi/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/StartKodi/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/StartKodi/plugin.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/StartKodi/plugin.py	2020-06-21 10:20:02.335322655 -0400
@@ -3,7 +3,7 @@
 ### main work done in enigma2.sh, here we do just a touch
 ### TODO: installation error checking is missing, network state...
 
-
+from __future__ import absolute_import
 from Screens.Screen import Screen
 from Components.ActionMap import ActionMap
 from Components.Label import Label
@@ -13,7 +13,7 @@
 #from Components.Ipkg import IpkgComponent
 #from Screens.Ipkg import Ipkg
 from enigma import quitMainloop
-from Plugins.Extensions.StartKodi.installsomething import InstallSomething
+from .installsomething import InstallSomething
 
 
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/TuxboxPlugins/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/TuxboxPlugins/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/TuxboxPlugins/plugin.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/TuxboxPlugins/plugin.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,8 +1,10 @@
+from __future__ import print_function
+from __future__ import absolute_import
 # must be fixed for the new plugin interface
 from Tools.BoundFunction import boundFunction
 from Tools.Directories import pathExists
 from Plugins.Plugin import PluginDescriptor
-from pluginrunner import PluginRunner
+from .pluginrunner import PluginRunner
 
 from os import listdir
 
@@ -30,13 +32,13 @@
 			params[split[0]] = split[1]
 		file.close()
 	except IOError:
-		print "no tuxbox plugins found"
+		print("no tuxbox plugins found")
 
 	return params
 
 def main(session, plugin, **kwargs):
-	print "Running plugin " + plugin[:-4] + ".so with config file", plugin
-	print getPluginParams(plugin)
+	print("Running plugin " + plugin[:-4] + ".so with config file", plugin)
+	print(getPluginParams(plugin))
 	session.open(PluginRunner, plugin[:-4].split(".so")[0])
 
 def Plugins(**kwargs):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/TuxboxPlugins/pluginrunner.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/TuxboxPlugins/pluginrunner.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/TuxboxPlugins/pluginrunner.py	2020-06-21 10:16:12.683434451 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/TuxboxPlugins/pluginrunner.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from enigma import eDBoxLCD, eRCInput, fbClass, eConsoleAppContainer
 from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
@@ -17,12 +18,12 @@
 		eDBoxLCD.getInstance().lock()
 		eRCInput.getInstance().lock()
 		fbClass.getInstance().lock()
-		print "executing:", ("pluginlauncher -x %s" % pluginname)
+		print("executing:", ("pluginlauncher -x %s" % pluginname))
 		if self.container.execute("pluginlauncher -x %s" % pluginname):
 			self.finishedExecution(None)
 
 	def finishedExecution(self, retval = 1):
-		print "PluginRunner retval:", retval
+		print("PluginRunner retval:", retval)
 		fbClass.getInstance().unlock()
 		eRCInput.getInstance().unlock()
 		eDBoxLCD.getInstance().unlock()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Volume_adjust/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Volume_adjust/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Extensions/Volume_adjust/plugin.py	2020-06-21 10:16:12.687435249 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Extensions/Volume_adjust/plugin.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 # Volume Adjust 
 # 2009 Black_64
 #
@@ -21,6 +22,7 @@
 from enigma import *
 from os import system, path as os_path
 from Components.ServiceEventTracker import ServiceEventTracker, InfoBarBase
+import six
 global ListChange
 ListChange = None
 config.Volume  = ConfigSubsection()
@@ -60,7 +62,7 @@
 		self["press_menu"] = StaticText(_("press the menu button to set a general AC3/Dolby offset"))
 		self["ServiceList.desc"] = Label(_("Channel \t\t\tVolume +"))
 
-		self["actions"] = ActionMap(["ColorActions","OkCancelActions","MenuActions"],
+		self["actions"] = ActionMap(["ColorActions", "OkCancelActions", "MenuActions"],
 			{
 				"green": self.greenPressed,
 				"red": self.redPressed,
@@ -101,7 +103,7 @@
 			service = self.service.toCompareString()
 			service_name = ServiceReference(self.service).getServiceName().replace('\xc2\x87', '').replace('\xc2\x86', '')
 			service_name = service_name + '\t\t\t0'
-			self.servicelist.append( (service_name , ConfigNothing(), 0, service))
+			self.servicelist.append( (service_name, ConfigNothing(), 0, service))
 			self.read_volume.append('0')
 			offset = 0
 			self.session.openWithCallback( self.VolumeChanged, Change_volume, service_name, offset)
@@ -148,7 +150,7 @@
 						self.session.openWithCallback( self.VolumeChanged, Change_volume, service_name, offset)
 						self.read_volume.append (str(offset))
 					service_name = service_name + self.Tabs(service_name) + self.read_volume[t]
-					self.servicelist.append( (service_name , ConfigNothing(), 0, service_ref.ref.toString()))
+					self.servicelist.append( (service_name, ConfigNothing(), 0, service_ref.ref.toString()))
 					self["ServiceList"].l.setList(self.servicelist)
 
 	def VolumeChanged(self, *args):
@@ -159,7 +161,7 @@
 		tmp0 = tmp[0][0:-3].strip()
 		self.read_volume[t-1] = str(offset)
 		service_name = tmp0 + self.Tabs(tmp0) + str(offset)
-		self.servicelist[t-1] = ( (service_name , ConfigNothing(), 0, tmp[3]))
+		self.servicelist[t-1] = ( (service_name, ConfigNothing(), 0, tmp[3]))
 		self["ServiceList"].l.setList(self.servicelist)
 
 	def Change_vol_now(self, *args):
@@ -170,7 +172,7 @@
 		tmp0 = tmp[0][0:-3].strip()
 		self.read_volume[t] = str(offset)
 		service_name = tmp0 + self.Tabs(tmp0) + str(offset)
-		self.servicelist[t] = ( (service_name , ConfigNothing(), 0, tmp[3]))
+		self.servicelist[t] = ( (service_name, ConfigNothing(), 0, tmp[3]))
 		self["ServiceList"].l.setList(self.servicelist)
 
 	def Tabs(self, name):
@@ -179,7 +181,7 @@
 		for let in name:
 			if ord(let) > 1 and ord(let) < 128:
 				k+=1
-		print '[Volume Adjust] length service name = ' + str(k)
+		print('[Volume Adjust] length service name = ' + str(k))
 		if k > 28:
 			return '\t'
 		elif k > 18:
@@ -192,7 +194,7 @@
 		global ListChange
 		ListChange = True
 		try:
-			fp = file(self.filename, 'w')
+			fp = open(self.filename, 'w')
 			fp.write("<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n")
 			fp.write("<adjustlist>\n")
 			fp.write("\t<channels>\n")
@@ -214,10 +216,10 @@
 			fp.close()
 		except:
 			#os.unlink(self.filename) # gives a GS WHY ???
-			print "[Volume Adjust] error writing xml..."
+			print("[Volume Adjust] error writing xml...")
 
 	def loadXML(self):
-		print "[Volume Adjust] load xml..."
+		print("[Volume Adjust] load xml...")
 		if not os_path.exists(self.filename):
 			return
 		self.read_services=[]
@@ -226,13 +228,13 @@
 			tree = ci_parse(self.filename).getroot()
 			for channels in tree.findall("channels"):
 				for service in  channels.findall("service"):
-					read_service_name = service.get("name").encode("UTF-8")
-					read_service_ref = service.get("ref").encode("UTF-8")
-					read_service_volume = service.get("volume").encode("UTF-8")
+					read_service_name = six.ensure_str(service.get("name"))
+					read_service_ref = six.ensure_str(service.get("ref"))
+					read_service_volume = six.ensure_str(service.get("volume"))
 					self.read_services.append (read_service_ref)
 					self.read_volume.append (read_service_volume)
 		except:
-			print "[Volume Adjust] error parsing xml..."
+			print("[Volume Adjust] error parsing xml...")
 
 		for item in self.read_services:
 			if len(item):
@@ -264,7 +266,7 @@
 		self["key_red"] = StaticText(_("Cancel"))
 		self["key_green"] = StaticText(_("Ok"))
 		self["key_yellow"] = StaticText(_("+/-"))
-		self["actions"] = ActionMap(["ColorActions","SetupActions"],
+		self["actions"] = ActionMap(["ColorActions", "SetupActions"],
 		{
 			"ok": self.ok, 
 			"cancel": self.cancel, 
@@ -389,7 +391,7 @@
 		self["key_green"] = StaticText(_("Save"))
 		self["key_yellow"] = StaticText(_("+/-"))
 		self["infotext"] = StaticText(_("this offset will only be used if the channel has not its own volume offset"))
-		self["actions"] = ActionMap(["ColorActions","SetupActions"],
+		self["actions"] = ActionMap(["ColorActions", "SetupActions"],
 		{
 			"ok": self.ok, 
 			"cancel": self.cancel, 
@@ -430,7 +432,7 @@
 		self.onClose = [ ]
 		self.read_services=[]
 		self.read_volume=[]
-		self.__event_tracker = ServiceEventTracker(screen=self,eventmap=
+		self.__event_tracker = ServiceEventTracker(screen=self, eventmap=
 			{
 				iPlayableService.evUpdatedInfo: self.__evUpdatedInfo,
 			})
@@ -443,7 +445,7 @@
 
 	def loadXML(self):
 		# load the list
-		print "[Volume Adjust] load xml..."
+		print("[Volume Adjust] load xml...")
 		if not os_path.exists(self.filen):
 			return
 		self.read_services=[]
@@ -452,24 +454,24 @@
 			tree = ci_parse(self.filen).getroot()
 			for channels in tree.findall("channels"):
 				for service in  channels.findall("service"):
-					read_service_name = service.get("name").encode("UTF-8")
-					read_service_ref = service.get("ref").encode("UTF-8")
-					read_service_volume = service.get("volume").encode("UTF-8")
+					read_service_name = six.ensure_str(service.get("name"))
+					read_service_ref = six.ensure_str(service.get("ref"))
+					read_service_volume = six.ensure_str(service.get("volume"))
 					self.read_services.append (read_service_ref)
 					self.read_volume.append (read_service_volume)
 		except:
-			print "[Volume Adjust] error parsing xml..."
+			print("[Volume Adjust] error parsing xml...")
 		for i in self.read_services:
-			print i
+			print(i)
 
 
 	def __evUpdatedInfo(self):
 		# here it starts the actual routine to change the volume offset
-		print "[Volume Adjust] Update Info"
+		print("[Volume Adjust] Update Info")
 		if not self.startonce:
 			self.setvolume()
 		vol = self.volctrl.getVolume()
-		print "[Volume Adjust] Volume = " + str(vol)
+		print("[Volume Adjust] Volume = " + str(vol))
 		global ListChange
 		# Check if list is updated (new save) or no list loaded
 		if ListChange or len(self.read_services) == 0:
@@ -479,13 +481,13 @@
 		if not self.service is None:
 			service = self.service.toCompareString()
 			# check for new channel (zap)
-			if service <> self.oldservice:
-				print '[Volume Adjust] New Channel'
+			if service != self.oldservice:
+				print('[Volume Adjust] New Channel')
 				# store new channel
 				self.oldservice = service
 				# calculate normal volume (subtract previous offset of the actual volume)
 				vol3 = str(self.volctrl.getVolume())
-				print '[Volume Adjust] oldvol = ' + str(self.oldvol)
+				print('[Volume Adjust] oldvol = ' + str(self.oldvol))
 				normalvol = int(vol3) - self.oldvol
 				# don't forget to update the actual volume variable
 				# don't change the volume if the offset = 0
@@ -499,37 +501,37 @@
 				for i in self.read_services:
 					if i == service:
 						# service found
-						print '[Volume Adjust] Found adjust volume channel'
+						print('[Volume Adjust] Found adjust volume channel')
 						found = True
 						break
 					tel +=1
 				# if channel found in list, search volume offset and change the volume
 				if found:
 					voloffset = self.read_volume[tel]
-					print '[Volume Adjust] offset = ' + voloffset
+					print('[Volume Adjust] offset = ' + voloffset)
 					# calculate new volume
 					vol1 = int(voloffset)
 					vol2 = str(self.volctrl.getVolume())
 					newvol = int(vol2) + vol1
-					print '[Volume Adjust] newvol = ' + str(newvol)
+					print('[Volume Adjust] newvol = ' + str(newvol))
 					# set the new volume
 					self.volctrl.setVolume(newvol, newvol)
 					# store the new offset, need to change it back when new channel not in list
 					self.oldvol = int(voloffset)
 				else:
 					if config.Volume.Enabled.value:
-						print '[Volume Adjust] Check for AC3/Dolby'
+						print('[Volume Adjust] Check for AC3/Dolby')
 						if self.isCurrentAudioAC3DTS():
 							vol = self.volctrl.getVolume()
 							newvol = int(vol) + config.Volume.AC3_vol.value
-							print '[Volume Adjust] newvol AC3/Dolby = ' + str(newvol)
+							print('[Volume Adjust] newvol AC3/Dolby = ' + str(newvol))
 							self.volctrl.setVolume(newvol, newvol)
 							self.oldvol = config.Volume.AC3_vol.value
 
 	def setvolume(self):
 		vol = 50
 		vol = config.audio.volume.value
-		print '[Setvolume] start with volume ' + str(vol)
+		print('[Setvolume] start with volume ' + str(vol))
 		self.volctrl.setVolume(vol, vol)
 		self.startonce = True
 
@@ -541,14 +543,14 @@
 				tracknr = audio.getCurrentTrack()
 				i = audio.getTrackInfo(tracknr)
 				description = i.getDescription();
-				print '[Volume Adjust] description: ' + description
+				print('[Volume Adjust] description: ' + description)
 				if "AC3" in description or "DTS" in description or "Dolby Digital" == description:
-					print '[Volume Adjust] AudioAC3Dolby = YES'
+					print('[Volume Adjust] AudioAC3Dolby = YES')
 					return True
 			except:
-				print '[Volume Adjust] Fault AudioAC3Dolby = NO'
+				print('[Volume Adjust] Fault AudioAC3Dolby = NO')
 				return False
-		print '[Volume Adjust] AudioAC3Dolby = NO'
+		print('[Volume Adjust] AudioAC3Dolby = NO')
 		return False
 
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/Plugin.py	2020-06-21 10:16:12.687435249 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/Plugin.py	2020-06-21 10:20:02.335322655 -0400
@@ -3,7 +3,7 @@
 
 config.plugins = ConfigSubsection()
 
-class PluginDescriptor:
+class PluginDescriptor(object):
 	"""An object to describe a plugin."""
 
 	# where to list the plugin. Note that there are different call arguments,
@@ -102,7 +102,19 @@
 
 		self.wakeupfnc = wakeupfnc
 
-		self.__call__ = fnc
+		self._fnc = fnc
+
+	def __call__(self, *args, **kwargs):
+		if callable(self._fnc):
+			return self._fnc(*args, **kwargs)
+		else:
+			print("PluginDescriptor called without a function!")
+			return []
+
+	def __getattribute__(self, name):
+		if name == '__call__':
+			return self._fnc is not None and self._fnc or {}
+		return object.__getattribute__(self, name)
 
 	def updateIcon(self, path):
 		self.path = path
@@ -119,10 +131,10 @@
 			return self._icon
 
 	def __eq__(self, other):
-		return self.__call__ == other.__call__
+		return self._fnc == other._fnc
 
 	def __ne__(self, other):
-		return self.__call__ != other.__call__
+		return self._fnc != other._fnc
 
 	def __lt__(self, other):
 		if self.weight < other.weight:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/AnimationSetup/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/AnimationSetup/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/AnimationSetup/plugin.py	2020-06-21 10:16:12.687435249 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/AnimationSetup/plugin.py	2020-06-21 10:20:02.335322655 -0400
@@ -18,12 +18,12 @@
 if getBrandOEM() == 'gigablue':
 	g_default = {
 		"current": 0,
-		"speed"  : 20,
+		"speed": 20,
 		}
 else:
 	g_default = {
 		"current": 0,
-		"speed"  : 20,
+		"speed": 20,
 		"listbox": "0",
 		}
 
@@ -59,11 +59,11 @@
 		ConfigListScreen.__init__(self, self.entrylist)
 
 		self["actions"] = ActionMap(["OkCancelActions", "ColorActions",], {
-			"ok"     : self.keyGreen,
-			"green"  : self.keyGreen,
-			"yellow" : self.keyYellow,
-			"red"    : self.keyRed,
-			"cancel" : self.keyRed,
+			"ok": self.keyGreen,
+			"green": self.keyGreen,
+			"yellow": self.keyYellow,
+			"red": self.keyRed,
+			"cancel": self.keyRed,
 		}, -2)
 		self["key_red"]   = StaticText(_("Cancel"))
 		self["key_green"] = StaticText(_("Save"))
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/CableScan/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/CableScan/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/CableScan/plugin.py	2020-06-21 10:16:12.687435249 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/CableScan/plugin.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from enigma import eCableScan, eDVBFrontendParametersCable, eTimer
 
 from Screens.Screen import Screen
@@ -180,7 +181,7 @@
 class CableScanAutoScreen(CableScanScreen):
 
 	def __init__(self, session, nimlist):
-		print "[AutoCableScan] start"
+		print("[AutoCableScan] start")
 		Screen.__init__(self, session)
 		self.skinName="Standby"
 
@@ -202,14 +203,14 @@
 			del self.scan
 
 	def scanCompleted(self, result):
-		print "[AutoCableScan] completed result = ", result
+		print("[AutoCableScan] completed result = ", result)
 		refreshServiceList()
 		self.close(result>0)
 
 	def Power(self):
 		from Screens.Standby import inStandby
 		inStandby.Power()
-		print "[AutoCableScan] aborted due to power button pressed"
+		print("[AutoCableScan] aborted due to power button pressed")
 		self.close(True)
 
 	def createSummary(self):
@@ -235,7 +236,7 @@
 
 def restartScanAutoStartTimer(reply=False):
 	if not reply:
-		print "[AutoCableScan] Scan was not succesfully retry in one hour"
+		print("[AutoCableScan] Scan was not succesfully retry in one hour")
 		CableScanAutoStartTimer.startLongTimer(3600)
 	else:
 		CableScanAutoStartTimer.startLongTimer(86400)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/CommonInterfaceAssignment/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/CommonInterfaceAssignment/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/CommonInterfaceAssignment/plugin.py	2020-06-21 10:16:12.687435249 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/CommonInterfaceAssignment/plugin.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Screens.ChannelSelection import *
 from Components.ActionMap import HelpableActionMap, ActionMap, NumberActionMap
@@ -18,6 +19,7 @@
 from os import system, path as os_path
 from boxbranding import getMachineBrand, getMachineName, getBoxType
 import os
+import six
 
 class CIselectMainMenu(Screen):
 	skin = """
@@ -36,7 +38,7 @@
 		self["key_red"] = StaticText(_("Close"))
 		self["key_green"] = StaticText(_("Edit"))
 
-		self["actions"] = ActionMap(["ColorActions","SetupActions"],
+		self["actions"] = ActionMap(["ColorActions", "SetupActions"],
 			{
 				"green": self.greenPressed,
 				"red": self.close,
@@ -49,13 +51,13 @@
 		else:
 			NUM_CI = eDVBCIInterfaces.getInstance() and eDVBCIInterfaces.getInstance().getNumOfSlots()
 
-		print "[CI_Wizzard] FOUND %d CI Slots " % NUM_CI
+		print("[CI_Wizzard] FOUND %d CI Slots " % NUM_CI)
 
 		self.dlg = None
 		self.state = { }
 		self.list = [ ]
 		if  NUM_CI and NUM_CI > 0:
-			for slot in range(NUM_CI):
+			for slot in list(range(NUM_CI)):
 				state = eDVBCI_UI.getInstance().getState(slot)
 				if state != -1:
 					appname = _("Slot %d") %(slot+1) + " - " + _("unknown error")
@@ -68,7 +70,7 @@
 						appname = _("Slot %d") %(slot+1) + " - " + eDVBCI_UI.getInstance().getAppName(slot)
 					self.list.append( (appname, ConfigNothing(), 0, slot) )
 		else:
-			self.list.append( (_("no CI slots found") , ConfigNothing(), 1, -1) )
+			self.list.append( (_("no CI slots found"), ConfigNothing(), 1, -1) )
 		menuList = ConfigList(self.list)
 		menuList.list = self.list
 		menuList.l.setList(self.list)
@@ -84,9 +86,9 @@
 			action = cur[2]
 			slot = cur[3]
 			if action == 1:
-				print "[CI_Wizzard] there is no CI Slot in your %s %s" % (getMachineBrand(), getMachineName())
+				print("[CI_Wizzard] there is no CI Slot in your %s %s" % (getMachineBrand(), getMachineName()))
 			else:
-				print "[CI_Wizzard] selected CI Slot : %d" % slot
+				print("[CI_Wizzard] selected CI Slot : %d" % slot)
 				if config.usage.setup_level.index > 1: # advanced
 					self.session.open(CIconfigMenu, slot)
 				else:
@@ -126,7 +128,7 @@
 		self["ServiceList_desc"] = StaticText(_("Assigned services/provider:"))
 		self["ServiceList_info"] = StaticText()
 
-		self["actions"] = ActionMap(["ColorActions","SetupActions"],
+		self["actions"] = ActionMap(["ColorActions", "SetupActions"],
 			{
 				"green": self.greenPressed,
 				"red": self.redPressed,
@@ -135,16 +137,16 @@
 				"cancel": self.cancel
 			}, -1)
 
-		print "[CI_Wizzard_Config] Configuring CI Slots : %d  " % self.ci_slot
+		print("[CI_Wizzard_Config] Configuring CI Slots : %d  " % self.ci_slot)
 
 		i=0
 		self.caidlist=[]
-		print eDVBCIInterfaces.getInstance().readCICaIds(self.ci_slot)
+		print(eDVBCIInterfaces.getInstance().readCICaIds(self.ci_slot))
 		for caid in eDVBCIInterfaces.getInstance().readCICaIds(self.ci_slot):
 			i+=1
-			self.caidlist.append((str(hex(int(caid))),str(caid),i))
+			self.caidlist.append((str(hex(int(caid))), str(caid), i))
 
-		print "[CI_Wizzard_Config_CI%d] read following CAIds from CI: %s" %(self.ci_slot, self.caidlist)
+		print("[CI_Wizzard_Config_CI%d] read following CAIds from CI: %s" %(self.ci_slot, self.caidlist))
 
 		self.selectedcaid = []
 		self.servicelist = []
@@ -248,7 +250,7 @@
 
 	def saveXML(self):
 		try:
-			fp = file(self.filename, 'w')
+			fp = open(self.filename, 'w')
 			fp.write("<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n")
 			fp.write("<ci>\n")
 			fp.write("\t<slot>\n")
@@ -271,7 +273,7 @@
 			fp.write("</ci>\n")
 			fp.close()
 		except:
-			print "[CI_Config_CI%d] xml not written" %self.ci_slot
+			print("[CI_Config_CI%d] xml not written" %self.ci_slot)
 			os.unlink(self.filename)
 		cihelper.load_ci_assignment(force = True)
 
@@ -291,28 +293,28 @@
 		try:
 			tree = ci_parse(self.filename).getroot()
 			for slot in tree.findall("slot"):
-				read_slot = getValue(slot.findall("id"), False).encode("UTF-8")
-				print "ci " + read_slot
+				read_slot = six.ensure_str(getValue(slot.findall("id"), False))
+				print("ci " + read_slot)
 				i=0
 				for caid in slot.findall("caid"):
-					read_caid = caid.get("id").encode("UTF-8")
-					self.selectedcaid.append((str(read_caid),str(read_caid),i))
-					self.usingcaid.append(long(read_caid,16))
+					read_caid = six.ensure_str(caid.get("id"))
+					self.selectedcaid.append((str(read_caid), str(read_caid), i))
+					self.usingcaid.append(int(read_caid, 16))
 					i+=1
 
 				for service in  slot.findall("service"):
-					read_service_name = service.get("name").encode("UTF-8")
-					read_service_ref = service.get("ref").encode("UTF-8")
+					read_service_name = six.ensure_str(service.get("name"))
+					read_service_ref = six.ensure_str(service.get("ref"))
 					self.read_services.append (read_service_ref)
 
 				for provider in  slot.findall("provider"):
-					read_provider_name = provider.get("name").encode("UTF-8")
-					read_provider_dvbname = provider.get("dvbnamespace").encode("UTF-8")
-					self.read_providers.append((read_provider_name,read_provider_dvbname))
+					read_provider_name = six.ensure_str(provider.get("name"))
+					read_provider_dvbname = six.ensure_str(provider.get("dvbnamespace"))
+					self.read_providers.append((read_provider_name, read_provider_dvbname))
 
 				self.ci_config.append((int(read_slot), (self.read_services, self.read_providers, self.usingcaid)))
 		except:
-			print "[CI_Config_CI%d] error parsing xml..." %self.ci_slot
+			print("[CI_Config_CI%d] error parsing xml..." %self.ci_slot)
 
 		for item in self.read_services:
 			if len(item):
@@ -320,7 +322,7 @@
 
 		for item in self.read_providers:
 			if len(item):
-				self.finishedProviderSelection(item[0],item[1])
+				self.finishedProviderSelection(item[0], item[1])
 
 		self.finishedCAidSelection(self.selectedcaid)
 		self["ServiceList"].l.setList(self.servicelist)
@@ -346,7 +348,7 @@
 		ci=ci_slot
 		CIconfigMenu.__init__(self, session, ci_slot)
 
-		self["actions"] = ActionMap(["ColorActions","SetupActions"],
+		self["actions"] = ActionMap(["ColorActions", "SetupActions"],
 		{
 			"green": self.greenPressed,
 			"red": self.redPressed,
@@ -373,8 +375,8 @@
 		self.list = SelectionList()
 		self["list"] = self.list
 
-		for listindex in range(len(list)):
-			if find_in_list(selected_caids,list[listindex][0],0):
+		for listindex in list(range(len(list))):
+			if find_in_list(selected_caids, list[listindex][0], 0):
 				self.list.addSelection(list[listindex][0], list[listindex][1], listindex, True)
 			else:
 				self.list.addSelection(list[listindex][0], list[listindex][1], listindex, False)
@@ -383,7 +385,7 @@
 		self["key_green"] = StaticText(_("Save"))
 		self["introduction"] = StaticText(_("Press OK to select/deselect a CAId."))
 
-		self["actions"] = ActionMap(["ColorActions","SetupActions"],
+		self["actions"] = ActionMap(["ColorActions", "SetupActions"],
 		{
 			"ok": self.list.toggleSelection, 
 			"cancel": self.cancel, 
@@ -457,7 +459,7 @@
 				self.dvbnamespace = splited_ref[6]
 				self.enterPath(ref)
 			elif (ref.flags & 7) == 7 and 'provider' in ref.toString():
-				menu = [(_("Only provider"), "provider"),(_("All services provider"), "providerlist")]
+				menu = [(_("Only provider"), "provider"), (_("All services provider"), "providerlist")]
 				def addAction(choice):
 					if choice is not None:
 						if choice[1] == "provider":
@@ -617,7 +619,7 @@
 def isModule():
 	NUM_CI = eDVBCIInterfaces.getInstance() and eDVBCIInterfaces.getInstance().getNumOfSlots()
 	if NUM_CI and NUM_CI > 0:
-		for slot in range(NUM_CI):
+		for slot in list(range(NUM_CI)):
 			state = eDVBCI_UI.getInstance().getState(slot)
 			if state > 0:
 				return True
@@ -630,7 +632,7 @@
 def autostart(reason, **kwargs):
 	global global_session
 	if reason == 0:
-		print "[CI_Assignment] activating ci configs:"
+		print("[CI_Assignment] activating ci configs:")
 		activate_all(global_session)
 	elif reason == 1:
 		global_session = None
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/ConfigurationBackup/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/ConfigurationBackup/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/ConfigurationBackup/plugin.py	2020-06-21 10:16:12.687435249 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/ConfigurationBackup/plugin.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
 from Screens.Console import Console
@@ -52,7 +53,7 @@
 		self["config"].handleKey(KEY_RIGHT)
 
 	def keyNumberGlobal(self, number):
-		print "You pressed number", number
+		print("You pressed number", number)
 		if (self["config"].getCurrent()[1].parent.enabled == True):
 			self["config"].handleKey(KEY_0+number)
 
@@ -102,7 +103,7 @@
 		
 
 	def createSetup(self):
-		print "Creating BackupSetup"
+		print("Creating BackupSetup")
 		self.list = [ ]
 		self["config"] = ConfigList(self.list)
 		self.backup = ConfigSubsection()
@@ -113,16 +114,16 @@
 
 	def createBackupfolders(self):
 		self.path = BackupPath[self.backup.location.value]
-		print "Creating Backup Folder if not already there..."
+		print("Creating Backup Folder if not already there...")
 		if (path.exists(self.path) == False):
 			makedirs(self.path)
 
 	def Backup(self):
-		print "this will start the backup now!"
+		print("this will start the backup now!")
 		self.session.openWithCallback(self.runBackup, MessageBox, _("Do you want to backup now?\nAfter pressing OK, please wait!"))	
 
 	def Restore(self):
-		print "this will start the restore now!"
+		print("this will start the restore now!")
 		self.session.open(RestoreMenu, self.backup)
 
 	def runBackup(self, result):
@@ -133,13 +134,13 @@
 				dt = date(d.tm_year, d.tm_mon, d.tm_mday)
 				self.path = BackupPath[self.backup.location.value]
 				if self.backup.type.value == "settings":
-					print "Backup Mode: Settings"
+					print("Backup Mode: Settings")
 					self.session.open(Console, title = "Backup running", cmdlist = ["tar -czvf " + self.path + "/" + str(dt) + "_settings_backup.tar.gz /etc/enigma2/ /etc/network/interfaces /etc/wpa_supplicant.conf"])
 				elif self.backup.type.value == "var":
-					print "Backup Mode: var"
+					print("Backup Mode: var")
 					self.session.open(Console, title = "Backup running", cmdlist = [ "tar -czvf " + self.path + "/" + str(dt) + "_var_backup.tar.gz /var/"])
 				elif self.backup.type.value == "skin":
-					print "Backup Mode: skin"
+					print("Backup Mode: skin")
 					self.session.open(Console, title ="Backup running", cmdlist = [ "tar -czvf " + self.path + "/" + str(dt) + "_skin_backup.tar.gz /usr/share/enigma2/"])
 			else:
 				self.session.open(MessageBox, _("Sorry your Backup destination does not exist\n\nPlease choose an other one."), MessageBox.TYPE_INFO)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/DefaultServicesScanner/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/DefaultServicesScanner/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/DefaultServicesScanner/plugin.py	2020-06-21 10:16:12.687435249 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/DefaultServicesScanner/plugin.py	2020-06-21 10:20:02.335322655 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 #from Components.ActionMap import ActionMap, NumberActionMap
 #from Components.Input import Input
 #from Components.Ipkg import IpkgComponent
@@ -71,18 +72,18 @@
 		self.onFirstExecBegin.append(self.runScan)
 
 	def selectSat(self, index):
-		for satindex in range(len(self.multiscanlist)):
+		for satindex in list(range(len(self.multiscanlist))):
 			if satindex != index:
 				self.multiscanlist[satindex][1].setValue(False)
 			else:
 				self.multiscanlist[satindex][1].setValue(True)
 
 	def runScan(self):
-		print "runScan"
+		print("runScan")
 		self.keyGo()
 
 	def startScan(self, tlist, flags, feid, networkid = 0):
-		print "startScan"
+		print("startScan")
 		if len(tlist):
 			# flags |= eComponentScan.scanSearchBAT
 			self.session.openWithCallback(self.scanFinished, DefaultServiceScan, [{"transponders": tlist, "feid": feid, "flags": flags, "networkid": networkid}])
@@ -90,13 +91,13 @@
 			self.session.openWithCallback(self.scanFinished, MessageBox, _("Nothing to scan!\nPlease setup your tuner settings before you start a service scan."), MessageBox.TYPE_ERROR)
 
 	def scanFinished(self, value = None):
-		print "finished"
-		print "self.scanIndex:", self.scanIndex
+		print("finished")
+		print("self.scanIndex:", self.scanIndex)
 		db = eDVBDB.getInstance()
-		print "self.multiscanlist:", self.multiscanlist
+		print("self.multiscanlist:", self.multiscanlist)
 		if len(self.multiscanlist) - 1 >= self.scanIndex and len(self.multiscanlist[self.scanIndex]) > 0:
 			satint = self.multiscanlist[self.scanIndex][0]
-			print "scanned sat:", satint
+			print("scanned sat:", satint)
 			db.saveServicelist("/tmp/lamedb." + str(satint))
 			file = open("/tmp/sat" + str(satint) + ".info", "w")
 			xml = """<default>
@@ -121,7 +122,7 @@
 
 		self.scanIndex += 1
 		if self.scanIndex + 1 >= len(self.multiscanlist):
-			print "no more sats to scan"
+			print("no more sats to scan")
 			confdir = resolveFilename(SCOPE_CONFIG)
 			copyfile(confdir + "/lamedb.backup", confdir + "/lamedb")
 			db.reloadServicelist()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/DiseqcTester/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/DiseqcTester/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/DiseqcTester/plugin.py	2020-06-21 10:16:12.687435249 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/DiseqcTester/plugin.py	2020-06-21 10:20:02.339323205 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import random
 
 from Screens.Satconfig import NimSelection
@@ -58,14 +59,14 @@
 				reasons[transponder[2]] = reasons.get(transponder[2], [])
 				reasons[transponder[2]].append(transponder)
 				if transponder[2] == "pids_failed":
-					print transponder[2], "-", transponder[3]
+					print(transponder[2], "-", transponder[3])
 
 			text += "The %d unsuccessful tuning attempts failed for the following reasons:\n" % countfailed
 
-			for reason in reasons.keys():
+			for reason in list(reasons.keys()):
 				text += "%s: %d transponders failed\n" % (reason, len(reasons[reason]))
 
-			for reason in reasons.keys():
+			for reason in list(reasons.keys()):
 				text += "\n"
 				text += "%s previous planes:\n" % reason
 				for transponder in reasons[reason]:
@@ -111,13 +112,13 @@
 		if self.type == self.TYPE_BYINDEX:
 			text += self.getTextualResultForIndex(self.index)
 		elif self.type == self.TYPE_BYORBPOS:
-			for index in self.results.keys():
+			for index in list(self.results.keys()):
 				if index[2] == self.orbpos:
 					text += self.getTextualResultForIndex(index)
 					text += "\n-----------------------------------------------------\n"
 		elif self.type == self.TYPE_ALL:
 			orderedResults = {}
-			for index in self.results.keys():
+			for index in list(self.results.keys()):
 				orbpos = index[2]
 				orderedResults[orbpos] = orderedResults.get(orbpos, [])
 				orderedResults[orbpos].append(index)
@@ -315,7 +316,7 @@
 
 	# returns a string for the user representing a human readable output for index
 	def getTextualIndexRepresentation(self, index):
-		print "getTextualIndexRepresentation:", index
+		print("getTextualIndexRepresentation:", index)
 		text = ""
 
 		text += nimmanager.getSatDescription(index[2]) + ", "
@@ -333,14 +334,14 @@
 
 	def fillTransponderList(self):
 		self.clearTransponder()
-		print "----------- fillTransponderList"
-		print "index:", self.currentlyTestedIndex
+		print("----------- fillTransponderList")
+		print("index:", self.currentlyTestedIndex)
 		keys = self.indexlist.keys()
 		if self.getContinueScanning():
-			print "index:", self.getTextualIndexRepresentation(self.currentlyTestedIndex)
+			print("index:", self.getTextualIndexRepresentation(self.currentlyTestedIndex))
 			for transponder in self.indexlist[self.currentlyTestedIndex]:
 				self.addTransponder(transponder)
-			print "transponderList:", self.transponderlist
+			print("transponderList:", self.transponderlist)
 			return True
 		else:
 			return False
@@ -356,7 +357,7 @@
 		# TODO use other function to scan more randomly
 		if self.test_type == self.TEST_TYPE_QUICK:
 			self.myindex = 0
-			keys = self.indexlist.keys()
+			keys = list(self.indexlist.keys())
 			keys.sort(key = lambda a: a[2]) # sort by orbpos
 			self["overall_progress"].setRange(len(keys))
 			self["overall_progress"].setValue(self.myindex)
@@ -369,8 +370,8 @@
 			self["overall_progress"].setValue(self.myindex)
 			return self.randomkeys[0]
 		elif self.test_type == self.TEST_TYPE_COMPLETE:
-			keys = self.indexlist.keys()
-			print "keys:", keys
+			keys = list(self.indexlist.keys())
+			print("keys:", keys)
 			successorindex = {}
 			for index in keys:
 				successorindex[index] = []
@@ -384,7 +385,7 @@
 			while not stop:
 				if currindex is None or len(successorindex[currindex]) == 0:
 					oldindex = currindex
-					for index in successorindex.keys():
+					for index in list(successorindex.keys()):
 						if len(successorindex[index]) > 0:
 							currindex = index
 							self.keylist.append(currindex)
@@ -394,7 +395,7 @@
 				else:
 					currindex = successorindex[currindex].pop()
 					self.keylist.append(currindex)
-			print "self.keylist:", self.keylist
+			print("self.keylist:", self.keylist)
 			self.myindex = 0
 			self["overall_progress"].setRange(len(self.keylist))
 			self["overall_progress"].setValue(self.myindex)
@@ -406,7 +407,7 @@
 		# TODO use other function to scan more randomly
 		if self.test_type == self.TEST_TYPE_QUICK:
 			self.myindex += 1
-			keys = self.indexlist.keys()
+			keys = list(self.indexlist.keys())
 			keys.sort(key = lambda a: a[2]) # sort by orbpos
 
 			self["overall_progress"].setValue(self.myindex)
@@ -486,10 +487,10 @@
 		self.resultsstatus[status].append(index)
 
 	def finishedChecking(self):
-		print "finishedChecking"
+		print("finishedChecking")
 		TuneTest.finishedChecking(self)
 
-		if not self.results.has_key(self.currentlyTestedIndex):
+		if self.currentlyTestedIndex not in self.results:
 			self.results[self.currentlyTestedIndex] = {"failed": [], "successful": [], "status": None, "internalstatus": None}
 
 		if len(self.failedTune) > 0 and len(self.successfullyTune) > 0:
@@ -525,8 +526,8 @@
 		else:
 			self.running = False
 			self["progress_list"].setIndex(0)
-			print "results:", self.results
-			print "resultsstatus:", self.resultsstatus
+			print("results:", self.results)
+			print("resultsstatus:", self.resultsstatus)
 			if self.log:
 				file = open("/media/hdd/diseqctester.log", "w")
 				self.setResultType(ResultParser.TYPE_ALL)
@@ -551,7 +552,7 @@
 		self.close()
 
 	def select(self):
-		print "selectedIndex:", self["progress_list"].getCurrent()[0]
+		print("selectedIndex:", self["progress_list"].getCurrent()[0])
 		if not self.running:
 			index = self["progress_list"].getCurrent()[0]
 			self.setResultType(ResultParser.TYPE_BYORBPOS)
@@ -562,7 +563,7 @@
 			self.session.open(TextBox, self.getTextualResult())
 
 	def selectionChanged(self):
-		print "selection changed"
+		print("selection changed")
 		if len(self.list) > 0 and not self.running:
 			self["CmdText"].setText(_("Press OK to get further details for %s") % str(self["progress_list"].getCurrent()[1]))
 
@@ -618,7 +619,7 @@
 		self["config"].l.setList(self.list)
 
 	def keyOK(self):
-		print self.testtype.value
+		print(self.testtype.value)
 		testtype = DiseqcTester.TEST_TYPE_QUICK
 		if self.testtype.value == "quick":
 			testtype = DiseqcTester.TEST_TYPE_QUICK
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/FSBLUpdater/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/FSBLUpdater/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/FSBLUpdater/plugin.py	2020-06-21 10:16:12.687435249 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/FSBLUpdater/plugin.py	2020-06-21 10:20:02.339323205 -0400
@@ -1,12 +1,13 @@
+from __future__ import absolute_import
 from Components.config import config, ConfigBoolean
 from Screens.ChoiceBox import ChoiceBox
 from Plugins.Plugin import PluginDescriptor
 from Tools.HardwareInfo import HardwareInfo
 
-from FSBLUpdater import FSBLUpdater
+from .FSBLUpdater import FSBLUpdater
 
 from Tools.Log import Log
-from Tools import Notifications
+import Tools.Notifications
 
 
 config.misc.fsbl_update_never = ConfigBoolean(default=False)
@@ -28,7 +29,7 @@
 				(_("Don't ask again!"), "never")
 			]
 			txt = _("DO NOT POWER OFF YOUR DEVICE WHILE UPDATING!\nUpdate now?")
-			Notifications.AddNotificationWithCallback(self._startFSBLUpdater, ChoiceBox, list=choices, title = txt, windowTitle=_("Bootloader update required!"))
+			Tools.Notifications.AddNotificationWithCallback(self._startFSBLUpdater, ChoiceBox, list=choices, title = txt, windowTitle=_("Bootloader update required!"))
 		else:
 			Log.i("No FSBL update required!")
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/FastScan/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/FastScan/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/FastScan/plugin.py	2020-06-21 10:16:12.687435249 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/FastScan/plugin.py	2020-06-21 10:20:02.339323205 -0400
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
 from Plugins.Plugin import PluginDescriptor
 
 from Screens.Screen import Screen
@@ -206,7 +207,7 @@
 		self.createSetup()
 
 	def saveConfiguration(self):
-		config.misc.fastscan.last_configuration.value = `(self.scan_nims.value, self.scan_provider.value, self.scan_hd.value, self.scan_keepnumbering.value, self.scan_keepsettings.value, self.scan_create_radio_bouquet.value)`
+		config.misc.fastscan.last_configuration.value = repr((self.scan_nims.value, self.scan_provider.value, self.scan_hd.value, self.scan_keepnumbering.value, self.scan_keepsettings.value, self.scan_create_radio_bouquet.value))
 		auto_providers = []
 		for provider in self.providers:
 			if self.config_autoproviders[provider[0]].value:
@@ -257,7 +258,7 @@
 class FastScanAutoScreen(FastScanScreen):
 
 	def __init__(self, session, lastConfiguration):
-		print "[AutoFastScan] start %s" % lastConfiguration[1]
+		print("[AutoFastScan] start %s" % lastConfiguration[1])
 		Screen.__init__(self, session)
 		self.skinName="Standby"
 
@@ -288,14 +289,14 @@
 			del self.scan
 
 	def scanCompleted(self, result):
-		print "[AutoFastScan] completed result = ", result
+		print("[AutoFastScan] completed result = ", result)
 		refreshServiceList()
 		self.close(result)
 
 	def Power(self):
 		from Screens.Standby import inStandby
 		inStandby.Power()
-		print "[AutoFastScan] aborted due to power button pressed"
+		print("[AutoFastScan] aborted due to power button pressed")
 		self.close(True)
 
 	def createSummary(self):
@@ -329,7 +330,7 @@
 
 def restartScanAutoStartTimer(reply=False):
 	if not reply:
-		print "[AutoFastScan] Scan was not succesfully retry in one hour"
+		print("[AutoFastScan] Scan was not succesfully retry in one hour")
 		FastScanAutoStartTimer.startLongTimer(3600)
 	elif reply is not True:
 		global autoproviders
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/HdmiCEC/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/HdmiCEC/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/HdmiCEC/plugin.py	2020-06-21 10:16:12.687435249 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/HdmiCEC/plugin.py	2020-06-21 10:20:02.339323205 -0400
@@ -72,24 +72,24 @@
 			self.list.append(getConfigListEntry(_("Advanced Settings"), config.hdmicec.advanced_settings, _('helptext'), 'refreshlist'))
 			if config.hdmicec.advanced_settings.value:
 				self.list.append(getConfigListEntry(_("Load Default Settings"), config.hdmicec.default_settings, _('helptext'), 'refreshlist'))
-			self.list.append(getConfigListEntry(_("Regard deep standby as standby"), config.hdmicec.handle_deepstandby_events, _('helptext'),'refreshlist'))
+			self.list.append(getConfigListEntry(_("Regard deep standby as standby"), config.hdmicec.handle_deepstandby_events, _('helptext'), 'refreshlist'))
 			if config.hdmicec.advanced_settings.value and config.hdmicec.handle_deepstandby_events.value and config.workaround.deeprecord.value:
 				self.list.append(getConfigListEntry(tab + _("Wait for timesync at startup"), config.hdmicec.deepstandby_waitfortimesync, _("If the 'deep standby workaround' is enabled, it waits until the system time is synchronized. Depending on the requirement, the devices wake up will continuing after a maximum of 2 minutes."), ))
-			self.list.append(getConfigListEntry(_("Put TV in standby"), config.hdmicec.control_tv_standby, _('helptext'),'refreshlist'))
+			self.list.append(getConfigListEntry(_("Put TV in standby"), config.hdmicec.control_tv_standby, _('helptext'), 'refreshlist'))
 			if config.hdmicec.advanced_settings.value and config.hdmicec.control_tv_standby.value:
 				self.list.append(getConfigListEntry(tab + _("Even if TV has another input active?"), config.hdmicec.tv_standby_notinputactive, _('You can skip this function and turn off the TV when you wake the receiver from standby and immediately switch back to standby.'), ))
-			self.list.append(getConfigListEntry(_("Wakeup TV from standby"), config.hdmicec.control_tv_wakeup, _('helptext') ,'refreshlist'))
+			self.list.append(getConfigListEntry(_("Wakeup TV from standby"), config.hdmicec.control_tv_wakeup, _('helptext'), 'refreshlist'))
 			if config.hdmicec.advanced_settings.value and config.hdmicec.control_tv_wakeup.value:
 				self.list.append(getConfigListEntry(tab + _("Even if a 'zap' recording timer starting?"), config.hdmicec.tv_wakeup_zaptimer, _('helptext'), ))
 				self.list.append(getConfigListEntry(tab + _("Even if a 'zap and record' recording timer starting?"), config.hdmicec.tv_wakeup_zapandrecordtimer, _('helptext'), ))
 				self.list.append(getConfigListEntry(tab + _("Even if a 'wakeup' power timer starting?"), config.hdmicec.tv_wakeup_wakeuppowertimer, _('helptext'), ))
-			self.list.append(getConfigListEntry(_("Switch TV to correct input"), config.hdmicec.report_active_source, _('helptext'),'refreshlist'))
+			self.list.append(getConfigListEntry(_("Switch TV to correct input"), config.hdmicec.report_active_source, _('helptext'), 'refreshlist'))
 			if config.hdmicec.advanced_settings.value and config.hdmicec.report_active_source.value:
 				self.list.append(getConfigListEntry(tab + _("Switch off the TV to correct input"), config.hdmicec.workaround_activesource, _("Some TV devices can't swich to correct input if a another hdmi port active. This setting set the TV to standby before.\n(If the TV does not turn back on, may require a slower transmission interval or the repetition of wake-up commands.)"),))
 			self.list.append(getConfigListEntry(_("Handle wakeup from TV"), config.hdmicec.handle_tv_wakeup, _('Choose a setting where your receiver wakes up from standby.'),))
-			self.list.append(getConfigListEntry(_("Handle standby from TV"), config.hdmicec.handle_tv_standby, _('helptext'),'refreshlist'))
+			self.list.append(getConfigListEntry(_("Handle standby from TV"), config.hdmicec.handle_tv_standby, _('helptext'), 'refreshlist'))
 			if config.hdmicec.advanced_settings.value: 
-				self.list.append(getConfigListEntry(_("Handle input from TV"), config.hdmicec.handle_tv_input, _('helptext'),'refreshlist'))
+				self.list.append(getConfigListEntry(_("Handle input from TV"), config.hdmicec.handle_tv_input, _('helptext'), 'refreshlist'))
 				if config.hdmicec.handle_tv_standby.value != 'disabled' or config.hdmicec.handle_tv_input.value != 'disabled':
 					self.list.append(getConfigListEntry(_("Time delay until standby or deep standby"), config.hdmicec.handle_tv_delaytime, _("'Handle standby from TV' has a higher priority as 'Handle input from TV'"),))
 			self.list.append(getConfigListEntry(_("Forward volume keys"), config.hdmicec.volume_forwarding, _('Activation takes place immediately. If this feature is not supported, the volume keys has no function!'),))
@@ -98,15 +98,15 @@
 			self.list.append(getConfigListEntry(_("Use TV remote control"), config.hdmicec.report_active_menu, _('Activation takes place immediately. If it does feature not work, then try again with a slower send interval.'),))
 			self.list.append(getConfigListEntry(_("Minimum send interval"), config.hdmicec.minimum_send_interval, _('Try to slow down the send interval if not all commands are executed.'), ))
 			if config.hdmicec.advanced_settings.value: 
-				self.list.append(getConfigListEntry(_("Repeat the sent standby and wakeup commands"), config.hdmicec.messages_repeat, _('Try to send repeated commands if not all commands are executed.\n') + _('(e.g. TV wakeup, but not switched to correct input)'),'refreshlist'))
+				self.list.append(getConfigListEntry(_("Repeat the sent standby and wakeup commands"), config.hdmicec.messages_repeat, _('Try to send repeated commands if not all commands are executed.\n') + _('(e.g. TV wakeup, but not switched to correct input)'), 'refreshlist'))
 				if int(config.hdmicec.messages_repeat.value):
 					self.list.append(getConfigListEntry(tab + _("Time delay for the repeated transmission"), config.hdmicec.messages_repeat_slowdown, _('The time is multiplied by the current repeat counter.'), ))
-					self.list.append(getConfigListEntry(tab + _("Repeat the standby commands?"), config.hdmicec.messages_repeat_standby, _('Is not necessary in most cases.'),'refreshlist'))
+					self.list.append(getConfigListEntry(tab + _("Repeat the standby commands?"), config.hdmicec.messages_repeat_standby, _('Is not necessary in most cases.'), 'refreshlist'))
 				self.list.append(getConfigListEntry(_("Check power and input state from TV"), config.hdmicec.check_tv_state, _('An attempt is made to capture the current TV status. If this is not possible due to incorrect or missing status messages, it may cause the receiver to respond unexpectedly.\nOn the other hand, tries to respond better to different operating conditions.'), ))
 				self.list.append(getConfigListEntry(_("Ignore unexpectedly wakeup and stay in standby"), config.hdmicec.workaround_turnbackon, _("This is a workaround for some devices there wakeup again after switching in standby. The wak up command's from other devices will ignored for few seconds."),))
 			if fileExists("/proc/stb/hdmi/preemphasis"):
 				self.list.append(getConfigListEntry(_("Use HDMI-preemphasis"), config.hdmicec.preemphasis, _('With this setting, you can probably improve the signal quality or eliminate problems that can occur with longer HDMI cables.'),))
-			self.list.append(getConfigListEntry(_("Enable command line function"), config.hdmicec.commandline, _("Activate an way to send individual or specific internal HDMI-CEC commands from the command line. Type on command line 'echo help > %s' and then read the file '%s' for a short help.") %(Components.HdmiCec.cmdfile,Components.HdmiCec.hlpfile), ))
+			self.list.append(getConfigListEntry(_("Enable command line function"), config.hdmicec.commandline, _("Activate an way to send individual or specific internal HDMI-CEC commands from the command line. Type on command line 'echo help > %s' and then read the file '%s' for a short help.") %(Components.HdmiCec.cmdfile, Components.HdmiCec.hlpfile), ))
 			self.list.append(getConfigListEntry(_("Enable debug log *"), config.hdmicec.debug, _('Allows you to enable the debug log. They contain very detailed information of everything the system does.') + _("\n* Logs location: logs settings, Filename: Enigma2-hdmicec-[date].log"), ))
 
 		self["config"].list = self.list
@@ -117,7 +117,7 @@
 
 	def advancedSettings(self, mode = None, savevalues = False):
 		advconfigs = ('deepstandby_waitfortimesync', 'tv_standby_notinputactive', 'tv_wakeup_zaptimer', 'tv_wakeup_zapandrecordtimer', 'tv_wakeup_wakeuppowertimer',
-						'workaround_activesource','handle_tv_input', 'handle_tv_delaytime', 'messages_repeat', 'check_tv_state', 'workaround_turnbackon')
+						'workaround_activesource', 'handle_tv_input', 'handle_tv_delaytime', 'messages_repeat', 'check_tv_state', 'workaround_turnbackon')
 		cecconf = config.hdmicec.dict()
 		for key in cecconf:
 			if mode == "start":
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/Hotplug/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/Hotplug/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/Hotplug/plugin.py	2020-06-21 10:16:12.687435249 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/Hotplug/plugin.py	2020-06-21 10:20:02.339323205 -0400
@@ -1,8 +1,10 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
 from Plugins.Plugin import PluginDescriptor
 from Components.Harddisk import harddiskmanager
 from twisted.internet.protocol import Protocol, Factory
 import os, os.path
+import six
 
 # globals
 hotplugNotifier = []
@@ -16,7 +18,7 @@
 		return False
 
 def processHotplugData(self, v):
-	print "[Hotplug.plugin.py]:", v
+	print("[Hotplug.plugin.py]:", v)
 	action = v.get("ACTION")
 	device = v.get("DEVPATH")
 	physdevpath = v.get("PHYSDEVPATH")
@@ -33,7 +35,7 @@
 		audiocd = True
 		media_state = "audiocd"
 		error, blacklisted, removable, is_cdrom, partitions, medium_found = harddiskmanager.addHotplugAudiocd(dev, physdevpath)
-		print "[Hotplug.plugin.py] AUDIO CD ADD"
+		print("[Hotplug.plugin.py] AUDIO CD ADD")
 	elif action == "audiocdremove":
 		audiocd = False
 		file = []
@@ -51,7 +53,7 @@
 				except OSError:
 					pass
 		harddiskmanager.removeHotplugPartition(dev)
-		print "[Hotplug.plugin.py] REMOVING AUDIOCD"
+		print("[Hotplug.plugin.py] REMOVING AUDIOCD")
 	elif media_state is not None:
 		if media_state == '1':
 			harddiskmanager.removeHotplugPartition(dev)
@@ -70,15 +72,16 @@
 		pass
 
 	def connectionMade(self):
-		print "[Hotplug.plugin.py] connection!"
+		print("[Hotplug.plugin.py] connection!")
 		self.received = ""
 
 	def dataReceived(self, data):
+		data = six.ensure_str(data)
 		self.received += data
-		print "[Hotplug.plugin.py] complete", self.received
+		print("[Hotplug.plugin.py] complete", self.received)
 
 	def connectionLost(self, reason):
-		print "[Hotplug.plugin.py] connection lost!"
+		print("[Hotplug.plugin.py] connection lost!")
 		data = self.received.split('\0')[:-1]
 		v = {}
 		for x in data:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/IceTV/API.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/IceTV/API.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/IceTV/API.py	2020-06-21 10:16:12.691436048 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/IceTV/API.py	2020-06-21 10:20:02.339323205 -0400
@@ -6,6 +6,7 @@
 All Right Reserved
 License: Proprietary / Commercial - contact enigma.licensing (at) urbanec.net
 '''
+from __future__ import print_function
 
 import requests
 import json
@@ -21,7 +22,7 @@
 _device_type_id = getIceTVDeviceType()
 _debug_level = 0  # 1 = request/reply, 2 = 1+headers, 3 = 2+partial body, 4 = 2+full body
 
-print "[IceTV] server set to", config.plugins.icetv.server.name.value
+print("[IceTV] server set to", config.plugins.icetv.server.name.value)
 
 iceTVServers = {
     _("Australia"): "api.icetv.com.au",
@@ -35,7 +36,7 @@
         sock.close()
         return True
     except sockerror as ex:
-        print "[IceTV] Can not connect to IceTV server:", str(ex)
+        print("[IceTV] Can not connect to IceTV server:", str(ex))
     return False
 
 def getMacAddress(ifname):
@@ -95,21 +96,21 @@
         r = requests.request(method, self.url, params=self.params, headers=self.headers, data=data, verify=False, timeout=10.0)
         err = not r.ok
         if err or _debug_level > 0:
-            print "[IceTV]", r.request.method, r.request.url
+            print("[IceTV]", r.request.method, r.request.url)
         if err or _debug_level > 1:
-            print "[IceTV] headers", r.request.headers
+            print("[IceTV] headers", r.request.headers)
         if err or _debug_level == 3:
-            print "[IceTV]", self._shorten(r.request.body)
+            print("[IceTV]", self._shorten(r.request.body))
         elif err or _debug_level > 3:
-            print "[IceTV]", r.request.body
+            print("[IceTV]", r.request.body)
         if err or _debug_level > 0:
-            print "[IceTV]", r.status_code, r.reason
+            print("[IceTV]", r.status_code, r.reason)
         if err or _debug_level > 1:
-            print "[IceTV] headers", r.headers
+            print("[IceTV] headers", r.headers)
         if err or _debug_level == 3:
-            print "[IceTV]", self._shorten(r.text)
+            print("[IceTV]", self._shorten(r.text))
         elif err or _debug_level > 3:
-            print "[IceTV]", r.text
+            print("[IceTV]", r.text)
         self.response = r
         if r.status_code == 401:
             clearCredentials()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/IceTV/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/IceTV/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/IceTV/plugin.py	2020-06-21 10:16:12.691436048 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/IceTV/plugin.py	2020-06-21 10:20:02.339323205 -0400
@@ -6,6 +6,8 @@
 All Right Reserved
 License: Proprietary / Commercial - contact enigma.licensing (at) urbanec.net
 '''
+from __future__ import print_function
+from __future__ import absolute_import
 
 from enigma import eTimer, eEPGCache, eDVBDB, eServiceReference, iRecordableService, eServiceCenter
 from Tools.ServiceReference import service_types_tv_ref
@@ -28,7 +30,7 @@
 from calendar import timegm
 from time import strptime, gmtime, localtime, strftime, time
 from . import config, enableIceTV, disableIceTV
-import API as ice
+from . import API as ice
 import requests
 from collections import deque, defaultdict
 from operator import itemgetter
@@ -37,6 +39,7 @@
 import NavigationInstance
 from twisted.internet import reactor, threads
 from os import path
+import six
 
 _session = None
 password_requested = False
@@ -477,7 +480,7 @@
 
     def statusCleanup(self):
         def doTimeouts(status, timeout):
-            for tid, worklist in status.items():
+            for tid, worklist in list(status.items()):
                 if worklist and min(worklist, key=itemgetter(-1))[-1] < timeout:
                     status[tid] = [ent for ent in worklist if ent[-1] >= timeout]
                     if not status[tid]:
@@ -506,7 +509,7 @@
     def addLog(self, msg):
         entry = LogEntry(time(), msg)
         self.log.append(entry)
-        print "[IceTV]", str(entry)
+        print("[IceTV]", str(entry))
 
     def createFetchJob(self, res=None, send_scans=False):
         if config.plugins.icetv.configured.value and config.plugins.icetv.enable_epg.value:
@@ -532,13 +535,13 @@
                 return False
         res = True
         try:
-            self.settings = dict((s["name"], s["value"].encode("utf-8") if s["type"] == 2 else s["value"]) for s in self.getSettings())
-            print "[EPGFetcher] settings", self.settings
+            self.settings = dict((s["name"], six.ensure_str(s["value"]) if s["type"] == 2 else s["value"]) for s in self.getSettings())
+            print("[EPGFetcher] settings", self.settings)
         except (Exception) as ex:
             self.settings = {}
             _logResponseException(self, _("Can not retrieve IceTV settings"), ex)
         send_logs = config.plugins.icetv.member.send_logs and self.settings.get("send_pvr_logs", False)
-        print "[EPGFetcher] send_logs", send_logs
+        print("[EPGFetcher] send_logs", send_logs)
         if send_logs:
             self.postPvrLogs()
         try:
@@ -594,10 +597,10 @@
         triplet_map = defaultdict(list)
         scan_list = []
 
-        for id, triplets in self.channel_service_map.items():
+        for id, triplets in list(self.channel_service_map.items()):
             for triplet in triplets:
                 triplet_map[triplet].append(id)
-        for name, triplets in name_map.items():
+        for name, triplets in list(name_map.items()):
             for triplet in triplets:
                 if triplet in triplet_map:
                     for id in triplet_map[triplet]:
@@ -614,17 +617,17 @@
         if servicelist is not None:
             serviceRef = servicelist.getNext()
             while serviceRef.valid():
-                name = ServiceReference(serviceRef).getServiceName().decode("utf-8").strip()
+                name = six.ensure_text(ServiceReference(serviceRef).getServiceName()).strip()
                 name_map[name].append(tuple(serviceRef.getUnsignedData(i) for i in (3, 2, 1)))
                 serviceRef = servicelist.getNext()
         return name_map
 
     def makeChanServMap(self, channels):
         res = defaultdict(list)
-        name_map = dict((n.upper(), t) for n, t in self.getScanChanNameMap().iteritems())
+        name_map = dict((n.upper(), t) for n, t in six.iteritems(self.getScanChanNameMap()))
 
         for channel in channels:
-            channel_id = long(channel["id"])
+            channel_id = int(channel["id"])
             triplets = []
             if "dvb_triplets" in channel:
                 triplets = channel["dvb_triplets"]
@@ -654,14 +657,14 @@
     def serviceToIceChannelId(self, serviceref):
         svc = str(serviceref).split(":")
         triplet = (int(svc[5], 16), int(svc[4], 16), int(svc[3], 16))
-        for channel_id, dvbt in self.channel_service_map.iteritems():
+        for channel_id, dvbt in six.iteritems(self.channel_service_map):
             if triplet in dvbt:
                 return channel_id
 
     def makeChanShowMap(self, shows):
         res = defaultdict(list)
         for show in shows:
-            channel_id = long(show["channel_id"])
+            channel_id = int(show["channel_id"])
             res[channel_id].append(show)
         return res
 
@@ -682,12 +685,12 @@
                 start = int(show["start_unix"])
                 stop = int(show["stop_unix"])
                 duration = stop - start
-            title = show.get("title", "").encode("utf-8")
-            short = show.get("subtitle", "").encode("utf-8")
-            extended = show.get("desc", "").encode("utf-8")
+            title = six.ensure_str(show.get("title", ""))
+            short = six.ensure_str(show.get("subtitle", ""))
+            extended = six.ensure_str(show.get("desc", ""))
             genres = []
             for g in show.get("category", []):
-                name = g['name'].encode("utf-8")
+                name = six.ensure_str(g['name'])
                 if name in category_cache:
                     eit_remap = category_cache[name]
                     genres.append(eit_remap)
@@ -699,9 +702,9 @@
                         genres.append(eit_remap)
                         category_cache[name] = eit_remap
                     elif name not in mapping_errors:
-                        print '[EPGFetcher] ERROR: lookup of 0x%02x%s "%s" returned \"%s"' % (eit, (" (remapped to 0x%02x)" % eit_remap) if eit != eit_remap else "", name, mapped_name)
+                        print('[EPGFetcher] ERROR: lookup of 0x%02x%s "%s" returned \"%s"' % (eit, (" (remapped to 0x%02x)" % eit_remap) if eit != eit_remap else "", name, mapped_name))
                         mapping_errors.add(name)
-            p_rating = ((country_code, parental_ratings.get(show.get("rating", "").encode("utf-8"), 0x00)),)
+            p_rating = ((country_code, parental_ratings.get(six.ensure_str(show.get("rating", "")), 0x00)),)
             res.append((start, duration, title, short, extended, genres, event_id, p_rating))
         return res
 
@@ -741,7 +744,7 @@
         # Maximum number of channels to fetch in a batch
         max_fetch = config.plugins.icetv.batchsize.value
         res = False
-        channels = self.channel_service_map.keys()
+        channels = list(self.channel_service_map.keys())
         epgcache = eEPGCache.getInstance()
         channel_show_map = {}
         last_update_time = 0
@@ -753,7 +756,7 @@
             batch_fetch = max_fetch and len(fetch_chans) != len(channels)
             shows = self.getShows(chan_list=batch_fetch and fetch_chans or None, fetch_timers=pos + len(fetch_chans) >= len(channels))
             channel_show_map = self.makeChanShowMap(shows["shows"])
-            for channel_id in channel_show_map.keys():
+            for channel_id in list(channel_show_map.keys()):
                 if channel_id in self.channel_service_map:
                     epgcache.importEvents(self.channel_service_map[channel_id], self.convertChanShows(channel_show_map[channel_id], mapping_errors))
             if pos == 0 and "last_update_time" in shows:
@@ -773,13 +776,13 @@
         for iceTimer in timers:
             # print "[IceTV] iceTimer:", iceTimer
             try:
-                action = iceTimer.get("action", "").encode("utf-8")
-                state = iceTimer.get("state", "").encode("utf-8")
-                name = iceTimer.get("name", "").encode("utf-8")
+                action = six.ensure_str(iceTimer.get("action", ""))
+                state = six.ensure_str(iceTimer.get("state", ""))
+                name = six.ensure_str(iceTimer.get("name", ""))
                 start = int(timegm(strptime(iceTimer["start_time"].split("+")[0], "%Y-%m-%dT%H:%M:%S")))
                 duration = 60 * int(iceTimer["duration_minutes"])
-                channel_id = long(iceTimer["channel_id"])
-                ice_timer_id = iceTimer["id"].encode("utf-8")
+                channel_id = int(iceTimer["channel_id"])
+                ice_timer_id = six.ensure_str(iceTimer["id"])
                 if action == "forget":
                     for timer in _session.nav.RecordTimer.timer_list:
                         if timer.ice_timer_id == ice_timer_id:
@@ -855,14 +858,14 @@
                     iceTimer["message"] = "No valid service mapping for channel_id %d" % channel_id
                     update_queue.append(iceTimer)
             except (IOError, RuntimeError, KeyError) as ex:
-                print "[IceTV] Can not process iceTimer:", ex
+                print("[IceTV] Can not process iceTimer:", ex)
         # Send back updated timer states
         res = True
         try:
             self.putTimers(update_queue)
             self.addLog("Timers updated OK")
         except KeyError as ex:
-            print "[IceTV] ", str(ex)
+            print("[IceTV] ", str(ex))
             res = False
         except (IOError, RuntimeError) as ex:
             _logResponseException(self, _("Can not update timers"), ex)
@@ -870,14 +873,14 @@
         return res
 
     def isIceTimerInUpdateQueue(self, iceTimer, update_queue):
-        ice_timer_id = iceTimer["id"].encode("utf-8")
+        ice_timer_id = six.ensure_str(iceTimer["id"])
         for timer in update_queue:
-            if ice_timer_id == timer["id"].encode("utf-8"):
+            if ice_timer_id == six.ensure_str(timer["id"]):
                 return True
         return False
 
     def isIceTimerInLocalTimerList(self, iceTimer, ignoreCompleted=False):
-        ice_timer_id = iceTimer["id"].encode("utf-8")
+        ice_timer_id = six.ensure_str(iceTimer["id"])
         for timer in _session.nav.RecordTimer.timer_list:
             if timer.ice_timer_id == ice_timer_id:
                 return True
@@ -1027,7 +1030,7 @@
                 req.data["duration_minutes"] = ((local_timer.end - config.recording.margin_after.value * 60) - (local_timer.begin + config.recording.margin_before.value * 60)) / 60
                 res = req.post()
                 try:
-                    local_timer.ice_timer_id = res.json()["timers"][0]["id"].encode("utf-8")
+                    local_timer.ice_timer_id = six.ensure_str(res.json()["timers"][0]["id"])
                     self.addLog("Timer '%s' created OK" % local_timer.name)
                     if local_timer.ice_timer_id is not None:
                         NavigationInstance.instance.RecordTimer.saveTimer()
@@ -1064,27 +1067,27 @@
 
     def postScans(self):
         scan_list = self.getTriplets()
-        print "[EPGFetcher] postScans", scan_list is not None
+        print("[EPGFetcher] postScans", scan_list is not None)
         if scan_list is None:
             return
         try:
             req = ice.Scans()
             req.data["scans"] = scan_list
             res = req.post()
-            print "[EPGFetcher] postScans", res
+            print("[EPGFetcher] postScans", res)
         except (IOError, RuntimeError, KeyError) as ex:
             _logResponseException(self, _("Can not post scan information"), ex)
 
     def postPvrLogs(self):
         log_list = [l for l in self.log if not l.sent]
-        print "[EPGFetcher] postPvrLogs", len(log_list)
+        print("[EPGFetcher] postPvrLogs", len(log_list))
         if not log_list:
             return
         try:
             req = ice.PvrLogs()
             req.data["logs"] = log_list
             res = req.post()
-            print "[EPGFetcher] postPvrLogs", res, res.json()["count_of_log_entries"]
+            print("[EPGFetcher] postPvrLogs", res, res.json()["count_of_log_entries"])
             for l in log_list:
                 l.sent = True
         except (IOError, RuntimeError, KeyError) as ex:
@@ -1181,12 +1184,12 @@
     def increaseDebug(self):
         if ice._debug_level < 4:
             ice._debug_level += 1
-        print "[IceTV] debug level =", ice._debug_level
+        print("[IceTV] debug level =", ice._debug_level)
 
     def decreaseDebug(self):
         if ice._debug_level > 0:
             ice._debug_level -= 1
-        print "[IceTV] debug level =", ice._debug_level
+        print("[IceTV] debug level =", ice._debug_level)
 
     def enable(self, res=None):
         enableIceTV()
@@ -1246,7 +1249,7 @@
         self["key_green"] = Label(_("Save"))
         self["key_yellow"] = Label()
         self["key_blue"] = Label()
-        self["config"] = MenuList(sorted(ice.iceTVServers.items()))
+        self["config"] = MenuList(sorted(list(ice.iceTVServers.items())))
         self["IrsActions"] = ActionMap(contexts=["SetupActions", "ColorActions"],
                                        actions={"cancel": self.cancel,
                                                 "red": self.cancel,
@@ -1257,13 +1260,13 @@
 
     def cancel(self):
         config.plugins.icetv.server.name.cancel()
-        print "[IceTV] server reset to", config.plugins.icetv.server.name.value
+        print("[IceTV] server reset to", config.plugins.icetv.server.name.value)
         self.close(False)
 
     def save(self):
         item = self["config"].getCurrent()
         config.plugins.icetv.server.name.value = item[1]
-        print "[IceTV] server set to", config.plugins.icetv.server.name.value
+        print("[IceTV] server set to", config.plugins.icetv.server.name.value)
         self.session.openWithCallback(self.userDone, IceTVUserTypeScreen)
 
     def userDone(self, user_success):
@@ -1548,7 +1551,7 @@
         if path.isfile(qrcode_path):
             self["qrcode"].instance.setPixmap(LoadPixmap(qrcode_path))
         else:
-            print "[IceTV] missing QR code file", qrcode_path
+            print("[IceTV] missing QR code file", qrcode_path)
 
         self.login_timer.start(3, True)
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/LCNScanner/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/LCNScanner/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/LCNScanner/plugin.py	2020-06-21 10:16:12.691436048 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/LCNScanner/plugin.py	2020-06-21 10:20:02.339323205 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 # plugin from Sif Team
 
 from enigma import eDVBDB, eServiceReference, eServiceCenter
@@ -40,7 +41,7 @@
 		if lcn == 0:
 			return
 		
-		for i in range(0, len(self.lcnlist)):
+		for i in list(range(0, len(self.lcnlist))):
 			if self.lcnlist[i][0] == lcn:
 				if self.lcnlist[i][5] > signal:
 					self.addLcnToList(namespace, nid, tsid, sid, lcn + 16536, signal)
@@ -76,9 +77,9 @@
 				value = x[0]
 				cmd = "x[0] = " + rule
 				try:
-					exec cmd
-				except Exception, e:
-					print e
+					exec(cmd)
+				except Exception as e:
+					print(e)
 
 	def addMarker(self, position, text):
 		self.markers.append([position, text])
@@ -88,8 +89,8 @@
 		
 		try:
 			f = open(self.dbfile)
-		except Exception, e:
-			print e
+		except Exception as e:
+			print(e)
 			return
 		
 		while True:
@@ -141,8 +142,8 @@
 	def writeTVBouquet(self):
 		try:
 			f = open('/etc/enigma2/userbouquet.terrestrial_lcn.tv', "w")
-		except Exception, e:
-			print e
+		except Exception as e:
+			print(e)
 			return
 
 		self.newlist = []
@@ -181,7 +182,7 @@
 					f.write("#SERVICE 1:64:0:0:0:0:0:0:0:0:\n")
 					f.write("#DESCRIPTION ------- " + self.markers[0][1] + " -------\n")
 					self.markers.remove(self.markers[0])
-			refstr = "1:0:1:%x:%x:%x:%x:0:0:0:" % (x[4],x[3],x[2],x[1]) # temporary ref
+			refstr = "1:0:1:%x:%x:%x:%x:0:0:0:" % (x[4], x[3], x[2], x[1]) # temporary ref
 			refsplit = eServiceReference(refstr).toString().split(":")
 			added = False
 			for tref in self.e2services:
@@ -219,8 +220,8 @@
 	def writeRadioBouquet(self):
 		try:
 			f = open('/etc/enigma2/userbouquet.terrestrial_lcn.radio', "w")
-		except Exception, e:
-			print e
+		except Exception as e:
+			print(e)
 			return
 
 		self.newlist = []
@@ -259,7 +260,7 @@
 					f.write("#SERVICE 1:64:0:0:0:0:0:0:0:0:\n")
 					f.write("#DESCRIPTION ------- " + self.markers[0][1] + " -------\n")
 					self.markers.remove(self.markers[0])
-			refstr = "1:0:2:%x:%x:%x:%x:0:0:0:" % (x[4],x[3],x[2],x[1]) # temporary ref
+			refstr = "1:0:2:%x:%x:%x:%x:0:0:0:" % (x[4], x[3], x[2], x[1]) # temporary ref
 			refsplit = eServiceReference(refstr).toString().split(":")
 			added = False
 			for tref in self.e2services:
@@ -323,8 +324,8 @@
 	def readBouquetsList(self, pwd, bouquetname):
 		try:
 			f = open(pwd + "/" + bouquetname)
-		except Exception, e:
-			print e
+		except Exception as e:
+			print(e)
 			return
 			
 		ret = []
@@ -350,8 +351,8 @@
 			if filename:
 				try:
 					fb = open(pwd + "/" + filename)
-				except Exception, e:
-					print e
+				except Exception as e:
+					print(e)
 					continue
 					
 				tmp = fb.readline().strip()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/NFIFlash/downloader.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/NFIFlash/downloader.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/NFIFlash/downloader.py	2020-06-21 10:16:12.691436048 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/NFIFlash/downloader.py	2020-06-21 10:20:02.339323205 -0400
@@ -1,7 +1,9 @@
 # -*- coding: utf-8 -*-
-from boxbranding import getImageVersion,getMachineBrand, getMachineName
+from __future__ import print_function
+from boxbranding import getImageVersion, getMachineBrand, getMachineName
 from os import system, access, R_OK
 import re
+import six
 
 from enigma import eConsoleAppContainer, eTimer
 from twisted.web import client
@@ -50,7 +52,7 @@
 		self.weighting = 1
 
 	def processOutput(self, data):
-		print "[MountTask] output:", data
+		print("[MountTask] output:", data)
 
 class UmountTask(Task):
 	def __init__(self, job, mountpoint):
@@ -84,13 +86,13 @@
 
 	def run(self, callback):
 		self.callback = callback
-		self.download = downloadWithProgress(self.url,self.path)
+		self.download = downloadWithProgress(self.url, self.path)
 		self.download.addProgress(self.download_progress)
 		self.download.start().addCallback(self.download_finished).addErrback(self.download_failed)
-		print "[ImageDownloadTask] downloading", self.url, "to", self.path
+		print("[ImageDownloadTask] downloading", self.url, "to", self.path)
 
 	def abort(self):
-		print "[ImageDownloadTask] aborting", self.url
+		print("[ImageDownloadTask] aborting", self.url)
 		if self.download:
 			self.download.stop()
 		self.aborted = True
@@ -146,7 +148,7 @@
 		}[task.error]
 
 class PartitionTask(Task):
-	ERROR_UNKNOWN, ERROR_BLKRRPART = range(2)
+	ERROR_UNKNOWN, ERROR_BLKRRPART = list(range(2))
 	def __init__(self, job):
 		Task.__init__(self, job, "partitioning")
 		self.postconditions.append(PartitionTaskPostcondition())
@@ -161,7 +163,7 @@
 		Task.run(self, callback)
 
 	def processOutput(self, data):
-		print "[PartitionTask] output:", data
+		print("[PartitionTask] output:", data)
 		if data.startswith("BLKRRPART:"):
 			self.error = self.ERROR_BLKRRPART
 		else:
@@ -187,7 +189,7 @@
 		self.progress += 1
 
 	def processOutput(self, data):
-		print "[UnpackTask] output: \'%s\'" % data
+		print("[UnpackTask] output: \'%s\'" % data)
 		self.job.imagefilename = data
 
 	def afterRun(self):
@@ -212,7 +214,7 @@
 		self.progress += 1
 
 	def processOutput(self, data):
-		print "[CopyTask] output:", data
+		print("[CopyTask] output:", data)
 
 	def afterRun(self):
 		self.delayTimer.callback.remove(self.progress_increment)
@@ -247,24 +249,24 @@
 
 class feedDownloader:
 	def __init__(self, feed_base, box, OE_vers):
-		print "[feedDownloader::init] feed_base=%s, box=%s" % (feed_base, box)
+		print("[feedDownloader::init] feed_base=%s, box=%s" % (feed_base, box))
 		self.feed_base = feed_base
 		self.OE_vers = OE_vers
 		self.box = box
 
 	def getList(self, callback, errback):
 		self.urlbase = "%s/%s/%s/images/" % (self.feed_base, self.OE_vers, self.box)
-		print "[getList]", self.urlbase
+		print("[getList]", self.urlbase)
 		self.callback = callback
 		self.errback = errback
 		client.getPage(self.urlbase).addCallback(self.feed_finished).addErrback(self.feed_failed)
 
 	def feed_failed(self, failure_instance):
-		print "[feed_failed]", str(failure_instance)
+		print("[feed_failed]", str(failure_instance))
 		self.errback(failure_instance.getErrorMessage())
 
 	def feed_finished(self, feedhtml):
-		print "[feed_finished]"
+		print("[feed_finished]")
 		fileresultmask = re.compile("<a class=[\'\"]nfi[\'\"] href=[\'\"](?P<url>.*?)[\'\"]>(?P<name>.*?.nfi)</a>", re.DOTALL)
 		searchresults = fileresultmask.finditer(feedhtml)
 		fileresultlist = []
@@ -314,7 +316,7 @@
 		self.onClose.append(self.removeHotplug)
 
 	def hotplugCB(self, dev, action):
-		print "[hotplugCB]", dev, action
+		print("[hotplugCB]", dev, action)
 		self.updateButton()
 
 	def updateButton(self):
@@ -325,7 +327,7 @@
 			self["key_green"].text = ""
 
 	def removeHotplug(self):
-		print "[removeHotplug]"
+		print("[removeHotplug]")
 		hotplugNotifier.remove(self.hotplugCB)
 
 	def ok(self):
@@ -336,7 +338,7 @@
 				self.filelist.descent()
 
 	def use(self):
-		print "[use]", self["filelist"].getCurrentDirectory(), self["filelist"].getFilename()
+		print("[use]", self["filelist"].getCurrentDirectory(), self["filelist"].getFilename())
 		if self["filelist"].getCurrentDirectory() is not None:
 			if self.filelist.canDescent() and self["filelist"].getFilename() and len(self["filelist"].getFilename()) > len(self["filelist"].getCurrentDirectory()):
 				self.filelist.descent()
@@ -347,7 +349,7 @@
 	def exit(self):
 		self.close(False)
 
-(ALLIMAGES, RELEASE, EXPERIMENTAL, STICK_WIZARD, START) = range(5)
+(ALLIMAGES, RELEASE, EXPERIMENTAL, STICK_WIZARD, START) = list(range(5))
 
 class NFIDownload(Screen):
 	skin = """
@@ -420,7 +422,7 @@
 			"cancel": self.close,
 		}, -1)
 		self.onShown.append(self.go)
-		self.feedlists = [[],[],[]]
+		self.feedlists = [[], [], []]
 		self.branch = START
 		self.container = eConsoleAppContainer()
 		self.container.dataAvail.append(self.tool_avail)
@@ -431,7 +433,8 @@
 		self.target_dir = None
 
 	def tool_avail(self, string):
-		print "[tool_avail]" + string
+		string = six.ensure_str(string)
+		print("[tool_avail]" + string)
 		self.taskstring += string
 
 	def go(self):
@@ -444,7 +447,7 @@
 		client.getPage(url).addCallback(self.md5sums_finished).addErrback(self.feed_failed)
 
 	def md5sums_finished(self, data):
-		print "[md5sums_finished]", data
+		print("[md5sums_finished]", data)
 		self.stickimage_md5 = data
 		self.checkUSBStick()
 
@@ -461,7 +464,7 @@
 			self.session.open(NFOViewer, self.nfo)
 
 	def keyOk(self):
-		print "[keyOk]", self["menu"].getCurrent()
+		print("[keyOk]", self["menu"].getCurrent())
 		current = self["menu"].getCurrent()
 		if current:
 			if self.branch == START:
@@ -513,7 +516,7 @@
 				self.nfo_download(ALLIMAGES, self["menu"].getIndex())
 
 	def listImages(self):
-		print "[listImages]"
+		print("[listImages]")
 		imagelist = []
 		mask = re.compile("%s/(?P<OE_vers>1\.\d)/%s/images/(?P<branch>.*?)-%s_(?P<version>.*?).nfi" % (self.feed_base, self.box, self.box), re.DOTALL)
 		for name, url in self.feedlists[ALLIMAGES]:
@@ -529,10 +532,10 @@
 
 	def getUSBPartitions(self):
 		allpartitions = [ (r.description, r.mountpoint) for r in harddiskmanager.getMountedPartitions(onlyhotplug = True)]
-		print "[getUSBPartitions]", allpartitions
+		print("[getUSBPartitions]", allpartitions)
 		usbpartition = []
 		for x in allpartitions:
-			print x, x[1] == '/', x[0].find("USB"), access(x[1], R_OK)
+			print(x, x[1] == '/', x[0].find("USB"), access(x[1], R_OK))
 			if x[1] != '/' and x[0].find("USB") > -1:  # and access(x[1], R_OK) is True:
 				usbpartition.append(x)
 		return usbpartition
@@ -549,7 +552,7 @@
 		self.session.openWithCallback(self.DeviceBrowserClosed, DeviceBrowser, None, showDirectories=True, showMountpoints=True, inhibitMounts=["/autofs/sr0/"])
 
 	def DeviceBrowserClosed(self, path):
-		print "[DeviceBrowserClosed]", str(path)
+		print("[DeviceBrowserClosed]", str(path))
 		self.target_dir = path
 		if path:
 			self.ackDestinationDevice()
@@ -562,18 +565,18 @@
 		else:
 			dev = device_description
 		message = _("Do you want to download the image to %s ?") % dev
-		choices = [(_("Yes"), self.ackedDestination), (_("List of storage devices"),self.openDeviceBrowser), (_("Cancel"),self.keyRed)]
+		choices = [(_("Yes"), self.ackedDestination), (_("List of storage devices"), self.openDeviceBrowser), (_("Cancel"), self.keyRed)]
 		self.session.openWithCallback(self.ackDestination_query, ChoiceBox, title=message, list=choices)
 
 	def ackDestination_query(self, choice):
-		print "[ackDestination_query]", choice
+		print("[ackDestination_query]", choice)
 		if isinstance(choice, tuple):
 			choice[1]()
 		else:
 			self.keyRed()
 
 	def ackedDestination(self):
-		print "[ackedDestination]", self.branch, self.target_dir
+		print("[ackedDestination]", self.branch, self.target_dir)
 		self.container.setCWD(resolveFilename(SCOPE_MEDIA)+"usb/")
 		if self.target_dir[:8] == "/autofs/":
 			self.target_dir = "/dev/" + self.target_dir[8:-1]
@@ -588,7 +591,7 @@
 		elif self.branch != STICK_WIZARD:
 			url = self.feedlists[self.branch][self.image_idx][1]
 			filename = self.feedlists[self.branch][self.image_idx][0]
-			print "[getImage] start downloading %s to %s" % (url, filename)
+			print("[getImage] start downloading %s to %s" % (url, filename))
 			if self.target_dir.startswith("/dev/"):
 				job = ImageDownloadJob(url, filename, self.target_dir, self.usbmountpoint)
 			else:
@@ -599,7 +602,7 @@
 			self.session.openWithCallback(self.ImageDownloadCB, JobView, job, afterEventChangeable = False)
 
 	def StickWizardCB(self, ret=None):
-		print "[StickWizardCB]", ret
+		print("[StickWizardCB]", ret)
 #		print job_manager.active_jobs, job_manager.failed_jobs, job_manager.job_classes, job_manager.in_background, job_manager.active_job
 		if len(job_manager.failed_jobs) == 0:
 			self.session.open(MessageBox, _("The USB stick was prepared to be bootable.\nNow you can download an NFI image file!"), type = MessageBox.TYPE_INFO)
@@ -612,7 +615,7 @@
 			self.umount()
 
 	def ImageDownloadCB(self, ret):
-		print "[ImageDownloadCB]", ret
+		print("[ImageDownloadCB]", ret)
 #		print job_manager.active_jobs, job_manager.failed_jobs, job_manager.job_classes, job_manager.in_background, job_manager.active_job
 		if len(job_manager.failed_jobs) == 0:
 			self.session.openWithCallback(self.askBackupCB, MessageBox, _("The wizard can backup your current settings. Do you want to do a backup now?"), MessageBox.TYPE_YESNO)
@@ -642,7 +645,7 @@
 	def getFeed(self):
 		self.feedDownloader15 = feedDownloader(self.feed_base, self.box, OE_vers="1.5")
 		self.feedDownloader16 = feedDownloader(self.feed_base, self.box, OE_vers="1.6")
-		self.feedlists = [[],[],[]]
+		self.feedlists = [[], [], []]
 		self.feedDownloader15.getList(self.gotFeed, self.feed_failed)
 		self.feedDownloader16.getList(self.gotFeed, self.feed_failed)
 
@@ -650,7 +653,7 @@
 		self["status"].text = _("Could not connect to %s %s .NFI image feed server:") % (getMachineBrand(), getMachineName()) + "\n" + str(message) + "\n" + _("Please check your network settings!")
 
 	def gotFeed(self, feedlist, OE_vers):
-		print "[gotFeed]", OE_vers
+		print("[gotFeed]", OE_vers)
 		releaselist = []
 		experimentallist = []
 
@@ -673,21 +676,21 @@
 	def checkUSBStick(self):
 		self.target_dir = None
 		allpartitions = [ (r.description, r.mountpoint) for r in harddiskmanager.getMountedPartitions(onlyhotplug = True)]
-		print "[checkUSBStick] found partitions:", allpartitions
+		print("[checkUSBStick] found partitions:", allpartitions)
 		usbpartition = []
 		for x in allpartitions:
-			print x, x[1] == '/', x[0].find("USB"), access(x[1], R_OK)
+			print(x, x[1] == '/', x[0].find("USB"), access(x[1], R_OK))
 			if x[1] != '/' and x[0].find("USB") > -1:  # and access(x[1], R_OK) is True:
 				usbpartition.append(x)
 
-		print usbpartition
+		print(usbpartition)
 		if len(usbpartition) == 1:
 			self.target_dir = usbpartition[0][1]
 			self.md5_passback = self.getFeed
 			self.md5_failback = self.askStartWizard
 			self.md5verify(self.stickimage_md5, self.target_dir)
 		elif not usbpartition:
-			print "[NFIFlash] needs to create usb flasher stick first!"
+			print("[NFIFlash] needs to create usb flasher stick first!")
 			self.askStartWizard()
 		else:
 			self.askStartWizard()
@@ -698,10 +701,10 @@
 First, a USB stick needs to be prepared so that it becomes bootable.
 In the next step, an NFI image file can be downloaded from the update server and saved on the USB stick.
 If you already have a prepared bootable USB stick, please insert it now. Otherwise plug in a USB stick with a minimum size of 64 MB!""") % (getMachineBrand(), getMachineName())
-		self.session.openWithCallback(self.wizardDeviceBrowserClosed, DeviceBrowser, None, message, showDirectories=True, showMountpoints=True, inhibitMounts=["/","/autofs/sr0/","/autofs/sda1/","/media/hdd/","/media/net/",self.usbmountpoint,"/media/dvd/"])
+		self.session.openWithCallback(self.wizardDeviceBrowserClosed, DeviceBrowser, None, message, showDirectories=True, showMountpoints=True, inhibitMounts=["/", "/autofs/sr0/", "/autofs/sda1/", "/media/hdd/", "/media/net/", self.usbmountpoint, "/media/dvd/"])
 
 	def wizardDeviceBrowserClosed(self, path):
-		print "[wizardDeviceBrowserClosed]", path
+		print("[wizardDeviceBrowserClosed]", path)
 		self.target_dir = path
 		if path:
 			self.md5_passback = self.getFeed
@@ -711,14 +714,14 @@
 			self.close()
 
 	def wizardQuery(self):
-		print "[wizardQuery]"
+		print("[wizardQuery]")
 		description = self.target_dir
 		for name, dev in self.getUSBPartitions():
 			if dev == self.target_dir:
 				description = name
 		message = _("You have chosen to create a new .NFI flasher bootable USB stick. This will repartition the USB stick and therefore all data on it will be erased.") + "\n"
 		message += _("The following device was found:\n\n%s\n\nDo you want to write the USB flasher to this stick?") % description
-		choices = [(_("Yes"), self.ackedDestination), (_("List of storage devices"),self.askStartWizard), (_("Cancel"),self.close)]
+		choices = [(_("Yes"), self.ackedDestination), (_("List of storage devices"), self.askStartWizard), (_("Cancel"), self.close)]
 		self.session.openWithCallback(self.ackDestination_query, ChoiceBox, title=message, list=choices)
 
 	def setMenu(self):
@@ -746,23 +749,23 @@
 	def nfo_download(self, branch, idx):
 		nfourl = (self.feedlists[branch][idx][1])[:-4]+".nfo"
 		self.nfofilename = (self.feedlists[branch][idx][0])[:-4]+".nfo"
-		print "[check_for_NFO]", nfourl
+		print("[check_for_NFO]", nfourl)
 		client.getPage(nfourl).addCallback(self.nfo_finished).addErrback(self.nfo_failed)
 
 	def nfo_failed(self, failure_instance):
-		print "[nfo_failed] " + str(failure_instance)
+		print("[nfo_failed] " + str(failure_instance))
 		self["key_blue"].text = ""
 		self.nfofilename = ""
 		self.nfo = ""
 
 	def nfo_finished(self,nfodata=""):
-		print "[nfo_finished] " + str(nfodata)
+		print("[nfo_finished] " + str(nfodata))
 		self["key_blue"].text = _("Changelog")
 		self.nfo = nfodata
 
 	def md5verify(self, md5, path):
 		cmd = "md5sum -c -s"
-		print "[verify_md5]", md5, path, cmd
+		print("[verify_md5]", md5, path, cmd)
 		self.container.setCWD(path)
 		self.container.appClosed.append(self.md5finished)
 		self.container.execute(cmd)
@@ -773,37 +776,37 @@
 		self.container.sendEOF()
 
 	def md5finished(self, retval):
-		print "[md5finished]", str(retval)
+		print("[md5finished]", str(retval))
 		self.container.appClosed.remove(self.md5finished)
 		self.container.dataSent.remove(self.md5ready)
 		if retval==0:
-			print "check passed! calling", repr(self.md5_passback)
+			print("check passed! calling", repr(self.md5_passback))
 			self.md5_passback()
 		else:
-			print "check failed! calling", repr(self.md5_failback)
+			print("check failed! calling", repr(self.md5_failback))
 			self.md5_failback()
 
 	def umount(self):
 		cmd = "umount " + self.usbmountpoint
-		print "[umount]", cmd
+		print("[umount]", cmd)
 		self.container.setCWD('/')
 		self.container.appClosed.append(self.umountFinished)
 		self.container.execute(cmd)
 
 	def umountFinished(self, retval):
-		print "[umountFinished]", str(retval)
+		print("[umountFinished]", str(retval))
 		self.container.appClosed.remove(self.umountFinished)
 		self.umountCallback()
 
 def main(session, **kwargs):
-	session.open(NFIDownload,resolveFilename(SCOPE_HDD))
+	session.open(NFIDownload, resolveFilename(SCOPE_HDD))
 
 def filescan_open(list, session, **kwargs):
-	dev = "/dev/" + list[0].path.rsplit('/',1)[0][7:]
-	print "mounting device " + dev + " to /media/usb..."
+	dev = "/dev/" + list[0].path.rsplit('/', 1)[0][7:]
+	print("mounting device " + dev + " to /media/usb...")
 	usbmountpoint = resolveFilename(SCOPE_MEDIA)+"usb/"
 	system("mount %s %s -o rw,sync" % (dev, usbmountpoint))
-	session.open(NFIDownload,usbmountpoint)
+	session.open(NFIDownload, usbmountpoint)
 
 def filescan(**kwargs):
 	from Components.Scanner import Scanner, ScanPath
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/NFIFlash/flasher.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/NFIFlash/flasher.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/NFIFlash/flasher.py	2020-06-21 10:16:12.691436048 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/NFIFlash/flasher.py	2020-06-21 10:20:02.339323205 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from boxbranding import getImageVersion
 
 from enigma import eConsoleAppContainer, eEnv
@@ -19,7 +20,7 @@
 		pass
 
 	def check(self, task):
-		print "md5Postcondition::check", task.returncode
+		print("md5Postcondition::check", task.returncode)
 		return task.returncode == 0
 
 	def getErrorMessage(self, task):
@@ -39,18 +40,18 @@
 
 	def writeInput(self, input):
 		self.container.dataSent.append(self.md5ready)
-		print "[writeInput]", input
+		print("[writeInput]", input)
 		Task.writeInput(self, input)
 
 	def md5ready(self, retval):
 		self.container.sendEOF()
 
 	def processOutput(self, data):
-		print "[md5sum]",
+		print("[md5sum]", end=' ')
 
 class writeNAND(Task):
 	def __init__(self, job, param, box):
-		Task.__init__(self,job, "Writing image file to NAND Flash")
+		Task.__init__(self, job, "Writing image file to NAND Flash")
 		self.setTool(eEnv.resolve("${libdir}/enigma2/python/Plugins/SystemPlugins/NFIFlash/writenfi-mipsel-2.6.18-r1"))
 		if box == "dm7025":
 			self.end = 256
@@ -60,11 +61,11 @@
 		self.weighting = 95
 
 	def processOutput(self, data):
-		print "[writeNand] " + data
+		print("[writeNand] " + data)
 		if data == "." or data.endswith(" ."):
 			self.progress += 1
 		elif data.find("*** done!") > 0:
-			print "data.found done"
+			print("data.found done")
 			self.setProgress(self.end)
 		else:
 			self.output_line = data
@@ -121,9 +122,9 @@
 	def autostart(self):
 		self.onShown.remove(self.autostart)
 		self.check_for_NFO()
-		print "[[layoutFinished]]", len(self["filelist"].getFileList())
+		print("[[layoutFinished]]", len(self["filelist"].getFileList()))
 		if len(self["filelist"].getFileList()) == 1:
-			print "==1"
+			print("==1")
 			self.keyOk()
 
 	def keyUp(self):
@@ -148,10 +149,10 @@
 				self["filelist"].descent()
 				self.check_for_NFO()
 			elif self["filelist"].getFilename():
-				self.session.openWithCallback(self.queryCB, MessageBox, _("Shall the USB stick wizard proceed and program the image file %s into flash memory?" % self.nfifile.rsplit('/',1)[-1]), MessageBox.TYPE_YESNO)
+				self.session.openWithCallback(self.queryCB, MessageBox, _("Shall the USB stick wizard proceed and program the image file %s into flash memory?" % self.nfifile.rsplit('/', 1)[-1]), MessageBox.TYPE_YESNO)
 
 	def check_for_NFO(self, nfifile=None):
-		print "check_for_NFO", self["filelist"].getFilename(), self["filelist"].getCurrentDirectory()
+		print("check_for_NFO", self["filelist"].getFilename(), self["filelist"].getCurrentDirectory())
 		self["infolabel"].text = ""
 		self["key_green"].text = ""
 
@@ -166,10 +167,10 @@
 		if self.nfifile.upper().endswith(".NFI"):
 			self["key_green"].text = _("Flash")
 			nfofilename = self.nfifile[0:-3]+"nfo"
-			print nfofilename, fileExists(nfofilename)
+			print(nfofilename, fileExists(nfofilename))
 			if fileExists(nfofilename):
 				nfocontent = open(nfofilename, "r").read()
-				print "nfocontent:", nfocontent
+				print("nfocontent:", nfocontent)
 				self["infolabel"].text = nfocontent
 				pos = nfocontent.find("MD5:")
 				if pos > 0:
@@ -197,7 +198,7 @@
 		self.session.openWithCallback(self.flashed, JobView, self.job, cancelable = False, backgroundable = False, afterEventChangeable = False)
 
 	def flashed(self, bg):
-		print "[flashed]"
+		print("[flashed]")
 		if self.job.status == self.job.FINISHED:
 			self["status"].text = _("NFI image flashing completed. Press Yellow to Reboot!")
 			filename = self.usbmountpoint+'enigma2settingsbackup.tar.gz'
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/NFIFlash/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/NFIFlash/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/NFIFlash/plugin.py	2020-06-21 10:16:12.691436048 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/NFIFlash/plugin.py	2020-06-21 10:20:02.339323205 -0400
@@ -1,6 +1,7 @@
+from __future__ import absolute_import
 from Plugins.Plugin import PluginDescriptor
 from Tools.HardwareInfo import HardwareInfo
-from downloader import NFIDownload, filescan
+from .downloader import NFIDownload, filescan
 
 
 def NFIFlasherMain(session, tmp = None, **kwargs):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/NetworkWizard/NetworkWizard.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/NetworkWizard/NetworkWizard.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/NetworkWizard/NetworkWizard.py	2020-06-21 10:16:12.691436048 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/NetworkWizard/NetworkWizard.py	2020-06-21 10:20:02.339323205 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from boxbranding import getMachineBrand, getMachineName, getBoxType
 from os import system
 
@@ -97,11 +98,11 @@
 
 	def getInstalledInterfaceCount(self):
 		self.originalInterfaceState = {}
-		self.Adapterlist = iNetwork.getAdapterList()
+		self.Adapterlist = list(iNetwork.getAdapterList())
 		self.InstalledInterfaceCount = len(self.Adapterlist)
 		if self.Adapterlist is not None:
 			if self.InstalledInterfaceCount == 1 and self.selectedInterface is None:
-					self.selectedInterface = self.Adapterlist[0]
+				self.selectedInterface = self.Adapterlist[0]
 		for interface in iNetwork.getAdapterList():
 			self.originalInterfaceState[interface] = {}
 			self.originalInterfaceState[interface]["up"] = iNetwork.getAdapterAttribute(interface, 'up')
@@ -129,7 +130,7 @@
 	def checkOldInterfaceState(self):
 		# disable up interface if it was originally down and config is unchanged.
 		if self.originalInterfaceStateChanged is False:
-			for interface in self.originalInterfaceState.keys():
+			for interface in list(self.originalInterfaceState.keys()):
 				if interface == self.selectedInterface:
 					if self.originalInterfaceState[interface]["up"] is False:
 						if iNetwork.checkforInterface(interface) is True:
@@ -137,7 +138,7 @@
 
 	def listInterfaces(self):
 		self.checkOldInterfaceState()
-		list = [(iNetwork.getFriendlyAdapterName(x),x) for x in iNetwork.getAdapterList()]
+		list = [(iNetwork.getFriendlyAdapterName(x), x) for x in iNetwork.getAdapterList()]
 		list.append((_("Exit network wizard"), "end"))
 		return list
 
@@ -158,11 +159,11 @@
 	def InterfaceSelectionMoved(self):
 		self.InterfaceSelect(self.selection)
 
-	def checkInterface(self,iface):
+	def checkInterface(self, iface):
 		self.stopScan()
 		if self.Adapterlist is None:
 			self.Adapterlist = iNetwork.getAdapterList()
-		if self.NextStep is not 'end':
+		if self.NextStep != 'end':
 			if len(self.Adapterlist) == 0:
 				#Reset Network to defaults if network broken
 				iNetwork.resetNetworkConfig('lan', self.resetNetworkConfigCB)
@@ -182,7 +183,7 @@
 		else:
 			self.resetNetworkConfigFinished(False)
 
-	def resetNetworkConfigFinished(self,data):
+	def resetNetworkConfigFinished(self, data):
 		if data is True:
 			self.currStep = self.getStepWithID(self.NextStep)
 			self.afterAsyncCode()
@@ -190,7 +191,7 @@
 			self.currStep = self.getStepWithID(self.NextStep)
 			self.afterAsyncCode()
 
-	def resetNetworkConfigCB(self,callback,iface):
+	def resetNetworkConfigCB(self, callback, iface):
 		if callback is not None:
 			if callback is True:
 				iNetwork.getInterfaces(self.getInterfacesFinished)
@@ -203,7 +204,7 @@
 				self.isInterfaceUp = False
 			self.resetRef.close(True)
 		else:
-			print "we should never come here!"
+			print("we should never come here!")
 
 	def AdapterSetupEnd(self, iface):
 		self.originalInterfaceStateChanged = True
@@ -214,12 +215,12 @@
 			self.currStep = self.getStepWithID("confdns")
 			self.afterAsyncCode()
 
-	def AdapterSetupEndCB(self,data):
+	def AdapterSetupEndCB(self, data):
 		if data is True:
 			if iNetwork.isWirelessInterface(self.selectedInterface):
 				if self.WlanPluginInstalled:
 					from Plugins.SystemPlugins.WirelessLan.Wlan import iStatus
-					iStatus.getDataForInterface(self.selectedInterface,self.checkWlanStateCB)
+					iStatus.getDataForInterface(self.selectedInterface, self.checkWlanStateCB)
 				else:
 					self.currStep = self.getStepWithID("checklanstatusend")
 					self.afterAsyncCode()
@@ -227,14 +228,14 @@
 				self.currStep = self.getStepWithID("checklanstatusend")
 				self.afterAsyncCode()
 
-	def AdapterSetupEndFinished(self,data):
+	def AdapterSetupEndFinished(self, data):
 		if data <= 2:
 			self.InterfaceState = True
 		else:
 			self.InterfaceState = False
 		self.AdapterRef.close(True)
 
-	def checkWlanStateCB(self,data,status):
+	def checkWlanStateCB(self, data, status):
 		if data is not None:
 			if data is True:
 				if status is not None:
@@ -257,12 +258,12 @@
 		iNetwork.checkNetworkState(self.checkNetworkStateCB)
 		self.checkRef = self.session.openWithCallback(self.checkNetworkCB, MessageBox, _("Please wait while we test your network..."), type = MessageBox.TYPE_INFO, enable_input = False)
 
-	def checkNetworkCB(self,data):
+	def checkNetworkCB(self, data):
 		if data is True:
 			if iNetwork.isWirelessInterface(self.selectedInterface):
 				if self.WlanPluginInstalled:
 					from Plugins.SystemPlugins.WirelessLan.Wlan import iStatus
-					iStatus.getDataForInterface(self.selectedInterface,self.checkWlanStateCB)
+					iStatus.getDataForInterface(self.selectedInterface, self.checkWlanStateCB)
 				else:
 					self.currStep = self.getStepWithID("checklanstatusend")
 					self.afterAsyncCode()
@@ -270,7 +271,7 @@
 				self.currStep = self.getStepWithID("checklanstatusend")
 				self.afterAsyncCode()
 
-	def checkNetworkStateCB(self,data):
+	def checkNetworkStateCB(self, data):
 		if data <= 2:
 			self.InterfaceState = True
 		else:
@@ -297,7 +298,7 @@
 			self.newAPlist.append(newentry)
 
 		if len(self.newAPlist):
-			if self.wizard[self.currStep].has_key("dynamiclist"):
+			if "dynamiclist" in self.wizard[self.currStep]:
 				currentListEntry = self["list"].getCurrent()
 				if currentListEntry is not None:
 					idx = 0
@@ -321,7 +322,7 @@
 			self.w = iWlan.getInterface()
 			aps = iWlan.getNetworkList()
 			if aps is not None:
-				print "[NetworkWizard.py] got Accespoints!"
+				print("[NetworkWizard.py] got Accespoints!")
 				tmplist = []
 				complist = []
 				for ap in aps:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/NetworkWizard/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/NetworkWizard/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/NetworkWizard/plugin.py	2020-06-21 10:16:12.691436048 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/NetworkWizard/plugin.py	2020-06-21 10:20:02.339323205 -0400
@@ -1,3 +1,4 @@
+from __future__ import absolute_import
 from Plugins.Plugin import PluginDescriptor
 from Components.config import config, ConfigBoolean
 
@@ -13,7 +14,7 @@
 	return [(_("Network wizard"), NetworkWizardMain, "nw_wizard", 40)]
 
 def NetworkWizard(*args, **kwargs):
-	from NetworkWizard import NetworkWizard
+	from .NetworkWizard import NetworkWizard
 	return NetworkWizard(*args, **kwargs)
 
 def Plugins(**kwargs):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/PositionerSetup/log.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/PositionerSetup/log.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/PositionerSetup/log.py	2020-06-21 10:16:12.691436048 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/PositionerSetup/log.py	2020-06-21 10:20:02.339323205 -0400
@@ -6,8 +6,8 @@
 # because the log unit looks enough like a file!
 
 import sys
-from cStringIO import StringIO
 import threading
+from six.moves import cStringIO as StringIO
 
 logfile = None
 # Need to make our operations thread-safe.
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/PositionerSetup/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/PositionerSetup/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/PositionerSetup/plugin.py	2020-06-21 10:16:12.691436048 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/PositionerSetup/plugin.py	2020-06-21 10:20:02.339323205 -0400
@@ -1,3 +1,5 @@
+from __future__ import print_function
+from __future__ import absolute_import
 from enigma import eTimer, eDVBResourceManager, eDVBDiseqcCommand, eDVBFrontendParametersSatellite, iDVBFrontend
 
 from Screens.Screen import Screen
@@ -24,8 +26,8 @@
 from threading import Thread as Thread
 from threading import Event as Event
 
-import log
-import rotor_calc
+from . import log
+from . import rotor_calc
 
 class PositionerSetup(Screen):
 
@@ -75,7 +77,7 @@
 			self.advanced = True
 			self.advancedconfig = config.Nims[self.feid].dvbs.advanced
 			self.advancedsats = self.advancedconfig.sat
-			self.availablesats = map(lambda x: x[0], nimmanager.getRotorSatListForNim(self.feid))
+			self.availablesats = [x[0] for x in nimmanager.getRotorSatListForNim(self.feid)]
 		else:
 			self.advanced = False
 
@@ -225,11 +227,11 @@
 				if self.frontend:
 					return True
 				else:
-					print "getFrontend failed"
+					print("getFrontend failed")
 			else:
-				print "getRawChannel failed"
+				print("getRawChannel failed")
 		else:
-			print "getResourceManager instance failed"
+			print("getResourceManager instance failed")
 		return False
 
 	def setLNB(self, lnb):
@@ -259,7 +261,7 @@
 		if orb_pos in self.availablesats:
 			lnbnum = int(self.advancedsats[orb_pos].lnb.value)
 			if not lnbnum:
-				for allsats in range(3601, 3607):
+				for allsats in list(range(3601, 3607)):
 					lnbnum = int(self.advancedsats[allsats].lnb.value)
 					if lnbnum:
 						break
@@ -303,7 +305,7 @@
 		self.positioner_storage = ConfigInteger(default = rotorposition, limits = (1, self.rotorPositions))
 		self.allocatedIndices = []
 		m = PositionerSetup.satposition2metric(orb_pos)
-		self.orbitalposition = ConfigFloat(default = [int(m[0] / 10), m[0] % 10], limits = [(0,180),(0,9)])
+		self.orbitalposition = ConfigFloat(default = [int(m[0] / 10), m[0] % 10], limits = [(0, 180), (0, 9)])
 		self.orientation = ConfigSelection([("east", _("East")), ("west", _("West"))], m[1])
 
 	def createSetup(self):
@@ -388,8 +390,8 @@
 			self.blue.setText("")
 
 	def printMsg(self, msg):
-		print msg
-		print>>log, msg
+		print(msg)
+		print(msg, file=log)
 
 	def stopMoving(self):
 		self.printMsg(_("Stop"))
@@ -427,8 +429,8 @@
 		if entry == "tune":
 			# Auto focus
 			self.printMsg(_("Auto focus"))
-			print>>log, (_("Site latitude") + "      : %5.1f %s") % PositionerSetup.latitude2orbital(self.sitelat)
-			print>>log, (_("Site longitude") + "     : %5.1f %s") % PositionerSetup.longitude2orbital(self.sitelon)
+			print((_("Site latitude") + "      : %5.1f %s") % PositionerSetup.latitude2orbital(self.sitelat), file=log)
+			print((_("Site longitude") + "     : %5.1f %s") % PositionerSetup.longitude2orbital(self.sitelon), file=log)
 			Thread(target = self.autofocus).start()
 		elif entry == "move":
 			if self.isMoving:
@@ -487,15 +489,15 @@
 			self.printMsg(_("Move to position X"))
 			satlon = self.orbitalposition.float
 			position = "%5.1f %s" % (satlon, self.orientation.value)
-			print>>log, (_("Satellite longitude:") + " %s") % position
+			print((_("Satellite longitude:") + " %s") % position, file=log)
 			satlon = PositionerSetup.orbital2metric(satlon, self.orientation.value)
 			self.statusMsg((_("Moving to position") + " %s") % position, timeout = self.STATUS_MSG_TIMEOUT)
 			self.gotoX(satlon)
 		elif entry == "tune":
 			# Start USALS calibration
 			self.printMsg(_("USALS calibration"))
-			print>>log, (_("Site latitude") + "      : %5.1f %s") % PositionerSetup.latitude2orbital(self.sitelat)
-			print>>log, (_("Site longitude") + "     : %5.1f %s") % PositionerSetup.longitude2orbital(self.sitelon)
+			print((_("Site latitude") + "      : %5.1f %s") % PositionerSetup.latitude2orbital(self.sitelat), file=log)
+			print((_("Site longitude") + "     : %5.1f %s") % PositionerSetup.longitude2orbital(self.sitelon), file=log)
 			Thread(target = self.gotoXcalibration).start()
 
 	def blueKey(self):
@@ -546,8 +548,8 @@
 	def recalcConfirmed(self, yesno):
 		if yesno:
 			self.printMsg(_("Calculate all positions"))
-			print>>log, (_("Site latitude") + "      : %5.1f %s") % PositionerSetup.latitude2orbital(self.sitelat)
-			print>>log, (_("Site longitude") + "     : %5.1f %s") % PositionerSetup.longitude2orbital(self.sitelon)
+			print((_("Site latitude") + "      : %5.1f %s") % PositionerSetup.latitude2orbital(self.sitelat), file=log)
+			print((_("Site longitude") + "     : %5.1f %s") % PositionerSetup.longitude2orbital(self.sitelon), file=log)
 			lon = self.sitelon
 			if lon >= 180:
 				lon -= 360
@@ -563,7 +565,7 @@
 		self.session.open(PositionerSetupLog)
 
 	def diseqccommand(self, cmd, param = 0):
-		print>>log, "Diseqc(%s, %X)" % (cmd, param)
+		print("Diseqc(%s, %X)" % (cmd, param), file=log)
 		self.diseqc.command(cmd, param)
 		self.tuner.retune()
 
@@ -681,7 +683,7 @@
 		rotorCmd = PositionerSetup.gotoXcalc(satlon, self.sitelat, self.sitelon)
 		self.diseqccommand("gotoX", rotorCmd)
 		x = PositionerSetup.rotorCmd2Step(rotorCmd, self.tuningstepsize)
-		print>>log, (_("Rotor step position:") + " %4d") % x
+		print((_("Rotor step position:") + " %4d") % x, file=log)
 		return x
 
 	def getTurningspeed(self):
@@ -736,12 +738,12 @@
 			return z
 
 		def reportlevels(pos, level, lock):
-			print>>log, (_("Signal quality") + " %5.1f" + chr(176) + "   : %6.2f") % (pos, level)
-			print>>log, (_("Lock ratio") + "     %5.1f" + chr(176) + "   : %6.2f") % (pos, lock)
+			print((_("Signal quality") + " %5.1f" + chr(176) + "   : %6.2f") % (pos, level), file=log)
+			print((_("Lock ratio") + "     %5.1f" + chr(176) + "   : %6.2f") % (pos, lock), file=log)
 
 		def optimise(readings):
-			xi = readings.keys()
-			yi = map(lambda (x, y) : x, readings.values())
+			xi = list(readings.keys())
+			yi = [x_y[0] for x_y in list(readings.values())]
 			x0 = sum(map(mul, xi, yi)) / sum(yi)
 			xm = xi[yi.index(max(yi))]
 			return x0, xm
@@ -760,7 +762,7 @@
 
 		self.logMsg(_("GotoX calibration"))
 		satlon = self.orbitalposition.float
-		print>>log, (_("Satellite longitude:") + " %5.1f" + chr(176) + " %s") % (satlon, self.orientation.value)
+		print((_("Satellite longitude:") + " %5.1f" + chr(176) + " %s") % (satlon, self.orientation.value), file=log)
 		satlon = PositionerSetup.orbital2metric(satlon, self.orientation.value)
 		prev_pos = 0.0						# previous relative position w.r.t. satlon
 		turningspeed = self.getTurningspeed()
@@ -797,8 +799,8 @@
 		prev_pos = x
 		measurements = {}
 		self.measure()
-		print>>log, (_("Initial signal quality") + " %5.1f" + chr(176) + ": %6.2f") % (x, self.snr_percentage)
-		print>>log, (_("Initial lock ratio") + "     %5.1f" + chr(176) + ": %6.2f") % (x, self.lock_count)
+		print((_("Initial signal quality") + " %5.1f" + chr(176) + ": %6.2f") % (x, self.snr_percentage), file=log)
+		print((_("Initial lock ratio") + "     %5.1f" + chr(176) + ": %6.2f") % (x, self.lock_count), file=log)
 		measurements[x] = (self.snr_percentage, self.lock_count)
 
 		start_pos = x
@@ -855,8 +857,8 @@
 			satlon -= 360
 		x0 += satlon
 		xm += satlon
-		print>>log, (_("Weighted position") + "     : %5.1f" + chr(176) + " %s") % (abs(x0), toGeopos(x0))
-		print>>log, (_("Strongest position") + "    : %5.1f" + chr(176) + " %s") % (abs(xm), toGeopos(xm))
+		print((_("Weighted position") + "     : %5.1f" + chr(176) + " %s") % (abs(x0), toGeopos(x0)), file=log)
+		print((_("Strongest position") + "    : %5.1f" + chr(176) + " %s") % (abs(xm), toGeopos(xm)), file=log)
 		self.logMsg((_("Final position at") + " %5.1f" + chr(176) + " %s / %d; " + _("offset is") + " %4.1f" + chr(176)) % (abs(x0), toGeopos(x0), x, x0 - satlon), timeout = 10)
 
 	def autofocus(self):
@@ -871,12 +873,12 @@
 				sleep(time * self.MAX_LOW_RATE_ADAPTER_COUNT)
 
 		def reportlevels(pos, level, lock):
-			print>>log, (_("Signal quality") + " [%2d]   : %6.2f") % (pos, level)
-			print>>log, (_("Lock ratio") + " [%2d]       : %6.2f") % (pos, lock)
+			print((_("Signal quality") + " [%2d]   : %6.2f") % (pos, level), file=log)
+			print((_("Lock ratio") + " [%2d]       : %6.2f") % (pos, lock), file=log)
 
 		def optimise(readings):
-			xi = readings.keys()
-			yi = map(lambda (x, y) : x, readings.values())
+			xi = list(readings.keys())
+			yi = [x_y1[0] for x_y1 in list(readings.values())]
 			x0 = int(round(sum(map(mul, xi, yi)) / sum(yi)))
 			xm = xi[yi.index(max(yi))]
 			return x0, xm
@@ -892,15 +894,15 @@
 		measurements = {}
 		maxsteps = max(min(round(self.MAX_FOCUS_ANGLE / self.tuningstepsize), 0x1F), 3)
 		self.measure()
-		print>>log, (_("Initial signal quality:") + " %6.2f") % self.snr_percentage
-		print>>log, (_("Initial lock ratio") + "    : %6.2f") % self.lock_count
+		print((_("Initial signal quality:") + " %6.2f") % self.snr_percentage, file=log)
+		print((_("Initial lock ratio") + "    : %6.2f") % self.lock_count, file=log)
 		if self.lock_count < 1 - self.LOCK_LIMIT:
 			msg = _("There is no signal to lock on !")
 			self.printMsg(msg)
 			self.statusMsg("")
 			self.session.open(MessageBox, msg, MessageBox.TYPE_ERROR, timeout = 5)
 			return
-		print>>log, _("Signal OK, proceeding")
+		print(_("Signal OK, proceeding"), file=log)
 		x = 0
 		dir = 1
 		if self.randomBool():
@@ -951,8 +953,8 @@
 			self.session.open(MessageBox, msg, MessageBox.TYPE_ERROR, timeout = 5)
 			return
 		(x0, xm) = optimise(measurements)
-		print>>log, (_("Weighted position") + "     : %2d") % x0
-		print>>log, (_("Strongest position") + "    : %2d") % xm
+		print((_("Weighted position") + "     : %2d") % x0, file=log)
+		print((_("Strongest position") + "    : %2d") % xm, file=log)
 		self.logMsg((_("Final position at index") + " %2d (%5.1f" + chr(176) + ")") % (x0, x0 * self.tuningstepsize), timeout = 6)
 		move(x0 - x)
 
@@ -986,8 +988,8 @@
 			else:
 				string = 'E03160' #positioner stop
 
-			print "diseqc command:",
-			print string
+			print("diseqc command:", end=' ')
+			print(string)
 			cmd.setCommandString(string)
 			self.frontend.setTone(iDVBFrontend.toneOff)
 			sleep(0.015) # wait 15msec after disable tone
@@ -1046,7 +1048,7 @@
 			f = open('/tmp/positionersetup.log', 'w')
 			f.write(log.value)
 			f.close()
-		except Exception, e:
+		except Exception as e:
 			self["list"].setText(_("Failed to write /tmp/positionersetup.log: ") + str(e))
 		self.close(True)
 
@@ -1181,7 +1183,7 @@
 			(eDVBFrontendParametersSatellite.Pilot_Off, _("Off")),
 			(eDVBFrontendParametersSatellite.Pilot_On, _("On")),
 			(eDVBFrontendParametersSatellite.Pilot_Unknown, _("Auto"))])
-		self.scan_sat.is_id = ConfigInteger(default = defaultSat.get("is_id",0), limits = (0, 255))
+		self.scan_sat.is_id = ConfigInteger(default = defaultSat.get("is_id", 0), limits = (0, 255))
 		self.scan_sat.pls_mode = ConfigSelection(default = defaultSat["pls_mode"], choices = [
 			(eDVBFrontendParametersSatellite.PLS_Root, _("Root")),
 			(eDVBFrontendParametersSatellite.PLS_Gold, _("Gold")),
@@ -1301,7 +1303,7 @@
 			transponder = nimmanager.getTransponders(satpos)[self.tuning.transponder.index]
 			returnvalue = (transponder[1] / 1000, transponder[2] / 1000,
 				transponder[3], transponder[4], 2, satpos, transponder[5], transponder[6], transponder[8], transponder[9], transponder[10], transponder[11], transponder[12], transponder[13], transponder[14])
- 		self.close(returnvalue)
+		self.close(returnvalue)
 
 	def keyCancel(self):
 		self.close(None)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SABnzbdSetup/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SABnzbdSetup/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SABnzbdSetup/plugin.py	2020-06-21 10:16:12.695436847 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SABnzbdSetup/plugin.py	2020-06-21 10:20:02.339323205 -0400
@@ -1,5 +1,7 @@
 from boxbranding import getMachineBrand, getMachineName
 import time
+import sys
+import six
 
 from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
@@ -48,15 +50,16 @@
 		self.my_sabnzbd_active = False
 		self.my_sabnzbd_run = False
 		self['actions'] = ActionMap(['WizardActions', 'ColorActions'], {'ok': self.close, 'back': self.close, 'red': self.UninstallCheck, 'green': self.SABnzbdStartStop, 'yellow': self.activateSABnzbd})
-		self.service_name = 'sabnzbd'
+		self.service_name = ("sabnzbd3" if sys.version_info[0] >= 3 else "sabnzbd")
 		self.onLayoutFinish.append(self.InstallCheck)
 
 	def InstallCheck(self):
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.InstalldataAvail)
 
 	def InstalldataAvail(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if not str:
-			restartbox = self.session.openWithCallback(self.InstallPackage,MessageBox,_('Your %s %s will be restarted after the installation of service.\n\nDo you want to install now ?') % (getMachineBrand(), getMachineName()), MessageBox.TYPE_YESNO)
+			restartbox = self.session.openWithCallback(self.InstallPackage, MessageBox, _('Your %s %s will be restarted after the installation of service.\n\nDo you want to install now ?') % (getMachineBrand(), getMachineName()), MessageBox.TYPE_YESNO)
 			restartbox.setTitle(_('Ready to install "%s" ?') % self.service_name)
 		else:
 			self.updateService()
@@ -69,7 +72,7 @@
 
 	def doInstall(self, callback, pkgname):
 		self["actions"].setEnabled(False)
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO)
 		self.message.setTitle(_('Installing Service'))
 		self.Console.ePopen('/usr/bin/opkg install ' + pkgname + ' sync', callback)
 
@@ -82,8 +85,9 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.UninstalldataAvail)
 
 	def UninstalldataAvail(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if str:
-			restartbox = self.session.openWithCallback(self.RemovePackage,MessageBox,_('Your %s %s will be restarted after the removal of service\nDo you want to remove now ?') % (getMachineBrand(), getMachineName()), MessageBox.TYPE_YESNO)
+			restartbox = self.session.openWithCallback(self.RemovePackage, MessageBox, _('Your %s %s will be restarted after the removal of service\nDo you want to remove now ?') % (getMachineBrand(), getMachineName()), MessageBox.TYPE_YESNO)
 			restartbox.setTitle(_('Ready to remove "%s" ?') % self.service_name)
 		else:
 			self.updateService()
@@ -94,7 +98,7 @@
 
 	def doRemove(self, callback, pkgname):
 		self["actions"].setEnabled(False)
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO)
 		self.message.setTitle(_('Removing Service'))
 		self.Console.ePopen('/usr/bin/opkg remove ' + pkgname + ' --force-remove --autoremove sync', callback)
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/Satfinder/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/Satfinder/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/Satfinder/plugin.py	2020-06-21 10:16:12.695436847 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/Satfinder/plugin.py	2020-06-21 10:20:02.343323755 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from enigma import eDVBResourceManager,\
 	eDVBFrontendParametersSatellite, eDVBFrontendParametersTerrestrial, eDVBFrontendParametersATSC, iDVBFrontend
 
@@ -89,7 +90,7 @@
 	def newConfig(self):
 #		self.transponder = None
 		cur = self["config"].getCurrent()
-		print"cur ", cur
+		print("cur ", cur)
 
 		if cur == self.tunerEntry:
 			self.feid = int(self.scan_nims.value)
@@ -147,7 +148,7 @@
 			slist = scan_type.choices.choices
 			dlist = []
 			for x in slist:
-				if x[0] in ("single_transponder","predefined_transponder"):
+				if x[0] in ("single_transponder", "predefined_transponder"):
 					dlist.append(x)
 			scan_type.choices.choices = dlist
 
@@ -155,13 +156,13 @@
 		fe_id = int(self.scan_nims.value)
 		multiType = config.Nims[fe_id].multiType
 		system = multiType.getText()
-		if (system in ('DVB-S','DVB-S2') and config.Nims[fe_id].dvbs.configMode.value == "nothing") or \
-			(system in ('DVB-T','DVB-T2') and config.Nims[fe_id].dvbt.configMode.value == "nothing") or \
+		if (system in ('DVB-S', 'DVB-S2') and config.Nims[fe_id].dvbs.configMode.value == "nothing") or \
+			(system in ('DVB-T', 'DVB-T2') and config.Nims[fe_id].dvbt.configMode.value == "nothing") or \
 			(system in ('DVB-C') and config.Nims[fe_id].dvbc.configMode.value == "nothing") or \
 			(system in ('ATSC') and config.Nims[fe_id].atsc.configMode.value == "nothing") :
 			return
 		slot = nimmanager.nim_slots[fe_id]
-		print "dvb_api_version ",iDVBFrontend.dvb_api_version
+		print("dvb_api_version ", iDVBFrontend.dvb_api_version)
 		self.frontend = None
 		if not self.openFrontend():
 			self.session.nav.stopService()
@@ -176,7 +177,8 @@
 		if slot.isMultiType():
 			eDVBResourceManager.getInstance().setFrontendType(slot.frontend_id, "dummy", False) #to force a clear of m_delsys_whitelist
 			types = slot.getMultiTypeList()
-			for FeType in types.itervalues():
+			import six
+			for FeType in six.itervalues(types):
 				if FeType in ("DVB-S", "DVB-S2", "DVB-S2X") and config.Nims[slot.slot].dvbs.configMode.value == "nothing":
 					continue
 				elif FeType in ("DVB-T", "DVB-T2") and config.Nims[slot.slot].dvbt.configMode.value == "nothing":
@@ -191,24 +193,24 @@
 
 
 #			if not path.exists("/proc/stb/frontend/%d/mode" % fe_id) and iDVBFrontend.dvb_api_version >= 5:
-		print "api >=5 and new style tuner driver"
+		print("api >=5 and new style tuner driver")
 		if self.frontend:
 			if system == 'DVB-C':
 				ret = self.frontend.changeType(iDVBFrontend.feCable)
-			elif system in ('DVB-T','DVB-T2'):
+			elif system in ('DVB-T', 'DVB-T2'):
 				ret = self.frontend.changeType(iDVBFrontend.feTerrestrial)
-			elif system in ('DVB-S','DVB-S2'):
+			elif system in ('DVB-S', 'DVB-S2'):
 				ret = self.frontend.changeType(iDVBFrontend.feSatellite)
 			elif system == 'ATSC':
 				ret = self.frontend.changeType(iDVBFrontend.feATSC)
 			else:
 				ret = False
 			if not ret:
-				print "%d: tunerTypeChange to '%s' failed" %(fe_id, system)
+				print("%d: tunerTypeChange to '%s' failed" %(fe_id, system))
 			else:
-				print "new system ",system
+				print("new system ", system)
 		else:
-			print "%d: tunerTypeChange to '%s' failed (BUSY)" %(fe_id, multiType.getText())
+			print("%d: tunerTypeChange to '%s' failed (BUSY)" %(fe_id, multiType.getText()))
 		self.retune()
 
 	def createConfig(self):
@@ -254,7 +256,7 @@
 			return self.retuneATSC()
 		self.frontend = None
 		self.raw_channel = None
-		print "error: tuner not enabled/supported", nim.getType()
+		print("error: tuner not enabled/supported", nim.getType())
 
 	def retuneCab(self):
 		if self.initcomplete:
@@ -373,7 +375,7 @@
 
 	def keyGoScan(self):
 		if self.transponder is None:
-			print "error: no transponder data"
+			print("error: no transponder data")
 			return
 		fe_id = int(self.scan_nims.value)
 		nim = nimmanager.nim_slots[fe_id]
@@ -434,7 +436,7 @@
 				self.transponder[3]  # system
 			)
 		else:
-			print "error: tuner not enabled/supported", nim.getType()
+			print("error: tuner not enabled/supported", nim.getType())
 		self.startScan(tlist, fe_id)
 
 	def startScan(self, tlist, feid):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SkinSelector/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SkinSelector/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SkinSelector/plugin.py	2020-06-21 10:16:12.695436847 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SkinSelector/plugin.py	2020-06-21 10:20:02.343323755 -0400
@@ -1,6 +1,7 @@
 # -*- coding: iso-8859-1 -*-
 # (c) 2006 Stephan Reichholf
 # This Software is Free, use it where you want, when you want for whatever you want and modify it if you want but don't remove my copyright!
+from __future__ import print_function
 from Screens.Screen import Screen
 from Screens.Standby import TryQuitMainloop
 from Screens.MessageBox import MessageBox
@@ -78,13 +79,13 @@
 		self.loadPreview()
 
 	def info(self):
-		aboutbox = self.session.open(MessageBox,_("Enigma2 Skinselector\n\nIf you experience any problems please contact\nstephan@reichholf.net\n\n\xA9 2006 - Stephan Reichholf"), MessageBox.TYPE_INFO)
+		aboutbox = self.session.open(MessageBox, _("Enigma2 Skinselector\n\nIf you experience any problems please contact\nstephan@reichholf.net\n\n\xA9 2006 - Stephan Reichholf"), MessageBox.TYPE_INFO)
 		aboutbox.setTitle(_("About..."))
 
 	def find(self, arg, dirname, names):
 		for x in names:
 			if x == "skin.xml":
-				if dirname <> self.root:
+				if dirname != self.root:
 					subdir = dirname[19:]
 					self.skinlist.append(subdir)
 				else:
@@ -97,10 +98,10 @@
 		else:
 			skinfile = self["SkinList"].getCurrent()+"/skin.xml"
 
-		print "Skinselector: Selected Skin: "+self.root+skinfile
+		print("Skinselector: Selected Skin: "+self.root+skinfile)
 		config.skin.primary_skin.setValue(skinfile)
 		config.skin.primary_skin.save()
-		restartbox = self.session.openWithCallback(self.restartGUI,MessageBox,_("GUI needs a restart to apply a new skin\nDo you want to Restart the GUI now?"), MessageBox.TYPE_YESNO)
+		restartbox = self.session.openWithCallback(self.restartGUI, MessageBox, _("GUI needs a restart to apply a new skin\nDo you want to Restart the GUI now?"), MessageBox.TYPE_YESNO)
 		restartbox.setTitle(_("Restart GUI now?"))
 
 	def loadPreview(self):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/BackupRestore.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/BackupRestore.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/BackupRestore.py	2020-06-21 10:16:12.695436847 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/BackupRestore.py	2020-06-21 10:20:02.343323755 -0400
@@ -1,3 +1,5 @@
+from __future__ import print_function
+from __future__ import absolute_import
 from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
 from Screens.Console import Console
@@ -12,7 +14,7 @@
 from Components.Button import Button
 from Components.config import NoSave, getConfigListEntry, configfile, ConfigSelection, ConfigSubsection, ConfigText, ConfigLocations
 from Components.config import config
-from Components.ConfigList import ConfigList,ConfigListScreen
+from Components.ConfigList import ConfigList, ConfigListScreen
 from Components.FileList import MultiFileSelectList
 from Components.Network import iNetwork
 from Plugins.Plugin import PluginDescriptor
@@ -22,7 +24,8 @@
 from time import gmtime, strftime, localtime, sleep
 from datetime import date
 from boxbranding import getBoxType, getMachineBrand, getMachineName, getImageDistro
-import ShellCompatibleFunctions
+from . import ShellCompatibleFunctions
+import six
 
 boxtype = getBoxType()
 distro = getImageDistro()
@@ -198,16 +201,16 @@
 				self.newfilename = self.backuppath + "/" + dt + '-' + self.backupfile
 				if path.exists(self.newfilename):
 					remove(self.newfilename)
-				rename(self.fullbackupfilename,self.newfilename)
+				rename(self.fullbackupfilename, self.newfilename)
 			if self.finished_cb:
-				self.session.openWithCallback(self.finished_cb, Console, title = _("Backup is running..."), cmdlist = cmd,finishedCallback = self.backupFinishedCB,closeOnSuccess = True)
+				self.session.openWithCallback(self.finished_cb, Console, title = _("Backup is running..."), cmdlist = cmd, finishedCallback = self.backupFinishedCB, closeOnSuccess = True)
 			else:
-				self.session.open(Console, title = _("Backup is running..."), cmdlist = cmd,finishedCallback = self.backupFinishedCB, closeOnSuccess = True)
+				self.session.open(Console, title = _("Backup is running..."), cmdlist = cmd, finishedCallback = self.backupFinishedCB, closeOnSuccess = True)
 		except OSError:
 			if self.finished_cb:
 				self.session.openWithCallback(self.finished_cb, MessageBox, _("Sorry, your backup destination is not writeable.\nPlease select a different one."), MessageBox.TYPE_INFO, timeout = 10 )
 			else:
-				self.session.openWithCallback(self.backupErrorCB,MessageBox, _("Sorry, your backup destination is not writeable.\nPlease select a different one."), MessageBox.TYPE_INFO, timeout = 10 )
+				self.session.openWithCallback(self.backupErrorCB, MessageBox, _("Sorry, your backup destination is not writeable.\nPlease select a different one."), MessageBox.TYPE_INFO, timeout = 10 )
 
 	def backupFinishedCB(self,retval = None):
 		config.usage.shutdownOK.setValue(self.save_shutdownOK)
@@ -310,7 +313,7 @@
 
 	def changeSelectionState(self):
 		if self.readOnly:
-			self.session.open(MessageBox,_("The default backup selection cannot be changed.\nPlease use the 'additional' and 'excluded' backup selection."), type = MessageBox.TYPE_INFO,timeout = 10)
+			self.session.open(MessageBox, _("The default backup selection cannot be changed.\nPlease use the 'additional' and 'excluded' backup selection."), type = MessageBox.TYPE_INFO, timeout = 10)
 		else:
 			self["checkList"].changeSelectionState()
 			self.selectedFiles = self["checkList"].getSelectedList()
@@ -447,7 +450,7 @@
 	def startDelete(self, ret = False):
 		if ret == True:
 			self.exe = True
-			print "removing:",self.val
+			print("removing:", self.val)
 			if path.exists(self.val) == True:
 				remove(self.val)
 			self.exe = False
@@ -498,7 +501,7 @@
 		if path.exists("/proc/stb/vmpeg/0/dst_width"):
 			restorecmdlist += ["echo 0 > /proc/stb/vmpeg/0/dst_height", "echo 0 > /proc/stb/vmpeg/0/dst_left", "echo 0 > /proc/stb/vmpeg/0/dst_top", "echo 0 > /proc/stb/vmpeg/0/dst_width"]
 		restorecmdlist.append("/etc/init.d/autofs restart")
-		print"[SOFTWARE MANAGER] Restore Settings !!!!"
+		print("[SOFTWARE MANAGER] Restore Settings !!!!")
 
 		self.session.open(Console, title = _("Restoring..."), cmdlist = restorecmdlist, finishedCallback = self.restoreFinishedCB)
 
@@ -538,7 +541,7 @@
 
 	def rebootSYS(self, ret = None):
 		try:
-			f = open("/tmp/rebootSYS.sh","w")
+			f = open("/tmp/rebootSYS.sh", "w")
 			f.write("#!/bin/bash\n\nkillall -9 enigma2\nreboot\n")
 			f.close()
 			self.session.open(Console, title = _("Your %s %s will Reboot...")% (getMachineBrand(), getMachineName()), cmdlist = ["chmod +x /tmp/rebootSYS.sh", "/tmp/rebootSYS.sh"])
@@ -590,13 +593,13 @@
 			from Plugins.Extensions.MyMetrixLite.ActivateSkinSettings import ActivateSkinSettings
 			result = ActivateSkinSettings().WriteSkin(True)
 			if result:
-				infotext = ({1:_("Unknown Error creating Skin.\nPlease check after reboot MyMetrixLite-Plugin and apply your settings."),
-							2:_("Error creating HD-Skin. Not enough flash memory free."),
-							3:_("Error creating EHD-Skin. Not enough flash memory free.\nUsing HD-Skin!"),
-							4:_("Error creating EHD-Skin. Icon package download not available.\nUsing HD-Skin!"),
-							5:_("Error creating EHD-Skin.\nUsing HD-Skin!"),
-							6:_("Error creating EHD-Skin. Some EHD-Icons are missing.\nUsing HD-Skin!"),
-							7:_("Error, unknown Result!"),
+				infotext = ({1: _("Unknown Error creating Skin.\nPlease check after reboot MyMetrixLite-Plugin and apply your settings."),
+							2: _("Error creating HD-Skin. Not enough flash memory free."),
+							3: _("Error creating EHD-Skin. Not enough flash memory free.\nUsing HD-Skin!"),
+							4: _("Error creating EHD-Skin. Icon package download not available.\nUsing HD-Skin!"),
+							5: _("Error creating EHD-Skin.\nUsing HD-Skin!"),
+							6: _("Error creating EHD-Skin. Some EHD-Icons are missing.\nUsing HD-Skin!"),
+							7: _("Error, unknown Result!"),
 							}[result])
 				self.session.openWithCallback(self.checkSkinCallback, MessageBox, infotext, MessageBox.TYPE_ERROR, timeout = 30)
 			else:
@@ -625,7 +628,7 @@
 		self.setTitle(_("Restart Network Adapter"))
 
 	def restartLan(self):
-		print"[SOFTWARE MANAGER] Restart Network"
+		print("[SOFTWARE MANAGER] Restart Network")
 		iNetwork.restartNetwork(self.restartLanDataAvail)
 
 	def restartLanDataAvail(self, data):
@@ -658,14 +661,15 @@
 		self.doUpdate()
 
 	def doUpdate(self):
-		print"[SOFTWARE MANAGER] update package list"
+		print("[SOFTWARE MANAGER] update package list")
 		self.container.execute("opkg update")
 
 	def doList(self):
-		print"[SOFTWARE MANAGER] read installed package list"
+		print("[SOFTWARE MANAGER] read installed package list")
 		self.container.execute("opkg list-installed | egrep 'enigma2-plugin-|task-base|packagegroup-base'")
 
 	def dataAvail(self, strData):
+		strData = six.ensure_str(strData)
 		if self.type == self.LIST:
 			strData = self.remainingdata + strData
 			lines = strData.split('\n')
@@ -698,7 +702,7 @@
 		self.Menulist = []
 		for x in self.PluginList:
 			if x not in self.pluginsInstalled:
-				self.Menulist.append(SettingsEntry(x , True))
+				self.Menulist.append(SettingsEntry(x, True))
 		if len(self.Menulist) == 0:
 			self.close()
 		else:
@@ -724,7 +728,7 @@
 		self.index = 0
 		self.list = menulist
 		for r in menulist:
-			print "[SOFTWARE MANAGER] Plugin to restore: %s" % r[0]
+			print("[SOFTWARE MANAGER] Plugin to restore: %s" % r[0])
 		self.container = eConsoleAppContainer()
 		self["menu"] = List(list())
 		self["menu"].onSelectionChanged.append(self.selectionChanged)
@@ -799,7 +803,7 @@
 		item = self["menu"].getCurrent()[0]
 		state = self["menu"].getCurrent()[2]
 		if state:
-			self.list[index] = SettingsEntry(item , False)
+			self.list[index] = SettingsEntry(item, False)
 		else:
 			self.list[index] = SettingsEntry(item, True)
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/Flash_online.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/Flash_online.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/Flash_online.py	2020-06-21 10:16:12.695436847 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/Flash_online.py	2020-06-21 10:20:02.343323755 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Components.config import config
 from Components.Label import Label
 from Components.ActionMap import ActionMap
@@ -14,7 +15,8 @@
 from Tools.BoundFunction import boundFunction
 from Tools.Multiboot import GetImagelist, GetCurrentImage, GetCurrentImageMode, GetBoxName
 from enigma import eTimer, fbClass
-import os, urllib2, json, shutil, math, time, zipfile, shutil
+import os, json, shutil, math, time, zipfile, shutil
+from six.moves.urllib.request import urlopen
 
 
 from boxbranding import getImageDistro, getMachineBuild, getMachineBrand, getMachineName, getMachineMtdRoot, getMachineMtdKernel
@@ -23,7 +25,7 @@
 feedurl = 'http://%s/%s/json' %(feedserver, getImageDistro())
 
 def checkimagefiles(files):
-	return len([x for x in files if 'kernel' in x and '.bin' in x or x in ('zImage', 'uImage', 'root_cfe_auto.bin', 'root_cfe_auto.jffs2', 'oe_kernel.bin', 'oe_rootfs.bin', 'e2jffs2.img', 'rootfs.tar.bz2', 'rootfs.ubi','rootfs.bin')]) >= 2
+	return len([x for x in files if 'kernel' in x and '.bin' in x or x in ('zImage', 'uImage', 'root_cfe_auto.bin', 'root_cfe_auto.jffs2', 'oe_kernel.bin', 'oe_rootfs.bin', 'e2jffs2.img', 'rootfs.tar.bz2', 'rootfs.ubi', 'rootfs.bin')]) >= 2
 
 class FlashOnline(Screen):
 	skin = """
@@ -45,7 +47,7 @@
 		self["key_yellow"] = StaticText()
 		self["key_blue"] = StaticText()
 		self["description"] = StaticText()
-		self["list"] = ChoiceList(list=[ChoiceEntryComponent('',((_("Retrieving image list - Please wait...")), "Waiter"))])
+		self["list"] = ChoiceList(list=[ChoiceEntryComponent('', ((_("Retrieving image list - Please wait...")), "Waiter"))])
 
 		self["actions"] = ActionMap(["OkCancelActions", "ColorActions", "DirectionActions", "KeyboardInputActions", "MenuActions"],
 		{
@@ -88,9 +90,9 @@
 			box = GetBoxName()
 			if not self.jsonlist:
 				try:
-					self.jsonlist = dict(json.load(urllib2.urlopen('%s/%s' % (feedurl, box))))
+					self.jsonlist = dict(json.load(urlopen('%s/%s' % (feedurl, box))))
 					#if config.usage.alternative_imagefeed.value:
-					#	self.jsonlist.update(dict(json.load(urllib2.urlopen('%s%s' % (config.usage.alternative_imagefeed.value, box)))))
+					#	self.jsonlist.update(dict(json.load(urlopen('%s%s' % (config.usage.alternative_imagefeed.value, box)))))
 				except:
 					pass
 			self.imagesList = dict(self.jsonlist)
@@ -105,24 +107,24 @@
 							for dir in [dir for dir in [os.path.join(media, dir) for dir in os.listdir(media)] if os.path.isdir(dir) and os.path.splitext(dir)[1] == ".unzipped"]:
 								shutil.rmtree(dir)
 
-		list = []
+		_list = []
 		for catagorie in reversed(sorted(self.imagesList.keys())):
 			if catagorie in self.expanded:
-				list.append(ChoiceEntryComponent('expanded',((str(catagorie)), "Expander")))
-				for image in reversed(sorted(self.imagesList[catagorie].keys(), key=lambda x: x.split(os.sep)[-1])):
-					list.append(ChoiceEntryComponent('verticalline',((str(self.imagesList[catagorie][image]['name'])), str(self.imagesList[catagorie][image]['link']))))
+				_list.append(ChoiceEntryComponent('expanded', ((str(catagorie)), "Expander")))
+				for image in reversed(sorted(list(self.imagesList[catagorie].keys()), key=lambda x: x.split(os.sep)[-1])):
+					_list.append(ChoiceEntryComponent('verticalline', ((str(self.imagesList[catagorie][image]['name'])), str(self.imagesList[catagorie][image]['link']))))
 			else:
-				for image in self.imagesList[catagorie].keys():
-					list.append(ChoiceEntryComponent('expandable',((str(catagorie)), "Expander")))
+				for image in list(self.imagesList[catagorie].keys()):
+					_list.append(ChoiceEntryComponent('expandable', ((str(catagorie)), "Expander")))
 					break
-		if list:
-			self["list"].setList(list)
+		if _list:
+			self["list"].setList(_list)
 			if self.setIndex:
-				self["list"].moveToIndex(self.setIndex if self.setIndex < len(list) else len(list) - 1)
+				self["list"].moveToIndex(self.setIndex if self.setIndex < len(_list) else len(_list) - 1)
 				if self["list"].l.getCurrentSelection()[0][1] == "Expander":
 					self.setIndex -= 1
 					if self.setIndex:
-						self["list"].moveToIndex(self.setIndex if self.setIndex < len(list) else len(list) - 1)
+						self["list"].moveToIndex(self.setIndex if self.setIndex < len(_list) else len(_list) - 1)
 				self.setIndex = 0
 			self.selectionChanged()
 		else:
@@ -234,9 +236,9 @@
 		choices = []
 		HIslot = len(imagedict) + 1
 		currentimageslot = GetCurrentImage()
-		print "[FlashOnline] Current Image Slot %s, Imagelist %s"% ( currentimageslot, imagedict)
-		for x in range(1,HIslot):
-			choices.append(((_("slot%s - %s (current image)") if x == currentimageslot else _("slot%s - %s")) % (x, imagedict[x]['imagename']), (x,True)))
+		print("[FlashOnline] Current Image Slot %s, Imagelist %s"% ( currentimageslot, imagedict))
+		for x in list(range(1, HIslot)):
+			choices.append(((_("slot%s - %s (current image)") if x == currentimageslot else _("slot%s - %s")) % (x, imagedict[x]['imagename']), (x, True)))
 		choices.append((_("No, do not flash an image"), False))
 		self.session.openWithCallback(self.checkMedia, MessageBox, self.message, list=choices, default=currentimageslot, simple=True)
 
@@ -309,7 +311,7 @@
 		if retval:
 			if 'backup' == retval or True == retval:
 				from Plugins.SystemPlugins.SoftwareManager.BackupRestore import BackupScreen
-				self.session.openWithCallback(self.flashPostAction,BackupScreen, runBackup = True)
+				self.session.openWithCallback(self.flashPostAction, BackupScreen, runBackup = True)
 			else:
 				self.flashPostAction()
 		else:
@@ -324,7 +326,7 @@
 			(_("Backup, flash and restore settings and no plugins"), "restoresettingsnoplugin"),
 			(_("Backup, flash and restore settings and selected plugins (ask user)"), "restoresettings"),
 			(_("Do not flash image"), "abort"))
-			self.session.openWithCallback(self.postFlashActionCallback, ChoiceBox,title=title,list=choices,selection=self.SelectPrevPostFlashAction())
+			self.session.openWithCallback(self.postFlashActionCallback, ChoiceBox, title=title, list=choices, selection=self.SelectPrevPostFlashAction())
 		else:
 			self.abort()
 
@@ -384,9 +386,9 @@
 					try:
 						if not os.path.exists('/media/hdd/images/config'):
 							os.makedirs('/media/hdd/images/config')
-						open('/media/hdd/images/config/settings','w').close()
+						open('/media/hdd/images/config/settings', 'w').close()
 					except:
-						print "[FlashOnline] postFlashActionCallback: failed to create /media/hdd/images/config/settings"
+						print("[FlashOnline] postFlashActionCallback: failed to create /media/hdd/images/config/settings")
 				else:
 					if os.path.exists('/media/hdd/images/config/settings'):
 						os.unlink('/media/hdd/images/config/settings')
@@ -394,9 +396,9 @@
 					try:
 						if not os.path.exists('/media/hdd/images/config'):
 							os.makedirs('/media/hdd/images/config')
-						open('/media/hdd/images/config/plugins','w').close()
+						open('/media/hdd/images/config/plugins', 'w').close()
 					except:
-						print "[FlashOnline] postFlashActionCallback: failed to create /media/hdd/images/config/plugins"
+						print("[FlashOnline] postFlashActionCallback: failed to create /media/hdd/images/config/plugins")
 				else:
 					if os.path.exists('/media/hdd/images/config/plugins'):
 						os.unlink('/media/hdd/images/config/plugins')
@@ -404,9 +406,9 @@
 					try:
 						if not os.path.exists('/media/hdd/images/config'):
 							os.makedirs('/media/hdd/images/config')
-						open('/media/hdd/images/config/noplugins','w').close()
+						open('/media/hdd/images/config/noplugins', 'w').close()
 					except:
-						print "[FlashOnline] postFlashActionCallback: failed to create /media/hdd/images/config/noplugins"
+						print("[FlashOnline] postFlashActionCallback: failed to create /media/hdd/images/config/noplugins")
 				else:
 					if os.path.exists('/media/hdd/images/config/noplugins'):
 						os.unlink('/media/hdd/images/config/noplugins')
@@ -417,27 +419,27 @@
 								os.makedirs('/media/hdd/images/config')
 							if config.plugins.softwaremanager.restoremode.value == "slow":
 								if not os.path.exists('/media/hdd/images/config/slow'):
-									open('/media/hdd/images/config/slow','w').close()
+									open('/media/hdd/images/config/slow', 'w').close()
 								if os.path.exists('/media/hdd/images/config/fast'):
 									os.unlink('/media/hdd/images/config/fast')
 								if os.path.exists('/media/hdd/images/config/turbo'):
 									os.unlink('/media/hdd/images/config/turbo')
 							elif config.plugins.softwaremanager.restoremode.value == "fast":
 								if not os.path.exists('/media/hdd/images/config/fast'):
-									open('/media/hdd/images/config/fast','w').close()
+									open('/media/hdd/images/config/fast', 'w').close()
 								if os.path.exists('/media/hdd/images/config/slow'):
 									os.unlink('/media/hdd/images/config/slow')
 								if os.path.exists('/media/hdd/images/config/turbo'):
 									os.unlink('/media/hdd/images/config/turbo')
 							elif config.plugins.softwaremanager.restoremode.value == "turbo":
 								if not os.path.exists('/media/hdd/images/config/turbo'):
-									open('/media/hdd/images/config/turbo','w').close()
+									open('/media/hdd/images/config/turbo', 'w').close()
 								if os.path.exists('/media/hdd/images/config/slow'):
 									os.unlink('/media/hdd/images/config/slow')
 								if os.path.exists('/media/hdd/images/config/fast'):
 									os.unlink('/media/hdd/images/config/fast')
 						except:
-							print "[FlashOnline] postFlashActionCallback: failed to create restore mode flagfile"
+							print("[FlashOnline] postFlashActionCallback: failed to create restore mode flagfile")
 				self.startDownload()
 			else:
 				self.abort()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/ImageBackup.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/ImageBackup.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/ImageBackup.py	2020-06-21 10:16:12.695436847 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/ImageBackup.py	2020-06-21 10:20:02.343323755 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 #################################################################################
 # FULL BACKUP UYILITY FOR ENIGMA2, SUPPORTS THE MODELS OE-A 4.4     			#
 #	                         						                            #
@@ -19,9 +20,14 @@
 from time import time, strftime, localtime
 from Tools.BoundFunction import boundFunction
 from Tools.Multiboot import GetImagelist, GetCurrentImage, GetCurrentImageMode, GetCurrentKern, GetCurrentRoot, GetBoxName
-import os, commands, datetime
+import os, datetime, sys
 from boxbranding import getMachineBrand, getMachineName, getDriverDate, getImageVersion, getImageBuild, getBrandOEM, getMachineBuild, getImageFolder, getMachineUBINIZE, getMachineMKUBIFS, getMachineMtdKernel, getMachineMtdRoot, getMachineKernelFile, getMachineRootFile, getImageFileSystem, getImageDistro, getImageVersion
 
+if sys.version_info[0] >= 3:
+	import subprocess
+else:
+	import commands
+
 VERSION = _("Version %s %s") %(getImageDistro(), getImageVersion())
 
 class ImageBackup(Screen):
@@ -50,7 +56,7 @@
 		self["description"] = StaticText(_("Use the cursor keys to select an installed image and then Start button."))
 		self["options"] = StaticText(_(" "))
 		self["key_green"] = StaticText(_("Start"))
-		self["config"] = ChoiceList(list=[ChoiceEntryComponent('',((_("Retrieving image slots - Please wait...")), "Queued"))])
+		self["config"] = ChoiceList(list=[ChoiceEntryComponent('', ((_("Retrieving image slots - Please wait...")), "Queued"))])
 		imagedict = []
 		self.getImageList = None
 		self.startit()
@@ -83,17 +89,17 @@
 		self.saveImageList = imagedict
 		list = []
 		currentimageslot = GetCurrentImage() or 1
-		print "[Image Backup] Current Image Slot %s, Imagelist %s"% ( currentimageslot, imagedict)
+		print("[Image Backup] Current Image Slot %s, Imagelist %s"% ( currentimageslot, imagedict))
 		if imagedict:
 			for x in sorted(imagedict.keys()):
 				if imagedict[x]["imagename"] != _("Empty slot"):
 					if x == 1 and currentimageslot == 1 and SystemInfo["canRecovery"]:
-						list.append(ChoiceEntryComponent('',(_("slot%s - %s as USB Recovery") % (x, imagedict[x]["imagename"]), x, True)))
-					list.append(ChoiceEntryComponent('',((_("slot%s - %s (current image)") if x == currentimageslot else _("slot%s - %s")) % (x, imagedict[x]["imagename"]), x, False)))
+						list.append(ChoiceEntryComponent('', (_("slot%s - %s as USB Recovery") % (x, imagedict[x]["imagename"]), x, True)))
+					list.append(ChoiceEntryComponent('', ((_("slot%s - %s (current image)") if x == currentimageslot else _("slot%s - %s")) % (x, imagedict[x]["imagename"]), x, False)))
 		else:
 			if SystemInfo["canRecovery"]:
-				list.append(ChoiceEntryComponent('',(_("internal flash: %s %s as USB Recovery") %(getImageDistro(), getImageVersion()),"x",True)))
-			list.append(ChoiceEntryComponent('',(_("internal flash:  %s %s ") %(getImageDistro(), getImageVersion()),"x",False)))
+				list.append(ChoiceEntryComponent('', (_("internal flash: %s %s as USB Recovery") %(getImageDistro(), getImageVersion()), "x", True)))
+			list.append(ChoiceEntryComponent('', (_("internal flash:  %s %s ") %(getImageDistro(), getImageVersion()), "x", False)))
 		self["config"].setList(list)
 
 	def start(self):
@@ -104,9 +110,9 @@
 		if self.currentSelected[0][1] != "Queued":
 			for media in ['/media/%s' % x for x in os.listdir('/media')] + (['/media/net/%s' % x for x in os.listdir('/media/net')] if os.path.isdir('/media/net') else []):
 				if Harddisk.Freespace(media) > 300000:
-					choices.append((_("Backup to destination: %s") % (media),self.currentSelected[0][1], media, self.currentSelected[0][2]))
+					choices.append((_("Backup to destination: %s") % (media), self.currentSelected[0][1], media, self.currentSelected[0][2]))
 			choices.append((_("No, do not backup a image"), False))
-			self.session.openWithCallback(self.doFullBackup, ChoiceBox,title=title,list=choices)
+			self.session.openWithCallback(self.doFullBackup, ChoiceBox, title=title, list=choices)
 
 	def selectionChanged(self):
 		currentSelected = self["config"].l.getCurrentSelection()
@@ -171,28 +177,28 @@
 					self.MTDKERNEL = getMachineMtdKernel()
 					self.MTDROOTFS = getMachineMtdRoot()
 
-				print "[Image Backup] BOX MACHINEBUILD = >%s<" %self.MACHINEBUILD
-				print "[Image Backup] BOX MACHINENAME = >%s<" %self.MACHINENAME
-				print "[Image Backup] BOX MACHINEBRAND = >%s<" %self.MACHINEBRAND
-				print "[Image Backup] BOX MODEL = >%s<" %self.MODEL
-				print "[Image Backup] OEM MODEL = >%s<" %self.OEM
-				print "[Image Backup] IMAGEFOLDER = >%s<" %self.IMAGEFOLDER
-				print "[Image Backup] UBINIZE = >%s<" %self.UBINIZE_ARGS
-				print "[Image Backup] MKUBIFS = >%s<" %self.MKUBIFS_ARGS
-				print "[Image Backup] MTDBOOT = >%s<" %self.MTDBOOT
-				print "[Image Backup] MTDKERNEL = >%s<" %self.MTDKERNEL
-				print "[Image Backup] MTDROOTFS = >%s<" %self.MTDROOTFS
-				print "[Image Backup] ROOTFSBIN = >%s<" %self.ROOTFSBIN
-				print "[Image Backup] KERNELBIN = >%s<" %self.KERNELBIN
-				print "[Image Backup] ROOTFSSUBDIR = >%s<" %self.ROOTFSSUBDIR
-				print "[Image Backup] ROOTFSTYPE = >%s<" %self.ROOTFSTYPE
-				print "[Image Backup] EMMCIMG = >%s<" %self.EMMCIMG
-				print "[Image Backup] IMAGEDISTRO = >%s<" %self.IMAGEDISTRO
-				print "[Image Backup] DISTROVERSION = >%s<" %self.DISTROVERSION
-				print "[Image Backup] MTDBOOT = >%s<" %self.MTDBOOT
-				print "[Image Backup] USB RECOVERY = >%s< " %self.RECOVERY
-				print "[Image Backup] DESTINATION = >%s< " %self.DIRECTORY
-				print "[Image Backup] SLOT = >%s< " %self.SLOT
+				print("[Image Backup] BOX MACHINEBUILD = >%s<" %self.MACHINEBUILD)
+				print("[Image Backup] BOX MACHINENAME = >%s<" %self.MACHINENAME)
+				print("[Image Backup] BOX MACHINEBRAND = >%s<" %self.MACHINEBRAND)
+				print("[Image Backup] BOX MODEL = >%s<" %self.MODEL)
+				print("[Image Backup] OEM MODEL = >%s<" %self.OEM)
+				print("[Image Backup] IMAGEFOLDER = >%s<" %self.IMAGEFOLDER)
+				print("[Image Backup] UBINIZE = >%s<" %self.UBINIZE_ARGS)
+				print("[Image Backup] MKUBIFS = >%s<" %self.MKUBIFS_ARGS)
+				print("[Image Backup] MTDBOOT = >%s<" %self.MTDBOOT)
+				print("[Image Backup] MTDKERNEL = >%s<" %self.MTDKERNEL)
+				print("[Image Backup] MTDROOTFS = >%s<" %self.MTDROOTFS)
+				print("[Image Backup] ROOTFSBIN = >%s<" %self.ROOTFSBIN)
+				print("[Image Backup] KERNELBIN = >%s<" %self.KERNELBIN)
+				print("[Image Backup] ROOTFSSUBDIR = >%s<" %self.ROOTFSSUBDIR)
+				print("[Image Backup] ROOTFSTYPE = >%s<" %self.ROOTFSTYPE)
+				print("[Image Backup] EMMCIMG = >%s<" %self.EMMCIMG)
+				print("[Image Backup] IMAGEDISTRO = >%s<" %self.IMAGEDISTRO)
+				print("[Image Backup] DISTROVERSION = >%s<" %self.DISTROVERSION)
+				print("[Image Backup] MTDBOOT = >%s<" %self.MTDBOOT)
+				print("[Image Backup] USB RECOVERY = >%s< " %self.RECOVERY)
+				print("[Image Backup] DESTINATION = >%s< " %self.DIRECTORY)
+				print("[Image Backup] SLOT = >%s< " %self.SLOT)
 
 				self.TITLE = _("Full back-up on %s") % (self.DIRECTORY)
 				self.START = time()
@@ -287,13 +293,13 @@
 				if cmd3:
 					cmdlist.append(cmd3)
 
-				if self.MODEL in ("gbquad4k","gbue4k","gbx34k"):
+				if self.MODEL in ("gbquad4k", "gbue4k", "gbx34k"):
 					cmdlist.append('echo "' + _("Create:") + " boot dump" + '"')
 					cmdlist.append("dd if=/dev/mmcblk0p1 of=%s/boot.bin" % self.WORKDIR)
 					cmdlist.append('echo "' + _("Create:") + " rescue dump" + '"')
 					cmdlist.append("dd if=/dev/mmcblk0p3 of=%s/rescue.bin" % self.WORKDIR)
 
-				if self.MACHINEBUILD  in ("h9","i55plus"):
+				if self.MACHINEBUILD  in ("h9", "i55plus"):
 					cmdlist.append('echo "' + _("Create:") + " fastboot dump" + '"')
 					cmdlist.append("dd if=/dev/mtd0 of=%s/fastboot.bin" % self.WORKDIR)
 					cmdlist.append('echo "' + _("Create:") + " bootargs dump" + '"')
@@ -342,22 +348,22 @@
 					cmdlist.append("dd if=/dev/zero of=%s/rootfs.ext4 seek=%s count=60 bs=1024" % (self.WORKDIR, SEEK_CONT))
 					cmdlist.append("mkfs.ext4 -F -i 4096 %s/rootfs.ext4" % (self.WORKDIR))
 					cmdlist.append("mkdir -p %s/userdata" % self.WORKDIR)
-					cmdlist.append("mount %s/rootfs.ext4 %s/userdata" %(self.WORKDIR,self.WORKDIR))
+					cmdlist.append("mount %s/rootfs.ext4 %s/userdata" %(self.WORKDIR, self.WORKDIR))
 					cmdlist.append("mkdir -p %s/userdata/linuxrootfs1" % self.WORKDIR)
 					cmdlist.append("mkdir -p %s/userdata/linuxrootfs2" % self.WORKDIR)
 					cmdlist.append("mkdir -p %s/userdata/linuxrootfs3" % self.WORKDIR)
 					cmdlist.append("mkdir -p %s/userdata/linuxrootfs4" % self.WORKDIR)
-					cmdlist.append("rsync -aAX %s/ %s/userdata/linuxrootfs1/" % (self.backuproot,self.WORKDIR))
+					cmdlist.append("rsync -aAX %s/ %s/userdata/linuxrootfs1/" % (self.backuproot, self.WORKDIR))
 					cmdlist.append("umount %s/userdata" %(self.WORKDIR))
 
 				cmdlist.append('echo "' + _("Create:") + " kerneldump" + '"')
 				if SystemInfo["canMultiBoot"] or self.MTDKERNEL.startswith('mmcblk0'):
-					cmdlist.append("dd if=/dev/%s of=%s/%s" % (self.MTDKERNEL ,self.WORKDIR, self.KERNELBIN))
+					cmdlist.append("dd if=/dev/%s of=%s/%s" % (self.MTDKERNEL, self.WORKDIR, self.KERNELBIN))
 				else:
 					cmdlist.append("nanddump -a -f %s/vmlinux.gz /dev/%s" % (self.WORKDIR, self.MTDKERNEL))
 
 				if self.EMMCIMG == "disk.img" and self.RECOVERY:
-					EMMC_IMAGE = "%s/%s"% (self.WORKDIR,self.EMMCIMG)
+					EMMC_IMAGE = "%s/%s"% (self.WORKDIR, self.EMMCIMG)
 					BLOCK_SIZE=512
 					BLOCK_SECTOR=2
 					IMAGE_ROOTFS_ALIGNMENT=1024
@@ -373,7 +379,7 @@
 					MULTI_ROOTFS_PARTITION_OFFSET = int(FOURTH_KERNEL_PARTITION_OFFSET) + int(KERNEL_PARTITION_SIZE)
 					EMMC_IMAGE_SEEK = int(EMMC_IMAGE_SIZE) * int(BLOCK_SECTOR)
 					cmdlist.append('echo "' + _("Create: Recovery Fullbackup %s")% (self.EMMCIMG) + '"')
-					cmdlist.append('dd if=/dev/zero of=%s bs=%s count=0 seek=%s' % (EMMC_IMAGE, BLOCK_SIZE , EMMC_IMAGE_SEEK))
+					cmdlist.append('dd if=/dev/zero of=%s bs=%s count=0 seek=%s' % (EMMC_IMAGE, BLOCK_SIZE, EMMC_IMAGE_SEEK))
 					cmdlist.append('parted -s %s mklabel gpt' %EMMC_IMAGE)
 					PARTED_END_BOOT = int(IMAGE_ROOTFS_ALIGNMENT) + int(BOOT_PARTITION_SIZE)
 					cmdlist.append('parted -s %s unit KiB mkpart boot fat16 %s %s' % (EMMC_IMAGE, IMAGE_ROOTFS_ALIGNMENT, PARTED_END_BOOT ))
@@ -403,7 +409,7 @@
 					ROOTFS_IMAGE_SEEK = int(ROOTFS_PARTITION_OFFSET) * int(BLOCK_SECTOR)
 					cmdlist.append('dd if=/dev/%s of=%s seek=%s ' % (self.MTDROOTFS, EMMC_IMAGE, ROOTFS_IMAGE_SEEK ))
 				elif self.EMMCIMG == "emmc.img" and self.RECOVERY:
-					EMMC_IMAGE = "%s/%s"% (self.WORKDIR,self.EMMCIMG)
+					EMMC_IMAGE = "%s/%s"% (self.WORKDIR, self.EMMCIMG)
 					BLOCK_SECTOR=2
 					IMAGE_ROOTFS_ALIGNMENT=1024
 					BOOT_PARTITION_SIZE=3072
@@ -468,7 +474,7 @@
 						f.write('<Part Sel="1" PartitionName="userdata" FlashType="emmc" FileSystem="ext3/4" Start="130M" Length="7000M" SelectFile="rootfs.ext4"/>\n')
 					f.write('</Partition_Info>\n')
 					f.close()
-					cmdlist.append('mkupdate -s 00000003-00000001-01010101 -f %s/emmc_partitions.xml -d %s/%s' % (self.WORKDIR,self.WORKDIR,self.EMMCIMG))
+					cmdlist.append('mkupdate -s 00000003-00000001-01010101 -f %s/emmc_partitions.xml -d %s/%s' % (self.WORKDIR, self.WORKDIR, self.EMMCIMG))
 				self.session.open(Console, title = self.TITLE, cmdlist = cmdlist, finishedCallback = self.doFullBackupCB, closeOnSuccess = True)
 			else:
 				self.close()
@@ -507,19 +513,19 @@
 
 		if self.RECOVERY:
 			if self.EMMCIMG == "usb_update.bin":
-				os.system('mv %s/%s %s/%s' %(self.WORKDIR,self.EMMCIMG, self.MAINDESTROOT,self.EMMCIMG))
+				os.system('mv %s/%s %s/%s' %(self.WORKDIR, self.EMMCIMG, self.MAINDESTROOT, self.EMMCIMG))
 				cmdlist.append('cp -f /usr/share/fastboot.bin %s/fastboot.bin' %(self.MAINDESTROOT))
 				cmdlist.append('cp -f /usr/share/bootargs.bin %s/bootargs.bin' %(self.MAINDESTROOT))
 				cmdlist.append('cp -f /usr/share/apploader.bin %s/apploader.bin' %(self.MAINDESTROOT))
 			else:
-				os.system('mv %s/%s %s/%s' %(self.WORKDIR,self.EMMCIMG, self.MAINDEST,self.EMMCIMG))
+				os.system('mv %s/%s %s/%s' %(self.WORKDIR, self.EMMCIMG, self.MAINDEST, self.EMMCIMG))
 			if self.EMMCIMG == "emmc.img":
 				cmdlist.append('echo "rename this file to "force" to force an update without confirmation" > %s/noforce' %self.MAINDEST)
-		elif self.MODEL in ("vuultimo4k","vusolo4k", "vuduo2", "vusolo2", "vusolo", "vuduo", "vuultimo", "vuuno"):
+		elif self.MODEL in ("vuultimo4k", "vusolo4k", "vuduo2", "vusolo2", "vusolo", "vuduo", "vuultimo", "vuuno"):
 			cmdlist.append('echo "This file forces a reboot after the update." > %s/reboot.update' %self.MAINDEST)
-		elif self.MODEL in ("vuzero" , "vusolose", "vuuno4k", "vuzero4k"):
+		elif self.MODEL in ("vuzero", "vusolose", "vuuno4k", "vuzero4k"):
 			cmdlist.append('echo "This file forces the update." > %s/force.update' %self.MAINDEST)
-		elif self.MODEL in ('viperslim','evoslimse','evoslimt2c', "novaip" , "zgemmai55" , "sf98", "xpeedlxpro",'evoslim','vipert2c'):
+		elif self.MODEL in ('viperslim', 'evoslimse', 'evoslimt2c', "novaip", "zgemmai55", "sf98", "xpeedlxpro", 'evoslim', 'vipert2c'):
 			cmdlist.append('echo "This file forces the update." > %s/force' %self.MAINDEST)
 		elif SystemInfo["HasRootSubdir"]:
 			cmdlist.append('echo "Rename the unforce_%s.txt to force_%s.txt and move it to the root of your usb-stick" > %s/force_%s_READ.ME' %(self.MACHINEBUILD, self.MACHINEBUILD, self.MAINDEST, self.MACHINEBUILD))
@@ -527,12 +533,12 @@
 		else:
 			cmdlist.append('echo "rename this file to "force" to force an update without confirmation" > %s/noforce' %self.MAINDEST)
 
-		if self.MODEL in ("gbquad4k","gbue4k","gbx34k"):
+		if self.MODEL in ("gbquad4k", "gbue4k", "gbx34k"):
 			os.system('mv %s/boot.bin %s/boot.bin' %(self.WORKDIR, self.MAINDEST))
 			os.system('mv %s/rescue.bin %s/rescue.bin' %(self.WORKDIR, self.MAINDEST))
 			os.system('cp -f /usr/share/gpt.bin %s/gpt.bin' %(self.MAINDEST))
 
-		if self.MACHINEBUILD in ("h9","i55plus"):
+		if self.MACHINEBUILD in ("h9", "i55plus"):
 			os.system('mv %s/fastboot.bin %s/fastboot.bin' %(self.WORKDIR, self.MAINDEST))
 			os.system('mv %s/pq_param.bin %s/pq_param.bin' %(self.WORKDIR, self.MAINDEST))
 			os.system('mv %s/bootargs.bin %s/bootargs.bin' %(self.WORKDIR, self.MAINDEST))
@@ -546,7 +552,7 @@
 				os.system('cp %s %s/lcdwaitkey.bin' %(lcdwaitkey, self.MAINDEST))
 			if os.path.isfile(lcdwarning):
 				os.system('cp %s %s/lcdwarning.bin' %(lcdwarning, self.MAINDEST))
-		if self.MODEL in ("e4hdultra","protek4k"):
+		if self.MODEL in ("e4hdultra", "protek4k"):
 			lcdwarning = '/usr/share/lcdflashing.bmp'
 			if os.path.isfile(lcdwarning):
 				os.system('cp %s %s/lcdflashing.bmp' %(lcdwarning, self.MAINDEST))
@@ -559,7 +565,7 @@
 			f.write('"\n')
 			f.close()
 
-		if self.MACHINEBUILD in ("h9","i55plus"):
+		if self.MACHINEBUILD in ("h9", "i55plus"):
 			cmdlist.append('cp -f /usr/share/fastboot.bin %s/fastboot.bin' %(self.MAINDESTROOT))
 			cmdlist.append('cp -f /usr/share/bootargs.bin %s/bootargs.bin' %(self.MAINDESTROOT))
 
@@ -574,20 +580,20 @@
 		if self.RECOVERY:
 			if self.EMMCIMG == "usb_update.bin":
 				if not os.path.isfile("%s/%s" % (self.MAINDESTROOT, self.EMMCIMG)):
-					print "[Image Backup] %s file not found" %(self.EMMCIMG)
+					print("[Image Backup] %s file not found" %(self.EMMCIMG))
 					file_found = False
 			else:
 				if not os.path.isfile("%s/%s" % (self.MAINDEST, self.EMMCIMG)):
-					print "[Image Backup] %s file not found" %(self.EMMCIMG)
+					print("[Image Backup] %s file not found" %(self.EMMCIMG))
 					file_found = False
 
 		else:
 			if not os.path.isfile("%s/%s" % (self.MAINDEST, self.ROOTFSBIN)):
-				print "[Image Backup] %s file not found" %(self.ROOTFSBIN)
+				print("[Image Backup] %s file not found" %(self.ROOTFSBIN))
 				file_found = False
 
 			if not os.path.isfile("%s/%s" % (self.MAINDEST, self.KERNELBIN)):
-				print "[Image Backup] %s file not found" %(self.KERNELBIN)
+				print("[Image Backup] %s file not found" %(self.KERNELBIN))
 				file_found = False
 
 		if SystemInfo["canMultiBoot"] and not self.RECOVERY and not SystemInfo["HasRootSubdir"]:
@@ -649,7 +655,7 @@
 		AboutText += _("Backup Date: %s\n") % strftime("%Y-%m-%d", localtime(self.START))
 
 		if os.path.exists('/proc/stb/info/chipset'):
-			AboutText += _("Chipset: BCM%s") % about.getChipSetString().lower().replace('\n','').replace('bcm','') + "\n"
+			AboutText += _("Chipset: BCM%s") % about.getChipSetString().lower().replace('\n', '').replace('bcm', '') + "\n"
 
 		AboutText += _("CPU: %s") % about.getCPUString() + "\n"
 		AboutText += _("Cores: %s") % about.getCpuCoresString() + "\n"
@@ -668,42 +674,49 @@
 		AboutText += _("Last update:\t%s") % getEnigmaVersionString() + "\n\n"
 
 		AboutText += _("[Enigma2 Settings]\n")
-		AboutText += commands.getoutput("cat /etc/enigma2/settings")
+		if sys.version_info[0] >= 3:
+			AboutText += subprocess.getoutput("cat /etc/enigma2/settings")
+		else:
+			AboutText += commands.getoutput("cat /etc/enigma2/settings")
 		AboutText += _("\n\n[User - bouquets (TV)]\n")
 		try:
-			f = open("/etc/enigma2/bouquets.tv","r")
+			f = open("/etc/enigma2/bouquets.tv", "r")
 			lines = f.readlines()
 			f.close()
 			for line in lines:
 				if line.startswith("#SERVICE:"):
 					bouqet = line.split()
 					if len(bouqet) > 3:
-						bouqet[3] = bouqet[3].replace('"','')
-						f = open("/etc/enigma2/" + bouqet[3],"r")
+						bouqet[3] = bouqet[3].replace('"', '')
+						f = open("/etc/enigma2/" + bouqet[3], "r")
 						userbouqet = f.readline()
-						AboutText += userbouqet.replace('#NAME ','')
+						AboutText += userbouqet.replace('#NAME ', '')
 						f.close()
 		except:
 			AboutText += _("Error reading bouquets.tv")
 			
 		AboutText += _("\n[User - bouquets (RADIO)]\n")
 		try:
-			f = open("/etc/enigma2/bouquets.radio","r")
+			f = open("/etc/enigma2/bouquets.radio", "r")
 			lines = f.readlines()
 			f.close()
 			for line in lines:
 				if line.startswith("#SERVICE:"):
 					bouqet = line.split()
 					if len(bouqet) > 3:
-						bouqet[3] = bouqet[3].replace('"','')
-						f = open("/etc/enigma2/" + bouqet[3],"r")
+						bouqet[3] = bouqet[3].replace('"', '')
+						f = open("/etc/enigma2/" + bouqet[3], "r")
 						userbouqet = f.readline()
-						AboutText += userbouqet.replace('#NAME ','')
+						AboutText += userbouqet.replace('#NAME ', '')
 						f.close()
 		except:
 			AboutText += _("Error reading bouquets.radio")
 
 		AboutText += _("\n[Installed Plugins]\n")
-		AboutText += commands.getoutput("opkg list_installed | grep enigma2-plugin-")
+		if sys.version_info[0] >= 3:
+			AboutText += subprocess.getoutput("opkg list_installed | grep enigma2-plugin-")
+		else:
+			AboutText += commands.getoutput("opkg list_installed | grep enigma2-plugin-")
+
 
 		return AboutText
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/ImageWizard.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/ImageWizard.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/ImageWizard.py	2020-06-21 10:16:12.695436847 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/ImageWizard.py	2020-06-21 10:20:02.343323755 -0400
@@ -1,3 +1,4 @@
+from __future__ import absolute_import
 from Screens.Wizard import WizardSummary
 from Screens.WizardLanguage import WizardLanguage
 from Screens.Wizard import wizardManager
@@ -13,7 +14,7 @@
 from os import popen, path, makedirs, listdir, access, stat, rename, remove, W_OK, R_OK
 from enigma import eEnv
 from boxbranding import getBoxType, getImageDistro
-from BackupRestore import InitConfig as BackupRestore_InitConfig
+from .BackupRestore import InitConfig as BackupRestore_InitConfig
 
 from Components.config import config, getConfigListEntry, ConfigSubsection, ConfigText, ConfigLocations, ConfigBoolean
 from Components.Harddisk import harddiskmanager
@@ -28,7 +29,7 @@
 def checkConfigBackup():
 	parts = [ (r.description, r.mountpoint) for r in harddiskmanager.getMountedPartitions(onlyhotplug = False)]
 	if boxtype in ('maram9', 'classm', 'axodin', 'axodinc', 'starsatlx', 'genius', 'evo', 'galaxym6'):
-		parts.append(('mtd backup','/media/backup'))
+		parts.append(('mtd backup', '/media/backup'))
 	for x in parts:
 		if x[1] == '/':
 			parts.remove(x)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/Multibootmgr.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/Multibootmgr.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/Multibootmgr.py	2020-06-21 10:16:12.695436847 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/Multibootmgr.py	2020-06-21 10:20:02.343323755 -0400
@@ -43,7 +43,7 @@
 		self["options"] = StaticText(_("Note: slot list does not show current image or empty slots."))
 		self["key_green"] = StaticText(_("Erase"))
 		self["key_yellow"] = StaticText("")
-		self["config"] = ChoiceList(list=[ChoiceEntryComponent('',((_("Retrieving image slots - Please wait...")), "Queued"))])
+		self["config"] = ChoiceList(list=[ChoiceEntryComponent('', ((_("Retrieving image slots - Please wait...")), "Queued"))])
 		imagedict = []
 		self.getImageList = None
 		self.startit()
@@ -80,7 +80,7 @@
 			currentimageslot += 1
 		for x in sorted(imagedict.keys()):
 			if imagedict[x]["imagename"] != _("Empty slot") and x != currentimageslot:
-				list.append(ChoiceEntryComponent('',((_("slot%s - %s ")) % (x, imagedict[x]['imagename']), x)))
+				list.append(ChoiceEntryComponent('', ((_("slot%s - %s ")) % (x, imagedict[x]['imagename']), x)))
 		self["config"].setList(list)
 
 	def erase(self):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/ShellCompatibleFunctions.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/ShellCompatibleFunctions.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/ShellCompatibleFunctions.py	2020-06-21 10:16:12.695436847 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/ShellCompatibleFunctions.py	2020-06-21 10:20:02.343323755 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/python
 # -*- coding: utf-8 -*-
 
-import subprocess,shutil,os
+import subprocess, shutil, os
 
 # MANDATORY_RIGHTS contains commands to ensure correct rights for certain files
 MANDATORY_RIGHTS = "chown -R root:root /home/root /etc/auto.network /etc/default/dropbear /etc/dropbear ; chmod 600 /etc/auto.network /etc/dropbear/* /home/root/.ssh/* ; chmod 700 /home/root /home/root/.ssh"
@@ -100,15 +100,15 @@
 
 	with open('/etc/passwd') as f:
 		newpasswd = f.readlines()
-		newpasswd = [x.strip() for x in newpasswd]
-		name, passwd, uid, gid, gecos, home, shell = x.split(':')
-		takenuids.append(uid)
+		for x in newpasswd:
+			name, passwd, uid, gid, gecos, home, shell = x.strip().split(':')
+			takenuids.append(uid)
 
 	with open('/etc/group') as f:
 		newgroups = f.readlines()
-		newgroups = [x.strip() for x in newgroups]
-		name, passwd, gid, rest = x.split(':', 3)
-		takengids.append(gid)
+		for x in newgroups:
+			name, passwd, gid, rest = x.strip().split(':', 3)
+			takengids.append(gid)
 
 	for x in oldpasswd:
 		usersuccess = False
@@ -148,7 +148,7 @@
 
 			# Re-create the user if the group still exists or was successfully re-created ...
 			if groupsuccess:
-				cmd = ["/bin/busybox", "adduser", "-H", "-D","-G",oldgname]
+				cmd = ["/bin/busybox", "adduser", "-H", "-D", "-G", oldgname]
 				if oldhome != "":
 					cmd.append("-h" + oldhome)
 				if oldgecos != "":
@@ -189,7 +189,7 @@
 	ret = []
 	for line in open(INSTALLEDPACKAGES, 'r'):
 		if line.startswith('Package:'):
-			package = line.split(":",1)[1].strip()
+			package = line.split(":", 1)[1].strip()
 			version = ''
 			status = ''
 			autoinstalled = False
@@ -197,9 +197,9 @@
 		if package is None:
 			continue
 		if line.startswith('Version:'):
-			version = line.split(":",1)[1].strip()
+			version = line.split(":", 1)[1].strip()
 		if line.startswith('Auto-Installed:'):
-			auto = line.split(":",1)[1].strip()
+			auto = line.split(":", 1)[1].strip()
 			if auto == "yes":
 				autoinstalled = True
 		elif len(line) <= 1:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/SoftwareTools.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/SoftwareTools.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/SoftwareTools.py	2020-06-21 10:16:12.695436847 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/SoftwareTools.py	2020-06-21 10:20:02.343323755 -0400
@@ -10,8 +10,8 @@
 from Tools.Directories import pathExists, fileExists, resolveFilename, SCOPE_METADIR
 from Tools.HardwareInfo import HardwareInfo
 from time import time
-
 from boxbranding import getImageVersion
+import six
 
 class SoftwareTools(PackageInfoHandler):
 	lastDownloadDate = None
@@ -50,7 +50,7 @@
 			self.NotifierCallback = callback
 		iNetwork.checkNetworkState(self.checkNetworkCB)
 
-	def checkNetworkCB(self,data):
+	def checkNetworkCB(self, data):
 		if data is not None:
 			if data <= 2:
 				self.NetworkConnectionAvailable = True
@@ -123,6 +123,7 @@
 	def IpkgListAvailableCB(self, result, retval, extra_args = None):
 		(callback) = extra_args or None
 		if result:
+			result = six.ensure_str(result)
 			if self.list_updating:
 				self.available_packetlist = []
 				for x in result.splitlines():
@@ -161,6 +162,7 @@
 	def InstallMetaPackageCB(self, result, retval = None, extra_args = None):
 		(callback) = extra_args or None
 		if result:
+			result = six.ensure_str(result)
 			self.fillPackagesIndexList()
 			if callback is None:
 				self.startIpkgListInstalled()
@@ -187,6 +189,7 @@
 	def IpkgListInstalledCB(self, result, retval, extra_args = None):
 		(callback) = extra_args or None
 		if result:
+			result = six.ensure_str(result)
 			self.installed_packetlist = {}
 			for x in result.splitlines():
 				tokens = x.split(' - ')
@@ -200,7 +203,7 @@
 					self.packagesIndexlist.remove(package)
 			for package in self.packagesIndexlist[:]:
 				attributes = package[0]["attributes"]
-				if attributes.has_key("packagetype"):
+				if "packagetype" in attributes:
 					if attributes["packagetype"] == "internal":
 						self.packagesIndexlist.remove(package)
 			if callback is None:
@@ -224,7 +227,7 @@
 			packagename = attributes["packagename"]
 			for x in self.available_packetlist:
 				if x[0] == packagename:
-					if self.installed_packetlist.has_key(packagename):
+					if packagename in self.installed_packetlist:
 						if self.installed_packetlist[packagename] != x[1]:
 							self.available_updates +=1
 							self.available_updatelist.append([packagename])
@@ -261,15 +264,15 @@
 		self.ipkg.stop()
 		if self.Console is not None:
 			if len(self.Console.appContainers):
-				for name in self.Console.appContainers.keys():
+				for name in list(self.Console.appContainers.keys()):
 					self.Console.kill(name)
 		if self.UpdateConsole is not None:
 			if len(self.UpdateConsole.appContainers):
-				for name in self.UpdateConsole.appContainers.keys():
+				for name in list(self.UpdateConsole.appContainers.keys()):
 					self.UpdateConsole.kill(name)
 
 	def verifyPrerequisites(self, prerequisites):
-		if prerequisites.has_key("hardware"):
+		if "hardware" in prerequisites:
 			hardware_found = False
 			for hardware in prerequisites["hardware"]:
 				if hardware == self.hardware_info.device_name:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/SoftwareManager/plugin.py	2020-06-21 10:16:12.699437646 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/SoftwareManager/plugin.py	2020-06-21 10:20:02.347324304 -0400
@@ -1,4 +1,6 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
+from __future__ import absolute_import
 from Plugins.Plugin import PluginDescriptor
 from Screens.Console import Console
 from Screens.ChoiceBox import ChoiceBox
@@ -17,7 +19,7 @@
 from Components.Slider import Slider
 from Components.SystemInfo import SystemInfo
 from Components.Harddisk import harddiskmanager
-from Components.config import config,getConfigListEntry, ConfigSubsection, ConfigText, ConfigLocations, ConfigYesNo, ConfigSelection
+from Components.config import config, getConfigListEntry, ConfigSubsection, ConfigText, ConfigLocations, ConfigYesNo, ConfigSelection
 from Components.ConfigList import ConfigListScreen
 from Components.Console import Console
 from Components.MultiContent import MultiContentEntryText, MultiContentEntryPixmapAlphaTest
@@ -32,7 +34,6 @@
 from Tools.LoadPixmap import LoadPixmap
 from Tools.NumericalTextInput import NumericalTextInput
 from enigma import eTimer, RT_HALIGN_LEFT, RT_VALIGN_CENTER, eListboxPythonMultiContent, eListbox, gFont, getDesktop, ePicLoad, eRCInput, getPrevAsciiCode, eEnv, iRecordableService, getEnigmaVersionString
-from cPickle import dump, load
 from os import path as os_path, system as os_system, unlink, stat, mkdir, popen, makedirs, listdir, access, rename, remove, W_OK, R_OK, F_OK
 from time import time, gmtime, strftime, localtime
 from stat import ST_MTIME
@@ -40,15 +41,19 @@
 from twisted.web import client
 from twisted.internet import reactor
 
-from ImageBackup import ImageBackup
-from Flash_online import FlashOnline
-from ImageWizard import ImageWizard
-from Multibootmgr import MultiBootWizard
-from BackupRestore import BackupSelection, RestoreMenu, BackupScreen, RestoreScreen, getBackupPath, getOldBackupPath, getBackupFilename, RestoreMyMetrixHD
-from BackupRestore import InitConfig as BackupRestore_InitConfig
-from SoftwareTools import iSoftwareTools
+from .ImageBackup import ImageBackup
+from .Flash_online import FlashOnline
+from .ImageWizard import ImageWizard
+from .Multibootmgr import MultiBootWizard
+from .BackupRestore import BackupSelection, RestoreMenu, BackupScreen, RestoreScreen, getBackupPath, getOldBackupPath, getBackupFilename, RestoreMyMetrixHD
+from .BackupRestore import InitConfig as BackupRestore_InitConfig
+from .SoftwareTools import iSoftwareTools
 import os
 from boxbranding import getBoxType, getMachineBrand, getMachineName, getBrandOEM
+import six
+from six.moves.cPickle import dump, load
+from six.moves import reload_module, range
+
 
 boxtype = getBoxType()
 brandoem = getBrandOEM()
@@ -103,7 +108,7 @@
 		try:
 			mkdir( os_path.dirname(cache_file) )
 		except OSError:
-			    print os_path.dirname(cache_file), 'is a file'
+			    print(os_path.dirname(cache_file), 'is a file')
 	fd = open(cache_file, 'w')
 	dump(cache_data, fd, -1)
 	fd.close()
@@ -178,28 +183,28 @@
 		self.infotext = _("Press INFO on your remote control for additional information.")
 		self.text = ""
 		if self.menu == 0:
-			print "building menu entries"
+			print("building menu entries")
 			self.list.append(("install-extensions", _("Manage extensions"), _("\nManage extensions or plugins for your %s %s") % (getMachineBrand(), getMachineName()) + self.oktext, None))
 			self.list.append(("software-update", _("Software update"), _("\nOnline update of your %s %s software.") % (getMachineBrand(), getMachineName()) + self.oktext, None))
 			self.list.append(("software-restore", _("Software restore"), _("\nRestore your %s %s with a new firmware.") % (getMachineBrand(), getMachineName()) + self.oktext, None))
-			if not boxtype.startswith('az') and not boxtype in ('dm500hd','dm500hdv2','dm520','dm800','dm800se','dm800sev2','dm820','dm7020hd','dm7020hdv2','dm7080','dm8000') and not brandoem.startswith('cube') and not brandoem.startswith('wetek') and not boxtype.startswith('alien'):
+			if not boxtype.startswith('az') and not boxtype in ('dm500hd', 'dm500hdv2', 'dm520', 'dm800', 'dm800se', 'dm800sev2', 'dm820', 'dm7020hd', 'dm7020hdv2', 'dm7080', 'dm8000') and not brandoem.startswith('cube') and not brandoem.startswith('wetek') and not boxtype.startswith('alien'):
 				self.list.append(("flash-online", _("Flash Online"), _("\nFlash on the fly your %s %s.") % (getMachineBrand(), getMachineName()) + self.oktext, None))
 			if not boxtype.startswith('az') and not brandoem.startswith('cube') and not brandoem.startswith('wetek') and not boxtype.startswith('alien'):
 				self.list.append(("backup-image", _("Backup Image"), _("\nBackup your running %s %s image to HDD or USB.") % (getMachineBrand(), getMachineName()) + self.oktext, None))
 			if SystemInfo["canMultiBoot"]:
 				self.list.append(("multiboot-manager", _("Multiboot Manager"), _("\nMaintain your multiboot device.") + self.oktext, None))
 			self.list.append(("system-backup", _("Backup system settings"), _("\nBackup your %s %s settings.") % (getMachineBrand(), getMachineName()) + self.oktext + "\n\n" + self.infotext, None))
-			self.list.append(("system-restore",_("Restore system settings"), _("\nRestore your %s %s settings.") % (getMachineBrand(), getMachineName()) + self.oktext, None))
+			self.list.append(("system-restore", _("Restore system settings"), _("\nRestore your %s %s settings.") % (getMachineBrand(), getMachineName()) + self.oktext, None))
 			self.list.append(("ipkg-install", _("Install local extension"),  _("\nScan for local extensions and install them.") + self.oktext, None))
 			for p in plugins.getPlugins(PluginDescriptor.WHERE_SOFTWAREMANAGER):
-				if p.__call__.has_key("SoftwareSupported"):
+				if "SoftwareSupported" in p.__call__:
 					callFnc = p.__call__["SoftwareSupported"](None)
 					if callFnc is not None:
-						if p.__call__.has_key("menuEntryName"):
+						if "menuEntryName" in p.__call__:
 							menuEntryName = p.__call__["menuEntryName"](None)
 						else:
 							menuEntryName = _('Extended Software')
-						if p.__call__.has_key("menuEntryDescription"):
+						if "menuEntryDescription" in p.__call__:
 							menuEntryDescription = p.__call__["menuEntryDescription"](None)
 						else:
 							menuEntryDescription = _('Extended Software Plugin')
@@ -214,16 +219,16 @@
 			self.list.append(("backupfiles_exclude", _("Select excluded backup files"),  _("Here you can select which files should be excluded from the backup.") + self.oktext + "\n\n" + self.infotext, None))
 			if config.usage.setup_level.index >= 2: # expert+
 				self.list.append(("ipkg-manager", _("Packet management"),  _("\nView, install and remove available or installed packages." ) + self.oktext, None))
-			self.list.append(("ipkg-source",_("Select upgrade source"), _("\nEdit the upgrade source address." ) + self.oktext, None))
+			self.list.append(("ipkg-source", _("Select upgrade source"), _("\nEdit the upgrade source address." ) + self.oktext, None))
 			for p in plugins.getPlugins(PluginDescriptor.WHERE_SOFTWAREMANAGER):
-				if p.__call__.has_key("AdvancedSoftwareSupported"):
+				if "AdvancedSoftwareSupported" in p.__call__:
 					callFnc = p.__call__["AdvancedSoftwareSupported"](None)
 					if callFnc is not None:
-						if p.__call__.has_key("menuEntryName"):
+						if "menuEntryName" in p.__call__:
 							menuEntryName = p.__call__["menuEntryName"](None)
 						else:
 							menuEntryName = _('Advanced software')
-						if p.__call__.has_key("menuEntryDescription"):
+						if "menuEntryDescription" in p.__call__:
 							menuEntryDescription = p.__call__["menuEntryDescription"](None)
 						else:
 							menuEntryDescription = _('Advanced software plugin')
@@ -287,11 +292,11 @@
 
 	def getUpdateInfos(self):
 		if iSoftwareTools.NetworkConnectionAvailable is True:
-			if iSoftwareTools.available_updates is not 0:
+			if iSoftwareTools.available_updates != 0:
 				self.text = _("There are at least %s updates available.") % (str(iSoftwareTools.available_updates))
 			else:
 				self.text = "" #_("There are no updates available.")
-			if iSoftwareTools.list_updating is True:
+			if iSoftwareTools.list_updating == True:
 				self.text += "\n" + _("A search for available updates is currently in progress.")
 		else:
 			self.text = _("No network connection available.")
@@ -304,7 +309,7 @@
 		current = self["menu"].getCurrent()
 		if current:
 			currentEntry = current[0]
-			if currentEntry in ("system-backup","backupfiles","backupfiles_exclude","backupfiles_addon"):
+			if currentEntry in ("system-backup", "backupfiles", "backupfiles_exclude", "backupfiles_addon"):
 				self.session.open(SoftwareManagerInfo, mode = "backupinfo", submode = currentEntry)
 
 	def go(self, num = None):
@@ -335,7 +340,7 @@
 					else:
 						self.session.open(ImageBackup)
 				elif (currentEntry == "system-backup"):
-					self.session.openWithCallback(self.backupDone,BackupScreen, runBackup = True)
+					self.session.openWithCallback(self.backupDone, BackupScreen, runBackup = True)
 				elif (currentEntry == "system-restore"):
 					if os_path.exists(self.fullbackupfilename):
 						self.session.openWithCallback(self.startRestore, MessageBox, _("Are you sure you want to restore the backup?\nYour receiver will restart after the backup has been restored!"), default = False)
@@ -363,11 +368,11 @@
 					if len(parts):
 						self.session.openWithCallback(self.backuplocation_choosen, ChoiceBox, title = _("Please select medium to use as backup location"), list = parts)
 				elif (currentEntry == "backupfiles"):
-					self.session.open(BackupSelection,title=_("Default files/folders to backup"),configBackupDirs=config.plugins.configurationbackup.backupdirs_default,readOnly=True)
+					self.session.open(BackupSelection, title=_("Default files/folders to backup"), configBackupDirs=config.plugins.configurationbackup.backupdirs_default, readOnly=True)
 				elif (currentEntry == "backupfiles_addon"):
-					self.session.open(BackupSelection,title=_("Additional files/folders to backup"),configBackupDirs=config.plugins.configurationbackup.backupdirs,readOnly=False)
+					self.session.open(BackupSelection, title=_("Additional files/folders to backup"), configBackupDirs=config.plugins.configurationbackup.backupdirs, readOnly=False)
 				elif (currentEntry == "backupfiles_exclude"):
-					self.session.open(BackupSelection,title=_("Files/folders to exclude from backup"),configBackupDirs=config.plugins.configurationbackup.backupdirs_exclude,readOnly=False)
+					self.session.open(BackupSelection, title=_("Files/folders to exclude from backup"), configBackupDirs=config.plugins.configurationbackup.backupdirs_exclude, readOnly=False)
 				elif (currentEntry == "advancedrestore"):
 					self.session.open(RestoreMenu, self.skin_path)
 				elif (currentEntry == "ipkg-source"):
@@ -388,7 +393,7 @@
 			self.createBackupfolders()
 
 	def createBackupfolders(self):
-		print "Creating backup folder if not already there..."
+		print("Creating backup folder if not already there...")
 		self.backuppath = getBackupPath()
 		try:
 			if (os_path.exists(self.backuppath) == False):
@@ -528,7 +533,7 @@
 
 	def confirm(self, confirmed):
 		if not confirmed:
-			print "not confirmed"
+			print("not confirmed")
 			return
 		else:
 			self.keySave()
@@ -750,24 +755,24 @@
 			self["key_yellow"].setText("")
 			divpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "div-h.png"))
 			if status == 'update':
-            			if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png")):
+				if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png")):
 					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png"))
 				else:
 					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/upgrade.png"))
-				self.statuslist.append(( _("Updating software catalog"), '', _("Searching for available updates. Please wait..." ),'', '', statuspng, divpng, None, '' ))
+				self.statuslist.append(( _("Updating software catalog"), '', _("Searching for available updates. Please wait..." ), '', '', statuspng, divpng, None, '' ))
 			elif status == 'sync':
 				if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png")):
 					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png"))
 				else:
 					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/upgrade.png"))
-				self.statuslist.append(( _("Package list update"), '', _("Searching for new installed or removed packages. Please wait..." ),'', '', statuspng, divpng, None, '' ))
+				self.statuslist.append(( _("Package list update"), '', _("Searching for new installed or removed packages. Please wait..." ), '', '', statuspng, divpng, None, '' ))
 			elif status == 'error':
 				self["key_green"].setText(_("Continue"))
 				if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/remove.png")):
 					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/remove.png"))
 				else:
 					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/remove.png"))
-				self.statuslist.append(( _("Error"), '', _("An error occurred while downloading the packetlist. Please try again." ),'', '', statuspng, divpng, None, '' ))
+				self.statuslist.append(( _("Error"), '', _("An error occurred while downloading the packetlist. Please try again." ), '', '', statuspng, divpng, None, '' ))
 			self["list"].style = "default"
 			self['list'].setList(self.statuslist)
 
@@ -781,7 +786,7 @@
 	def getUpdateInfosCB(self, retval = None):
 		if retval is not None:
 			if retval is True:
-				if iSoftwareTools.available_updates is not 0:
+				if iSoftwareTools.available_updates != 0:
 					self["status"].setText(_("There are at least ") + str(iSoftwareTools.available_updates) + ' ' + _("updates available."))
 				else:
 					self["status"].setText(_("There are no updates available."))
@@ -825,9 +830,9 @@
 						self["key_green"].setText("")
 				self["key_yellow"].setText(_("View details"))
 				self["key_blue"].setText("")
-				if len(self.selectedFiles) == 0 and iSoftwareTools.available_updates is not 0:
+				if len(self.selectedFiles) == 0 and iSoftwareTools.available_updates != 0:
 					self["status"].setText(_("There are at least ") + str(iSoftwareTools.available_updates) + ' ' + _("updates available."))
-				elif len(self.selectedFiles) is not 0:
+				elif len(self.selectedFiles) != 0:
 					self["status"].setText(str(len(self.selectedFiles)) + ' ' + _("packages selected."))
 				else:
 					self["status"].setText(_("There are currently no outstanding actions."))
@@ -836,10 +841,10 @@
 				self["key_green"].setText("")
 				self["key_yellow"].setText("")
 				self["key_blue"].setText("")
-				if len(self.selectedFiles) == 0 and iSoftwareTools.available_updates is not 0:
+				if len(self.selectedFiles) == 0 and iSoftwareTools.available_updates != 0:
 					self["status"].setText(_("There are at least ") + str(iSoftwareTools.available_updates) + ' ' + _("updates available."))
 					self["key_yellow"].setText(_("Update"))
-				elif len(self.selectedFiles) is not 0:
+				elif len(self.selectedFiles) != 0:
 					self["status"].setText(str(len(self.selectedFiles)) + ' ' + _("packages selected."))
 					self["key_yellow"].setText(_("Process"))
 				else:
@@ -859,7 +864,7 @@
 				selectedTag = current[2]
 				self.buildPacketList(selectedTag)
 			elif self.currList == "packages":
-				if current[7] is not '':
+				if current[7] != '':
 					idx = self["list"].getIndex()
 					detailsFile = self.list[idx][1]
 					if self.list[idx][7] == True:
@@ -872,11 +877,11 @@
 							if entry[0] == detailsFile:
 								alreadyinList = True
 						if not alreadyinList:
-							if (iSoftwareTools.NetworkConnectionAvailable is False and current[4] in ('installable','install')):
+							if (iSoftwareTools.NetworkConnectionAvailable is False and current[4] in ('installable', 'install')):
 								pass
 							else:
-								self.selectedFiles.append((detailsFile,current[4],current[3]))
-								self.currentSelectedPackage = ((detailsFile,current[4],current[3]))
+								self.selectedFiles.append((detailsFile, current[4], current[3]))
+								self.currentSelectedPackage = ((detailsFile, current[4], current[3]))
 					if current[4] == 'installed':
 						self.list[idx] = self.buildEntryComponent(current[0], current[1], current[2], current[3], 'remove', True)
 					elif current[4] == 'installable':
@@ -886,7 +891,7 @@
 						self.list[idx] = self.buildEntryComponent(current[0], current[1], current[2], current[3], 'installed', False)
 					elif current[4] == 'install':
 						if iSoftwareTools.NetworkConnectionAvailable:
-							self.list[idx] = self.buildEntryComponent(current[0], current[1], current[2], current[3], 'installable',False)
+							self.list[idx] = self.buildEntryComponent(current[0], current[1], current[2], current[3], 'installable', False)
 					self["list"].setList(self.list)
 					self["list"].setIndex(idx)
 					self["list"].updateList(self.list)
@@ -901,7 +906,7 @@
 		current = self["list"].getCurrent()
 		if current:
 			if self.currList == "packages":
-				if current[7] is not '':
+				if current[7] != '':
 					detailsfile = iSoftwareTools.directory[0] + "/" + current[1]
 					if (os_path.exists(detailsfile) == True):
 						self.saved_currentSelectedPackage = self.currentSelectedPackage
@@ -957,11 +962,11 @@
 			self.packetlist = []
 			for package in iSoftwareTools.packagesIndexlist[:]:
 				prerequisites = package[0]["prerequisites"]
-				if prerequisites.has_key("tag"):
+				if "tag" in prerequisites:
 					for foundtag in prerequisites["tag"]:
 						if categorytag == foundtag:
 							attributes = package[0]["attributes"]
-							if attributes.has_key("packagetype"):
+							if "packagetype" in attributes:
 								if attributes["packagetype"] == "internal":
 									continue
 								self.packetlist.append([attributes["name"], attributes["details"], attributes["shortdescription"], attributes["packagename"]])
@@ -977,7 +982,7 @@
 					description = "No description available."
 				packagename = x[3].strip()
 				selectState = self.getSelectionState(details)
-				if iSoftwareTools.installed_packetlist.has_key(packagename):
+				if packagename in iSoftwareTools.installed_packetlist:
 					if selectState == True:
 						status = "remove"
 					else:
@@ -1002,7 +1007,7 @@
 		self.categoryList = []
 		for package in iSoftwareTools.packagesIndexlist[:]:
 			prerequisites = package[0]["prerequisites"]
-			if prerequisites.has_key("tag"):
+			if "tag" in prerequisites:
 				for foundtag in prerequisites["tag"]:
 					attributes = package[0]["attributes"]
 					if foundtag not in self.categories:
@@ -1054,11 +1059,11 @@
 				if (os_path.exists(detailsfile) == True):
 					iSoftwareTools.fillPackageDetails(plugin[0])
 					self.package = iSoftwareTools.packageDetails[0]
-					if self.package[0].has_key("attributes"):
+					if "attributes" in self.package[0]:
 						self.attributes = self.package[0]["attributes"]
-						if self.attributes.has_key("needsRestart"):
+						if "needsRestart" in self.attributes:
 							self.restartRequired = True
-					if self.attributes.has_key("package"):
+					if "package" in self.attributes:
 						self.packagefiles = self.attributes["package"]
 					if plugin[1] == 'installed':
 						if self.packagefiles:
@@ -1099,7 +1104,7 @@
 
 	def ExecuteReboot(self, result):
 		if result:
-			self.session.open(TryQuitMainloop,retvalue=3)
+			self.session.open(TryQuitMainloop, retvalue=3)
 		else:
 			self.selectedFiles = []
 			self.restartRequired = False
@@ -1181,11 +1186,11 @@
 				else:
 					info = _("%s %s software because updates are available.") % (getMachineBrand(), getMachineName())
 
-				self.list.append(self.buildEntryComponent(action,info))
+				self.list.append(self.buildEntryComponent(action, info))
 			self['list'].setList(self.list)
 			self['list'].updateList(self.list)
 
-	def buildEntryComponent(self, action,info):
+	def buildEntryComponent(self, action, info):
 		divpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "div-h.png"))
 		if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png")):
 			upgradepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png"))
@@ -1211,16 +1216,16 @@
 		self.close()
 
 	def process_all(self):
-		self.close((True,None))
+		self.close((True, None))
 
 	def process_extensions(self):
 		self.list = []
 		if self.cmdlist is not None:
 			for entry in self.cmdlist:
 				cmd = entry[0]
-				if entry[0] in (0,2):
+				if entry[0] in (0, 2):
 					self.list.append((entry))
-		self.close((False,self.list))
+		self.close((False, self.list))
 
 
 class PluginManagerHelp(Screen):
@@ -1364,7 +1369,7 @@
 		self["divpic"].hide()
 
 		self.package = self.packageDetails[0]
-		if self.package[0].has_key("attributes"):
+		if "attributes" in self.package[0]:
 			self.attributes = self.package[0]["attributes"]
 		self.restartRequired = False
 		self.cmdList = []
@@ -1390,20 +1395,20 @@
 		pass
 
 	def setInfos(self):
-		if self.attributes.has_key("screenshot"):
+		if "screenshot" in self.attributes:
 			self.loadThumbnail(self.attributes)
 
-		if self.attributes.has_key("name"):
+		if "name" in self.attributes:
 			self.pluginname = self.attributes["name"]
 		else:
 			self.pluginname = _("unknown")
 
-		if self.attributes.has_key("author"):
+		if "author" in self.attributes:
 			self.author = self.attributes["author"]
 		else:
 			self.author = _("unknown")
 
-		if self.attributes.has_key("description"):
+		if "description" in self.attributes:
 			self.description = _(self.attributes["description"].replace("\\n", "\n"))
 		else:
 			self.description = _("No description available.")
@@ -1420,7 +1425,7 @@
 
 	def loadThumbnail(self, entry):
 		thumbnailUrl = None
-		if entry.has_key("screenshot"):
+		if "screenshot" in entry:
 			thumbnailUrl = entry["screenshot"]
 			if self.language == "de":
 				if thumbnailUrl[-7:] == "_en.jpg":
@@ -1428,9 +1433,9 @@
 
 		if thumbnailUrl is not None:
 			self.thumbnail = "/tmp/" + thumbnailUrl.split('/')[-1]
-			print "[PluginDetails] downloading screenshot " + thumbnailUrl + " to " + self.thumbnail
+			print("[PluginDetails] downloading screenshot " + thumbnailUrl + " to " + self.thumbnail)
 			if iSoftwareTools.NetworkConnectionAvailable:
-				client.downloadPage(thumbnailUrl,self.thumbnail).addCallback(self.setThumbnail).addErrback(self.fetchFailed)
+				client.downloadPage(thumbnailUrl, self.thumbnail).addCallback(self.setThumbnail).addErrback(self.fetchFailed)
 			else:
 				self.setThumbnail(noScreenshot = True)
 		else:
@@ -1440,10 +1445,10 @@
 		if not noScreenshot:
 			filename = self.thumbnail
 		else:
-                    	if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "noprev.png")):
-                            filename = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "noprev.png"))
-                        else:
-                            filename = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/noprev.png"))			
+			if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "noprev.png")):
+				filename = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "noprev.png"))
+			else:
+				filename = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/noprev.png"))			
 
 		sc = AVSwitch().getFramebufferScale()
 		self.picload.setPara((self["screenshot"].instance.size().width(), self["screenshot"].instance.size().height(), sc[0], sc[1], False, 1, "#00000000"))
@@ -1465,9 +1470,9 @@
 			self.setThumbnail(noScreenshot = True)
 
 	def go(self):
-		if self.attributes.has_key("package"):
+		if "package" in self.attributes:
 			self.packagefiles = self.attributes["package"]
-		if self.attributes.has_key("needsRestart"):
+		if "needsRestart" in self.attributes:
 			self.restartRequired = True
 		self.cmdList = []
 		if self.pluginstate in ('installed', 'remove'):
@@ -1496,7 +1501,7 @@
 			self.close(True)
 	def UpgradeReboot(self, result):
 		if result:
-			self.session.open(TryQuitMainloop,retvalue=3)
+			self.session.open(TryQuitMainloop, retvalue=3)
 		self.close(True)
 
 	def runRemove(self, result):
@@ -1509,9 +1514,9 @@
 	def reloadPluginlist(self):
 		plugins.readPluginList(resolveFilename(SCOPE_PLUGINS))
 
-	def fetchFailed(self,string):
+	def fetchFailed(self, string):
 		self.setThumbnail(noScreenshot = True)
-		print "[PluginDetails] fetch failed " + string.getErrorMessage()
+		print("[PluginDetails] fetch failed " + string.getErrorMessage())
 
 
 class UpdatePlugin(Screen):
@@ -1583,12 +1588,12 @@
 			self.activityTimer.start(100, False)
 			self.ipkg.startCmd(IpkgComponent.CMD_UPGRADE_LIST)
 		else:
-			print"[SOFTWAREMANAGER] Your image is to old (%s), you need to flash new !!" %getEnigmaVersionString()
+			print("[SOFTWAREMANAGER] Your image is to old (%s), you need to flash new !!" %getEnigmaVersionString())
 			self.session.openWithCallback(self.checkDateCallback, MessageBox, message, default = False)
 			return
 
 	def checkDateCallback(self, ret):
-		print ret
+		print(ret)
 		if ret:
 			self.activityTimer.start(100, False)
 			self.ipkg.startCmd(IpkgComponent.CMD_UPGRADE_LIST)
@@ -1597,7 +1602,7 @@
 			return
 
 	def checkTraficLight(self):
-		from urllib import urlopen
+		from six.moves.urllib.request import urlopen
 		import socket
 		currentTimeoutDefault = socket.getdefaulttimeout()
 		socket.setdefaulttimeout(3)
@@ -1664,7 +1669,7 @@
 		if event == IpkgComponent.EVENT_DOWNLOAD:
 			self.status.setText(_("Downloading"))
 		elif event == IpkgComponent.EVENT_UPGRADE:
-			if self.sliderPackages.has_key(param):
+			if param in self.sliderPackages:
 				self.slider.setValue(self.sliderPackages[param])
 			self.package.setText(param)
 			self.status.setText(_("Upgrading") + ": %s/%s" % (self.packages, self.total_packages))
@@ -1744,7 +1749,7 @@
 			self.close()
 			return
 		if answer[1] == "cold":
-			self.session.open(TryQuitMainloop,retvalue=42)
+			self.session.open(TryQuitMainloop, retvalue=42)
 			self.close()
 		elif answer[1] == "show":
 			global plugin_path
@@ -1771,7 +1776,7 @@
 
 	def exitAnswer(self, result):
 		if result is not None and result:
-			self.session.open(TryQuitMainloop,retvalue=2)
+			self.session.open(TryQuitMainloop, retvalue=2)
 		self.close()
 
 	def restoreMetrixHD(self):
@@ -1879,7 +1884,7 @@
 		text = ""
 		if self.configfile:
 			try:
-				fp = file(configfile, 'r')
+				fp = open(configfile, 'r')
 				sources = fp.readlines()
 				if sources:
 					text = sources[0]
@@ -1899,7 +1904,7 @@
 		else:
 			self["text"] = Input(text, maxSize=False, visible_width = 55, type=Input.TEXT)
 
-		self["actions"] = NumberActionMap(["WizardActions", "InputActions", "TextEntryActions", "KeyboardInputActions","ShortcutActions"],
+		self["actions"] = NumberActionMap(["WizardActions", "InputActions", "TextEntryActions", "KeyboardInputActions", "ShortcutActions"],
 		{
 			"ok": self.go,
 			"back": self.close,
@@ -1935,7 +1940,7 @@
 	def go(self):
 		text = self["text"].getText()
 		if text:
-			fp = file(self.configfile, 'w')
+			fp = open(self.configfile, 'w')
 			fp.write(text)
 			fp.write("\n")
 			fp.close()
@@ -2046,11 +2051,11 @@
 				self.setNextIdx(keyvalue[0])
 
 	def keyGotAscii(self):
-		keyvalue = unichr(getPrevAsciiCode()).encode("utf-8")
+		keyvalue = six.unichr(getPrevAsciiCode()).encode("utf-8")
 		if len(keyvalue) == 1:
 			self.setNextIdx(keyvalue[0])
 
-	def setNextIdx(self,char):
+	def setNextIdx(self, char):
 		if char in ("0", "1", "a"):
 			self["list"].setIndex(0)
 		else:
@@ -2058,7 +2063,7 @@
 			if idx and idx <= self["list"].count:
 				self["list"].setIndex(idx)
 
-	def getNextIdx(self,char):
+	def getNextIdx(self, char):
 		for idx, i in enumerate(self["list"].list):
 			if i[0] and (i[0][0] == char):
 				return idx
@@ -2067,7 +2072,7 @@
 		self.ipkg.stop()
 		if self.Console is not None:
 			if len(self.Console.appContainers):
-				for name in self.Console.appContainers.keys():
+				for name in list(self.Console.appContainers.keys()):
 					self.Console.kill(name)
 		rcinput = eRCInput.getInstance()
 		rcinput.setKeyboardMode(rcinput.kmNone)
@@ -2087,18 +2092,18 @@
 			self.statuslist = []
 			divpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "div-h.png"))
 			if status == 'update':
-                                if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png")):
-                                    statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png"))
-                                else:
-                                    statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/upgrade.png"))
-                                self.statuslist.append(( _("Package list update"), '', _("Trying to download a new packetlist. Please wait..." ),'',statuspng, divpng ))
+				if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png")):
+					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png"))
+				else:
+					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/upgrade.png"))
+				self.statuslist.append(( _("Package list update"), '', _("Trying to download a new packetlist. Please wait..." ), '', statuspng, divpng ))
 				self['list'].setList(self.statuslist)
 			elif status == 'error':
-                                if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/remove.png")):
-                                    statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/remove.png"))
-                                else:
-                                    statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/remove.png"))
-				self.statuslist.append(( _("Error"), '', _("An error occurred while downloading the packetlist. Please try again." ),'',statuspng, divpng ))
+				if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/remove.png")):
+					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/remove.png"))
+				else:
+					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/remove.png"))
+				self.statuslist.append(( _("Error"), '', _("An error occurred while downloading the packetlist. Please try again." ), '', statuspng, divpng ))
 				self['list'].setList(self.statuslist)
 
 	def rebuildList(self):
@@ -2153,7 +2158,7 @@
 				write_cache(self.cache_file, self.cachelist)
 				self.reloadPluginlist()
 		if result:
-			self.session.open(TryQuitMainloop,retvalue=3)
+			self.session.open(TryQuitMainloop, retvalue=3)
 
 	def runUpgrade(self, result):
 		if result:
@@ -2175,7 +2180,7 @@
 				write_cache(self.cache_file, self.cachelist)
 				self.reloadPluginlist()
 		if result:
-			self.session.open(TryQuitMainloop,retvalue=3)
+			self.session.open(TryQuitMainloop, retvalue=3)
 
 	def ipkgCallback(self, event, param):
 		if event == IpkgComponent.EVENT_ERROR:
@@ -2192,8 +2197,9 @@
 		pass
 
 	def IpkgList_Finished(self, result, retval, extra_args = None):
-		result = result.replace('\n ',' - ')
 		if result:
+			result = six.ensure_str(result)
+			result = result.replace('\n ', ' - ')
 			self.packetlist = []
 			last_name = ""
 			for x in result.splitlines():
@@ -2215,6 +2221,7 @@
 
 	def IpkgListInstalled_Finished(self, result, retval, extra_args = None):
 		if result:
+			result = six.ensure_str(result)
 			self.installed_packetlist = {}
 			for x in result.splitlines():
 				tokens = x.split(' - ')
@@ -2230,6 +2237,7 @@
 
 	def OpkgListUpgradeable_Finished(self, result, retval, extra_args = None):
 		if result:
+			result = six.ensure_str(result)
 			self.upgradeable_packages = {}
 			for x in result.splitlines():
 				tokens = x.split(' - ')
@@ -2245,29 +2253,29 @@
 		if not description:
 			description = "No description available."
 		if state == 'installed':
-                        if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installed.png")):
-                            installedpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installed.png"))
-                        else:
-                            installedpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/installed.png"))
+			if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installed.png")):
+				installedpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installed.png"))
+			else:
+				installedpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/installed.png"))
 			return((name, version, _(description), state, installedpng, divpng))
 		elif state == 'upgradeable':
-                        if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgradeable.png")):
-                            upgradeablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgradeable.png"))
-                        else:
-                            upgradeablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/upgradeable.png"))
+			if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgradeable.png")):
+				upgradeablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgradeable.png"))
+			else:
+				upgradeablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/upgradeable.png"))
 			return((name, version, _(description), state, upgradeablepng, divpng))
 		else:
-                        if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installable.png")):
-                            installablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installable.png"))
-                        else:
-                            installablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/installable.png"))
+			if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installable.png")):
+				installablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installable.png"))
+			else:
+				installablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/installable.png"))
 			return((name, version, _(description), state, installablepng, divpng))
 
 	def buildPacketList(self):
 		self.list = []
 		self.cachelist = []
 		if self.cache_ttl > 0 and self.vc != 0:
-			print 'Loading packagelist cache from ',self.cache_file
+			print('Loading packagelist cache from ', self.cache_file)
 			try:
 				self.cachelist = load_cache(self.cache_file)
 				if len(self.cachelist) > 0:
@@ -2278,11 +2286,11 @@
 				self.inv_cache = 1
 
 		if self.cache_ttl == 0 or self.inv_cache == 1 or self.vc == 0:
-			print 'rebuilding fresh package list'
+			print('rebuilding fresh package list')
 			for x in self.packetlist:
 				status = ""
-				if self.installed_packetlist.has_key(x[0]):
-					if self.upgradeable_packages.has_key(x[0]):
+				if x[0] in self.installed_packetlist:
+					if x[0] in self.upgradeable_packages:
 						status = "upgradeable"
 					else:
 						status = "installed"
@@ -2440,11 +2448,11 @@
 				self.setNextIdx(keyvalue[0])
 		
 	def keyGotAscii(self):
-		keyvalue = unichr(getPrevAsciiCode()).encode("utf-8")
+		keyvalue = six.unichr(getPrevAsciiCode()).encode("utf-8")
 		if len(keyvalue) == 1:
 			self.setNextIdx(keyvalue[0])
 		
-	def setNextIdx(self,char):
+	def setNextIdx(self, char):
 		if char in ("0", "1", "a"):
 			self["list"].setIndex(0)
 		else:
@@ -2452,7 +2460,7 @@
 			if idx and idx <= self["list"].count:
 				self["list"].setIndex(idx)
 
-	def getNextIdx(self,char):
+	def getNextIdx(self, char):
 		for idx, i in enumerate(self["list"].list):
 			if i[0] and (i[0][0] == char):
 				return idx
@@ -2471,19 +2479,19 @@
 			self.statuslist = []
 			divpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_SKIN, "skin_default/div-h.png"))
 			if status == 'update':
-                                if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png")):
-                                    statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png"))
-                                else:
-                                    statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/upgrade.png"))
-				self.statuslist.append(( _("Package list update"), '', _("Trying to download a new updatelist. Please wait..." ),'',statuspng, divpng ))
+				if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png")):
+					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgrade.png"))
+				else:
+					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/upgrade.png"))
+				self.statuslist.append(( _("Package list update"), '', _("Trying to download a new updatelist. Please wait..." ), '', statuspng, divpng ))
 				self['list'].setList(self.statuslist)	
 			elif status == 'error':
-                                if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/remove.png")):
-                                    statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/remove.png"))
-                                else:
-                                    statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/remove.png"))
-				self.statuslist.append(( _("Error"), '', _("There was an error downloading the updatelist. Please try again." ),'',statuspng, divpng ))
-				self['list'].setList(self.statuslist)				
+				if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/remove.png")):
+					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/remove.png"))
+				else:
+					statuspng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/remove.png"))
+				self.statuslist.append(( _("Error"), '', _("There was an error downloading the updatelist. Please try again." ), '', statuspng, divpng ))
+				self['list'].setList(self.statuslist)
 
 	def rebuildList(self):
 		self.setStatus('update')
@@ -2502,22 +2510,22 @@
 		if not description:
 			description = "No description available."
 		if state == 'installed':
-                        if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installed.png")):
-                            installedpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installed.png"))
-                        else:
-                            installedpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/installed.png"))
+			if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installed.png")):
+				installedpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installed.png"))
+			else:
+				installedpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/installed.png"))
 			return((name, version, _(description), state, installedpng, divpng))	
 		elif state == 'upgradeable':
-                        if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgradeablepng.png")):
-                            upgradeablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgradeablepng.png"))
-                        else:
-                            upgradeablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/upgradeablepng.png"))
-                        return((name, version, _(description), state, upgradeablepng, divpng))	
+			if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgradeablepng.png")):
+				upgradeablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/upgradeablepng.png"))
+			else:
+				upgradeablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/upgradeablepng.png"))
+			return((name, version, _(description), state, upgradeablepng, divpng))	
 		else:
-                        if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installable.png")):
-                            installablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installable.png"))
-                        else:
-                            installablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/installable.png"))
+			if os_path.exists(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installable.png")):
+				installablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/installable.png"))
+			else:
+				installablepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_CURRENT_PLUGIN, "SystemPlugins/SoftwareManager/installable.png"))
 			return((name, version, _(description), state, installablepng, divpng))
 
 	def buildPacketList(self):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/UI3DSetup/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/UI3DSetup/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/UI3DSetup/plugin.py	2020-06-21 10:16:12.699437646 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/UI3DSetup/plugin.py	2020-06-21 10:20:02.347324304 -0400
@@ -87,14 +87,14 @@
 			file.write('%d' % znorm)
 			file.close()
 		elif setmode == "mode2":
-			file = open("/proc/stb/fb/primary/3d","w")
+			file = open("/proc/stb/fb/primary/3d", "w")
 			if mode == "sidebyside" :
 				mode = "sbs"
 			elif mode == "topandbottom":
 				mode = "tab"
 			file.write(mode)
 			file.close()
-			file = open("/proc/stb/fb/primary/zoffset","w")
+			file = open("/proc/stb/fb/primary/zoffset", "w")
 			file.write('%d' % znorm)
 			file.close()
 	except:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/VideoEnhancement/VideoEnhancement.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/VideoEnhancement/VideoEnhancement.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/VideoEnhancement/VideoEnhancement.py	2020-06-21 10:16:12.699437646 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/VideoEnhancement/VideoEnhancement.py	2020-06-21 10:20:02.347324304 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from boxbranding import getBoxType
 from os import path as os_path
 from Components.config import config, ConfigSubsection, ConfigSlider, ConfigSelection, ConfigBoolean, ConfigNothing, NoSave
@@ -19,17 +20,17 @@
 			def setContrast(config):
 				myval = int(config.value * 256)
 				try:
-					print "--> setting contrast to: %0.8X" % myval
+					print("--> setting contrast to: %0.8X" % myval)
 					f = open("/proc/stb/vmpeg/0/pep_contrast", "w")
 					f.write("%0.8X\n" % myval)
 					f.close()
 				except IOError:
-					print "couldn't write pep_contrast."
+					print("couldn't write pep_contrast.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
 
-			config.pep.contrast = ConfigSlider(default=128, limits=(0,255))
+			config.pep.contrast = ConfigSlider(default=128, limits=(0, 255))
 			config.pep.contrast.addNotifier(setContrast)
 		else:
 			config.pep.contrast = NoSave(ConfigNothing())
@@ -38,17 +39,17 @@
 			def setSaturation(config):
 				myval = int(config.value * 256)
 				try:
-					print "--> setting saturation to: %0.8X" % myval
+					print("--> setting saturation to: %0.8X" % myval)
 					f = open("/proc/stb/vmpeg/0/pep_saturation", "w")
 					f.write("%0.8X\n" % myval)
 					f.close()
 				except IOError:
-					print "couldn't write pep_saturaion."
+					print("couldn't write pep_saturaion.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
 
-			config.pep.saturation = ConfigSlider(default=128, limits=(0,255))
+			config.pep.saturation = ConfigSlider(default=128, limits=(0, 255))
 			config.pep.saturation.addNotifier(setSaturation)
 		else:
 			config.pep.saturation = NoSave(ConfigNothing())
@@ -57,17 +58,17 @@
 			def setHue(config):
 				myval = int(config.value * 256)
 				try:
-					print "--> setting hue to: %0.8X" % myval
+					print("--> setting hue to: %0.8X" % myval)
 					f = open("/proc/stb/vmpeg/0/pep_hue", "w")
 					f.write("%0.8X\n" % myval)
 					f.close()
 				except IOError:
-					print "couldn't write pep_hue."
+					print("couldn't write pep_hue.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
 
-			config.pep.hue = ConfigSlider(default=128, limits=(0,255))
+			config.pep.hue = ConfigSlider(default=128, limits=(0, 255))
 			config.pep.hue.addNotifier(setHue)
 		else:
 			config.pep.hue = NoSave(ConfigNothing())
@@ -76,16 +77,16 @@
 			def setBrightness(config):
 				myval = int(config.value * 256)
 				try:
-					print "--> setting brightness to: %0.8X" % myval
+					print("--> setting brightness to: %0.8X" % myval)
 					f = open("/proc/stb/vmpeg/0/pep_brightness", "w")
 					f.write("%0.8X\n" % myval)
 					f.close()
 				except IOError:
-					print "couldn't write pep_brightness."
+					print("couldn't write pep_brightness.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
-			config.pep.brightness = ConfigSlider(default=128, limits=(0,255))
+			config.pep.brightness = ConfigSlider(default=128, limits=(0, 255))
 			config.pep.brightness.addNotifier(setBrightness)
 		else:
 			config.pep.brightness = NoSave(ConfigNothing())
@@ -94,17 +95,17 @@
 			def setBlock_noise_reduction(config):
 				myval = int(config.value)
 				try:
-					print "--> setting block_noise_reduction to: %0.8X" % myval
+					print("--> setting block_noise_reduction to: %0.8X" % myval)
 					f = open("/proc/stb/vmpeg/0/pep_block_noise_reduction", "w")
 					f.write("%0.8X\n" % myval)
 					f.close()
 				except IOError:
-					print "couldn't write pep_block_noise_reduction."
+					print("couldn't write pep_block_noise_reduction.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
 
-			config.pep.block_noise_reduction = ConfigSlider(default=0, limits=(0,5))
+			config.pep.block_noise_reduction = ConfigSlider(default=0, limits=(0, 5))
 			config.pep.block_noise_reduction.addNotifier(setBlock_noise_reduction)
 		else:
 			config.pep.block_noise_reduction = NoSave(ConfigNothing())
@@ -113,17 +114,17 @@
 			def setMosquito_noise_reduction(config):
 				myval = int(config.value)
 				try:
-					print "--> setting mosquito_noise_reduction to: %0.8X" % myval
+					print("--> setting mosquito_noise_reduction to: %0.8X" % myval)
 					f = open("/proc/stb/vmpeg/0/pep_mosquito_noise_reduction", "w")
 					f.write("%0.8X\n" % myval)
 					f.close()
 				except IOError:
-					print "couldn't write pep_mosquito_noise_reduction."
+					print("couldn't write pep_mosquito_noise_reduction.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
 
-			config.pep.mosquito_noise_reduction = ConfigSlider(default=0, limits=(0,5))
+			config.pep.mosquito_noise_reduction = ConfigSlider(default=0, limits=(0, 5))
 			config.pep.mosquito_noise_reduction.addNotifier(setMosquito_noise_reduction)
 		else:
 			config.pep.mosquito_noise_reduction = NoSave(ConfigNothing())
@@ -132,17 +133,17 @@
 			def setDigital_contour_removal(config):
 				myval = int(config.value)
 				try:
-					print "--> setting digital_contour_removal to: %0.8X" % myval
+					print("--> setting digital_contour_removal to: %0.8X" % myval)
 					f = open("/proc/stb/vmpeg/0/pep_digital_contour_removal", "w")
 					f.write("%0.8X\n" % myval)
 					f.close()
 				except IOError:
-					print "couldn't write pep_digital_contour_removal."
+					print("couldn't write pep_digital_contour_removal.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
 
-			config.pep.digital_contour_removal = ConfigSlider(default=0, limits=(0,5))
+			config.pep.digital_contour_removal = ConfigSlider(default=0, limits=(0, 5))
 			config.pep.digital_contour_removal.addNotifier(setDigital_contour_removal)
 		else:
 			config.pep.digital_contour_removal = NoSave(ConfigNothing())
@@ -150,12 +151,12 @@
 		if os_path.exists("/proc/stb/vmpeg/0/pep_split"):
 			def setSplitMode(config):
 				try:
-					print "--> setting splitmode to:",str(config.value)
+					print("--> setting splitmode to:", str(config.value))
 					f = open("/proc/stb/vmpeg/0/pep_split", "w")
 					f.write(str(config.value))
 					f.close()
 				except IOError:
-					print "couldn't write pep_split."
+					print("couldn't write pep_split.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
@@ -173,20 +174,20 @@
 			def setSharpness(config):
 				myval = int(config.value * 256)
 				try:
-					print "--> setting sharpness to: %0.8X" % myval
+					print("--> setting sharpness to: %0.8X" % myval)
 					f = open("/proc/stb/vmpeg/0/pep_sharpness", "w")
 					f.write("%0.8X\n" % myval)
 					f.close()
 				except IOError:
-					print "couldn't write pep_sharpness."
+					print("couldn't write pep_sharpness.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
 
 			if getBoxType() in ('gbquad', 'gbquadplus'):
-				config.pep.sharpness = ConfigSlider(default=256, limits=(0,256))
+				config.pep.sharpness = ConfigSlider(default=256, limits=(0, 256))
 			else:
-				config.pep.sharpness = ConfigSlider(default=0, limits=(0,256))
+				config.pep.sharpness = ConfigSlider(default=0, limits=(0, 256))
 			config.pep.sharpness.addNotifier(setSharpness)
 		else:
 			config.pep.sharpness = NoSave(ConfigNothing())
@@ -195,17 +196,17 @@
 			def setAutoflesh(config):
 				myval = int(config.value)
 				try:
-					print "--> setting auto_flesh to: %0.8X" % myval
+					print("--> setting auto_flesh to: %0.8X" % myval)
 					f = open("/proc/stb/vmpeg/0/pep_auto_flesh", "w")
 					f.write("%0.8X\n" % myval)
 					f.close()
 				except IOError:
-					print "couldn't write pep_auto_flesh."
+					print("couldn't write pep_auto_flesh.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
 
-			config.pep.auto_flesh = ConfigSlider(default=0, limits=(0,4))
+			config.pep.auto_flesh = ConfigSlider(default=0, limits=(0, 4))
 			config.pep.auto_flesh.addNotifier(setAutoflesh)
 		else:
 			config.pep.auto_flesh = NoSave(ConfigNothing())
@@ -214,17 +215,17 @@
 			def setGreenboost(config):
 				myval = int(config.value)
 				try:
-					print "--> setting green_boost to: %0.8X" % myval
+					print("--> setting green_boost to: %0.8X" % myval)
 					f = open("/proc/stb/vmpeg/0/pep_green_boost", "w")
 					f.write("%0.8X\n" % myval)
 					f.close()
 				except IOError:
-					print "couldn't write pep_green_boost."
+					print("couldn't write pep_green_boost.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
 
-			config.pep.green_boost = ConfigSlider(default=0, limits=(0,4))
+			config.pep.green_boost = ConfigSlider(default=0, limits=(0, 4))
 			config.pep.green_boost.addNotifier(setGreenboost)
 		else:
 			config.pep.green_boost = NoSave(ConfigNothing())
@@ -233,17 +234,17 @@
 			def setBlueboost(config):
 				myval = int(config.value)
 				try:
-					print "--> setting blue_boost to: %0.8X" % myval
+					print("--> setting blue_boost to: %0.8X" % myval)
 					f = open("/proc/stb/vmpeg/0/pep_blue_boost", "w")
 					f.write("%0.8X\n" % myval)
 					f.close()
 				except IOError:
-					print "couldn't write pep_blue_boost."
+					print("couldn't write pep_blue_boost.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
 
-			config.pep.blue_boost = ConfigSlider(default=0, limits=(0,4))
+			config.pep.blue_boost = ConfigSlider(default=0, limits=(0, 4))
 			config.pep.blue_boost.addNotifier(setBlueboost)
 		else:
 			config.pep.blue_boost = NoSave(ConfigNothing())
@@ -252,20 +253,20 @@
 			def setDynamic_contrast(config):
 				myval = int(config.value)
 				try:
-					print "--> setting dynamic_contrast to: %0.8X" % myval
+					print("--> setting dynamic_contrast to: %0.8X" % myval)
 					f = open("/proc/stb/vmpeg/0/pep_dynamic_contrast", "w")
 					f.write("%0.8X\n" % myval)
 					f.close()
 				except IOError:
-					print "couldn't write pep_dynamic_contrast."
+					print("couldn't write pep_dynamic_contrast.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
 
 			if getBoxType() in ('gbquad', 'gbquadplus'):
-				config.pep.dynamic_contrast = ConfigSlider(default=3, limits=(0,255))
+				config.pep.dynamic_contrast = ConfigSlider(default=3, limits=(0, 255))
 			else:
-				config.pep.dynamic_contrast = ConfigSlider(default=0, limits=(0,255))
+				config.pep.dynamic_contrast = ConfigSlider(default=0, limits=(0, 255))
 			config.pep.dynamic_contrast.addNotifier(setDynamic_contrast)
 		else:
 			config.pep.dynamic_contrast = NoSave(ConfigNothing())
@@ -277,17 +278,17 @@
 				def setScaler_sharpness(config):
 					myval = int(config.value)
 					try:
-						print "--> setting scaler_sharpness to: %0.8X" % myval
+						print("--> setting scaler_sharpness to: %0.8X" % myval)
 						f = open("/proc/stb/vmpeg/0/pep_scaler_sharpness", "w")
 						f.write("%0.8X\n" % myval)
 						f.close()
 					except IOError:
-						print "couldn't write pep_scaler_sharpness."
+						print("couldn't write pep_scaler_sharpness.")
 
 					if not VideoEnhancement.firstRun:
 						self.setConfiguredValues()
 
-				config.av.scaler_sharpness = ConfigSlider(default=13, limits=(0,26))
+				config.av.scaler_sharpness = ConfigSlider(default=13, limits=(0, 26))
 				config.av.scaler_sharpness.addNotifier(setScaler_sharpness)
 			else:
 				config.av.scaler_sharpness = NoSave(ConfigNothing())
@@ -296,12 +297,12 @@
 			def setColour_space(config):
 				myval = config.value
 				try:
-					print "--> setting color_soace to:", myval
+					print("--> setting color_soace to:", myval)
 					f = open("/proc/stb/video/hdmi_colorspace", "w")
 					f.write(myval)
 					f.close()
 				except IOError:
-					print "couldn't write color_soace."
+					print("couldn't write color_soace.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
@@ -318,10 +319,10 @@
 			def setScaler_vertical_dejagging(configElement):
 				myval = configElement.value and "enable" or "disable"
 				try:
-					print "--> setting scaler_vertical_dejagging to: %s" % myval
+					print("--> setting scaler_vertical_dejagging to: %s" % myval)
 					open("/proc/stb/vmpeg/0/pep_scaler_vertical_dejagging", "w").write(myval)
 				except IOError:
-					print "couldn't write pep_scaler_vertical_dejagging."
+					print("couldn't write pep_scaler_vertical_dejagging.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
@@ -335,10 +336,10 @@
 			def setSmooth(configElement):
 				myval = configElement.value and "enable" or "disable"
 				try:
-					print "--> setting smooth to: %s" % myval
+					print("--> setting smooth to: %s" % myval)
 					open("/proc/stb/vmpeg/0/smooth", "w").write(myval)
 				except IOError:
-					print "couldn't write smooth."
+					print("couldn't write smooth.")
 
 				if not VideoEnhancement.firstRun:
 					self.setConfiguredValues()
@@ -355,11 +356,11 @@
 
 	def setConfiguredValues(self):
 		try:
-			print "--> applying pep values"
+			print("--> applying pep values")
 			f = open("/proc/stb/vmpeg/0/pep_apply", "w")
 			f.write("1")
 			f.close()
 		except IOError:
-			print "couldn't apply pep values."
+			print("couldn't apply pep values.")
 
 VideoEnhancement()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/VideoEnhancement/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/VideoEnhancement/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/VideoEnhancement/plugin.py	2020-06-21 10:16:12.699437646 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/VideoEnhancement/plugin.py	2020-06-21 10:20:02.347324304 -0400
@@ -1,3 +1,5 @@
+from __future__ import print_function
+from __future__ import absolute_import
 from os import path as os_path
 
 from Plugins.Plugin import PluginDescriptor
@@ -10,7 +12,7 @@
 from Components.Sources.StaticText import StaticText
 from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
-import VideoEnhancement
+from . import VideoEnhancement
 
 
 class VideoEnhancementSetup(Screen, ConfigListScreen):
@@ -159,7 +161,7 @@
 
 	def confirm(self, confirmed):
 		if not confirmed:
-			print "not confirmed"
+			print("not confirmed")
 		else:
 			if self.splitEntry is not None:
 				config.pep.split.setValue('off')
@@ -182,7 +184,7 @@
 
 	def keyYellowConfirm(self, confirmed):
 		if not confirmed:
-			print "not confirmed"
+			print("not confirmed")
 		else:
 			if self.contrastEntry is not None:
 				config.pep.contrast.setValue(self.oldContrast)
@@ -225,7 +227,7 @@
 
 	def keyBlueConfirm(self, confirmed):
 		if not confirmed:
-			print "not confirmed"
+			print("not confirmed")
 		else:
 			if self.contrastEntry is not None:
 				config.pep.contrast.setValue(128)
@@ -353,7 +355,7 @@
 			else:
 				self.isStepSlider = False
 		except AttributeError:
-			print "no max value"
+			print("no max value")
 
 	def keyLeft(self):
 		if self.isStepSlider is True:
@@ -407,7 +409,7 @@
 def startSetup(menuid):
 	if menuid != "video_menu":
 		return [ ]
-	return [(_("Extended settings") , videoEnhancementSetupMain, "videoenhancement_setup", 5)]
+	return [(_("Extended settings"), videoEnhancementSetupMain, "videoenhancement_setup", 5)]
 
 def Plugins(**kwargs):
 	list = []
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/VideoTune/VideoFinetune.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/VideoTune/VideoFinetune.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/VideoTune/VideoFinetune.py	2020-06-21 10:16:12.699437646 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/VideoTune/VideoFinetune.py	2020-06-21 10:20:02.347324304 -0400
@@ -1,3 +1,4 @@
+from __future__ import division
 from Screens.Screen import Screen
 from Components.config import config
 from Components.Sources.CanvasSource import CanvasSource
@@ -7,7 +8,8 @@
 from Tools.Directories import fileExists, resolveFilename, SCOPE_PLUGINS
 from enigma import gFont, getDesktop, gMainDC, eSize, RT_HALIGN_RIGHT, RT_WRAP
 
-def RGB(r,g,b):
+
+def RGB(r, g, b):
 	return (r<<16)|(g<<8)|b
 
 class OverscanTestScreen(Screen):
@@ -182,26 +184,26 @@
 
 		xres, yres = getDesktop(0).size().width(), getDesktop(0).size().height()
 
-		bbw, bbh = xres / 192, yres / 192
-		c.fill(0, 0, xres, yres, RGB(0,0,0))
+		bbw, bbh = xres // 192, yres // 192
+		c.fill(0, 0, xres, yres, RGB(0, 0, 0))
 
-		for i in range(15):
-			col = i * 116 / 14
-			height = yres / 3
-			eh = height / 8
-			offset = yres/6 + eh * i
-			x = xres * 2 / 3
-			width = yres / 6
+		for i in list(range(15)):
+			col = i * 116 // 14
+			height = yres // 3
+			eh = height // 8
+			offset = yres // 6 + eh * i
+			x = xres * 2 // 3
+			width = yres // 6
 
 			c.fill(x, offset, width, eh, RGB(col, col, col))
 			if col == 0 or col == 16 or col == 116:
 				c.fill(x, offset, width, 2, RGB(255, 255, 255))
 			if i < 2:
-				c.writeText(x + width, offset, width, eh, RGB(255, 255, 255), RGB(0,0,0), gFont("Regular", self.fontsize), "%d." % (i+1))
+				c.writeText(x + width, offset, width, eh, RGB(255, 255, 255), RGB(0, 0, 0), gFont("Regular", self.fontsize), "%d." % (i+1))
 
-		c.writeText(xres / 10, yres / 6 - self.fontsize * 3, xres * 3 / 5, 40, RGB(128,255,255), RGB(0,0,0), gFont("Regular", self.fontsize * 2),
+		c.writeText(xres // 10, yres // 6 - self.fontsize * 3, xres * 3 // 5, 40, RGB(128, 255, 255), RGB(0, 0, 0), gFont("Regular", self.fontsize * 2),
 			_("Brightness"))
-		c.writeText(xres / 10, yres / 6, xres / 2, yres * 4 / 6, RGB(255,255,255), RGB(0,0,0), gFont("Regular", self.fontsize),
+		c.writeText(xres // 10, yres // 6, xres // 2, yres * 4 // 6, RGB(255, 255, 255), RGB(0, 0, 0), gFont("Regular", self.fontsize),
 			_("If your TV has a brightness or contrast enhancement, disable it. If there is something called \"dynamic\", "
 				"set it to standard. Adjust the backlight level to a value suiting your taste. "
 				"Turn down contrast on your TV as much as possible.\nThen turn the brightness setting as "
@@ -220,30 +222,30 @@
 
 		xres, yres = getDesktop(0).size().width(), getDesktop(0).size().height()
 
-		bbw, bbh = xres / 192, yres / 192
-		c.fill(0, 0, xres, yres, RGB(0,0,0))
+		bbw, bbh = xres // 192, yres // 192
+		c.fill(0, 0, xres, yres, RGB(0, 0, 0))
 
-		bbw = xres / 192
-		bbh = yres / 192
-		c.fill(0, 0, xres, yres, RGB(255,255,255))
+		bbw = xres // 192
+		bbh = yres // 192
+		c.fill(0, 0, xres, yres, RGB(255, 255, 255))
 
-		for i in range(15):
+		for i in list(range(15)):
 			col = 185 + i * 5
-			height = yres / 3
-			eh = height / 8
-			offset = yres/6 + eh * i
-			x = xres * 2 / 3
-			width = yres / 6
+			height = yres // 3
+			eh = height // 8
+			offset = yres // 6 + eh * i
+			x = xres * 2 // 3
+			width = yres // 6
 
 			c.fill(x, offset, width, eh, RGB(col, col, col))
 			if col == 185 or col == 235 or col == 255:
-				c.fill(x, offset, width, 2, RGB(0,0,0))
+				c.fill(x, offset, width, 2, RGB(0, 0, 0))
 			if i >= 13:
 				c.writeText(x + width, offset, width, eh, RGB(0, 0, 0), RGB(255, 255, 255), gFont("Regular", self.fontsize), "%d." % (i-13+1))
 
-		c.writeText(xres / 10, yres / 6 - self.fontsize * 3, xres * 3 / 5, 40, RGB(128,0,0), RGB(255,255,255), gFont("Regular", self.fontsize * 2),
+		c.writeText(xres // 10, yres // 6 - self.fontsize * 3, xres * 3 // 5, 40, RGB(128, 0, 0), RGB(255, 255, 255), gFont("Regular", self.fontsize * 2),
 			_("Contrast"))
-		c.writeText(xres / 10, yres / 6, xres / 2, yres * 4 / 6, RGB(0,0,0), RGB(255,255,255), gFont("Regular", self.fontsize),
+		c.writeText(xres // 10, yres // 6, xres // 2, yres * 4 // 6, RGB(0, 0, 0), RGB(255, 255, 255), gFont("Regular", self.fontsize),
 			_("Now, use the contrast setting to turn up the brightness of the background as much as possible, "
 				"but make sure that you can still see the difference between the two brightest levels of shades."
 				"If you have done that, press OK."),
@@ -259,24 +261,24 @@
 
 		xres, yres = getDesktop(0).size().width(), getDesktop(0).size().height()
 
-		bbw = xres / 192
-		bbh = yres / 192
-		c.fill(0, 0, xres, yres, RGB(255,255,255))
+		bbw = xres // 192
+		bbh = yres // 192
+		c.fill(0, 0, xres, yres, RGB(255, 255, 255))
 
-		for i in range(33):
-			col = i * 255 / 32;
-			width = xres - xres/5;
-			ew = width / 33;
-			offset = xres/10 + ew * i;
-			y = yres * 2 / 3;
-			height = yres / 20;
-			o = yres / 60;
+		for i in list(range(33)):
+			col = i * 255 // 32;
+			width = xres - xres // 5;
+			ew = width // 33;
+			offset = xres // 10 + ew * i;
+			y = yres * 2 // 3;
+			height = yres // 20;
+			o = yres // 60;
 
 			if i < 16:
 				c1 = 0xFF;
-				c2 = 0xFF - (0xFF * i / 16);
+				c2 = 0xFF - (0xFF * i // 16);
 			else:
-				c1 = 0xFF - (0xFF * (i - 16) / 16);
+				c1 = 0xFF - (0xFF * (i - 16) // 16);
 				c2 = 0;
 
 			c.fill(offset, y, ew, height, RGB(c1, c2, c2))
@@ -285,24 +287,24 @@
 			c.fill(offset, y + (height + o) * 3, ew, height, RGB(col, col, col))
 
 			if i == 0:
-				self.bbox(offset, y, ew, height, RGB(0,0,0), bbw, bbh);
-				self.bbox(offset, y + (height + o) * 1, ew, height, RGB(0,0,0), bbw, bbh);
-				self.bbox(offset, y + (height + o) * 2, ew, height, RGB(0,0,0), bbw, bbh);
+				self.bbox(offset, y, ew, height, RGB(0, 0, 0), bbw, bbh);
+				self.bbox(offset, y + (height + o) * 1, ew, height, RGB(0, 0, 0), bbw, bbh);
+				self.bbox(offset, y + (height + o) * 2, ew, height, RGB(0, 0, 0), bbw, bbh);
 
-			for i in range(8):
-				height = yres / 3;
-				eh = height / 8;
-				offset = yres/6 + eh * i;
-				x = xres * 2 / 3;
-				width = yres / 6;
+			for i in list(range(8)):
+				height = yres // 3;
+				eh = height // 8;
+				offset = yres // 6 + eh * i;
+				x = xres * 2 // 3;
+				width = yres // 6;
 
 				c.fill(x, offset, width, eh, self.basic_colors[i])
 				if i == 0:
-					self.bbox(x, offset, width, eh, RGB(0,0,0), bbw, bbh)
+					self.bbox(x, offset, width, eh, RGB(0, 0, 0), bbw, bbh)
 
-		c.writeText(xres / 10, yres / 6 - self.fontsize * 3, xres * 3 / 5, 40, RGB(128,0,0), RGB(255,255,255), gFont("Regular", self.fontsize * 2),
+		c.writeText(xres // 10, yres // 6 - self.fontsize * 3, xres * 3 // 5, 40, RGB(128, 0, 0), RGB(255, 255, 255), gFont("Regular", self.fontsize * 2),
 			_("Color"))
-		c.writeText(xres / 10, yres / 6, xres / 2, yres * 4 / 6, RGB(0,0,0), RGB(255,255,255), gFont("Regular", self.fontsize),
+		c.writeText(xres // 10, yres // 6, xres // 2, yres * 4 // 6, RGB(0, 0, 0), RGB(255, 255, 255), gFont("Regular", self.fontsize),
 			_("Adjust the color settings so that all the color shades are distinguishable, but appear as saturated as possible. "
 				"If you are happy with the result, press OK to close the video fine-tuning, or use the number keys to select other test screens."),
 				RT_WRAP)
@@ -319,26 +321,26 @@
 
 		c.fill(0, 0, xres, yres, RGB(64, 64, 64))
 
-		width = xres - xres/5
-		offset = xres/10
-		yb = yres * 2 / 3
-		height = yres / 20
-		o = yres / 60
-		border = xres / 60
+		width = xres - xres // 5
+		offset = xres // 10
+		yb = yres * 2 // 3
+		height = yres // 20
+		o = yres // 60
+		border = xres // 60
 
 		g1 = 255
 		g2 = 128
 
 		c.fill(offset - border, yb - border, border * 2 + width, border * 2 + (height * 3 + o * 2), RGB(g1, g1, g1))
 
-		for x in xrange(0, width, 2):
-			c.fill(offset + x, yb, 1, height, RGB(g2,g2,g2))
+		for x in list(range(0, width, 2)):
+			c.fill(offset + x, yb, 1, height, RGB(g2, g2, g2))
 
-		for x in xrange(0, width, 4):
-			c.fill(offset + x, yb + (o + height), 2, height, RGB(g2,g2,g2))
+		for x in list(range(0, width, 4)):
+			c.fill(offset + x, yb + (o + height), 2, height, RGB(g2, g2, g2))
 
-		for x in xrange(0, width, 8):
-			c.fill(offset + x, yb + (o + height) * 2, 4, height, RGB(g2,g2,g2))
+		for x in list(range(0, width, 8)):
+			c.fill(offset + x, yb + (o + height) * 2, 4, height, RGB(g2, g2, g2))
 
 		c.flush()
 
@@ -352,26 +354,26 @@
 
 		c.fill(0, 0, xres, yres, RGB(0, 0, 0))
 
-		width = xres - xres/5
-		offset_x = xres/10
+		width = xres - xres // 5
+		offset_x = xres // 10
 
-		height = yres - yres/5
-		offset_y = yres/10
+		height = yres - yres // 5
+		offset_y = yres // 10
 
-		for y in xrange(0, height, 4):
-			c.fill(offset_x, offset_y + y, width/2, 2, RGB(255,255,255))
+		for y in list(range(0, height, 4)):
+			c.fill(offset_x, offset_y + y, width // 2, 2, RGB(255, 255, 255))
 
 		l = 0
-		fnt = gFont("Regular", height / 14)
+		fnt = gFont("Regular", height // 14)
 		import math
-		for i in xrange(1, 15):
-			y = i * height / 14
+		for i in list(range(1, 15)):
+			y = i * height // 14
 			h = y - l
 			gamma = 0.6 + i * 0.2
-			col = int(math.pow(.5, 1.0/gamma) * 256.0)
-			c.fill(offset_x + width/2, offset_y + l, width/2, h, RGB(col,col,col))
+			col = int(math.pow(.5, 1.0 / gamma) * 256.0)
+			c.fill(offset_x + width // 2, offset_y + l, width // 2, h, RGB(col, col, col))
 
-			c.writeText(offset_x + width/2, offset_y + l, width/2, h, RGB(0,0,0), RGB(col,col,col), fnt, "%1.2f" % gamma, RT_WRAP|RT_HALIGN_RIGHT)
+			c.writeText(offset_x + width // 2, offset_y + l, width // 2, h, RGB(0, 0, 0), RGB(col, col, col), fnt, "%1.2f" % gamma, RT_WRAP|RT_HALIGN_RIGHT)
 			l = y
 
 		c.flush()
@@ -448,10 +450,10 @@
 
 	def intro(self):
 		c = self["Canvas"]
-		c.fill(0, 0, self.xres, self.yres, RGB(0,0,0))
-		c.writeText(self.xres / 10, self.yres / 6 - self.fontsize * 3, self.xres * 3 / 5, 40, RGB(255,128,255), RGB(0,0,0), gFont("Regular", self.fontsize * 2),
+		c.fill(0, 0, self.xres, self.yres, RGB(0, 0, 0))
+		c.writeText(self.xres // 10, self.yres // 6 - self.fontsize * 3, self.xres * 3 // 5, 40, RGB(255, 128, 255), RGB(0, 0, 0), gFont("Regular", self.fontsize * 2),
 			_("Pixels\n"))
-		c.writeText(self.xres / 10, self.yres / 6, self.xres / 2, self.yres * 4 / 6, RGB(255,255,255), RGB(0,0,0), gFont("Regular", self.fontsize),
+		c.writeText(self.xres // 10, self.yres // 6, self.xres // 2, self.yres * 4 // 6, RGB(255, 255, 255), RGB(0, 0, 0), gFont("Regular", self.fontsize),
 			_("Can be used to test defect pixels on TV screen.\n\n"
 			"Available color test screens:\n\n"
 			"red\ngreen\nblue\nwhite\nblack\ncyan\nmagenta\nyellow\n\n"
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/VideoTune/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/VideoTune/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/VideoTune/plugin.py	2020-06-21 10:16:12.699437646 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/VideoTune/plugin.py	2020-06-21 10:20:02.347324304 -0400
@@ -1,7 +1,8 @@
+from __future__ import absolute_import
 from Plugins.Plugin import PluginDescriptor
 
 def videoFinetuneMain(session, **kwargs):
-	from VideoFinetune import VideoFinetune
+	from .VideoFinetune import VideoFinetune
 	session.open(VideoFinetune)
 
 def startSetup(menuid):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/WirelessLan/Wlan.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/WirelessLan/Wlan.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/WirelessLan/Wlan.py	2020-06-21 10:16:12.699437646 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/WirelessLan/Wlan.py	2020-06-21 10:20:02.347324304 -0400
@@ -1,23 +1,28 @@
+from __future__ import print_function
 from os import system, path as os_path
-from string import maketrans, strip
+import sys, re
+import six
+from six.moves import range
+
+if sys.version_info[0] < 3:
+	from string import maketrans, strip
 
 from enigma import eConsoleAppContainer
 
 from Components.config import config, ConfigYesNo, NoSave, ConfigSubsection, ConfigText, ConfigSelection, ConfigPassword
 from Components.Console import Console
 from Components.Network import iNetwork
-from pythonwifi.iwlibs import getNICnames, Wireless, Iwfreq, getWNICnames
-from pythonwifi import flags as wififlags
+from wifi.scan import Cell
 
 
-list = ["WPA/WPA2", "WPA2", "WPA", "WEP", "Unencrypted"]
+liste = ["WPA/WPA2", "WPA2", "WPA", "WEP", "Unencrypted"]
 
 weplist = ["ASCII", "HEX"]
 
 config.plugins.wlan = ConfigSubsection()
 config.plugins.wlan.essid = NoSave(ConfigText(default = "", fixed_size = False))
 config.plugins.wlan.hiddenessid = NoSave(ConfigYesNo(default = False))
-config.plugins.wlan.encryption = NoSave(ConfigSelection(list, default = "WPA/WPA2"))
+config.plugins.wlan.encryption = NoSave(ConfigSelection(liste, default = "WPA/WPA2"))
 config.plugins.wlan.wepkeytype = NoSave(ConfigSelection(weplist, default = "ASCII"))
 config.plugins.wlan.psk = NoSave(ConfigPassword(default = "", fixed_size = False))
 
@@ -33,20 +38,33 @@
 		self.oldInterfaceState = None
 
 		a = ''; b = ''
-		for i in range(0, 255):
+		for i in list(range(0, 255)):
 			a += chr(i)
 			if i < 32 or i > 127:
 				b += ' '
 			else:
 				b += chr(i)
-
-		self.asciitrans = maketrans(a, b)
+		if sys.version_info[0] >=3:
+			self.asciitrans = str.maketrans(a, b)
+		else:
+			self.asciitrans = maketrans(a, b)
 
 	def asciify(self, str):
 		return str.translate(self.asciitrans)
 
 	def getWirelessInterfaces(self):
-		return getWNICnames()
+		device = re.compile('[a-z]{2,}[0-9]*:')
+		ifnames = []
+
+		fp = open('/proc/net/wireless', 'r')
+		for line in fp:
+			try:
+				ifnames.append(device.search(line).group()[:-1])
+			except AttributeError:
+				pass
+
+		return ifnames
+
 
 	def setInterface(self, iface = None):
 		self.iface = iface
@@ -65,60 +83,30 @@
 				if driver in ('brcm-wl', ):
 					system("wl up")
 
-		ifobj = Wireless(self.iface) # a Wireless NIC Object
-
-		try:
-			scanresults = ifobj.scan()
-		except:
-			scanresults = None
-			print "[Wlan.py] No wireless networks could be found"
+		scanresults = list(Cell.all(self.iface,5))
 		aps = {}
 		if scanresults is not None:
-			(num_channels, frequencies) = ifobj.getChannelInfo()
-			index = 1
-			for result in scanresults:
-				bssid = result.bssid
-
-				if result.encode.flags & wififlags.IW_ENCODE_DISABLED > 0:
-					encryption = False
-				elif result.encode.flags & wififlags.IW_ENCODE_NOKEY > 0:
-					encryption = True
-				else:
-					encryption = None
-
-				signal = str(result.quality.siglevel-0x100) + " dBm"
-				quality = "%s/%s" % (result.quality.quality,ifobj.getQualityMax().quality)
-
-				extra = []
-				for element in result.custom:
-					element = element.encode()
-					extra.append( strip(self.asciify(element)) )
-				for element in extra:
-					if 'SignalStrength' in element:
-						signal = element[element.index('SignalStrength')+15:element.index(',L')]
-					if 'LinkQuality' in element:
-						quality = element[element.index('LinkQuality')+12:len(element)]
-
-				channel = "Unknown"
-				try:
-					channel = frequencies.index(ifobj._formatFrequency(result.frequency.getFrequency())) + 1
-				except: channel = "Unknown"
-
+			for i in range(len(scanresults)):
+				bssid = scanresults[i].ssid
 				aps[bssid] = {
-					'active' : True,
-					'bssid': result.bssid,
-					'channel': channel,
-					'encrypted': encryption,
-					'essid': result.essid and strip(self.asciify(result.essid)) or "",
+					'active': True,
+					'bssid': scanresults[i].ssid,
+					'essid': scanresults[i].ssid,
+					'channel': scanresults[i].channel,
+					'encrypted': scanresults[i].encrypted,
+					'encryption_type': scanresults[i].encryption_type if scanresults[i].encrypted else "none",
 					'iface': self.iface,
-					'maxrate' : ifobj._formatBitrate(result.rate[-1][-1]),
-					'noise' : '',#result.quality.nlevel-0x100,
-					'quality' : str(quality),
-					'signal' : str(signal),
-					'custom' : extra,
+					'maxrate': scanresults[i].bitrates,
+					'mode': scanresults[i].mode,
+					'quality': scanresults[i].quality,
+					'signal': scanresults[i].signal,
+					'frequency': scanresults[i].frequency,
+					'frequency_norm': scanresults[i].frequency_norm,
+					'address': scanresults[i].address,
+					'noise': scanresults[i].noise,
+					'pairwise_ciphers': scanresults[i].pairwise_ciphers,
+					'authentication_suites': scanresults[i].authentication_suites,
 				}
-
-				index += 1
 		return aps
 
 	def stopGetNetworkList(self):
@@ -145,7 +133,7 @@
 		wepkeytype = config.plugins.wlan.wepkeytype.value
 		psk = config.plugins.wlan.psk.value
 		
-		fp = file(getWlanConfigName(iface), 'wb')
+		fp = open(getWlanConfigName(iface), 'w')
 		
 		fp.write('ssid='+essid+'\n')
 		if encryption in ('WPA', 'WPA2', 'WPA/WPA2', 'WEP'):
@@ -157,7 +145,7 @@
 		fp.write('key=' + psk + '\n')
 		fp.close()
 
-	def loadConfig(self,iface):
+	def loadConfig(self, iface):
 		config.plugins.wlan.hiddenessid.value = False
 		config.plugins.wlan.wepkeytype.value = "ASCII"
 		config.plugins.wlan.essid.value = ""
@@ -166,13 +154,13 @@
 		configfile = getWlanConfigName(iface)
 		
 		if os_path.exists(configfile):
-			print "[Wlan.py] parsing configfile: ",configfile
+			print("[Wlan.py] parsing configfile: ", configfile)
 			fd = open(configfile, "r")
 			lines = fd.readlines()
 			fd.close()
 			for line in lines:
 				try:
-					(key, value) = line.strip().split('=',1)
+					(key, value) = line.strip().split('=', 1)
 				except:
 					continue
 				if key == 'ssid':
@@ -206,7 +194,7 @@
 		contents += "ssid="+essid+"\n"
 		contents += "method="+encryption+"\n"
 		contents += "key="+psk+"\n"
-		print "content = \n"+contents
+		print("content = \n"+contents)
 
 		fd = open(getWlConfName(iface), "w")
 		fd.write(contents)
@@ -229,7 +217,7 @@
 
 			for line in lines:
 				try:
-					(key, value) = line.strip().split('=',1)
+					(key, value) = line.strip().split('=', 1)
 				except:
 					continue
 
@@ -242,7 +230,7 @@
 				else:
 					continue
 		except:
-			print "[Wlan.py] Error parsing ",configfile
+			print("[Wlan.py] Error parsing ", configfile)
 			wsconfig = {
 					'hiddenessid': False,
 					'ssid': "",
@@ -251,8 +239,8 @@
 					'key': "",
 				}
 
-		for (k,v) in wsconf.items():
-			print "[wsconf][%s] %s" % (k , v)
+		for (k, v) in list(wsconf.items()):
+			print("[wsconf][%s] %s" % (k, v))
 
 		return wsconf
 
@@ -263,7 +251,7 @@
 		wepkeytype = config.plugins.wlan.wepkeytype.value
 		psk = config.plugins.wlan.psk.value
 
-		fp = file(getWlanConfigName(iface), 'w')
+		fp = open(getWlanConfigName(iface), 'w')
 		fp.write('#WPA Supplicant Configuration by enigma2\n')
 		fp.write('ctrl_interface=/var/run/wpa_supplicant\n')
 		fp.write('eapol_version=1\n')
@@ -303,21 +291,21 @@
 		fp.close()
 		#system('cat ' + getWlanConfigName(iface))
 
-	def loadConfig(self,iface):
+	def loadConfig(self, iface):
 		configfile = getWlanConfigName(iface)
 		if not os_path.exists(configfile):
 			configfile = '/etc/wpa_supplicant.conf'
 		try:
 			#parse the wpasupplicant configfile
-			print "[Wlan.py] parsing configfile: ",configfile
-			fp = file(configfile, 'r')
+			print("[Wlan.py] parsing configfile: ", configfile)
+			fp = open(configfile, 'r')
 			supplicant = fp.readlines()
 			fp.close()
 			essid = None
 			encryption = "Unencrypted"
 
 			for s in supplicant:
-				split = s.strip().split('=',1)
+				split = s.strip().split('=', 1)
 				if split[0] == 'scan_ssid':
 					if split[1] == '1':
 						config.plugins.wlan.hiddenessid.value = True
@@ -361,8 +349,8 @@
 					'key': config.plugins.wlan.psk.value,
 				}
 
-			for (key, item) in wsconfig.items():
-				if item is "None" or item is "":
+			for (key, item) in list(wsconfig.items()):
+				if item == "None" or item == "":
 					if key == 'hiddenessid':
 						wsconfig['hiddenessid'] = False
 					if key == 'ssid':
@@ -374,7 +362,7 @@
 					if key == 'key':
 						wsconfig['key'] = ""
 		except:
-			print "[Wlan.py] Error parsing ",configfile
+			print("[Wlan.py] Error parsing ", configfile)
 			wsconfig = {
 					'hiddenessid': False,
 					'ssid': "",
@@ -394,7 +382,7 @@
 
 	def stopWlanConsole(self):
 		if self.WlanConsole is not None:
-			print "[iStatus] killing self.WlanConsole"
+			print("[iStatus] killing self.WlanConsole")
 			self.WlanConsole.killAll()
 			self.WlanConsole = None
 
@@ -406,11 +394,12 @@
 		self.WlanConsole.ePopen(cmd, self.iwconfigFinished, iface)
 
 	def iwconfigFinished(self, result, retval, extra_args):
+		result = six.ensure_str(result)
 		iface = extra_args
-		data = { 'essid': False, 'frequency': False, 'accesspoint': False, 'bitrate': False, 'encryption': False, 'quality': False, 'signal': False }
+		ssid = "off"
+		data = { 'essid': False, 'frequency': False, 'accesspoint': False, 'bitrate': False, 'encryption': False, 'quality': False, 'signal': False, 'channel': False, 'encryption_type': False, 'frequency': False, 'frequency_norm': False }
 		for line in result.splitlines():
 			line = line.strip()
-			# print "[Wlan.py] line -->",line
 			if "ESSID" in line:
 				if "off/any" in line:
 					ssid = "off"
@@ -419,12 +408,8 @@
 						ssid=(line[line.index('ESSID')+7:line.index('"  Nickname')])
 					else:
 						ssid=(line[line.index('ESSID')+7:len(line)-1])
-				if ssid is not None:
+				if ssid is not "off":
 					data['essid'] = ssid
-			if "Frequency" in line:
-				frequency = line[line.index('Frequency')+10 :line.index(' GHz')]
-				if frequency is not None:
-					data['frequency'] = frequency
 			if "Access Point" in line:
 				if "Sensitivity" in line:
 					ap=line[line.index('Access Point')+14:line.index('   Sensitivity')]
@@ -432,6 +417,10 @@
 					ap=line[line.index('Access Point')+14:len(line)]
 				if ap is not None:
 					data['accesspoint'] = ap
+			if "Frequency" in line:
+				frequency = line[line.index('Frequency')+10 :line.index(' GHz')]
+				if frequency is not None:
+					data['frequency'] = frequency
 			if "Bit Rate" in line:
 				if "kb" in line:
 					br = line[line.index('Bit Rate')+9 :line.index(' kb/s')]
@@ -441,56 +430,55 @@
 					br = line[line.index('Bit Rate')+9 :line.index(' Mb/s')]
 				if br is not None:
 					data['bitrate'] = br
-			if "Encryption key" in line:
-				if ":off" in line:
-					enc = "off"
-				elif "Security" in line:
-					enc = line[line.index('Encryption key')+15 :line.index('   Security')]
-					if enc is not None:
-						enc = "on"
-				else:
-					enc = line[line.index('Encryption key')+15 :len(line)]
-					if enc is not None:
-						enc = "on"
-				if enc is not None:
-					data['encryption'] = enc
-			if 'Quality' in line:
-				if "/100" in line:
-					qual = line[line.index('Quality')+8:line.index('  Signal')]
-				else:
-					qual = line[line.index('Quality')+8:line.index('Sig')]
-				if qual is not None:
-					data['quality'] = qual
-			if 'Signal level' in line:
-				if "dBm" in line:
-					signal = line[line.index('Signal level')+13 :line.index(' dBm')] + " dBm"
-				elif "/100" in line:
-					if "Noise" in line:
-						signal = line[line.index('Signal level')+13:line.index('  Noise')]
-					else:
-						signal = line[line.index('Signal level')+13:len(line)]
-				else:
-					if "Noise" in line:
-						signal = line[line.index('Signal level')+13:line.index('  Noise')]
-					else:
-						signal = line[line.index('Signal level')+13:len(line)]
-				if signal is not None:
-					data['signal'] = signal
+
+		if ssid is not None and ssid is not "off":
+			scanresults = list(Cell.all(iface,5))
+			aps = {}
+			if scanresults is not None:
+				for i in range(len(scanresults)):
+					bssid = scanresults[i].ssid
+					aps[bssid] = {
+						'active': True,
+						'bssid': scanresults[i].ssid,
+						'essid': scanresults[i].ssid,
+						'channel': scanresults[i].channel,
+						'encrypted': scanresults[i].encrypted,
+						'encryption_type': scanresults[i].encryption_type if scanresults[i].encrypted else "none",
+						'iface': iface,
+						'maxrate': scanresults[i].bitrates,
+						'mode': scanresults[i].mode,
+						'quality': scanresults[i].quality,
+						'signal': scanresults[i].signal,
+						'frequency': scanresults[i].frequency,
+						'frequency_norm': scanresults[i].frequency_norm,
+						'address': scanresults[i].address,
+						'noise': scanresults[i].noise,
+						'pairwise_ciphers': scanresults[i].pairwise_ciphers,
+						'authentication_suites': scanresults[i].authentication_suites,
+					}
+				#data['bitrate'] = aps[ssid]["maxrate"]
+				data['encryption'] = aps[ssid]["encrypted"]
+				data['quality'] = aps[ssid]["quality"]
+				data['signal'] = aps[ssid]["signal"]
+				data['channel'] = aps[ssid]["channel"]
+				data['encryption_type'] = aps[ssid]["encryption_type"]
+				#data['frequency'] = aps[ssid]["frequency"]
+				data['frequency_norm'] = aps[ssid]["frequency_norm"]
 
 		self.wlaniface[iface] = data
 		self.backupwlaniface = self.wlaniface
 
 		if self.WlanConsole is not None:
 			if not self.WlanConsole.appContainers:
-				print "[Wlan.py] self.wlaniface after loading:", self.wlaniface
+				print("[Wlan.py] self.wlaniface after loading:", self.wlaniface)
 				if self.statusCallback is not None:
-						self.statusCallback(True,self.wlaniface)
+						self.statusCallback(True, self.wlaniface)
 						self.statusCallback = None
 
 	def getAdapterAttribute(self, iface, attribute):
 		self.iface = iface
-		if self.wlaniface.has_key(self.iface):
-			if self.wlaniface[self.iface].has_key(attribute):
+		if self.iface in self.wlaniface:
+			if attribute in self.wlaniface[self.iface]:
 				return self.wlaniface[self.iface][attribute]
 		return None
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/WirelessLan/plugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/WirelessLan/plugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/SystemPlugins/WirelessLan/plugin.py	2020-06-21 10:16:12.699437646 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/SystemPlugins/WirelessLan/plugin.py	2020-06-21 10:20:02.347324304 -0400
@@ -1,3 +1,5 @@
+from __future__ import print_function
+from __future__ import absolute_import
 from re import escape as re_escape
 
 from enigma import eTimer, eEnv
@@ -12,48 +14,57 @@
 from Plugins.Plugin import PluginDescriptor
 from Tools.Directories import resolveFilename, SCOPE_ACTIVE_SKIN
 from Tools.LoadPixmap import LoadPixmap
-from Wlan import iWlan, iStatus, getWlanConfigName
+from .Wlan import iWlan, iStatus, getWlanConfigName
 
 
 plugin_path = eEnv.resolve("${libdir}/enigma2/python/Plugins/SystemPlugins/WirelessLan")
 
 
-list = ["Unencrypted", "WEP", "WPA", "WPA/WPA2", "WPA2"]
+liste = ["Unencrypted", "WEP", "WPA", "WPA/WPA2", "WPA2"]
 
 weplist = ["ASCII", "HEX"]
 
 config.plugins.wlan = ConfigSubsection()
 config.plugins.wlan.essid = NoSave(ConfigText(default = "", fixed_size = False))
 config.plugins.wlan.hiddenessid = NoSave(ConfigYesNo(default = False))
-config.plugins.wlan.encryption = NoSave(ConfigSelection(list, default = "WPA2"))
+config.plugins.wlan.encryption = NoSave(ConfigSelection(liste, default = "WPA2"))
 config.plugins.wlan.wepkeytype = NoSave(ConfigSelection(weplist, default = "ASCII"))
 config.plugins.wlan.psk = NoSave(ConfigPassword(default = "", fixed_size = False))
 
 
 class WlanStatus(Screen):
 	skin = """
-		<screen name="WlanStatus" position="center,center" size="560,400" title="Wireless network status" >
+		<screen name="WlanStatus" position="center,center" size="560,430" title="Wireless network status" >
 			<ePixmap pixmap="skin_default/buttons/red.png" position="0,0" size="140,40" alphatest="on" />
 			<widget source="key_red" render="Label" position="0,0" zPosition="1" size="140,40" font="Regular;20" halign="center" valign="center" backgroundColor="#9f1313" transparent="1" />
 
 			<widget source="LabelBSSID" render="Label" position="10,60" size="200,25" valign="left" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
-			<widget source="LabelESSID" render="Label" position="10,100" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
-			<widget source="LabelQuality" render="Label" position="10,140" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
-			<widget source="LabelSignal" render="Label" position="10,180" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
-			<widget source="LabelBitrate" render="Label" position="10,220" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
-			<widget source="LabelEnc" render="Label" position="10,260" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="LabelESSID" render="Label" position="10,90" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="LabelQuality" render="Label" position="10,120" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="LabelChannel" render="Label" position="10,150" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="LabelFrequency" render="Label" position="10,180" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="LabelFrequencyNorm" render="Label" position="10,210" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="LabelSignal" render="Label" position="10,240" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="LabelBitrate" render="Label" position="10,270" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="LabelEnc" render="Label" position="10,300" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="LabelEncType" render="Label" position="10,330" size="200,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+
 			<widget source="BSSID" render="Label" position="220,60" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
-			<widget source="ESSID" render="Label" position="220,100" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
-			<widget source="quality" render="Label" position="220,140" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
-			<widget source="signal" render="Label" position="220,180" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
-			<widget source="bitrate" render="Label" position="220,220" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
-			<widget source="enc" render="Label" position="220,260" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="ESSID" render="Label" position="220,90" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="quality" render="Label" position="220,120" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="channel" render="Label" position="220,150" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="frequency" render="Label" position="220,180" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="frequency_norm" render="Label" position="220,210" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="signal" render="Label" position="220,240" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="bitrate" render="Label" position="220,270" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="enc" render="Label" position="220,300" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
+			<widget source="encryption_type" render="Label" position="220,330" size="330,25" valign="center" font="Regular;20" transparent="1" foregroundColor="#FFFFFF" />
 
-			<ePixmap pixmap="skin_default/div-h.png" position="0,350" zPosition="1" size="560,2" />
-			<widget source="IFtext" render="Label" position="10,355" size="120,21" zPosition="10" font="Regular;20" halign="left" backgroundColor="#25062748" transparent="1" />
-			<widget source="IF" render="Label" position="120,355" size="400,21" zPosition="10" font="Regular;20" halign="left" backgroundColor="#25062748" transparent="1" />
-			<widget source="Statustext" render="Label" position="10,375" size="115,21" zPosition="10" font="Regular;20" halign="left" backgroundColor="#25062748" transparent="1"/>
-			<widget name="statuspic" pixmaps="skin_default/buttons/button_green.png,skin_default/buttons/button_green_off.png" position="130,380" zPosition="10" size="15,16" transparent="1" alphatest="on"/>
+			<ePixmap pixmap="skin_default/div-h.png" position="0,370" zPosition="1" size="560,2" />
+			<widget source="IFtext" render="Label" position="10,375" size="120,21" zPosition="10" font="Regular;20" halign="left" backgroundColor="#25062748" transparent="1" />
+			<widget source="IF" render="Label" position="120,375" size="400,21" zPosition="10" font="Regular;20" halign="left" backgroundColor="#25062748" transparent="1" />
+			<widget source="Statustext" render="Label" position="10,395" size="115,21" zPosition="10" font="Regular;20" halign="left" backgroundColor="#25062748" transparent="1"/>
+			<widget name="statuspic" pixmaps="skin_default/buttons/button_green.png,skin_default/buttons/button_green_off.png" position="130,400" zPosition="10" size="15,16" transparent="1" alphatest="on"/>
 		</screen>"""
 
 	def __init__(self, session, iface):
@@ -68,6 +79,11 @@
 		self["LabelBitrate"] = StaticText(_('Bitrate:'))
 		self["LabelEnc"] = StaticText(_('Encryption:'))
 
+		self["LabelChannel"] = StaticText(_('Channel:'))
+		self["LabelEncType"] = StaticText(_('Encryption Type:'))
+		self["LabelFrequency"] = StaticText(_('Frequency:'))
+		self["LabelFrequencyNorm"] = StaticText(_('Frequency Norm:'))
+
 		self["BSSID"] = StaticText()
 		self["ESSID"] = StaticText()
 		self["quality"] = StaticText()
@@ -75,6 +91,11 @@
 		self["bitrate"] = StaticText()
 		self["enc"] = StaticText()
 
+		self["channel"] = StaticText()
+		self["encryption_type"] = StaticText()
+		self["frequency"] = StaticText()
+		self["frequency_norm"] = StaticText()
+
 		self["IFtext"] = StaticText()
 		self["IF"] = StaticText()
 		self["Statustext"] = StaticText()
@@ -93,7 +114,7 @@
 		}, -1)
 		self.timer = eTimer()
 		self.timer.timeout.get().append(self.resetList)
-		self.onShown.append(lambda: self.timer.start(8000))
+		self.onShown.append(lambda: self.timer.start(16000))
 		self.onLayoutFinish.append(self.layoutFinished)
 		self.onClose.append(self.cleanup)
 
@@ -104,9 +125,9 @@
 		self.setTitle(_("Wireless network state"))
 
 	def resetList(self):
-		iStatus.getDataForInterface(self.iface,self.getInfoCB)
+		iStatus.getDataForInterface(self.iface, self.getInfoCB)
 
-	def getInfoCB(self,data,status):
+	def getInfoCB(self, data, status):
 		if data is not None:
 			if data is True:
 				if status is not None:
@@ -119,24 +140,24 @@
 						essid = _("No Connection")
 					else:
 						accesspoint = status[self.iface]["accesspoint"]
-					if self.has_key("BSSID"):
+					if "BSSID" in self:
 						self["BSSID"].setText(accesspoint)
-					if self.has_key("ESSID"):
+					if "ESSID" in self:
 						self["ESSID"].setText(essid)
 
 					quality = status[self.iface]["quality"]
-					if self.has_key("quality"):
+					if "quality" in self:
 						self["quality"].setText(quality)
 
 					if status[self.iface]["bitrate"] == '0':
 						bitrate = _("Unsupported")
 					else:
-						bitrate = str(status[self.iface]["bitrate"]) + " Mb/s"
-					if self.has_key("bitrate"):
+						bitrate = str(status[self.iface]["bitrate"])
+					if "bitrate" in self:
 						self["bitrate"].setText(bitrate)
 
-					signal = status[self.iface]["signal"]
-					if self.has_key("signal"):
+					signal = str(status[self.iface]["signal"]) + " dBm" 
+					if "signal" in self:
 						self["signal"].setText(signal)
 
 					if status[self.iface]["encryption"] == "off":
@@ -146,8 +167,25 @@
 							encryption = _("off or wpa2 on")
 					else:
 						encryption = _("Enabled")
-					if self.has_key("enc"):
+					if "enc" in self:
 						self["enc"].setText(encryption)
+
+					channel = str(status[self.iface]["channel"])
+					if "channel" in self:
+						self["channel"].setText(channel)
+
+					encryption_type = status[self.iface]["encryption_type"]
+					if "encryption_type" in self:
+						self["encryption_type"].setText(encryption_type)
+
+					frequency = status[self.iface]["frequency"]
+					if "frequency" in self:
+						self["frequency"].setText(frequency)
+
+					frequency_norm = status[self.iface]["frequency_norm"]
+					if "frequency_norm" in self:
+						self["frequency_norm"].setText(frequency_norm)
+
 					self.updateStatusLink(status)
 
 	def exit(self):
@@ -162,11 +200,15 @@
 		self["signal"].setText(wait_txt)
 		self["bitrate"].setText(wait_txt)
 		self["enc"].setText(wait_txt)
+		self["channel"].setText(wait_txt)
+		self["encryption_type"].setText(wait_txt)
+		self["frequency"].setText(wait_txt)
+		self["frequency_norm"].setText(wait_txt)
 		self["IFtext"].setText(_("Network:"))
 		self["IF"].setText(iNetwork.getFriendlyAdapterName(self.iface))
 		self["Statustext"].setText(_("Link:"))
 
-	def updateStatusLink(self,status):
+	def updateStatusLink(self, status):
 		if status is not None:
 			if status[self.iface]["essid"] == "off" or status[self.iface]["accesspoint"] == "Not-Associated" or status[self.iface]["accesspoint"] == False:
 				self["statuspic"].setPixmapNum(1)
@@ -174,7 +216,6 @@
 				self["statuspic"].setPixmapNum(0)
 			self["statuspic"].show()
 
-
 class WlanScan(Screen):
 	skin = """
 		<screen name="WlanScan" position="center,center" size="560,400" title="Select a wireless network" >
@@ -189,6 +230,7 @@
 					{"template": [
 							MultiContentEntryText(pos = (0, 0), size = (550, 30), font=0, flags = RT_HALIGN_LEFT, text = 0), # index 0 is the essid
 							MultiContentEntryText(pos = (0, 30), size = (175, 20), font=1, flags = RT_HALIGN_LEFT, text = 5), # index 5 is the interface
+							MultiContentEntryText(pos = (245, 0), size = (200, 20), font=1, flags = RT_HALIGN_LEFT, text = 6), # index 6 is the frequency_norm
 							MultiContentEntryText(pos = (175, 30), size = (175, 20), font=1, flags = RT_HALIGN_LEFT, text = 4), # index 0 is the encryption
 							MultiContentEntryText(pos = (350, 0), size = (200, 20), font=1, flags = RT_HALIGN_LEFT, text = 2), # index 0 is the signal
 							MultiContentEntryText(pos = (350, 30), size = (200, 20), font=1, flags = RT_HALIGN_LEFT, text = 3), # index 0 is the maxrate
@@ -274,9 +316,9 @@
 		self.rescanTimer.stop()
 		self.updateAPList()
 
-	def buildEntryComponent(self, essid, bssid, encrypted, iface, maxrate, signal):
+	def buildEntryComponent(self, essid, bssid, encrypted, iface, maxrate, signal, frequency_norm):
 		encryption = encrypted and _("Yes") or _("No")
-		return essid, bssid, _("Signal: ") + str(signal), _("Max. bitrate: ") + str(maxrate), _("Encrypted: ") + encryption, _("Interface: ") + str(iface), self.divpng
+		return essid, bssid, _("Signal: ") + str(signal), _("Max. bitrate: ") + str(maxrate), _("Encrypted: ") + encryption, _("Interface: ") + str(iface), frequency_norm, self.divpng
 
 	def updateAPList(self):
 		newList = []
@@ -287,14 +329,14 @@
 		currentListEntry = None
 		currentListIndex = None
 
-		for ap in self.oldlist.keys():
+		for ap in list(self.oldlist.keys()):
 			data = self.oldlist[ap]['data']
 			if data is not None:
 				tmpList.append(data)
 
 		if len(tmpList):
 			for entry in tmpList:
-				self.newAPList.append(self.buildEntryComponent( entry[0], entry[1], entry[2], entry[3], entry[4], entry[5] ))
+				self.newAPList.append(self.buildEntryComponent( entry[0], entry[1], entry[2], entry[3], entry[4], entry[5],entry[6] ))
 
 			currentListEntry = self["list"].getCurrent()
 			if currentListEntry is not None:
@@ -316,14 +358,14 @@
 		self.cleanList = []
 		aps = iWlan.getNetworkList()
 		if aps is not None:
-			print "[WirelessLan.py] got Accespoints!"
+			print("[WirelessLan.py] got Accespoints!")
 			tmpList = []
 			compList = []
 			for ap in aps:
 				a = aps[ap]
 				if a['active']:
 					tmpList.append( (a['essid'], a['bssid']) )
-					compList.append( (a['essid'], a['bssid'], a['encrypted'], a['iface'], a['maxrate'], a['signal']) )
+					compList.append( (a['essid'], a['bssid'], a['encrypted'], a['iface'], a['maxrate'], a['signal'], a['frequency_norm']) )
 
 			for entry in tmpList:
 				if entry[0] == "":
@@ -331,14 +373,14 @@
 						if compentry[1] == entry[1]:
 							compList.remove(compentry)
 			for entry in compList:
-				self.cleanList.append( ( entry[0], entry[1], entry[2], entry[3], entry[4], entry[5] ) )
-				if not self.oldlist.has_key(entry[0]):
+				self.cleanList.append( ( entry[0], entry[1], entry[2], entry[3], entry[4], entry[5], entry[6]) )
+				if entry[0] not in self.oldlist:
 					self.oldlist[entry[0]] = { 'data': entry }
 				else:
 					self.oldlist[entry[0]]['data'] = entry
 
 		for entry in self.cleanList:
-			self.APList.append(self.buildEntryComponent( entry[0], entry[1], entry[2], entry[3], entry[4], entry[5] ))
+			self.APList.append(self.buildEntryComponent( entry[0], entry[1], entry[2], entry[3], entry[4], entry[5], entry[6] ))
 
 		if refresh is False:
 			self['list'].setList(self.APList)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/newplugin.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/newplugin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Plugins/newplugin.py	2020-06-21 10:16:12.703438445 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Plugins/newplugin.py	2020-06-21 10:20:02.347324304 -0400
@@ -1,32 +1,34 @@
 #!/usr/bin/python
 
+from __future__ import print_function
 import os
+from six.moves import input
 
 os.system("clear")
-internalname = raw_input("Internal plugin name (no whitespaces, plugin directory): ")
-name = raw_input("Visible plugin name: ")
-print
+internalname = input("Internal plugin name (no whitespaces, plugin directory): ")
+name = input("Visible plugin name: ")
+print()
 
 os.system("clear")
 dirlist = []
 count = 0
-print "Plugin categories:"
+print("Plugin categories:")
 for dir in os.listdir("."):
 	if os.path.isdir(dir):
 		count += 1
 		dirlist.append(dir)
-		print count, dir
+		print(count, dir)
 
-category = raw_input("Select plugin category: ")
+category = input("Select plugin category: ")
 category = dirlist[int(category) - 1]
 
 def add_where_extensionsmenu(name, fnc):
-	description = raw_input("Plugin description: ")
+	description = input("Plugin description: ")
 	return 'PluginDescriptor(name = "%s", description = _("%s"), where = PluginDescriptor.WHERE_EXTENSIONSMENU, fnc = %s)' % (name, description, fnc)
 
 def add_where_pluginmenu(name, fnc):
-	description = raw_input("Plugin description: ")
-	icon = raw_input("Icon (default: 'plugin.png': ")
+	description = input("Plugin description: ")
+	icon = input("Icon (default: 'plugin.png': ")
 	if icon == "":
 		icon = "plugin.png"
 	return 'PluginDescriptor(name = "%s", description = _("%s"), icon = "%s", where = PluginDescriptor.WHERE_PLUGINMENU, fnc = %s)' % (name, description, icon, fnc)
@@ -39,19 +41,19 @@
 
 while not stop:
 	os.system("clear")
-	print "selected targets:"
+	print("selected targets:")
 	for where in targetlist:
-		print where[0]
+		print(where[0])
 
-	print
-	print "available targets:"
+	print()
+	print("available targets:")
 	count = 0
 	for where in wherelist:
 		count += 1
-		print count, where[0]
-	print "x break"
+		print(count, where[0])
+	print("x break")
 
-	target = raw_input("Select WHERE-target: ")
+	target = input("Select WHERE-target: ")
 	if target == "x":
 		stop = True
 	else:
@@ -76,7 +78,7 @@
 makefile.close()
 
 lines = []
-print "open"
+print("open")
 configure = open("../../../configure.ac", "r")
 while True:
 	line = configure.readline()
@@ -86,7 +88,7 @@
 	if line.strip() == "lib/python/Plugins/" + category + "/Makefile":
 		lines.append("lib/python/Plugins/" + pluginpath + "/Makefile\n")
 configure.close()
-print "close"
+print("close")
 
 configure = open("../../../configure.ac", "w")
 configure.writelines(lines)
@@ -103,7 +105,7 @@
 """)
 
 mainlist = []
-for count in range(len(targetlist)):
+for count in list(range(len(targetlist))):
 	if count == 0:
 		mainlist.append("main")
 	else:
@@ -116,10 +118,10 @@
 """ % main)
 
 descriptorlist = []
-for count in range(len(targetlist)):
+for count in list(range(len(targetlist))):
 	os.system("clear")
 	where = targetlist[count]
-	print "Options for target %s" % where[0]
+	print("Options for target %s" % where[0])
 	descriptorlist.append(where[1](name, mainlist[count]))
 
 if len(descriptorlist) == 1:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/About.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/About.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/About.py	2020-06-21 10:16:12.703438445 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/About.py	2020-06-21 10:20:02.347324304 -0400
@@ -1,4 +1,6 @@
-from Screen import Screen
+from __future__ import print_function
+from __future__ import absolute_import
+from Screens.Screen import Screen
 from skin import isVTISkin
 from Components.ActionMap import ActionMap
 from Components.Button import Button
@@ -19,10 +21,13 @@
 from Tools.StbHardware import getFPVersion
 from Tools.Multiboot import GetCurrentImage, GetCurrentImageMode
 
-from os import path,popen
+from os import path, popen
 from re import search
 
 import time
+import six
+
+SIGN = '°' if six.PY3 else str('\xc2\xb0')
 
 def parse_ipv4(ip):
 	ret = ""
@@ -43,7 +48,7 @@
 		ret = f.read().strip()
 		f.close()
 	except IOError:
-		print "[ERROR] failed to open file %s" % filename
+		print("[ERROR] failed to open file %s" % filename)
 	return ret
 
 def parseLines(filename):
@@ -53,7 +58,7 @@
 		ret = f.readlines()
 		f.close()
 	except IOError:
-		print "[ERROR] failed to open file %s" % filename
+		print("[ERROR] failed to open file %s" % filename)
 	return ret
 
 def MyDateConverter(StringDate):
@@ -65,7 +70,7 @@
 			day = StringDate[6:8]
 			StringDate = ' '.join((year, month, day))
 		else:
-			StringDate = StringDate.replace("-"," ")
+			StringDate = StringDate.replace("-", " ")
 		StringDate = time.strftime(config.usage.date.full.value, time.strptime(StringDate, "%Y %m %d"))
 		return StringDate
 	except:
@@ -99,14 +104,14 @@
 		bootmode = ""
 		part = _("eMMC slot %s") %slot
 		if SystemInfo["canMode12"]:
-			bootmode = _("bootmode = %s") %GetCurrentImageMode()
+			bootmode = _(" bootmode = %s") %GetCurrentImageMode()
 		if SystemInfo["HasHiSi"] and "sda" in SystemInfo["canMultiBoot"][slot]['device']:
 			if slot > 4:
 				image -=4
 			else:
 				image -=1
 			part = "SDcard slot %s (%s) " %(image, SystemInfo["canMultiBoot"][slot]['device'])
-		AboutText += _("Selected Image:\t\t%s") % _("STARTUP_") + str(slot) + "  (" + part + " " + bootmode + ")\n"
+		AboutText += _("Selected Image:\t\t%s") % _("STARTUP_") + str(slot) + "  (" + part + bootmode + ")\n"
 
 	AboutText += _("Version / Build:\t\t%s  (%s)") % (getImageVersion(), MyDateConverter(getImageBuild())) + "\n"
 	AboutText += _("Kernel:\t\t%s") % about.getKernelVersionString() + "\n"
@@ -147,8 +152,7 @@
 		tempinfo = f.read()
 		f.close()
 	if tempinfo and int(tempinfo.replace('\n', '')) > 0:
-		mark = str('\xc2\xb0')
-		AboutText += _("System temperature:\t%s") % tempinfo.replace('\n', '').replace(' ','') + mark + "C\n"
+		AboutText += _("System temperature:\t%s") % tempinfo.replace('\n', '').replace(' ', '') + SIGN + "C\n"
 
 	tempinfo = ""
 	if path.exists('/proc/stb/fp/temp_sensor_avs'):
@@ -175,13 +179,12 @@
 					temp = line[1].split("=")
 					temp = line[1].split(" ")
 					tempinfo = temp[2]
-					if getMachineBuild() in ('u41','u42','u43'):
+					if getMachineBuild() in ('u41', 'u42', 'u43'):
 						tempinfo = str(int(tempinfo) - 15)
 		except:
 			tempinfo = ""
 	if tempinfo and int(tempinfo.replace('\n', '')) > 0:
-		mark = str('\xc2\xb0')
-		AboutText += _("Processor temperature:\t%s") % tempinfo.replace('\n', '').replace(' ','') + mark + "C\n"
+		AboutText += _("Processor temperature:\t%s") % tempinfo.replace('\n', '').replace(' ', '') + SIGN + "C\n"
 	AboutLcdText = AboutText.replace('\t', ' ')
 
 	return AboutText, AboutLcdText
@@ -190,7 +193,7 @@
 	def __init__(self, session):
 		Screen.__init__(self, session)
 		Screen.setTitle(self, _("Image Information"))
-		self.skinName = ["AboutOE","About"]
+		self.skinName = ["AboutOE", "About"]
 		self.populate()
 
 		self["key_red"] = Button(_("Exit"))
@@ -264,7 +267,7 @@
 			hddlist = harddiskmanager.HDDList()
 			hdd = hddlist and hddlist[0][1] or None
 			if hdd is not None and hdd.model() != "":
-				self["hddA"] = StaticText(_("%s\n(%s, %d MB free)") % (hdd.model(), hdd.capacity(),hdd.free()))
+				self["hddA"] = StaticText(_("%s\n(%s, %d MB free)") % (hdd.model(), hdd.capacity(), hdd.free()))
 			else:
 				self["hddA"] = StaticText(_("none"))
 
@@ -342,7 +345,7 @@
 				id = f.read()[:-1].split('=')
 				f.close()
 				from Screens.MessageBox import MessageBox
-				self.session.open(MessageBox,id[1], type = MessageBox.TYPE_INFO)
+				self.session.open(MessageBox, id[1], type = MessageBox.TYPE_INFO)
 			except:
 				pass
 
@@ -405,7 +408,7 @@
 		self.Console = Console()
 		niminfo = ""
 		nims = nimmanager.nimList()
-		for count in range(len(nims)):
+		for count in list(range(len(nims))):
 			if niminfo:
 				niminfo += "\n"
 			niminfo += nims[count]
@@ -471,6 +474,7 @@
 		self.Console.ePopen("df -mh | grep -v '^Filesystem'", self.Stage1Complete)
 
 	def Stage1Complete(self, result, retval, extra_args=None):
+		result = six.ensure_str(result)
 		result = result.replace('\n                        ', ' ').split('\n')
 		self.mountinfo = ""
 		for line in result:
@@ -525,11 +529,11 @@
 				"down": self["AboutScrollLabel"].pageDown,
 			})
 
-		out_lines = file("/proc/meminfo").readlines()
+		out_lines = open("/proc/meminfo").readlines()
 		self.AboutText = _("RAM") + '\n\n'
 		RamTotal = "-"
 		RamFree = "-"
-		for lidx in range(len(out_lines) - 1):
+		for lidx in list(range(len(out_lines) - 1)):
 			tstLine = out_lines[lidx].split()
 			if "MemTotal:" in tstLine:
 				MemTotal = out_lines[lidx].split()
@@ -568,6 +572,7 @@
 		return RamText
 
 	def Stage1Complete(self, result, retval, extra_args=None):
+		result = six.ensure_str(result)
 		flash = str(result).replace('\n', '')
 		flash = flash.split()
 		RamTotal = self.MySize(flash[1])
@@ -594,6 +599,12 @@
 		self["LabelSignal"] = StaticText()
 		self["LabelBitrate"] = StaticText()
 		self["LabelEnc"] = StaticText()
+
+		self["LabelChannel"] = StaticText(_('Channel:'))
+		self["LabelEncType"] = StaticText(_('Encryption Type:'))
+		self["LabelFrequency"] = StaticText(_('Frequency:'))
+		self["LabelFrequencyNorm"] = StaticText(_('Frequency Norm:'))
+
 		self["BSSID"] = StaticText()
 		self["ESSID"] = StaticText()
 		self["quality"] = StaticText()
@@ -601,6 +612,11 @@
 		self["bitrate"] = StaticText()
 		self["enc"] = StaticText()
 
+		self["channel"] = StaticText()
+		self["encryption_type"] = StaticText()
+		self["frequency"] = StaticText()
+		self["frequency_norm"] = StaticText()
+
 		self["IFtext"] = StaticText()
 		self["IF"] = StaticText()
 		self["Statustext"] = StaticText()
@@ -635,76 +651,77 @@
 	def createscreen(self):
 		def netspeed():
 			netspeed=""
-			for line in popen('ethtool eth0 |grep Speed','r'):
+			for line in popen('ethtool eth0 |grep Speed', 'r'):
 				line = line.strip().split(":")
-				line =line[1].replace(' ','')
+				line =line[1].replace(' ', '')
 				netspeed += line
-				return str(netspeed)
+			return str(netspeed)
+
 
 		def netspeed_eth1():
 			netspeed=""
-			for line in popen('ethtool eth1 |grep Speed','r'):
+			for line in popen('ethtool eth1 |grep Speed', 'r'):
 				line = line.strip().split(":")
-				line =line[1].replace(' ','')
+				line =line[1].replace(' ', '')
 				netspeed += line
-				return str(netspeed)
+			return str(netspeed)
 
 		self.AboutText = ""
 		self.iface = "eth0"
 		eth0 = about.getIfConfig('eth0')
-		if eth0.has_key('addr'):
-			if eth0.has_key('ifname'):
+		if 'addr' in eth0:
+			if 'ifname' in eth0:
 				self.AboutText += '{:<35}'.format(_('Interface:')) + "\t" + " /dev/" + eth0['ifname'] + "\n"
 			self.AboutText += '{:<35}'.format(_("IP:")) + "\t" + eth0['addr'] + "\n"
-			if eth0.has_key('netmask'):
+			if 'netmask' in eth0:
 				self.AboutText += '{:<35}'.format(_("Netmask:")) + "\t" + eth0['netmask'] + "\n"
-			if eth0.has_key('hwaddr'):
+			if 'hwaddr' in eth0:
 				self.AboutText += '{:<35}'.format(_("MAC:")) + "\t" + eth0['hwaddr'] + "\n"
 			self.AboutText += '{:<35}'.format(_("Network Speed:")) + "\t" + netspeed() + "\n"
 			self.iface = 'eth0'
 
 		eth1 = about.getIfConfig('eth1')
-		if eth1.has_key('addr'):
-			if eth1.has_key('ifname'):
+		if 'addr' in eth1:
+			if 'ifname' in eth1:
 				self.AboutText += '{:<35}'.format(_('Interface:')) + "\t" + " /dev/" + eth1['ifname'] + "\n"
 			self.AboutText += '{:<35}'.format(_("IP:")) + "\t" + eth1['addr'] + "\n"
-			if eth1.has_key('netmask'):
+			if 'netmask' in eth1:
 				self.AboutText += '{:<35}'.format(_("Netmask:")) + "\t" + eth1['netmask'] + "\n"
-			if eth1.has_key('hwaddr'):
+			if 'hwaddr' in eth1:
 				self.AboutText += '{:<35}'.format(_("MAC:")) + "\t" + eth1['hwaddr'] + "\n"
 			self.AboutText += '{:<35}'.format(_("Network Speed:")) + "\t" + netspeed_eth1() + "\n"
 			self.iface = 'eth1'
 
 		ra0 = about.getIfConfig('ra0')
-		if ra0.has_key('addr'):
-			if ra0.has_key('ifname'):
+		if 'addr' in ra0:
+			if 'ifname' in ra0:
 				self.AboutText += '{:<35}'.format(_('Interface:')) + "\t" + " /dev/" + ra0['ifname'] + "\n"
 			self.AboutText += '{:<35}'.format(_("IP:")) + "\t" + ra0['addr'] + "\n"
-			if ra0.has_key('netmask'):
+			if 'netmask' in ra0:
 				self.AboutText += '{:<35}'.format(_("Netmask:")) + "\t" + ra0['netmask'] + "\n"
-			if ra0.has_key('hwaddr'):
+			if 'hwaddr' in ra0:
 				self.AboutText += '{:<35}'.format(_("MAC:")) + "\t" + ra0['hwaddr'] + "\n"
 			self.iface = 'ra0'
 
 		wlan0 = about.getIfConfig('wlan0')
-		if wlan0.has_key('addr'):
-			if wlan0.has_key('ifname'):
+		if 'addr' in wlan0:
+			if 'ifname' in wlan0:
 				self.AboutText += '{:<35}'.format(_('Interface:')) + "\t" + " /dev/" + wlan0['ifname'] + "\n"
 			self.AboutText += '{:<35}'.format(_("IP:")) + "\t" + wlan0['addr'] + "\n"
-			if wlan0.has_key('netmask'):
+			if 'netmask' in wlan0:
 				self.AboutText += '{:<35}'.format(_("Netmask:")) + "\t" + wlan0['netmask'] + "\n"
-			if wlan0.has_key('hwaddr'):
+			if 'hwaddr' in wlan0:
 				self.AboutText += '{:<35}'.format(_("MAC:")) + "\t" + wlan0['hwaddr'] + "\n"
 			self.iface = 'wlan0'
 
 		wlan1 = about.getIfConfig('wlan1')
-		if wlan1.has_key('addr'):
-			if wlan1.has_key('ifname'):
+		if 'addr' in wlan1:
+			if 'ifname' in wlan1:
 				self.AboutText += '{:<35}'.format(_('Interface:')) + "\t" + " /dev/" + wlan1['ifname'] + "\n"
 			self.AboutText += '{:<35}'.format(_("IP:")) + "\t" + wlan1['addr'] + "\n"
-			if wlan1.has_key('netmask'):
+			if 'netmask' in wlan1:
 				self.AboutText += '{:<35}'.format(_("Netmask:")) + "\t" + wlan1['netmask'] + "\n"
-			if wlan1.has_key('hwaddr'):
+			if 'hwaddr' in wlan1:
 				self.AboutText += '{:<35}'.format(_("MAC:")) + "\t" + wlan1['hwaddr'] + "\n"
 			self.iface = 'wlan1'
 
@@ -712,7 +729,7 @@
 		self.AboutText += "\n" + '{:<35}'.format(_("Bytes received:")) + "\t" + rx_bytes + "\n"
 		self.AboutText += '{:<35}'.format(_("Bytes sent:")) + "\t" + tx_bytes + "\n"
 
-		hostname = file('/proc/sys/kernel/hostname').read()
+		hostname = open('/proc/sys/kernel/hostname').read()
 		self.AboutText += "\n" + '{:<35}'.format(_("Hostname:")) + "\t" + hostname + "\n"
 		self["AboutScrollLabel"] = ScrollLabel(self.AboutText)
 
@@ -739,25 +756,37 @@
 							essid = _("No Connection")
 						else:
 							accesspoint = str(status[self.iface]["accesspoint"])
-						if self.has_key("BSSID"):
-							self.AboutText += _('Accesspoint:') + '\t' + accesspoint + '\n'
-						if self.has_key("ESSID"):
-							self.AboutText += _('SSID:') + '\t' + essid + '\n'
+						if "BSSID" in self:
+							self.AboutText += '{:<35}'.format(_('Accesspoint:')) + '\t' + accesspoint + '\n'
+						if "ESSID" in self:
+							self.AboutText += '{:<35}'.format(_('SSID:')) + '\t' + essid + '\n'
 
 						quality = str(status[self.iface]["quality"])
-						if self.has_key("quality"):
-							self.AboutText += _('Link Quality:') + '\t' + quality + '\n'
+						if "quality" in self:
+							self.AboutText += '{:<35}'.format(_('Link Quality:')) + '\t' + quality + '\n'
+
+						channel = str(status[self.iface]["channel"])
+						if "channel" in self:
+							self.AboutText += '{:<35}'.format(_('Channel:')) + '\t' + channel + '\n'
+
+						frequency = status[self.iface]["frequency"]
+						if "frequency" in self:
+							self.AboutText += '{:<35}'.format(_('Frequency:')) + '\t' + frequency + '\n'
+
+						frequency_norm = status[self.iface]["frequency_norm"]
+						if frequency_norm is not None:
+							self.AboutText += '{:<35}'.format(_('Frequency Norm:')) + '\t' + frequency_norm + '\n'
 
 						if status[self.iface]["bitrate"] == '0':
 							bitrate = _("Unsupported")
 						else:
-							bitrate = str(status[self.iface]["bitrate"]) + " Mb/s"
-						if self.has_key("bitrate"):
-							self.AboutText += _('Bitrate:') + '\t' + bitrate + '\n'
+							bitrate = str(status[self.iface]["bitrate"])
+						if "bitrate" in self:
+							self.AboutText += '{:<35}'.format(_('Bitrate:')) + '\t' + bitrate + '\n'
 
-						signal = str(status[self.iface]["signal"])
-						if self.has_key("signal"):
-							self.AboutText += _('Signal Strength:') + '\t' + signal + '\n'
+						signal = str(status[self.iface]["signal"]) + " dBm"
+						if "signal" in self:
+							self.AboutText += '{:<35}'.format(_('Signal Strength:')) + '\t' + signal + '\n'
 
 						if status[self.iface]["encryption"] == "off":
 							if accesspoint == "Not-Associated":
@@ -766,8 +795,12 @@
 								encryption = _("Unsupported")
 						else:
 							encryption = _("Enabled")
-						if self.has_key("enc"):
-							self.AboutText += _('Encryption:') + '\t' + encryption + '\n'
+						if "enc" in self:
+							self.AboutText += '{:<35}'.format(_('Encryption:')) + '\t' + encryption + '\n'
+
+						encryption_type = status[self.iface]["encryption_type"]
+						if "encryption_type" in self:
+							self.AboutText += '{:<35}'.format(_('Encryption Type:')) + '\t' + encryption_type + '\n'
 
 						if status[self.iface]["essid"] == "off" or status[self.iface]["accesspoint"] == "Not-Associated" or status[self.iface]["accesspoint"] is False:
 							self.LinkState = False
@@ -795,6 +828,7 @@
 			iNetwork.getLinkState(self.iface, self.dataAvail)
 
 	def dataAvail(self, data):
+		data = six.ensure_str(data)
 		self.LinkState = None
 		for line in data.splitlines():
 			line = line.strip()
@@ -861,7 +895,7 @@
 			"right": self.pageDown,
 			"down": self.pageDown,
 			"up": self.pageUp
-		},-1)
+		}, -1)
 		self.onLayoutFinish.append(self.getlog)
 
 	def changelogtype(self):
@@ -925,7 +959,7 @@
 				continue
 			(type, value) = l
 			infomap[type] = value
-		print infomap
+		print(infomap)
 
 		self["key_red"] = Button(_("Cancel"))
 		self["TranslationInfo"] = StaticText(info)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/AudioSelection.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/AudioSelection.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/AudioSelection.py	2020-06-21 10:16:12.703438445 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/AudioSelection.py	2020-06-21 10:20:02.347324304 -0400
@@ -1,4 +1,5 @@
-from Screen import Screen
+from __future__ import absolute_import
+from Screens.Screen import Screen
 from Screens.Setup import getConfigMenuItem, Setup
 from Screens.InputBox import PinInput
 from Screens.MessageBox import MessageBox
@@ -77,7 +78,7 @@
 		}, -2)
 
 		self.settings = ConfigSubsection()
-		choicelist = [(PAGE_AUDIO,""), (PAGE_SUBTITLES,"")]
+		choicelist = [(PAGE_AUDIO, ""), (PAGE_SUBTITLES, "")]
 		self.settings.menupage = ConfigSelection(choices = choicelist, default=page)
 		self.onLayoutFinish.append(self.__layoutFinished)
 
@@ -169,7 +170,7 @@
 				conflist.append(getConfigListEntry(_("PCM Multichannel"), self.settings.pcm_multichannel, None))
 
 			if SystemInfo["CanDTSHD"]:
-				if getBoxType() in ("dm7080" , "dm820"):
+				if getBoxType() in ("dm7080", "dm820"):
 					choice_list = [("use_hdmi_caps",  _("controlled by HDMI")), ("force_dts", _("convert to DTS"))]
 				else:
 					choice_list = [("downmix",  _("Downmix")), ("force_dts", _("convert to DTS")), ("use_hdmi_caps",  _("controlled by HDMI")), ("multichannel",  _("convert to multi-channel PCM")), ("hdmi_best",  _("use best / controlled by HDMI"))]
@@ -192,12 +193,12 @@
 			if n > 0:
 				self.audioChannel = service.audioChannel()
 				if self.audioChannel:
-					choicelist = [("0",_("left")), ("1",_("stereo")), ("2", _("right"))]
+					choicelist = [("0", _("left")), ("1", _("stereo")), ("2", _("right"))]
 					self.settings.channelmode = ConfigSelection(choices = choicelist, default = str(self.audioChannel.getCurrentChannel()))
 					self.settings.channelmode.addNotifier(self.changeMode, initial_call = False)
 					conflist.append(getConfigListEntry(_("Audio Channel"), self.settings.channelmode, None))
 				selectedAudio = self.audioTracks.getCurrentTrack()
-				for x in range(n):
+				for x in list(range(n)):
 					number = str(x + 1)
 					i = audio.getTrackInfo(x)
 					languages = i.getLanguage().split('/')
@@ -213,7 +214,7 @@
 					for lang in languages:
 						if cnt:
 							language += ' / '
-						if LanguageCodes.has_key(lang):
+						if lang in LanguageCodes:
 							language += _(LanguageCodes[lang][0])
 						else:
 							language += lang
@@ -257,7 +258,7 @@
 				if len(Plugins):
 					for x in Plugins:
 						if x[0] != 'AudioEffect': # always make AudioEffect Blue button.
-							conflist.append(getConfigListEntry(x[0], ConfigNothing(),x[1]))
+							conflist.append(getConfigListEntry(x[0], ConfigNothing(), x[1]))
 
 		elif self.settings.menupage.value == PAGE_SUBTITLES:
 
@@ -277,7 +278,7 @@
 
 					try:
 						if x[4] != "und":
-							if LanguageCodes.has_key(x[4]):
+							if x[4] in LanguageCodes:
 								language = _(LanguageCodes[x[4]][0])
 							else:
 								language = x[4]
@@ -304,7 +305,7 @@
 					streams.append((x, "", number, description, language, selected))
 					idx += 1
 
-			if self.infobar.selected_subtitle and self.infobar.selected_subtitle != (0,0,0,0)  and not ".DVDPlayer'>" in `self.infobar`:
+			if self.infobar.selected_subtitle and self.infobar.selected_subtitle != (0, 0, 0, 0)  and not ".DVDPlayer'>" in repr(self.infobar):
 				conflist.append(getConfigListEntry(_("Subtitle Quickmenu"), ConfigNothing(), None))
 
 		if len(conflist) > 0 and conflist[0][0]:
@@ -332,7 +333,7 @@
 		self.selectedSubtitle = None
 		if self.subtitlesEnabled():
 			self.selectedSubtitle = self.infobar.selected_subtitle
-			if self.selectedSubtitle and self.selectedSubtitle[:4] == (0,0,0,0):
+			if self.selectedSubtitle and self.selectedSubtitle[:4] == (0, 0, 0, 0):
 				self.selectedSubtitle = None
 			elif self.selectedSubtitle and not self.selectedSubtitle[:4] in (x[:4] for x in subtitlelist):
 				subtitlelist.append(self.selectedSubtitle)
@@ -395,7 +396,7 @@
 		self.fillList()
 
 	def changeAACDownmix(self, downmix):
-		if getBoxType() in ('dm900', 'dm920', 'dm7080', 'dm800','gbquad4k', 'gbue4k', 'gbx34k'):
+		if getBoxType() in ('dm900', 'dm920', 'dm7080', 'dm800', 'gbquad4k', 'gbue4k', 'gbx34k'):
 			config.av.downmix_aac.setValue(downmix.value)
 		else:
 			if downmix.value:
@@ -451,7 +452,7 @@
 		if config or self.focus == FOCUS_CONFIG:
 			if self.settings.menupage.value == PAGE_AUDIO and self["config"].getCurrent()[2]:
 				self["config"].getCurrent()[2]()
-			elif self.settings.menupage.value == PAGE_SUBTITLES and self.infobar.selected_subtitle and self.infobar.selected_subtitle != (0,0,0,0):
+			elif self.settings.menupage.value == PAGE_SUBTITLES and self.infobar.selected_subtitle and self.infobar.selected_subtitle != (0, 0, 0, 0):
 				self.session.open(QuickSubtitlesConfigMenu, self.infobar)
 			else:
 				ConfigListScreen.keyRight(self)
@@ -642,7 +643,7 @@
 			"7": self.keyNumber,
 			"9": self.keyNumber,
 			"0": self.keyNumber,
-		},-2)
+		}, -2)
 
 		self.onLayoutFinish.append(self.layoutFinished)
 
@@ -681,7 +682,7 @@
 		self.wait.start(500, True)
 
 	def changedEntry(self):
-		if self["config"].getCurrent() in [getConfigMenuItem("config.subtitles.pango_subtitles_delay"),getConfigMenuItem("config.subtitles.pango_subtitles_fps")]:
+		if self["config"].getCurrent() in [getConfigMenuItem("config.subtitles.pango_subtitles_delay"), getConfigMenuItem("config.subtitles.pango_subtitles_fps")]:
 			self.wait.start(500, True)
 
 	def resyncSubtitles(self):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/BoxPortal.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/BoxPortal.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/BoxPortal.py	2020-06-21 10:16:12.703438445 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/BoxPortal.py	2020-06-21 10:20:02.347324304 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Components.ActionMap import ActionMap, HelpableActionMap, NumberActionMap
 from Components.Sources.List import List
@@ -10,7 +11,7 @@
 
 def isExtension_installed(pname):
 	try:
-		for plugin in plugins.getPlugins([PluginDescriptor.WHERE_PLUGINMENU,PluginDescriptor.WHERE_EXTENSIONSMENU]):
+		for plugin in plugins.getPlugins([PluginDescriptor.WHERE_PLUGINMENU, PluginDescriptor.WHERE_EXTENSIONSMENU]):
 			if plugin.name == pname:
 				return True
 				break
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ButtonSetup.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ButtonSetup.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ButtonSetup.py	2020-06-21 10:16:12.703438445 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ButtonSetup.py	2020-06-21 10:20:02.347324304 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from GlobalActions import globalActionMap
 from Components.ActionMap import ActionMap, HelpableActionMap
 from Components.Button import Button
@@ -152,7 +153,7 @@
 config.misc.ButtonSetup = ConfigSubsection()
 config.misc.ButtonSetup.additional_keys = ConfigYesNo(default=True)
 for x in getButtonSetupKeys():
-	exec "config.misc.ButtonSetup." + x[1] + " = ConfigText(default='" + x[2] + "')"
+	exec("config.misc.ButtonSetup." + x[1] + " = ConfigText(default='" + x[2] + "')")
 
 def getButtonSetupFunctions():
 	ButtonSetupFunctions = []
@@ -161,22 +162,22 @@
 	pluginlist = plugins.getPlugins(PluginDescriptor.WHERE_EVENTINFO)
 	pluginlist.sort(key=lambda p: p.name)
 	for plugin in pluginlist:
-		if plugin.name not in twinPlugins and plugin.path and 'selectedevent' not in plugin.__call__.func_code.co_varnames:
-			if twinPaths.has_key(plugin.path[plugin.path.rfind("Plugins"):]):
+		if plugin.name not in twinPlugins and plugin.path and 'selectedevent' not in plugin.__call__.__code__.co_varnames:
+			if plugin.path[plugin.path.rfind("Plugins"):] in twinPaths:
 				twinPaths[plugin.path[plugin.path.rfind("Plugins"):]] += 1
 			else:
 				twinPaths[plugin.path[plugin.path.rfind("Plugins"):]] = 1
-			ButtonSetupFunctions.append((plugin.name, plugin.path[plugin.path.rfind("Plugins"):] + "/" + str(twinPaths[plugin.path[plugin.path.rfind("Plugins"):]]) , "EPG"))
+			ButtonSetupFunctions.append((plugin.name, plugin.path[plugin.path.rfind("Plugins"):] + "/" + str(twinPaths[plugin.path[plugin.path.rfind("Plugins"):]]), "EPG"))
 			twinPlugins.append(plugin.name)
 	pluginlist = plugins.getPlugins([PluginDescriptor.WHERE_PLUGINMENU, PluginDescriptor.WHERE_EXTENSIONSMENU, PluginDescriptor.WHERE_EVENTINFO])
 	pluginlist.sort(key=lambda p: p.name)
 	for plugin in pluginlist:
 		if plugin.name not in twinPlugins and plugin.path:
-			if twinPaths.has_key(plugin.path[plugin.path.rfind("Plugins"):]):
+			if plugin.path[plugin.path.rfind("Plugins"):] in twinPaths:
 				twinPaths[plugin.path[plugin.path.rfind("Plugins"):]] += 1
 			else:
 				twinPaths[plugin.path[plugin.path.rfind("Plugins"):]] = 1
-			ButtonSetupFunctions.append((plugin.name, plugin.path[plugin.path.rfind("Plugins"):] + "/" + str(twinPaths[plugin.path[plugin.path.rfind("Plugins"):]]) , "Plugins"))
+			ButtonSetupFunctions.append((plugin.name, plugin.path[plugin.path.rfind("Plugins"):] + "/" + str(twinPaths[plugin.path[plugin.path.rfind("Plugins"):]]), "Plugins"))
 			twinPlugins.append(plugin.name)
 	ButtonSetupFunctions.append((_("Show vertical Program Guide"), "Infobar/openVerticalEPG", "EPG"))
 	ButtonSetupFunctions.append((_("Show graphical multi EPG"), "Infobar/openGraphEPG", "EPG"))
@@ -297,7 +298,7 @@
 		self.ButtonSetupKeys = getButtonSetupKeys()
 		self.ButtonSetupFunctions = getButtonSetupFunctions()
 		for x in self.ButtonSetupKeys:
-			self.list.append(ChoiceEntryComponent('',(_(x[0]), x[1])))
+			self.list.append(ChoiceEntryComponent('', (_(x[0]), x[1])))
 		self["list"] = ChoiceList(list=self.list[:config.misc.ButtonSetup.additional_keys.value and len(self.ButtonSetupKeys) or 10], selection = 0)
 		self["choosen"] = ChoiceList(list=[])
 		self.getFunctions()
@@ -350,7 +351,7 @@
 			for x in eval("config.misc.ButtonSetup." + key + ".value.split(',')"):
 				function = list(function for function in self.ButtonSetupFunctions if function[1] == x )
 				if function:
-					selected.append(ChoiceEntryComponent('',((function[0][0]), function[0][1])))
+					selected.append(ChoiceEntryComponent('', ((function[0][0]), function[0][1])))
 			self["choosen"].setList(selected)
 
 class ButtonSetupSelect(Screen):
@@ -371,7 +372,7 @@
 		for x in self.config.value.split(','):
 			function = list(function for function in self.ButtonSetupFunctions if function[1] == x )
 			if function:
-				self.selected.append(ChoiceEntryComponent('',((function[0][0]), function[0][1])))
+				self.selected.append(ChoiceEntryComponent('', ((function[0][0]), function[0][1])))
 		self.prevselected = self.selected[:]
 		self["choosen"] = ChoiceList(list=self.selected, selection=0)
 		self["list"] = ChoiceList(list=self.getFunctionList(), selection=0)
@@ -415,16 +416,16 @@
 		functionslist = []
 		catagories = {}
 		for function in self.ButtonSetupFunctions:
-			if not catagories.has_key(function[2]):
+			if function[2] not in catagories:
 				catagories[function[2]] = []
 			catagories[function[2]].append(function)
 		for catagorie in sorted(list(catagories)):
 			if catagorie in self.expanded:
-				functionslist.append(ChoiceEntryComponent('expanded',((catagorie), "Expander")))
+				functionslist.append(ChoiceEntryComponent('expanded', ((catagorie), "Expander")))
 				for function in catagories[catagorie]:
-					functionslist.append(ChoiceEntryComponent('verticalline',((function[0]), function[1])))
+					functionslist.append(ChoiceEntryComponent('verticalline', ((function[0]), function[1])))
 			else:
-				functionslist.append(ChoiceEntryComponent('expandable',((catagorie), "Expander")))
+				functionslist.append(ChoiceEntryComponent('expandable', ((catagorie), "Expander")))
 		return functionslist
 
 	def toggleMode(self):
@@ -504,7 +505,7 @@
 
 class ButtonSetupActionMap(ActionMap):
 	def action(self, contexts, action):
-		if (action in tuple(x[1] for x in getButtonSetupKeys()) and self.actions.has_key(action)):
+		if (action in tuple(x[1] for x in getButtonSetupKeys()) and action in self.actions):
 			res = self.actions[action](action)
 			if res is not None:
 				return res
@@ -514,7 +515,7 @@
 
 class helpableButtonSetupActionMap(HelpableActionMap):
 	def action(self, contexts, action):
-		if (action in tuple(x[1] for x in getButtonSetupKeys()) and self.actions.has_key(action)):
+		if (action in tuple(x[1] for x in getButtonSetupKeys()) and action in self.actions):
 			res = self.actions[action](action)
 			if res is not None:
 				return res
@@ -526,7 +527,7 @@
 	def __init__(self):
 		self.ButtonSetupKeys = getButtonSetupKeys()
 		self["ButtonSetupButtonActions"] = helpableButtonSetupActionMap(self, "ButtonSetupActions",
-			dict((x[1],(self.ButtonSetupGlobal, boundFunction(self.getHelpText, x[1]))) for x in self.ButtonSetupKeys), -10)
+			dict((x[1], (self.ButtonSetupGlobal, boundFunction(self.getHelpText, x[1]))) for x in self.ButtonSetupKeys), -10)
 		self.longkeyPressed = False
 		self.onExecEnd.append(self.clearLongkeyPressed)
 
@@ -582,8 +583,8 @@
 				pluginlist = plugins.getPlugins(PluginDescriptor.WHERE_EVENTINFO)
 				pluginlist.sort(key=lambda p: p.name)
 				for plugin in pluginlist:
-					if plugin.name not in twinPlugins and plugin.path and 'selectedevent' not in plugin.__call__.func_code.co_varnames:	
-						if twinPaths.has_key(plugin.path[plugin.path.rfind("Plugins"):]):
+					if plugin.name not in twinPlugins and plugin.path and 'selectedevent' not in plugin.__call__.__code__.co_varnames:	
+						if plugin.path[plugin.path.rfind("Plugins"):] in twinPaths:
 							twinPaths[plugin.path[plugin.path.rfind("Plugins"):]] += 1
 						else:
 							twinPaths[plugin.path[plugin.path.rfind("Plugins"):]] = 1
@@ -595,7 +596,7 @@
 				pluginlist.sort(key=lambda p: p.name)
 				for plugin in pluginlist:
 					if plugin.name not in twinPlugins and plugin.path:
-						if twinPaths.has_key(plugin.path[plugin.path.rfind("Plugins"):]):
+						if plugin.path[plugin.path.rfind("Plugins"):] in twinPaths:
 							twinPaths[plugin.path[plugin.path.rfind("Plugins"):]] += 1
 						else:
 							twinPaths[plugin.path[plugin.path.rfind("Plugins"):]] = 1
@@ -610,18 +611,18 @@
 						return
 			elif selected[0] == "Infobar":
 				if hasattr(self, selected[1]):
-					exec "self." + ".".join(selected[1:]) + "()"
+					exec("self." + ".".join(selected[1:]) + "()")
 				else:
 					return 0
 			elif selected[0] == "Module":
 				try:
-					exec "from %s import %s" % (selected[1], selected[2])
-					exec "self.session.open(%s)" %  ",".join(selected[2:])
+					exec("from %s import %s" % (selected[1], selected[2]))
+					exec("self.session.open(%s)" %  ",".join(selected[2:]))
 				except:
-					print "[ButtonSetup] error during executing module %s, screen %s" % (selected[1], selected[2])
+					print("[ButtonSetup] error during executing module %s, screen %s" % (selected[1], selected[2]))
 			elif selected[0] == "Setup":
 				from Screens.Setup import Setup
-				exec "self.session.open(Setup, \"%s\")" % selected[1]
+				exec("self.session.open(Setup, \"%s\")" % selected[1])
 			elif selected[0].startswith("Zap"):
 				if selected[0] == "ZapPanic":
 					self.servicelist.history = []
@@ -649,7 +650,7 @@
 					self.session.open(Execute, selected[1] + " shellscript", None, command)
 				else:
 					from Screens.Console import Console
-					exec "self.session.open(Console,_(selected[1]),[command])"
+					exec("self.session.open(Console,_(selected[1]),[command])")
 			elif selected[0] == "EMC":
 				try:
 					from Plugins.Extensions.EnhancedMovieCenter.plugin import showMoviesNew
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/CCcamInfo.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/CCcamInfo.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/CCcamInfo.py	2020-06-21 10:16:12.703438445 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/CCcamInfo.py	2020-06-21 10:20:02.347324304 -0400
@@ -1,5 +1,6 @@
 # -*- coding: UTF-8 -*-
 # CCcam Info by AliAbdul
+from __future__ import print_function
 from base64 import encodestring
 from os import listdir, remove, rename, system, popen, path
 
@@ -21,10 +22,11 @@
 from Screens.Screen import Screen
 from Screens.VirtualKeyBoard import VirtualKeyBoard
 from Tools.Directories import fileExists, SCOPE_ACTIVE_SKIN, resolveFilename
+from six.moves.urllib.parse import urlparse, urlunparse
 from twisted.internet import reactor
 from twisted.web.client import HTTPClientFactory
-from urlparse import urlparse, urlunparse
 import skin
+import six
 
 #TOGGLE_SHOW = InfoBar.toggleShow
 
@@ -51,7 +53,7 @@
 	url = url.strip()
 	parsed = urlparse(url)
 	scheme = parsed[0]
-	path = urlunparse(('','') + parsed[2:])
+	path = urlunparse(('', '') + parsed[2:])
 
 	host, port = parsed[1], 80
 
@@ -83,7 +85,7 @@
 		authHeader = "Basic " + basicAuth.strip()
 		AuthHeaders = {"Authorization": authHeader}
 
-		if kwargs.has_key("headers"):
+		if "headers" in kwargs:
 			kwargs["headers"].update(AuthHeaders)
 		else:
 			kwargs["headers"] = AuthHeaders
@@ -106,7 +108,7 @@
 	def __init__(self, parent, context, actions, prio):
 		alist = []
 		adict = {}
-		for (action, funchelp) in actions.iteritems():
+		for (action, funchelp) in six.iteritems(actions):
 			alist.append((action, funchelp[1]))
 			adict[action] = funchelp[0]
 		NumberActionMap.__init__(self, [context], adict, prio)
@@ -274,9 +276,9 @@
 	else:
 		png = "/usr/share/enigma2/skin_default/buttons/key_%s.png" % str(idx)
 	if fileExists(png):
-		x, y, w, h = skin.parameters.get("ChoicelistIcon",(5*sf, 0, 35*sf, 25*sf))
+		x, y, w, h = skin.parameters.get("ChoicelistIcon", (5*sf, 0, 35*sf, 25*sf))
 		res.append(MultiContentEntryPixmapAlphaBlend(pos=(x, y), size=(w, h), png=loadPNG(png)))
-	x, y, w, h = skin.parameters.get("ChoicelistName",(45*sf, 2*sf, 550*sf, 25*sf))
+	x, y, w, h = skin.parameters.get("ChoicelistName", (45*sf, 2*sf, 550*sf, 25*sf))
 	res.append(MultiContentEntryText(pos=(x, y), size=(w, h), font=0, text=name))
 	return res
 
@@ -287,9 +289,9 @@
 	else:
 		png = "/usr/share/enigma2/skin_default/buttons/key_%s.png" % color
 	if fileExists(png):
-		x, y, w, h = skin.parameters.get("ChoicelistIcon",(5*sf, 0, 35*sf, 25*sf))
+		x, y, w, h = skin.parameters.get("ChoicelistIcon", (5*sf, 0, 35*sf, 25*sf))
 		res.append(MultiContentEntryPixmapAlphaBlend(pos=(x, y), size=(w, h), png=loadPNG(png)))
-	x, y, w, h = skin.parameters.get("ChoicelistName",(45*sf, 2*sf, 550*sf, 25*sf))
+	x, y, w, h = skin.parameters.get("ChoicelistName", (45*sf, 2*sf, 550*sf, 25*sf))
 	res.append(MultiContentEntryText(pos=(x, y), size=(w, h), font=0, text=name))
 	return res
 
@@ -324,12 +326,12 @@
 
 	if content == org:
 		png = lock_on
-		x, y, w, h = skin.parameters.get("SelectionListLock",(5*sf, 0, 25*sf, 25*sf))
+		x, y, w, h = skin.parameters.get("SelectionListLock", (5*sf, 0, 25*sf, 25*sf))
 	else:
 		png = lock_off
-		x, y, w, h = skin.parameters.get("SelectionListLockOff",(5*sf, 0, 25*sf, 25*sf))
+		x, y, w, h = skin.parameters.get("SelectionListLockOff", (5*sf, 0, 25*sf, 25*sf))
 	res.append(MultiContentEntryPixmapAlphaBlend(pos=(x, y), size=(w, h), png=png))
-	x, y, w, h = skin.parameters.get("SelectionListDescr",(45*sf, 2*sf, 550*sf, 25*sf))
+	x, y, w, h = skin.parameters.get("SelectionListDescr", (45*sf, 2*sf, 550*sf, 25*sf))
 	res.append(MultiContentEntryText(pos=(x, y), size=(w, h), font=0, text=name))
 
 	return res
@@ -339,12 +341,12 @@
 
 	if blacklisted:
 		png = lock_off
-		x, y, w, h = skin.parameters.get("SelectionListLockOff",(5*sf, 0, 25*sf, 25*sf))
+		x, y, w, h = skin.parameters.get("SelectionListLockOff", (5*sf, 0, 25*sf, 25*sf))
 	else:
 		png = lock_on
-		x, y, w, h = skin.parameters.get("SelectionListLock",(5*sf, 0, 25*sf, 25*sf))
+		x, y, w, h = skin.parameters.get("SelectionListLock", (5*sf, 0, 25*sf, 25*sf))
 	res.append(MultiContentEntryPixmapAlphaBlend(pos=(x, y), size=(w, h), png=png))
-	x, y, w, h = skin.parameters.get("SelectionListDescr",(45*sf, 2*sf, 550*sf, 25*sf))
+	x, y, w, h = skin.parameters.get("SelectionListDescr", (45*sf, 2*sf, 550*sf, 25*sf))
 	res.append(MultiContentEntryText(pos=(x, y), size=(w, h), font=0, text=name))
 
 	return res
@@ -549,7 +551,7 @@
 			self["menu"].pageDown()
 
 	def getWebpageError(self, error=""):
-		print str(error)
+		print(str(error))
 		self.session.openWithCallback(self.workingFinished, MessageBox, _("Error reading webpage!"), MessageBox.TYPE_ERROR)
 
 	def showFile(self, file):
@@ -683,7 +685,7 @@
 							while string.endswith(" "):
 								string = string[:-1]
 
-							idx = string.index(" ")
+							idx = " ".index()
 							uphops = string[:idx]
 							string = string[idx+1:]
 
@@ -747,6 +749,7 @@
 
 	def showFreeMemory(self, result, retval, extra_args):
 		if retval == 0:
+			result = six.ensure_str(result)
 			if result.__contains__("Total:"):
 				idx = result.index("Total:")
 				result = result[idx+6:]
@@ -890,7 +893,7 @@
 								while string.endswith(" "):
 									string = string[:-1]
 
-								idx = string.index(" ")
+								idx = " ".index()
 								maxdown = string[idx+1:]
 
 								while maxdown.startswith(" "):
@@ -1432,7 +1435,7 @@
 							while string.endswith(" "):
 								string = string[:-1]
 
-							idx = string.index(" ")
+							idx = " ".index()
 							uphops = string[:idx]
 							string = string[idx+1:]
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ChannelSelection.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ChannelSelection.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ChannelSelection.py	2020-06-21 10:16:12.707439244 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ChannelSelection.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,9 +1,12 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
+from __future__ import absolute_import
 from boxbranding import getMachineBuild, getMachineBrand, getMachineName
 import os
 from Tools.Profile import profile
+from Tools.Directories import pathExists, SCOPE_SKIN_IMAGE, SCOPE_ACTIVE_SKIN, resolveFilename
 
-from Screen import Screen
+from Screens.Screen import Screen
 import Screens.InfoBar
 import Components.ParentalControl
 from Components.Button import Button
@@ -18,7 +21,7 @@
 from Components.Renderer.Picon import getPiconName
 from Screens.TimerEdit import TimerSanityConflict
 profile("ChannelSelection.py 1")
-from EpgSelection import EPGSelection
+from Screens.EpgSelection import EPGSelection
 from enigma import eActionMap, eServiceReferenceDVB, eServiceReference, eEPGCache, eServiceCenter, eRCInput, eTimer, ePoint, eDVBDB, iPlayableService, iServiceInformation, getPrevAsciiCode, eEnv, loadPNG
 from Components.config import config, configfile, ConfigSubsection, ConfigText, ConfigYesNo
 from Tools.NumericalTextInput import NumericalTextInput
@@ -34,7 +37,7 @@
 profile("ChannelSelection.py 3")
 from Components.ChoiceList import ChoiceList, ChoiceEntryComponent
 from RecordTimer import RecordTimerEntry, AFTEREVENT
-from TimerEntry import TimerEntry, InstantRecordTimerEntry
+from Screens.TimerEntry import TimerEntry, InstantRecordTimerEntry
 from Screens.InputBox import InputBox, PinInput
 from Screens.VirtualKeyBoard import VirtualKeyBoard
 from Screens.ChoiceBox import ChoiceBox
@@ -47,14 +50,16 @@
 from Screens.EventView import EventViewEPGSelect
 from ServiceReference import ServiceReference
 from Tools.BoundFunction import boundFunction
-from Tools import Notifications
+import Tools.Notifications
 from Tools.ServiceReference import service_types_tv_ref, service_types_radio_ref, serviceRefAppendPath
 from Plugins.Plugin import PluginDescriptor
 from Components.PluginComponent import plugins
 from RecordTimer import TIMERTYPE
 from skin import getSkinFactor
 
-from time import localtime, time, strftime
+from time import localtime, time
+import six
+
 try:
 	from Plugins.SystemPlugins.PiPServiceRelation.plugin import getRelationDict
 	plugin_PiPServiceRelation_installed = True
@@ -68,6 +73,8 @@
 FLAG_HIDE_VBI = 512
 FLAG_CENTER_DVB_SUBS = 2048 #define in lib/dvb/idvb.h as dxNewFound = 64 and dxIsDedicated3D = 128
 
+SIGN = '°' if six.PY3 else str('\xc2\xb0')
+
 class BouquetSelector(Screen):
 	def __init__(self, session, bouquets, selectedFunc, enableWrapAround=True):
 		Screen.__init__(self, session)
@@ -107,7 +114,7 @@
 		self.bouquets=bouquets
 
 	def okbuttonClick(self):
-		self.selectedFunc(self.getCurrent(),self.bouquets)
+		self.selectedFunc(self.getCurrent(), self.bouquets)
 
 
 class SilentBouquetSelector:
@@ -415,7 +422,7 @@
 			for file in os.listdir("/etc/enigma2/"):
 				if file.startswith("userbouquet") and file.endswith(".del"):
 					file = "/etc/enigma2/" + file
-					print "permantly remove file ", file
+					print("permantly remove file ", file)
 					os.remove(file)
 			self.close()
 
@@ -423,7 +430,7 @@
 		for file in os.listdir("/etc/enigma2/"):
 			if file.startswith("userbouquet") and file.endswith(".del"):
 				file = "/etc/enigma2/" + file
-				print "restore file ", file[:-4]
+				print("restore file ", file[:-4])
 				os.rename(file, file[:-4])
 		eDVBDBInstance = eDVBDB.getInstance()
 		eDVBDBInstance.setLoadUnlinkedUserbouquets(True)
@@ -547,7 +554,7 @@
 			if self.session.pipshown:
 				del self.session.pip
 				if SystemInfo["LCDMiniTVPiP"] and int(config.lcd.modepip.value) >= 1:
-					print '[LCDMiniTV] disable PIP'
+					print('[LCDMiniTV] disable PIP')
 					f = open("/proc/stb/lcd/mode", "w")
 					f.write(config.lcd.modeminitv.value)
 					f.close()
@@ -562,7 +569,7 @@
 					self.session.pip.servicePath = self.csel.getCurrentServicePath()
 					self.session.pip.servicePath[1] = currentBouquet
 					if SystemInfo["LCDMiniTVPiP"] and int(config.lcd.modepip.value) >= 1:
-						print '[LCDMiniTV] enable PIP'
+						print('[LCDMiniTV] enable PIP')
 						f = open("/proc/stb/lcd/mode", "w")
 						f.write(config.lcd.modepip.value)
 						f.close()
@@ -580,13 +587,13 @@
 					self.session.pipshown = False
 					del self.session.pip
 					if SystemInfo["LCDMiniTV"] and int(config.lcd.modepip.value) >= 1:
-						print '[LCDMiniTV] disable PIP'
+						print('[LCDMiniTV] disable PIP')
 						f = open("/proc/stb/lcd/mode", "w")
 						f.write(config.lcd.modeminitv.value)
 						f.close()
 					self.session.openWithCallback(self.close, MessageBox, _("Could not open Picture in Picture"), MessageBox.TYPE_ERROR)
 		else:
-			self.session.open(MessageBox, _("Your %s %s does not support PiP HD") % (getMachineBrand(), getMachineName()), type = MessageBox.TYPE_INFO,timeout = 5 )
+			self.session.open(MessageBox, _("Your %s %s does not support PiP HD") % (getMachineBrand(), getMachineName()), type = MessageBox.TYPE_INFO, timeout = 5 )
 
 
 	def addServiceToBouquetSelected(self):
@@ -771,7 +778,7 @@
 			{
 				"ShortRecord": (self.RecordTimerQuestion, _("Add a record timer")),
 				'LongRecord': (self.doZapTimer, _('Add a zap timer for next event'))
-			},-1)
+			}, -1)
 		self['dialogactions'] = ActionMap(['SetupActions'],
 			{
 				'cancel': self.closeChoiceBoxDialog,
@@ -1155,7 +1162,7 @@
 				if mutableAlternatives:
 					mutableAlternatives.setListName(name)
 					if mutableAlternatives.addService(cur_service.ref):
-						print "add", cur_service.ref.toString(), "to new alternatives failed"
+						print("add", cur_service.ref.toString(), "to new alternatives failed")
 					mutableAlternatives.flushChanges()
 					self.servicelist.addService(new_ref.ref, True)
 					self.servicelist.removeCurrent()
@@ -1166,11 +1173,11 @@
 					if self.startServiceRef and cur_service.ref == self.startServiceRef:
 						self.startServiceRef = new_ref.ref
 				else:
-					print "get mutable list for new created alternatives failed"
+					print("get mutable list for new created alternatives failed")
 			else:
-				print "add", str, "to", cur_root.getServiceName(), "failed"
+				print("add", str, "to", cur_root.getServiceName(), "failed")
 		else:
-			print "bouquetlist is not editable"
+			print("bouquetlist is not editable")
 
 	def addBouquet(self, bName, services):
 		serviceHandler = eServiceCenter.getInstance()
@@ -1193,10 +1200,10 @@
 					if services is not None:
 						for service in services:
 							if mutableBouquet.addService(service):
-								print "add", service.toString(), "to new bouquet failed"
+								print("add", service.toString(), "to new bouquet failed")
 					mutableBouquet.flushChanges()
 				else:
-					print "get mutable list for new created bouquet failed"
+					print("get mutable list for new created bouquet failed")
 				# do some voodoo to check if current_root is equal to bouquet_root
 				cur_root = self.getRoot()
 				str1 = cur_root and cur_root.getPath()
@@ -1206,9 +1213,9 @@
 					self.servicelist.addService(new_bouquet_ref)
 					self.servicelist.resetRoot()
 			else:
-				print "add", new_bouquet_ref.toString(), "to bouquets failed"
+				print("add", new_bouquet_ref.toString(), "to bouquets failed")
 		else:
-			print "bouquetlist is not editable"
+			print("bouquetlist is not editable")
 
 	def copyCurrentToBouquetList(self):
 		provider = ServiceReference(self.getCurrentSelection())
@@ -1234,11 +1241,11 @@
 					if self.startServiceRef and cur_service.ref == self.startServiceRef:
 						self.startServiceRef = first_in_alternative
 				else:
-					print "couldn't add first alternative service to current root"
+					print("couldn't add first alternative service to current root")
 			else:
-				print "couldn't edit current root!!"
+				print("couldn't edit current root!!")
 		else:
-			print "remove empty alternative list !!"
+			print("remove empty alternative list !!")
 		self.removeBouquet()
 		if not end:
 			self.servicelist.moveUp()
@@ -1269,7 +1276,7 @@
 				direction = _("W")
 			else:
 				direction = _("E")
-			messageText = _("Are you sure to remove all %d.%d%s%s services?") % (unsigned_orbpos/10, unsigned_orbpos%10, "\xc2\xb0", direction)
+			messageText = _("Are you sure to remove all %d.%d%s%s services?") % (unsigned_orbpos/10, unsigned_orbpos%10, SIGN, direction)
 		self.session.openWithCallback(self.removeSatelliteServicesCallback, MessageBox, messageText)
 
 	def removeSatelliteServicesCallback(self, answer):
@@ -1551,6 +1558,8 @@
 				"nextMarker": self.nextMarker,
 				"prevMarker": self.prevMarker,
 				"gotAsciiCode": self.keyAsciiCode,
+				"keyUp": self.moveUp,
+				"keyDown": self.moveDown,
 				"1": self.keyNumberGlobal,
 				"2": self.keyNumberGlobal,
 				"3": self.keyNumberGlobal,
@@ -1571,6 +1580,62 @@
 			self.numericalTextInput.setUseableChars(u'abcdefghijklmnopqrstuvwxyz1234567890')
 		else:
 			self.numericalTextInput.setUseableChars(u'1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ')
+		if hasattr(self.session, "pipshown") and self.session.pipshown:
+			self.setZapToServiceinList()
+			from Screens.InfoBarGenerics import InfoBarPiP
+			if InfoBarPiP.pipWindowActive:
+				currboPiP = self.session.pip.getCurrentBouquetPiP()
+				currboMain = self.session.pip.getCurrentBouquetMain()
+				currnavref = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+				self.startRoot = currboMain
+				self.startServiceRef = currnavref
+				temp_title = self.myBouquetName(currboPiP)
+				title = _(' (PiP)')
+				if temp_title is not None:
+					title += temp_title
+			else:
+				currboMain = self.session.pip.getCurrentBouquetMain()
+				currnavref = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+				self.startRoot = currboMain
+				self.startServiceRef = currnavref
+				temp_title = self.myBouquetName(currboMain)
+				if self.mode == MODE_TV:
+					title = _(' (TV)')
+					if temp_title is not None:
+						title += temp_title
+				else:
+					title = _(' (Radio)')
+					if temp_title is not None:
+						title += temp_title			
+		else:
+			currboMain = self.getRoot()
+			currnavref = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+			self.startRoot = currboMain
+			self.startServiceRef = currnavref
+			temp_title = self.myBouquetName(currboMain)
+			if self.mode == MODE_TV:
+				title = _(' (TV)')
+				if temp_title is not None:
+					title += temp_title
+			else:
+				title = _(' (Radio)')
+				if temp_title is not None:
+					title += temp_title
+		self.setTitle(title)
+		
+	def myBouquetName(self, bouquet=None):
+		try:
+			if bouquet is None:
+				return None
+			if not bouquet.valid():
+				return None
+			if bouquet.flags & eServiceReference.isDirectory and not bouquet.flags & eServiceReference.isInvisible:
+				serviceHandler = eServiceCenter.getInstance()
+				info = serviceHandler.info(bouquet)
+				if info:
+					return info.getName(bouquet)
+		except:
+			return None
 
 	def getBouquetNumOffset(self, bouquet):
 		if not config.usage.multibouquet.value:
@@ -1643,6 +1708,12 @@
 		self.rootChanged = True
 		self.buildTitleString()
 
+	def setMyRoot(self, root=None):
+		if root is not None:
+			self.servicelist.setRoot(self.getBouquetModeRoot(), justSet=False)
+			self.servicelist.setRoot(root, justSet=False)
+			self.buildTitleString()
+
 	def removeModeStr(self, str):
 		if self.mode == MODE_TV:
 			pos = str.find(_(' (TV)'))
@@ -2004,8 +2075,8 @@
 		self.selectionNumber = ""
 
 	def keyAsciiCode(self):
-		unichar = unichr(getPrevAsciiCode())
-		charstr = unichar.encode('utf-8')
+		unichar = six.unichr(getPrevAsciiCode())
+		charstr = six.ensure_str(unichar)
 		if len(charstr) == 1:
 			self.servicelist.moveToChar(charstr[0])
 
@@ -2114,9 +2185,9 @@
 		ChannelSelectionEPG.__init__(self)
 		SelectionEventInfo.__init__(self)
 		if config.usage.use_pig.value:
-			self.skinName = ["ChannelSelection_PIG","ChannelSelection"]
+			self.skinName = ["ChannelSelection_PIG", "ChannelSelection"]
 		elif config.usage.servicelist_mode.value == 'simple':
-			self.skinName = ["SlimChannelSelection","SimpleChannelSelection","ChannelSelection"]
+			self.skinName = ["SlimChannelSelection", "SimpleChannelSelection", "ChannelSelection"]
 		else:
 			self.skinName = "ChannelSelection"
 
@@ -2137,7 +2208,11 @@
 				iPlayableService.evEnd: self.__evServiceEnd
 			})
 
-		assert ChannelSelection.instance is None, "class InfoBar is a singleton class and just one instance of this class is allowed!"
+		try:
+			if ChannelSelection.instance:
+				raise AssertionError("class InfoBar is a singleton class and just one instance of this class is allowed!")
+		except:
+			pass
 		ChannelSelection.instance = self
 		self.startServiceRef = None
 		self.history_tv = []
@@ -2269,8 +2344,18 @@
 				self.zap(enable_pipzap=doClose, preview_zap=not doClose)
 				self.asciiOff()
 				if doClose:
-					if self.dopipzap:
-						self.zapBack()
+					if hasattr(self.session, "pipshown") and self.session.pipshown:
+						currentBouquet = self.getRoot()
+						from Screens.InfoBarGenerics import InfoBarPiP
+						if InfoBarPiP.pipWindowActive:
+							if hasattr(self.session, "pip"):
+								self.session.pip.setCurrentBouquetPiP(currentBouquet)
+							self.zapBack()
+							self.setZapToServiceinList()
+						else:
+							if hasattr(self.session, "pip"):
+								self.session.pip.setCurrentBouquetMain(currentBouquet)
+								self.setZapToServiceinList()
 					self.startServiceRef = None
 					self.startRoot = None
 					self.correctChannelNumber()
@@ -2352,7 +2437,8 @@
 			if ref is None or ref != nref:
 				nref = self.session.pip.resolveAlternatePipService(nref)
 				if nref and (not checkParentalControl or Components.ParentalControl.parentalControl.isServicePlayable(nref, boundFunction(self.zap, enable_pipzap=True, checkParentalControl=False))):
-					self.session.pip.playService(nref)
+					currentBouquet = self.getRoot()
+					self.session.pip.playService(nref,currentBouquet)
 					self.__evServiceStart()
 					if config.usage.pip_mode.value != "byside":
 						self.showPipzapMessage()
@@ -2388,7 +2474,7 @@
 					self.mainScreenRoot = self.getRoot()
 				self.revertMode = None
 			else:
-				Notifications.RemovePopup("Parental control")
+				Tools.Notifications.RemovePopup("Parental control")
 				self.setCurrentSelection(nref)
 		else:
 			self.setStartRoot(self.curRoot)
@@ -2396,6 +2482,11 @@
 		if not preview_zap:
 			self.hide()
 
+	def zapToServiceinList(self, service=None, bouquet=None):
+		if service is not None and bouquet is not None:
+			self.enterUserbouquet(bouquet, save_root=False)
+			self.setCurrentSelection(service)
+
 	def newServicePlayed(self):
 		ret = self.new_service_played
 		self.new_service_played = False
@@ -2465,7 +2556,7 @@
 
 	def historyClear(self):
 		if self and self.servicelist:
-			for i in range(0, len(self.history)-1):
+			for i in list(range(0, len(self.history)-1)):
 				del self.history[0]
 			self.history_pos = len(self.history)-1
 			return True
@@ -2599,26 +2690,35 @@
 		self.protectContextMenu = True
 		self.close(None)
 
+	def setZapToServiceinList(self):
+		if hasattr(self.session, "pipshown") and self.session.pipshown:
+			from Screens.InfoBarGenerics import InfoBarPiP
+			if InfoBarPiP.pipWindowActive:
+				currbo = self.session.pip.getCurrentBouquetPiP()
+				currservice = self.session.pip.getCurrentService()
+				self.zapToServiceinList(currservice, currbo)
+			else:
+				currbo = self.session.pip.getCurrentBouquetMain()
+				currservice = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+				self.zapToServiceinList(currservice, currbo)
 	def zapBack(self):
 		currentPlayedRef = self.session.nav.getCurrentlyPlayingServiceOrGroup()
 		if self.startServiceRef and (currentPlayedRef is None or currentPlayedRef != self.startServiceRef):
 			self.setStartRoot(self.startRoot)
 			self.new_service_played = True
 			self.session.nav.playService(self.startServiceRef)
-			self.saveChannel(self.startServiceRef)
+			if not self.dopipzap:
+				self.saveChannel(self.startServiceRef)
 		else:
 			self.restoreMode()
-		self.startServiceRef = None
-		self.startRoot = None
 		if self.dopipzap:
-			# This unfortunately won't work with subservices
-			self.setCurrentSelection(self.session.pip.getCurrentService())
+			currboPiP = self.session.pip.getCurrentBouquetPiP()
+			currpipref = self.session.pip.getCurrentService()
+			self.zapToServiceinList(currpipref, currboPiP)
 		else:
-			lastservice = eServiceReference(self.lastservice.value)
-			if lastservice.valid() and self.getCurrentSelection() == lastservice:
-				pass	# keep current selection
-			else:
-				self.setCurrentSelection(currentPlayedRef)
+			self.zapToServiceinList(self.startServiceRef, self.startRoot)
+		self.startServiceRef = None
+		self.startRoot = None
 
 	def setStartRoot(self, root):
 		if root:
@@ -2677,11 +2777,60 @@
 			self.setCurrentSelection(tmp_ref)
 		self.revertMode = None
 
+	def FavoritTV(self):
+		selpos = 0
+		mark = 0
+		favoritlist = [ ]
+		services = []
+		if self.mode == MODE_TV:
+			try:
+				serviceHandler = eServiceCenter.getInstance()
+				bouquet_rootstr = '%s FROM BOUQUET "userbouquet.favourites.tv" ORDER BY bouquet'% service_types_tv
+				bouquet_root = eServiceReference(bouquet_rootstr)
+				servicelist = eServiceCenter.getInstance().list(bouquet_root)
+				if not servicelist is None:
+					while True:
+						service = servicelist.getNext()
+						if not service.valid():
+							break
+						if service.flags & (eServiceReference.isDirectory | eServiceReference.isMarker):
+							continue
+						service_name = serviceHandler.info(service).getName(service)	
+						favoritlist.append((service_name, service))
+					flen = len(favoritlist)
+					if flen < 1: return
+			except Exception:
+				return
+			self.session.openWithCallback(self.favoritMenuClosed, FavoritTVSelector, favoritlist, selpos, mark, invert_items=False, redirect_buttons=True, wrap_around=True)
+
+	def favoritMenuClosed(self, retval):
+		if not retval:
+			return
+		else:
+			self.session.nav.playService(retval)
+			self.servicelist.setCurrent(retval, adjust=False)
+			self.saveChannel(retval)
+			if self.servicePath is not None:
+				tmp = self.servicePath[:]
+				tmp.append(retval)
+				self.history.append(tmp)
+				hlen = len(self.history)
+				x = 0
+				while x < hlen - 1:
+					if self.history[x][-1] == retval:
+						del self.history[x]
+						hlen -= 1
+					else:
+						x += 1
+				if hlen > HISTORYSIZE:
+					del self.history[0]
+					hlen -= 1
+				self.history_pos = hlen - 1
 
 class PiPZapSelection(ChannelSelection):
 	def __init__(self, session):
 		ChannelSelection.__init__(self, session)
-		self.skinName = ["SlimChannelSelection","SimpleChannelSelection","ChannelSelection"]
+		self.skinName = ["SlimChannelSelection", "SimpleChannelSelection", "ChannelSelection"]
 
 		self.startservice = None
 		self.pipzapfailed = None
@@ -2737,7 +2886,7 @@
 					self.saveChannel(ref)
 					self.setCurrentSelection(ref)
 					if SystemInfo["LCDMiniTVPiP"] and int(config.lcd.modepip.value) >= 1:
-						print '[LCDMiniTV] enable PIP'
+						print('[LCDMiniTV] enable PIP')
 						f = open("/proc/stb/lcd/mode", "w")
 						f.write(config.lcd.modepip.value)
 						f.close()
@@ -2756,7 +2905,7 @@
 					self.session.pipshown = False
 					del self.session.pip
 					if SystemInfo["LCDMiniTVPiP"] and int(config.lcd.modepip.value) >= 1:
-							print '[LCDMiniTV] disable PIP'
+							print('[LCDMiniTV] disable PIP')
 							f = open("/proc/stb/lcd/mode", "w")
 							f.write(config.lcd.modeminitv.value)
 							f.close()
@@ -2769,11 +2918,12 @@
 			self.session.pipshown = False
 			del self.session.pip
 			if SystemInfo["LCDMiniTVPiP"] and int(config.lcd.modepip.value) >= 1:
-					print '[LCDMiniTV] disable PIP'
+					print('[LCDMiniTV] disable PIP')
 					f = open("/proc/stb/lcd/mode", "w")
 					f.write(config.lcd.modeminitv.value)
 					f.close()
 		self.correctChannelNumber()
+		self.setZapToServiceinList()
 		self.close(None)
 
 
@@ -2820,7 +2970,7 @@
 		self["RdsActions"] = HelpableActionMap(self, "InfobarRdsActions",
 		{
 			"startRassInteractive": (self.startRassInteractive, _("View Rass interactive..."))
-		},-1)
+		}, -1)
 		self["RdsActions"].setEnabled(False)
 		infobar.rds_display.onRassInteractivePossibilityChanged.append(self.RassInteractivePossibilityChanged)
 		self.onClose.append(self.__onClose)
@@ -3041,13 +3191,147 @@
 							prefix = "+"
 						local_begin = localtime(begin)
 						local_end = localtime(end)
-						#durationTime = _("%02d.%02d - %02d.%02d (%s%d min)##") % (local_begin[3],local_begin[4],local_end[3],local_end[4],prefix, remaining)
-						durationTime = _("%s - %s (%s%d min)") % (strftime(config.usage.time.short.value, local_begin), strftime(config.usage.time.short.value, local_end), prefix, remaining)
+						remaining_string = self.hour_min(remaining)
+						durationTime = _("%02d.%02d - %02d.%02d (%s%s)") % (local_begin[3],local_begin[4],local_end[3],local_end[4],prefix,remaining_string)
+
+			png = ""
+			picon = getPiconName(str(ServiceReference(x[1])))
+			if picon != "":
+				png = loadPNG(picon)
+			else:
+				tmp = resolveFilename(SCOPE_ACTIVE_SKIN, "picon_default.png")
+				if pathExists(tmp):
+					pngname = tmp
+				else:
+					pngname = resolveFilename(SCOPE_SKIN_IMAGE, "skin_default/picon_default.png")
+				if pngname != "":
+					try:
+						png = loadPNG(pngname)
+					except Exception:
+						pass
+			if self.invertItems:
+				self.list.insert(0, (x[1], cnt == mark_item and "»" or "", x[0], eventName, descriptionName, durationTime, png))
+			else:
+				self.list.append((x[1], cnt == mark_item and "»" or "", x[0], eventName, descriptionName, durationTime, png))
+			cnt += 1
+		self["menu"] = List(self.list, enableWrapAround=wrap_around)
+		self.onShown.append(self.__onShown)
+
+	def __onShown(self):
+		self["menu"].index = self.currentPos
+
+	def prev(self):
+		if self.redirectButton:
+			self.down()
+		else:
+			self.up()
+
+	def next(self):
+		if self.redirectButton:
+			self.up()
+		else:
+			self.down()
+
+	def up(self):
+		self["menu"].selectPrevious()
+
+	def down(self):
+		self["menu"].selectNext()
+
+	def getCurrent(self):
+		cur = self["menu"].current
+		return cur and cur[0]
+
+	def okbuttonClick(self):
+		self.close(self.getCurrent())
+
+	def cancelClick(self):
+		self.close(None)
+
+	def hour_min(self, mins):
+		if not isinstance(mins, int):
+			return _("%d min") % (0)
+		if mins <= 0:
+			return _("%d min") % (0)
+		vhour, vmins = mins // 60, mins % 60
+		if vhour and vmins:
+			return _("%d hour %d min") % (vhour,vmins)
+		elif vhour and not vmins:
+			return _("%d hour") % (vhour)
+		else:
+			return _("%d min") % (vmins)
+			
+class FavoritTVSelector(Screen):
+	def __init__(self, session, items=None, sel_item=0, mark_item=0, invert_items=False, redirect_buttons=False, wrap_around=True):
+		if not items: items = []
+		Screen.__init__(self, session)
+		self.redirectButton = redirect_buttons
+		self.invertItems = invert_items
+		if self.invertItems:
+			self.currentPos = len(items) - sel_item - 1
+		else:
+			self.currentPos = sel_item
+		self["actions"] = ActionMap(["OkCancelActions", "InfobarCueSheetActions"],
+			{
+				"ok": self.okbuttonClick,
+				"cancel": self.cancelClick,
+				"jumpPreviousMark": self.prev,
+				"jumpNextMark": self.next,
+				"toggleMark": self.okbuttonClick,
+			})
+		self.setTitle(_("Favorit TV..."))
+		self.list = []
+		cnt = 0
+		serviceHandler = eServiceCenter.getInstance()
+		for x in items:
+
+			info = serviceHandler.info(x[-1])
+			if info:
+				serviceName = info.getName(x[-1])
+				if serviceName is None:
+					serviceName = ""
+				eventName = ""
+				descriptionName = ""
+				durationTime = ""
+				event = info.getEvent(x[-1])
+				if event:
+					eventName = event.getEventName()
+					if eventName is None:
+						eventName = ""
+					else:
+						eventName = eventName.replace('(18+)', '').replace('18+', '').replace('(16+)', '').replace('16+', '').replace('(12+)', '').replace('12+', '').replace('(7+)', '').replace('7+', '').replace('(6+)', '').replace('6+', '').replace('(0+)', '').replace('0+', '')	
+					descriptionName = event.getShortDescription()
+					if descriptionName is None or descriptionName == "":
+						descriptionName = event.getExtendedDescription()
+						if descriptionName is None:
+							descriptionName = ""
+					begin = event.getBeginTime()
+					if begin is not None:
+						end = begin + event.getDuration()
+						remaining = (end - int(time())) / 60
+						prefix = ""
+						if remaining > 0:
+							prefix = "+"
+						local_begin = localtime(begin)
+						local_end = localtime(end)
+						remaining_string = self.hour_min(remaining)
+						durationTime = _("%02d.%02d - %02d.%02d (%s%s)") % (local_begin[3],local_begin[4],local_end[3],local_end[4],prefix,remaining_string)
 
 			png = ""
 			picon = getPiconName(str(ServiceReference(x[1])))
 			if picon != "":
 				png = loadPNG(picon)
+			else:
+				tmp = resolveFilename(SCOPE_ACTIVE_SKIN, "picon_default.png")
+				if pathExists(tmp):
+					pngname = tmp
+				else:
+					pngname = resolveFilename(SCOPE_SKIN_IMAGE, "skin_default/picon_default.png")
+				if pngname != "":
+					try:
+						png = loadPNG(pngname)
+					except Exception:
+						pass
 			if self.invertItems:
 				self.list.insert(0, (x[1], cnt == mark_item and "»" or "", x[0], eventName, descriptionName, durationTime, png))
 			else:
@@ -3086,3 +3370,16 @@
 
 	def cancelClick(self):
 		self.close(None)
+
+	def hour_min(self, mins):
+		if not isinstance(mins, int):
+			return _("%d min") % (0)
+		if mins <= 0:
+			return _("%d min") % (0)
+		vhour, vmins = mins // 60, mins % 60
+		if vhour and vmins:
+			return _("%d hour %d min") % (vhour,vmins)
+		elif vhour and not vmins:
+			return _("%d hour") % (vhour)
+		else:
+			return _("%d min") % (vmins)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ChoiceBox.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ChoiceBox.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ChoiceBox.py	2020-06-21 10:16:12.707439244 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ChoiceBox.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function, division
 from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
 from Components.ActionMap import ActionMap, NumberActionMap
@@ -7,6 +8,7 @@
 from Components.Sources.StaticText import StaticText
 from Components.Pixmap import Pixmap
 import enigma
+from six.moves import zip
 
 config.misc.pluginlist = ConfigSubsection()
 config.misc.pluginlist.eventinfo_order = ConfigText(default="")
@@ -60,7 +62,7 @@
 							labeltext += '\n'
 						labeltext = labeltext + temptext[count-1]
 						count += 1
-						print '[Choicebox] count', count
+						print('[Choicebox] count', count)
 					self["text"].setText(labeltext)
 				else:
 					self["text"] = Label(title)
@@ -204,11 +206,11 @@
 		self.instance.resize(enigma.eSize(*wsize))
 
 		# center window
-		self.instance.move(enigma.ePoint((desktop_w-wsizex)/2, (desktop_h-wsizey)/2))
+		self.instance.move(enigma.ePoint((desktop_w-wsizex)//2, (desktop_h-wsizey)//2))
 
 	def left(self):
 		if len(self["list"].list) > 0:
-			while 1:
+			while True:
 				self["list"].instance.moveSelection(self["list"].instance.pageUp)
 				self.updateSummary(self["list"].l.getCurrentSelectionIndex())
 				if self["list"].l.getCurrentSelection()[0][0] != "--" or self["list"].l.getCurrentSelectionIndex() == 0:
@@ -216,7 +218,7 @@
 
 	def right(self):
 		if len(self["list"].list) > 0:
-			while 1:
+			while True:
 				self["list"].instance.moveSelection(self["list"].instance.pageDown)
 				self.updateSummary(self["list"].l.getCurrentSelectionIndex())
 				if self["list"].l.getCurrentSelection()[0][0] != "--" or self["list"].l.getCurrentSelectionIndex() == 0:
@@ -224,7 +226,7 @@
 
 	def up(self):
 		if len(self["list"].list) > 0:
-			while 1:
+			while True:
 				self["list"].instance.moveSelection(self["list"].instance.moveUp)
 				self.updateSummary(self["list"].l.getCurrentSelectionIndex())
 				if self["list"].l.getCurrentSelection()[0][0] != "--" or self["list"].l.getCurrentSelectionIndex() == 0:
@@ -232,7 +234,7 @@
 
 	def down(self):
 		if len(self["list"].list) > 0:
-			while 1:
+			while True:
 				self["list"].instance.moveSelection(self["list"].instance.moveDown)
 				self.updateSummary(self["list"].l.getCurrentSelectionIndex())
 				if self["list"].l.getCurrentSelection()[0][0] != "--" or self["list"].l.getCurrentSelectionIndex() == len(self["list"].list) - 1:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Ci.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Ci.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Ci.py	2020-06-21 10:16:12.707439244 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Ci.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,4 +1,6 @@
-from Screen import Screen
+from __future__ import print_function
+from __future__ import absolute_import
+from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
 from Components.ConfigList import ConfigListScreen
 from Components.ActionMap import ActionMap
@@ -45,7 +47,7 @@
 def InitCiConfig():
 	config.ci = ConfigSubList()
 	config.cimisc = ConfigSubsection()
-	for slot in range(MAX_NUM_CI):
+	for slot in list(range(MAX_NUM_CI)):
 		config.ci.append(ConfigSubsection())
 		config.ci[slot].canDescrambleMultipleServices = ConfigSelection(choices = [("auto", _("Auto")), ("no", _("No")), ("yes", _("Yes"))], default = "auto")
 		config.ci[slot].use_static_pin = ConfigYesNo(default = True)
@@ -170,7 +172,7 @@
 	def __init__(self, session, slotid, action, handler = eDVBCI_UI.getInstance(), wait_text = "wait for ci...", screen_data = None ):
 		Screen.__init__(self, session)
 
-		print "MMIDialog with action" + str(action)
+		print("MMIDialog with action" + str(action))
 
 		self.mmiclosed = False
 		self.tag = None
@@ -238,9 +240,9 @@
 		if not self.tag:
 			return
 		if self.tag == "WAIT":
-			print "do nothing - wait"
+			print("do nothing - wait")
 		elif self.tag == "MENU":
-			print "answer MENU"
+			print("answer MENU")
 			cur = self["entries"].getCurrent()
 			if cur:
 				self.handler.answerMenu(self.slotid, cur[2])
@@ -248,7 +250,7 @@
 				self.handler.answerMenu(self.slotid, 0)
 			self.showWait()
 		elif self.tag == "LIST":
-			print "answer LIST"
+			print("answer LIST")
 			self.handler.answerMenu(self.slotid, 0)
 			self.showWait()
 		elif self.tag == "ENQ":
@@ -283,15 +285,15 @@
 			self.handler.stopMMI(self.slotid)
 			self.closeMmi()
 		elif self.tag in ( "MENU", "LIST" ):
-			print "cancel list"
+			print("cancel list")
 			self.handler.answerMenu(self.slotid, 0)
 			self.showWait()
 		elif self.tag == "ENQ":
-			print "cancel enq"
+			print("cancel enq")
 			self.handler.cancelEnq(self.slotid)
 			self.showWait()
 		else:
-			print "give cancel action to ci"
+			print("give cancel action to ci")
 
 	def keyConfigEntry(self, key):
 		self.timer.stop()
@@ -495,7 +497,7 @@
 				"right": self.keyLeft,
 				"ok": self.okbuttonClick,
 				"cancel": self.cancel
-			},-1)
+			}, -1)
 
 		self.dlg = None
 		self.state = { }
@@ -512,7 +514,7 @@
 		self.onLayoutFinish.append(self.initialUpdate)
 
 	def initialUpdate(self):
-		for slot in range(MAX_NUM_CI):
+		for slot in list(range(MAX_NUM_CI)):
 			state = eDVBCI_UI.getInstance().getState(slot)
 			if state != -1:
 				self.slots.append(slot)
@@ -615,11 +617,11 @@
 			elif action == 2 and self.state[slot] == 2:
 				self.dlg = self.session.openWithCallback(self.dlgClosed, MMIDialog, slot, action)
 
-	def cancelCB(self,value):
+	def cancelCB(self, value):
 		pass
 
 	def cancel(self):
-		for slot in range(MAX_NUM_CI):
+		for slot in list(range(MAX_NUM_CI)):
 			state = eDVBCI_UI.getInstance().getState(slot)
 			if state != -1:
 				CiHandler.unregisterCIMessageHandler(slot)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ClockDisplay.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ClockDisplay.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ClockDisplay.py	2020-06-21 10:16:12.707439244 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ClockDisplay.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,4 +1,5 @@
-from Screen import Screen
+from __future__ import absolute_import
+from Screens.Screen import Screen
 
 # a clock display dialog
 class ClockDisplay(Screen):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ConfigMenu.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ConfigMenu.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ConfigMenu.py	2020-06-21 10:16:12.707439244 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ConfigMenu.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,4 +1,5 @@
-from Screen import Screen
+from __future__ import absolute_import
+from Screens.Screen import Screen
 from Components.ConfigList import ConfigList
 from Components.ActionMap import ActionMap
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Console.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Console.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Console.py	2020-06-21 10:16:12.707439244 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Console.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from enigma import eConsoleAppContainer
 from Screens.Screen import Screen
 from Components.ActionMap import ActionMap
@@ -5,6 +6,7 @@
 from Components.Sources.StaticText import StaticText
 from Screens.MessageBox import MessageBox
 from Components.Label import Label
+import six
 
 class Console(Screen):
 
@@ -62,7 +64,7 @@
 	def startRun(self):
 		self["text"].setText(_("Execution progress:") + "\n\n")
 		self["summary_description"].setText(_("Execution progress:"))
-		print "[Console] executing in run", self.run, " the command:", self.cmdlist[self.run]
+		print("[Console] executing in run", self.run, " the command:", self.cmdlist[self.run])
 		if self.doExec(self.cmdlist[self.run]): #start of container application failed...
 			self.runFinished(-1) # so we must call runFinished manual
 
@@ -133,7 +135,7 @@
 	def saveOutputText(self):
 		from time import time, localtime
 		lt = localtime(time())
-		self.output_file = '/tmp/%02d%02d%02d_console.txt' %(lt[3],lt[4],lt[5])
+		self.output_file = '/tmp/%02d%02d%02d_console.txt' %(lt[3], lt[4], lt[5])
 		self.session.openWithCallback(self.saveOutputTextCB, MessageBox, _("Save the commands and the output to a file?\n('%s')") %self.output_file, type=MessageBox.TYPE_YESNO, default=True)
 
 	def formatCmdList(self, source):
@@ -211,4 +213,5 @@
 				self.container.kill()
 
 	def dataAvail(self, str):
+		str = six.ensure_str(str)
 		self["text"].appendText(str)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/CronTimer.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/CronTimer.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/CronTimer.py	2020-06-21 10:16:12.707439244 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/CronTimer.py	2020-06-21 10:20:02.351324854 -0400
@@ -12,13 +12,14 @@
 from Tools.Directories import fileExists
 from os import system, listdir, rename, path, mkdir
 from time import sleep
+import six
 from boxbranding import getMachineBrand, getMachineName
 
 class CronTimers(Screen):
 	def __init__(self, session):
 		Screen.__init__(self, session)
 		if not path.exists('/usr/script'):
-			mkdir('/usr/script', 0755)
+			mkdir('/usr/script', 0o755)
 		Screen.setTitle(self, _("Cron Manager"))
 		self.onChangedEntry = [ ]
 		self['lab1'] = Label(_("Autostart:"))
@@ -52,8 +53,9 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.checkNetworkState)
 
 	def checkNetworkState(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if not str:
-			self.feedscheck = self.session.open(MessageBox,_('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
+			self.feedscheck = self.session.open(MessageBox, _('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
 			self.feedscheck.setTitle(_('Checking Feeds'))
 			cmd1 = "opkg update"
 			self.CheckConsole = Console()
@@ -61,7 +63,8 @@
 		else:
 			self.updateList()
 
-	def checkNetworkStateFinished(self, result, retval,extra_args=None):
+	def checkNetworkStateFinished(self, result, retval, extra_args=None):
+		result = six.ensure_str(result)
 		if 'bad address' in result:
 			self.session.openWithCallback(self.InstallPackageFailed, MessageBox, _("Your %s %s is not connected to the internet, please check your network settings and try again.") % (getMachineBrand(), getMachineName()), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif ('wget returned 1' or 'wget returned 255' or '404 Not Found') in result:
@@ -81,7 +84,7 @@
 		self.close()
 
 	def doInstall(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Installing Service'))
 		self.Console.ePopen('/usr/bin/opkg install ' + pkgname, callback)
 
@@ -97,6 +100,7 @@
 			self.close()
 
 	def RemovedataAvail(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if str:
 			self.session.openWithCallback(self.RemovePackage, MessageBox, _('Ready to remove "%s" ?') % self.service_name)
 		else:
@@ -109,7 +113,7 @@
 			self.close()
 
 	def doRemove(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Removing Service'))
 		self.Console.ePopen('/usr/bin/opkg remove ' + pkgname + ' --force-remove --autoremove', callback)
 
@@ -192,20 +196,20 @@
 				if len(parts)>5 and not parts[0].startswith("#"):
 					if parts[1] == '*':
 						line2 = 'H: 00:' + parts[0].zfill(2) + '\t'
-						for i in range(5, len(parts)):
+						for i in list(range(5, len(parts))):
 							line2 = line2 + parts[i] + ' '
 						res = (line2, line)
 						self.list.append(res)
 					elif parts[2] == '*' and parts[4] == '*':
 						line2 = 'D: ' + parts[1].zfill(2) + ':' + parts[0].zfill(2) + '\t'
-						for i in range(5, len(parts)):
+						for i in list(range(5, len(parts))):
 							line2 = line2 + parts[i] + ' '
 						res = (line2, line)
 						self.list.append(res)
 					elif parts[3] == '*':
 						if parts[4] == "*":
 							line2 = 'M:  Day ' + parts[2] + '  ' + parts[1].zfill(2) + ':' + parts[0].zfill(2) + '\t'
-							for i in range(5, len(parts)):
+							for i in list(range(5, len(parts))):
 								line2 = line2 + parts[i] + ' '
 						header = 'W:  '
 						day = ""
@@ -226,7 +230,7 @@
 
 						if day:
 							line2 = header + day + parts[1].zfill(2) + ':' + parts[0].zfill(2) + '\t'
-							for i in range(5, len(parts)):
+							for i in list(range(5, len(parts))):
 								line2 = line2 + parts[i] + ' '
 						res = (line2, line)
 						self.list.append(res)
@@ -248,8 +252,8 @@
 			mysel = self['list'].getCurrent()
 			if mysel:
 				myline = mysel[1]
-				file('/etc/cron/crontabs/root.tmp', 'w').writelines([l for l in file('/etc/cron/crontabs/root').readlines() if myline not in l])
-				rename('/etc/cron/crontabs/root.tmp','/etc/cron/crontabs/root')
+				open('/etc/cron/crontabs/root.tmp', 'w').writelines([l for l in open('/etc/cron/crontabs/root').readlines() if myline not in l])
+				rename('/etc/cron/crontabs/root.tmp', '/etc/cron/crontabs/root')
 				rc = system('crontab /etc/cron/crontabs/root -c /etc/cron/crontabs')
 				self.updateList()
 
@@ -260,12 +264,12 @@
 			self.session.open(MessageBox, _(myline), MessageBox.TYPE_INFO)
 
 config.crontimers = ConfigSubsection()
-config.crontimers.commandtype = NoSave(ConfigSelection(choices = [ ('custom',_("Custom")),('predefined',_("Predefined")) ]))
+config.crontimers.commandtype = NoSave(ConfigSelection(choices = [ ('custom', _("Custom")), ('predefined', _("Predefined")) ]))
 config.crontimers.cmdtime = NoSave(ConfigClock(default=0))
 config.crontimers.cmdtime.value, mytmpt = ([0, 0], [0, 0])
 config.crontimers.user_command = NoSave(ConfigText(fixed_size=False))
-config.crontimers.runwhen = NoSave(ConfigSelection(default='Daily', choices = [('Hourly', _("Hourly")),('Daily', _("Daily")),('Weekly', _("Weekly")),('Monthly', _("Monthly"))]))
-config.crontimers.dayofweek = NoSave(ConfigSelection(default='Monday', choices = [('Monday', _("Monday")),('Tuesday', _("Tuesday")),('Wednesday', _("Wednesday")),('Thursday', _("Thursday")),('Friday', _("Friday")),('Saturday', _("Saturday")),('Sunday', _("Sunday"))]))
+config.crontimers.runwhen = NoSave(ConfigSelection(default='Daily', choices = [('Hourly', _("Hourly")), ('Daily', _("Daily")), ('Weekly', _("Weekly")), ('Monthly', _("Monthly"))]))
+config.crontimers.dayofweek = NoSave(ConfigSelection(default='Monday', choices = [('Monday', _("Monday")), ('Tuesday', _("Tuesday")), ('Wednesday', _("Wednesday")), ('Thursday', _("Thursday")), ('Friday', _("Friday")), ('Saturday', _("Saturday")), ('Sunday', _("Sunday"))]))
 config.crontimers.dayofmonth = NoSave(ConfigInteger(default=1, limits=(1, 31)))
 
 class CronTimersConfig(Screen, ConfigListScreen):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/DVD.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/DVD.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/DVD.py	2020-06-21 10:16:12.707439244 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/DVD.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import os
 from enigma import eTimer, iPlayableService, iServiceInformation, eServiceReference, iServiceKeys, getDesktop
 from Screens.Screen import Screen
@@ -351,34 +352,34 @@
 	def toggleInfo(self):
 		if not self.in_menu:
 			self.toggleShow()
-			print "[DVD] toggleInfo"
+			print("[DVD] toggleInfo")
 
 	def __timeUpdated(self):
-		print "[DVD] timeUpdated"
+		print("[DVD] timeUpdated")
 
 	def __statePlay(self):
-		print "[DVD] statePlay"
+		print("[DVD] statePlay")
 
 	def __statePause(self):
-		print "[DVD] statePause"
+		print("[DVD] statePause")
 
 	def __osdFFwdInfoAvail(self):
 		self.setChapterLabel()
-		print "[DVD] FFwdInfoAvail"
+		print("[DVD] FFwdInfoAvail")
 
 	def __osdFBwdInfoAvail(self):
 		self.setChapterLabel()
-		print "[DVD] FBwdInfoAvail"
+		print("[DVD] FBwdInfoAvail")
 
 	def __osdStringAvail(self):
-		print "[DVD] StringAvail"
+		print("[DVD] StringAvail")
 
 	def __osdAudioInfoAvail(self):
 		info = self.getServiceInterface("info")
 		audioTuple = info and info.getInfoObject(iServiceInformation.sUser+6)
-		print "[DVD] AudioInfoAvail ", repr(audioTuple)
+		print("[DVD] AudioInfoAvail ", repr(audioTuple))
 		if audioTuple:
-			audioString = "%s (%s)" % (audioTuple[1],audioTuple[2])
+			audioString = "%s (%s)" % (audioTuple[1], audioTuple[2])
 			self["audioLabel"].setText(audioString)
 			if audioTuple != self.last_audioTuple and not self.in_menu:
 				self.doShow()
@@ -387,10 +388,10 @@
 	def __osdSubtitleInfoAvail(self):
 		info = self.getServiceInterface("info")
 		subtitleTuple = info and info.getInfoObject(iServiceInformation.sUser+7)
-		print "[DVD] SubtitleInfoAvail ", repr(subtitleTuple)
+		print("[DVD] SubtitleInfoAvail ", repr(subtitleTuple))
 		if subtitleTuple:
 			subtitleString = ""
-			if subtitleTuple[0] is not 0:
+			if subtitleTuple[0] != 0:
 				subtitleString = "%s" % subtitleTuple[1]
 			self["subtitleLabel"].setText(subtitleString)
 			if subtitleTuple != self.last_subtitleTuple and not self.in_menu:
@@ -400,11 +401,11 @@
 	def __osdAngleInfoAvail(self):
 		info = self.getServiceInterface("info")
 		angleTuple = info and info.getInfoObject(iServiceInformation.sUser+8)
-		print "[DVD] AngleInfoAvail ", repr(angleTuple)
+		print("[DVD] AngleInfoAvail ", repr(angleTuple))
 		if angleTuple:
 			angleString = ""
 			if angleTuple[1] > 1:
-				angleString = "%d / %d" % (angleTuple[0],angleTuple[1])
+				angleString = "%d / %d" % (angleTuple[0], angleTuple[1])
 				self["anglePix"].show()
 			else:
 				self["anglePix"].hide()
@@ -419,7 +420,7 @@
 			self.currentChapter = info.getInfo(iServiceInformation.sCurrentChapter)
 			self.totalChapters = info.getInfo(iServiceInformation.sTotalChapters)
 			self.setChapterLabel()
-			print "[DVD] __chapterUpdated: %d/%d" % (self.currentChapter, self.totalChapters)
+			print("[DVD] __chapterUpdated: %d/%d" % (self.currentChapter, self.totalChapters))
 
 	def __titleUpdated(self):
 		info = self.getServiceInterface("info")
@@ -427,7 +428,7 @@
 			self.currentTitle = info.getInfo(iServiceInformation.sCurrentTitle)
 			self.totalTitles = info.getInfo(iServiceInformation.sTotalTitles)
 			self.setChapterLabel()
-			print "[DVD] __titleUpdated: %d/%d" % (self.currentTitle, self.totalTitles)
+			print("[DVD] __titleUpdated: %d/%d" % (self.currentTitle, self.totalTitles))
 			if not self.in_menu:
 				self.doShow()
 
@@ -439,7 +440,7 @@
 		if self.physicalDVD:
 			cur = self.session.nav.getCurrentlyPlayingServiceOrGroup()
 			if cur and not cur.toString().endswith(harddiskmanager.getAutofsMountpoint(harddiskmanager.getCD())):
-				choices.insert(0,(_("Play DVD"), "playPhysical"))
+				choices.insert(0, (_("Play DVD"), "playPhysical"))
 		self.session.openWithCallback(self.exitCB, ChoiceBox, title=_("Leave DVD player?"), list = choices)
 
 	def sendKey(self, key):
@@ -491,7 +492,7 @@
 		if self.service:
 			seekable = self.getSeek()
 			if seekable:
-				print "[DVD] seek to chapter %d" % number
+				print("[DVD] seek to chapter %d" % number)
 				seekable.seekChapter(number)
 
 #	MENU ACTIONS
@@ -510,7 +511,7 @@
 	def keyOk(self):
 		if self.sendKey(iServiceKeys.keyOk) and not self.in_menu:
 			self.okButton()
-			print "[DVD] keyOk"
+			print("[DVD] keyOk")
 			self.toggleInfo()
 
 	def keyCancel(self):
@@ -533,7 +534,7 @@
 
 	def FileBrowserClosed(self, val):
 		curref = self.session.nav.getCurrentlyPlayingServiceOrGroup()
-		print "[DVD] FileBrowserClosed", val
+		print("[DVD] FileBrowserClosed", val)
 		if val is None:
 			self.askLeavePlayer()
 		else:
@@ -541,11 +542,11 @@
 			if os.path.exists(val + isopathname):
 				val += isopathname
 			newref = eServiceReference(4369, 0, val)
-			print "[DVD] play", newref.toString()
+			print("[DVD] play", newref.toString())
 			if curref is None or curref != newref:
 				self.service = None
 				if newref.toString().endswith("/VIDEO_TS") or newref.toString().endswith("/"):
-					names = newref.toString().rsplit("/",3)
+					names = newref.toString().rsplit("/", 3)
 					if names[2].startswith("Disk ") or names[2].startswith("DVD "):
 						name = str(names[1]) + " - " + str(names[2])
 					else:
@@ -562,18 +563,18 @@
 					if status:
 						break
 				height = getDesktop(0).size().height()
-				print "[DVD] height:", height
+				print("[DVD] height:", height)
 				if isNTSC:
 					height = height * 576 / 480
-					print "[DVD] NTSC height:", height
+					print("[DVD] NTSC height:", height)
 				if isLowResolution:
 					height *= 2
-					print "[DVD] LowResolution:", height
+					print("[DVD] LowResolution:", height)
 				if self.dvdScreen is None:
 					self.dvdScreen = self.session.instantiateDialog(DVDOverlay, height=height)
 				self.session.nav.playService(newref)
 				self.service = self.session.nav.getCurrentService()
-				print "[DVD] cur_dlg", self.session.current_dialog
+				print("[DVD] cur_dlg", self.session.current_dialog)
 				subs = self.getServiceInterface("subtitle")
 				if subs and self.dvdScreen:
 					subs.enableSubtitles(self.dvdScreen.instance, None)
@@ -582,7 +583,7 @@
 		(name, offset) = checked_file
 		isofilename += name
 
-		print "[DVD] file", name
+		print("[DVD] file", name)
 
 		status = False
 		isNTSC = False
@@ -597,13 +598,13 @@
 			if video_attr_high != 0:
 				status = True
 			video_attr_low = ord(ifofile.read(1))
-			print "[DVD] %s: video_attr_high = %x" % ( name, video_attr_high ), "video_attr_low = %x" % ( video_attr_low )
+			print("[DVD] %s: video_attr_high = %x" % ( name, video_attr_high ), "video_attr_low = %x" % ( video_attr_low ))
 			isNTSC = (video_attr_high & 0x10 == 0)
 			isLowResolution = (video_attr_low & 0x18 == 0x18)
 		except:
 #			If the service is an .iso or .img file we assume it is PAL
 #			Sorry we cannot open image files here.
-			print "[DVD] Cannot read file or is ISO/IMG"
+			print("[DVD] Cannot read file or is ISO/IMG")
 		finally:
 			if ifofile is not None:
 				ifofile.close()
@@ -632,7 +633,7 @@
 			pass
 
 	def playLastCB(self, answer): # overwrite infobar cuesheet function
-		print "[DVD] playLastCB", answer, self.resume_point
+		print("[DVD] playLastCB", answer, self.resume_point)
 		if self.service:
 			if answer == True:
 				self.resumeDvd()
@@ -658,7 +659,7 @@
 		return 0
 
 	def hotplugCB(self, dev, media_state):
-		print "[DVD] hotplugCB", dev, media_state
+		print("[DVD] hotplugCB", dev, media_state)
 		if dev == harddiskmanager.getCD():
 			if media_state == "1":
 				self.scanHotplug()
@@ -675,7 +676,7 @@
 				(desc, scanner, files, session) = list[0]
 				for file in files:
 					if file.mimetype == "video/x-dvd":
-						print "[DVD] physical dvd found:", devicepath
+						print("[DVD] physical dvd found:", devicepath)
 						self.physicalDVD = True
 						return
 		self.physicalDVD = False
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/DefaultWizard.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/DefaultWizard.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/DefaultWizard.py	2020-06-21 10:16:12.707439244 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/DefaultWizard.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,4 +1,6 @@
-from Wizard import wizardManager
+from __future__ import print_function
+from __future__ import absolute_import
+from Screens.Wizard import wizardManager
 from Screens.WizardLanguage import WizardLanguage
 from Tools.Directories import pathExists, resolveFilename, SCOPE_DEFAULTDIR, SCOPE_DEFAULTPARTITIONMOUNTDIR, SCOPE_DEFAULTPARTITION
 
@@ -37,7 +39,7 @@
 		configfile.save()
 
 	def statusCallback(self, status, progress):
-		print "statusCallback:", status, progress
+		print("statusCallback:", status, progress)
 		if status == DreamInfoHandler.STATUS_DONE:
 			self["text"].setText(_("The installation of the default settings is finished. You can now continue configuring your %s %s by pressing the OK button on the remote control.") % (getMachineBrand(), getMachineName()))
 			self.markDone()
@@ -48,17 +50,17 @@
 		configList = []
 		self.fillPackagesList()
 		self.packagesConfig = []
-		for x in range(len(self.packageslist)):
+		for x in list(range(len(self.packageslist))):
 			entry = ConfigYesNo()
 			self.packagesConfig.append(entry)
 			configList.append(getConfigListEntry(self.packageslist[x][0]["attributes"]["name"], entry))
 		return configList
 
 	def selectionMade(self):
-		print "selection made"
+		print("selection made")
 		#self.installPackage(int(index))
 		self.indexList = []
-		for x in range(len(self.packagesConfig)):
+		for x in list(range(len(self.packagesConfig))):
 			if self.packagesConfig[x].value:
 				self.indexList.append(x)
 
@@ -91,9 +93,9 @@
 
 def filescan_open(list, session, **kwargs):
 	from Screens.ChoiceBox import ChoiceBox
-	print "open default wizard"
+	print("open default wizard")
 	filelist = [(os_path.split(x.path)[1], x.path, session) for x in list]
-	print filelist
+	print(filelist)
 	session.openWithCallback(install, ChoiceBox, title = _("Please choose he package..."), list=filelist)
 
 def filescan(**kwargs):
@@ -109,13 +111,13 @@
 			description = _("Install settings, skins, software..."),
 			openfnc = filescan_open, )
 
-print "add dreampackage scanner plugin"
+print("add dreampackage scanner plugin")
 plugins.addPlugin(PluginDescriptor(name="Dream-Package", where = PluginDescriptor.WHERE_FILESCAN, fnc = filescan, internal = True))
-print "added"
+print("added")
 
 wizardManager.registerWizard(DefaultWizard, config.misc.defaultchosen.value, priority = 6)
 
 if config.misc.defaultchosen.value:
-	print "Installing image defaults"
+	print("Installing image defaults")
 	installer = ImageDefaultInstaller()
-	print "installing done!"
+	print("installing done!")
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Dish.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Dish.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Dish.py	2020-06-21 10:16:12.707439244 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Dish.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
 from Screens.Screen import Screen
 from Components.BlinkingPixmap import BlinkingPixmapConditional
 from Components.Pixmap import Pixmap
@@ -79,7 +80,7 @@
 			self["turnTime"].setText(self.FormatTurnTime(self.turn_time))
 			self.close_timeout -=1
 			if self.close_timeout < 0:
-				print "[Dish] timeout!"
+				print("[Dish] timeout!")
 				self.__toHide()
 
 	def __onShow(self):
@@ -145,13 +146,13 @@
 			info = service and service.info()
 			pmt = info and info.getInfo(iServiceInformation.sPMTPID)
 			if pmt >= 0:
-				print "[Dish] tuned, closing..."
+				print("[Dish] tuned, closing...")
 				self.__toHide()
 			else:
 				self.pmt_timeout -= 0.5
 		else:
 			self.__toHide()
-			print "[Dish] tuning failed"
+			print("[Dish] tuning failed")
 
 	def dishState(self):
 		return self.__state
@@ -198,7 +199,7 @@
 					return nim.turningspeedH.float
 			elif nimConfig.configMode.value == "advanced":
 				if self.cur_orbpos != INVALID_POSITION:
-					satlist = nimConfig.advanced.sat.keys()
+					satlist = list(nimConfig.advanced.sat.keys())
 					if self.cur_orbpos in satlist:
 						currSat = nimConfig.advanced.sat[self.cur_orbpos]
 						lnbnum = int(currSat.lnb.value)
@@ -226,9 +227,9 @@
 			nims = nimmanager.nimList()
 			if nr < len(nims) and nr >= 0:
 				return "".join(nims[nr].split(':')[:1])
-			print "[Dish.py] bug hunting nr: %s\n" %nr
-			print "[Dish.py] bug hunting nims:\n"
-			print nims
+			print("[Dish.py] bug hunting nr: %s\n" %nr)
+			print("[Dish.py] bug hunting nims:\n")
+			print(nims)
 			raise
 #			return " ".join((_("Tuner"),str(nr)))
 		return ""
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/EpgSelection.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/EpgSelection.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/EpgSelection.py	2020-06-21 10:16:12.711440042 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/EpgSelection.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,8 +1,9 @@
+from __future__ import absolute_import, division
 from time import localtime, time, strftime, mktime
 
 from enigma import eServiceReference, eTimer, eServiceCenter, ePoint
 
-from Screen import Screen
+from Screens.Screen import Screen
 from Screens.HelpMenu import HelpableScreen
 from Components.About import about
 from Components.ActionMap import HelpableActionMap, HelpableNumberActionMap
@@ -21,9 +22,9 @@
 from Screens.MessageBox import MessageBox
 from Screens.PictureInPicture import PictureInPicture
 from Screens.Setup import Setup
-from TimeDateInput import TimeDateInput
+from Screens.TimeDateInput import TimeDateInput
 from RecordTimer import RecordTimerEntry, parseEvent, AFTEREVENT
-from TimerEntry import TimerEntry, InstantRecordTimerEntry
+from Screens.TimerEntry import TimerEntry, InstantRecordTimerEntry
 from ServiceReference import ServiceReference
 from Tools.HardwareInfo import HardwareInfo
 from RecordTimer import TIMERTYPE
@@ -83,6 +84,7 @@
 		self.eventviewDialog = None
 		self.eventviewWasShown = False
 		self.currch = None
+		self.currbo = eServiceReference()
 		self.Oldpipshown = False
 		if self.session.pipshown:
 			self.Oldpipshown = True
@@ -105,7 +107,7 @@
 
 		#//vertical
 		if self.type == EPG_TYPE_VERTICAL:
-			self.StartBouquet = StartBouquet
+			self.StartBouquet = self.StartBouquetVertical = StartBouquet
 			self.StartRef = StartRef
 			self.servicelist = service
 			self.bouquetlist_active = False
@@ -274,14 +276,14 @@
 			self.bouquetlist_active = False
 			self['bouquetlist'] = EPGBouquetList(graphic=graphic)
 			self['bouquetlist'].hide()
-			self['timeline_text'] = TimelineText(type=self.type,graphic=graphic)
+			self['timeline_text'] = TimelineText(type=self.type, graphic=graphic)
 			self['Event'] = Event()
 			self['primetime'] = Label(_('PRIMETIME'))
 			self['change_bouquet'] = Label(_('CHANGE BOUQUET'))
 			self['jump'] = Label(_('JUMP 24 HOURS'))
 			self['page'] = Label(_('PAGE UP/DOWN'))
 			self.time_lines = []
-			for x in range(0, MAX_TIMELINES):
+			for x in list(range(0, MAX_TIMELINES)):
 				pm = Pixmap()
 				self.time_lines.append(pm)
 				self['timeline%d' % x] = pm
@@ -598,21 +600,57 @@
 		return services
 
 	def LayoutFinish(self):
+		self.BouquetRoot = False
+		self.navserviceref = self.session.nav.getCurrentlyPlayingServiceOrGroup()
 		self.createTimer = eTimer()
 		self.createTimer.start(500, True)
 		self['lab1'].show()
-		self.onCreate()
+		self.onCreate(True)
 
-	def onCreate(self):
+	def onCreate(self, firstrun=False):
 		title = None
 		self.BouquetRoot = False
-		serviceref = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+		currbo = None
+		waspipActive = False
+		navactserviceref = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+		if self.Oldpipshown:
+			from Screens.InfoBarGenerics import InfoBarPiP
+			if InfoBarPiP.pipWindowActive:
+				serviceref = self.session.pip.getCurrentService()
+				currbo = self.session.pip.getCurrentBouquetPiP()
+				waspipActive = True
+			else:
+				serviceref = navactserviceref
+				if firstrun:
+					try:
+						if self.session.pip.getCurrentBouquetMain() is not None:
+							currbo = self.session.pip.getCurrentBouquetMain()
+					except:
+						currbo = self.StartBouquet
+				else:
+					currbo = self.getCurrentBouquet()
+				waspipActive = False
+		else:
+			serviceref = navactserviceref
+			try:
+				if firstrun:
+					currbo = self.StartBouquet
+				else:
+					currbo = self.getCurrentBouquet()
+			except:
+				currbo = None
+			waspipActive = False
+			
 		if self.type != EPG_TYPE_VERTICAL:
 			self['list'].recalcEntrySize()
 		if self.type == EPG_TYPE_VERTICAL:
+			if waspipActive:
+				self.session.nav.playService(serviceref, checkParentalControl=False, adjust=False)
 			self.ask_time = -1
 			self.lastEventTime = (time(), time()+3600)
 			self.BouquetRoot = False
+			if currbo is not None:
+				self.StartBouquet = currbo
 			if self.StartBouquet.toString().startswith('1:7:0'):
 				self.BouquetRoot = True
 			self.services = self.getBouquetServices(self.StartBouquet)
@@ -636,7 +674,7 @@
 					idx+=1
 					if channel[1] == nameROH:
 						break
-				page = idx/(self.Fields-1)
+				page = idx // (self.Fields-1)
 				row = idx%(self.Fields-1)
 				if row:
 					self.activeList = row
@@ -644,7 +682,7 @@
 					page-=1
 					self.activeList = self.Fields-1
 				self["list"].moveToIndex(0)
-				for i in range(0,page):
+				for i in list(range(0, page)):
 					self["list"].pageDown()
 			else:
 				self["list"].moveToIndex(0)
@@ -655,6 +693,8 @@
 				self.updateVerticalEPG()
 			self.firststart = False
 		elif self.type == EPG_TYPE_GRAPH or self.type == EPG_TYPE_INFOBARGRAPH or self.type == EPG_TYPE_MULTI:
+			if currbo is not None:
+				self.StartBouquet = currbo
 			if self.StartBouquet.toString().startswith('1:7:0'):
 				self.BouquetRoot = True
 			self.services = self.getBouquetServices(self.StartBouquet)
@@ -667,6 +707,8 @@
 				self['list'].fillMultiEPG(self.services, self.ask_time)
 			else:
 				self['list'].fillGraphEPG(self.services, self.ask_time)
+			if waspipActive:
+				self.zapFunc(serviceref, bouquet = self.StartBouquet, preview = True)
 			self['list'].setCurrentlyPlaying(serviceref)
 			self['list'].moveToService(serviceref)
 			if self.type != EPG_TYPE_MULTI:
@@ -680,16 +722,28 @@
 				self['list'].setShowServiceMode(config.epgselection.infobar_servicetitle_mode.value)
 				self.moveTimeLines()
 		elif self.type == EPG_TYPE_SINGLE or self.type == EPG_TYPE_ENHANCED or self.type == EPG_TYPE_INFOBAR:
-			if self.type == EPG_TYPE_SINGLE:
-				service = self.currentService
-			elif self.type == EPG_TYPE_ENHANCED or self.type == EPG_TYPE_INFOBAR:
-				service = ServiceReference(self.servicelist.getCurrentSelection())
-				title = ServiceReference(self.servicelist.getRoot()).getServiceName()
-			self['Service'].newService(service.ref)
-			if title:
-				title = title + ' - ' + service.getServiceName()
-			else: 
-				title = service.getServiceName()
+			if waspipActive:
+				if self.type == EPG_TYPE_SINGLE:
+					service = serviceref
+				elif self.type == EPG_TYPE_ENHANCED or self.type == EPG_TYPE_INFOBAR:
+					if firstrun:
+						self.session.nav.playService(serviceref, checkParentalControl=False, adjust=False)
+					service = ServiceReference(self.servicelist.getCurrentSelection())
+					title = ServiceReference(self.servicelist.getRoot()).getServiceName()
+			else:
+				if self.type == EPG_TYPE_SINGLE:
+					service = self.currentService
+				elif self.type == EPG_TYPE_ENHANCED or self.type == EPG_TYPE_INFOBAR:
+					service = ServiceReference(self.servicelist.getCurrentSelection())
+					title = ServiceReference(self.servicelist.getRoot()).getServiceName()
+			try:
+				self['Service'].newService(service.ref)
+				if title:
+					title = title + ' - ' + service.getServiceName()
+				else: 
+					title = service.getServiceName()
+			except:
+				return
 			self.setTitle(title)
 			self['list'].fillSingleEPG(service)
 			self['list'].sortSingleEPG(int(config.epgselection.sort.value))
@@ -706,7 +760,7 @@
 		elif self.type == EPG_TYPE_MULTI:
 			curr = self['list'].getCurrentChangeCount()
 			self['list'].fillMultiEPG(self.services, self.ask_time)
-			for i in range(curr):
+			for i in list(range(curr)):
 				self['list'].updateMultiEPG(1)
 		elif self.type == EPG_TYPE_SINGLE or self.type == EPG_TYPE_ENHANCED or self.type == EPG_TYPE_INFOBAR:
 			try:
@@ -902,7 +956,7 @@
 	def getCurrentBouquet(self):
 		if self.BouquetRoot:
 			return self.StartBouquet
-		elif self.has_key('bouquetlist'):
+		elif 'bouquetlist' in self:
 			cur = self["bouquetlist"].l.getCurrentSelection()
 			return cur and cur[1]
 		else:
@@ -960,20 +1014,26 @@
 			self.moveBouquetDown()
 			self.BouquetOK()
 		elif (self.type == EPG_TYPE_ENHANCED or self.type == EPG_TYPE_INFOBAR) and config.usage.multibouquet.value:
-			self.CurrBouquet = self.servicelist.getCurrentSelection()
-			self.CurrService = self.servicelist.getRoot()
-			self.servicelist.nextBouquet()
-			self.onCreate()
+			from Screens.InfoBarGenerics import InfoBarPiP
+			if not self.Oldpipshown and not InfoBarPiP.pipWindowActive:
+				if self.type != EPG_TYPE_ENHANCED:
+					self.CurrBouquet = self.servicelist.getCurrentSelection()
+					self.CurrService = self.servicelist.getRoot()
+					self.servicelist.nextBouquet()
+					self.onCreate()
 
 	def prevBouquet(self):
 		if self.type == EPG_TYPE_MULTI or self.type == EPG_TYPE_GRAPH or self.type == EPG_TYPE_INFOBARGRAPH or self.type == EPG_TYPE_VERTICAL:
 			self.moveBouquetUp()
 			self.BouquetOK()
 		elif (self.type == EPG_TYPE_ENHANCED or self.type == EPG_TYPE_INFOBAR) and config.usage.multibouquet.value:
-			self.CurrBouquet = self.servicelist.getCurrentSelection()
-			self.CurrService = self.servicelist.getRoot()
-			self.servicelist.prevBouquet()
-			self.onCreate()
+			from Screens.InfoBarGenerics import InfoBarPiP
+			if not self.Oldpipshown and not InfoBarPiP.pipWindowActive:
+				if self.type != EPG_TYPE_ENHANCED:
+					self.CurrBouquet = self.servicelist.getCurrentSelection()
+					self.CurrService = self.servicelist.getRoot()
+					self.servicelist.prevBouquet()
+					self.onCreate()
 
 	def nextService(self):
 		if self.type == EPG_TYPE_ENHANCED or self.type == EPG_TYPE_INFOBAR:
@@ -986,7 +1046,10 @@
 					prev = prev.toString()
 					while True:
 						if config.usage.quickzap_bouquet_change.value and self.servicelist.atEnd():
-							self.servicelist.nextBouquet()
+							from Screens.InfoBarGenerics import InfoBarPiP
+							if not self.Oldpipshown and not InfoBarPiP.pipWindowActive:
+								if self.type != EPG_TYPE_ENHANCED:
+									self.servicelist.nextBouquet()
 						else:
 							self.servicelist.moveDown()
 						cur = self.servicelist.getCurrentSelection()
@@ -1017,7 +1080,10 @@
 					while True:
 						if config.usage.quickzap_bouquet_change.value:
 							if self.servicelist.atBegin():
-								self.servicelist.prevBouquet()
+								from Screens.InfoBarGenerics import InfoBarPiP
+								if not self.Oldpipshown and not InfoBarPiP.pipWindowActive:
+									if self.type != EPG_TYPE_ENHANCED:
+										self.servicelist.prevBouquet()
 						self.servicelist.moveUp()
 						cur = self.servicelist.getCurrentSelection()
 						if not cur or (not (cur.flags & 64)) or cur.toString() == prev:
@@ -1079,7 +1145,7 @@
 		if event is not None and not self.eventviewDialog and not eventviewopen:
 			if self.type != EPG_TYPE_SIMILAR:
 				if self.type == EPG_TYPE_INFOBARGRAPH:
-					self.eventviewDialog = self.session.instantiateDialog(EventViewSimple,event, service, skin='InfoBarEventView')
+					self.eventviewDialog = self.session.instantiateDialog(EventViewSimple, event, service, skin='InfoBarEventView')
 					self.eventviewDialog.show()
 				else:
 					self.session.open(EventViewEPGSelect, event, service, callback=self.eventViewCallback, similarEPGCB=self.openSimilarList)
@@ -1091,12 +1157,12 @@
 			if self.type != EPG_TYPE_SIMILAR:
 				if self.type == EPG_TYPE_INFOBAR or self.type == EPG_TYPE_INFOBARGRAPH:
 					self.eventviewDialog.hide()
-					self.eventviewDialog = self.session.instantiateDialog(EventViewSimple,event, service, skin='InfoBarEventView')
+					self.eventviewDialog = self.session.instantiateDialog(EventViewSimple, event, service, skin='InfoBarEventView')
 					self.eventviewDialog.show()
 
 	def redButtonPressed(self):
 		self.closeEventViewDialog()
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if not InfoBarInstance.LongButtonPressed:
 			if self.type == EPG_TYPE_GRAPH or self.type == EPG_TYPE_INFOBARGRAPH:
@@ -1158,14 +1224,14 @@
 
 	def redButtonPressedLong(self):
 		self.closeEventViewDialog()
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if InfoBarInstance.LongButtonPressed:
 			self.sortEpg()
 
 	def greenButtonPressed(self):
 		self.closeEventViewDialog()
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if not InfoBarInstance.LongButtonPressed:
 			if self.type == EPG_TYPE_GRAPH or self.type == EPG_TYPE_INFOBARGRAPH:
@@ -1227,14 +1293,14 @@
 
 	def greenButtonPressedLong(self):
 		self.closeEventViewDialog()
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if InfoBarInstance.LongButtonPressed:
 			self.showTimerList()
 
 	def yellowButtonPressed(self):
 		self.closeEventViewDialog()
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if not InfoBarInstance.LongButtonPressed:
 			if self.type == EPG_TYPE_GRAPH or self.type == EPG_TYPE_INFOBARGRAPH:
@@ -1296,7 +1362,7 @@
 
 	def blueButtonPressed(self):
 		self.closeEventViewDialog()
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if not InfoBarInstance.LongButtonPressed:
 			if self.type == EPG_TYPE_GRAPH or self.type == EPG_TYPE_INFOBARGRAPH:
@@ -1358,7 +1424,7 @@
 
 	def blueButtonPressedLong(self):
 		self.closeEventViewDialog()
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if InfoBarInstance.LongButtonPressed:
 			self.showAutoTimerList()
@@ -1469,7 +1535,7 @@
 		self.session.open(TimerEditList)
 
 	def showMovieSelection(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBar.instance.showMovies()
 
 	def showAutoTimerList(self):
@@ -1549,7 +1615,7 @@
 				eventBegin = event.getBeginTime()
 				eventDuration = event.getDuration()
 				x = self.session.nav.RecordTimer.isInTimer(eventid, eventBegin, eventDuration, refstr, True)
-				if x and x[1] in (2,7,12):
+				if x and x[1] in (2, 7, 12):
 					foundtimer = x[3]
 
 		if foundtimer:
@@ -1591,13 +1657,13 @@
 			self.showChoiceBoxDialog()
 
 	def recButtonPressed(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if not InfoBarInstance.LongButtonPressed:
 			self.RecordTimerQuestion()
 
 	def recButtonPressedLong(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if InfoBarInstance.LongButtonPressed:
 			self.doZapTimer()
@@ -1617,7 +1683,7 @@
 
 	def showChoiceBoxDialog(self):
 		self['okactions'].setEnabled(False)
-		if self.has_key('epgcursoractions'):
+		if 'epgcursoractions' in self:
 			self['epgcursoractions'].setEnabled(False)
 		self['colouractions'].setEnabled(False)
 		self['recordingactions'].setEnabled(False)
@@ -1625,7 +1691,7 @@
 		self["dialogactions"].setEnabled(True)
 		self.ChoiceBoxDialog['actions'].execBegin()
 		self.ChoiceBoxDialog.show()
-		if self.has_key('input_actions'):
+		if 'input_actions' in self:
 			self['input_actions'].setEnabled(False)
 
 	def closeChoiceBoxDialog(self):
@@ -1634,16 +1700,16 @@
 			self.ChoiceBoxDialog['actions'].execEnd()
 			self.session.deleteDialog(self.ChoiceBoxDialog)
 		self['okactions'].setEnabled(True)
-		if self.has_key('epgcursoractions'):
+		if 'epgcursoractions' in self:
 			self['epgcursoractions'].setEnabled(True)
 		self['colouractions'].setEnabled(True)
 		self['recordingactions'].setEnabled(True)
 		self['epgactions'].setEnabled(True)
-		if self.has_key('input_actions'):
+		if 'input_actions' in self:
 			self['input_actions'].setEnabled(True)
 
 	def doRecordTimer(self, rec=False):
-		if not rec and 'Plugins.Extensions.EPGSearch.EPGSearch.EPGSearch' in `self`:
+		if not rec and 'Plugins.Extensions.EPGSearch.EPGSearch.EPGSearch' in repr(self):
 			self.RecordTimerQuestion()
 		else:
 			self.doInstantTimer(0, 0)
@@ -1702,7 +1768,7 @@
 		self.finishedAdd(answer)
 
 	def OK(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if not InfoBarInstance.LongButtonPressed:
 			if self.zapnumberstarted:
@@ -1718,9 +1784,11 @@
 				((self.type == EPG_TYPE_INFOBAR or self.type == EPG_TYPE_INFOBARGRAPH) and config.epgselection.infobar_ok.value == 'Zap + Exit') or
 				(self.type == EPG_TYPE_MULTI and config.epgselection.multi_ok.value == 'Zap + Exit') or (self.type == EPG_TYPE_VERTICAL and config.epgselection.vertical_ok.value == 'Zap + Exit')):
 					self.zap()
+		if self.Oldpipshown:
+			self.session.pipshown = True
 
 	def OKLong(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if InfoBarInstance.LongButtonPressed:
 			if self.zapnumberstarted:
@@ -1736,12 +1804,14 @@
 				((self.type == EPG_TYPE_INFOBAR or self.type == EPG_TYPE_INFOBARGRAPH) and config.epgselection.infobar_oklong.value == 'Zap + Exit') or
 				(self.type == EPG_TYPE_MULTI and config.epgselection.multi_oklong.value == 'Zap + Exit') or (self.type == EPG_TYPE_VERTICAL and config.epgselection.vertical_oklong.value == 'Zap + Exit')):
 					self.zap()
+		if self.Oldpipshown:
+			self.session.pipshown = True
 
 	def epgButtonPressed(self):
 		self.OpenSingleEPG()
 
 	def Info(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if not InfoBarInstance.LongButtonPressed:
 			if (self.type == EPG_TYPE_GRAPH and config.epgselection.graph_info.value == 'Channel Info') or (self.type == EPG_TYPE_VERTICAL and config.epgselection.vertical_info.value == 'Channel Info'):
@@ -1752,7 +1822,7 @@
 				self.infoKeyPressed()
 
 	def InfoLong(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if InfoBarInstance.LongButtonPressed:
 			if (self.type == EPG_TYPE_GRAPH and config.epgselection.graph_infolong.value == 'Channel Info') or (self.type == EPG_TYPE_VERTICAL and config.epgselection.vertical_infolong.value == 'Channel Info'):
@@ -1821,7 +1891,7 @@
 				nowTime = localtime(now)
 				begTime = localtime(beg)
 				if nowTime[2] != begTime[2]:
-					datestr = strftime(config.usage.date.dayshort.value, begTime)
+					datestr = strftime(_('%A %e %b'), begTime)
 				else:
 					datestr = '%s' % _('Today')
 			self['date'].setText(datestr)
@@ -1850,7 +1920,7 @@
 				eventBegin = event.getBeginTime()
 				eventDuration = event.getDuration()
 				x = self.session.nav.RecordTimer.isInTimer(eventid, eventBegin, eventDuration, refstr)
-				if x and x[1] in (2,7,12):
+				if x and x[1] in (2, 7, 12):
 					isRecordEvent = True
 
 		if isRecordEvent and self.key_green_choice != self.REMOVE_TIMER:
@@ -1887,9 +1957,30 @@
 			self.eventviewDialog = None
 
 	def closeScreen(self, NOCLOSE = False):
+		if self.type == EPG_TYPE_VERTICAL and NOCLOSE:
+			return
 		if self.type == EPG_TYPE_SINGLE:
+			self.checkpipOld()
 			self.close()
 			return # stop and do not continue.
+		if self.type == EPG_TYPE_VERTICAL:
+			self.session.nav.playService(self.navserviceref, checkParentalControl=False, adjust=False)
+			if hasattr(self.session, "pipshown") and self.session.pipshown:
+				from Screens.InfoBarGenerics import InfoBarPiP
+				if InfoBarPiP.pipWindowActive:
+					serviceref1 = self.session.pip.getCurrentService()
+					currbo1 = self.session.pip.getCurrentBouquetPiP()
+					self.zapFunc(self.session.pip.getCurrentService(), bouquet = self.session.pip.getCurrentBouquetPiP(), zaptolist=True)
+				else:
+					self.zapFunc(self.navserviceref, bouquet = self.StartBouquetVertical, zaptolist=True)
+			else:
+				self.zapFunc(self.navserviceref, bouquet = self.StartBouquetVertical, zaptolist=True)
+			self.checkpipOld()
+			self.closeEventViewDialog()
+			self.close(True)
+			return
+		if self.type == EPG_TYPE_ENHANCED:
+			self.session.nav.playService(self.navserviceref, checkParentalControl=False, adjust=False)
 		if hasattr(self, 'servicelist') and self.servicelist:
 			selected_ref = str(ServiceReference(self.servicelist.getCurrentSelection()))
 			current_ref = str(ServiceReference(self.session.nav.getCurrentlyPlayingServiceOrGroup()))
@@ -1904,11 +1995,24 @@
 					(self.type == EPG_TYPE_ENHANCED and config.epgselection.enhanced_preview_mode.value) or
 					(self.type == EPG_TYPE_VERTICAL and config.epgselection.vertical_preview_mode.value)):
 					if '0:0:0:0:0:0:0:0:0' not in self.StartRef.toString():
-						self.zapFunc(None, zapback = True)
+						self.session.nav.playService(self.navserviceref, checkParentalControl=False, adjust=False)
+						if hasattr(self.session, "pipshown") and self.session.pipshown:
+							from Screens.InfoBarGenerics import InfoBarPiP
+							if InfoBarPiP.pipWindowActive:
+								self.zapFunc(self.session.pip.getCurrentService(), bouquet = self.session.pip.getCurrentBouquetPiP(), zaptolist=True)
+							else:
+								self.zapFunc(self.navserviceref, bouquet = self.StartBouquet, zaptolist=True)
+						else:
+							self.zapFunc(self.navserviceref, bouquet = self.StartBouquet, zaptolist=True)
 				elif '0:0:0:0:0:0:0:0:0' in self.StartRef.toString():
 					self.session.nav.playService(self.StartRef)
 				else:
 					self.zapFunc(None, False)
+		self.checkpipOld()
+		self.closeEventViewDialog()
+		self.close(True)
+		
+	def checkpipOld(self):
 		if self.session.pipshown:
 			if not self.Oldpipshown:
 				self.Oldpipshown = False
@@ -1916,28 +2020,10 @@
 				del self.session.pip
 		if self.Oldpipshown:
 			self.session.pipshown = True
-		self.closeEventViewDialog()
-		if self.type == EPG_TYPE_VERTICAL and NOCLOSE:
-			return
-		self.close(True)
-
-	def zap(self):
-		if self.session.nav.getCurrentlyPlayingServiceOrGroup() and '0:0:0:0:0:0:0:0:0' in self.session.nav.getCurrentlyPlayingServiceOrGroup().toString():
-			return
-		if self.zapFunc:
-			self.zapSelectedService()
-			self.closeEventViewDialog()
-			self.close(True)
-		else:
-			self.closeEventViewDialog()
-			self.close()
 
 	def zapSelectedService(self, prev=False):
 		currservice = self.session.nav.getCurrentlyPlayingServiceReference() and str(self.session.nav.getCurrentlyPlayingServiceReference().toString()) or None
-		if self.session.pipshown and config.usage.pip_mode.value == "standard":
-			self.prevch = self.session.pip.getCurrentService() and str(self.session.pip.getCurrentService().toString()) or None
-		else:
-			self.prevch = self.session.nav.getCurrentlyPlayingServiceReference() and str(self.session.nav.getCurrentlyPlayingServiceReference().toString()) or None
+		self.prevch = currservice
 		lst = self["list"+str(self.activeList)]
 		count = lst.getCurrentChangeCount()
 		if count == 0:
@@ -1945,6 +2031,7 @@
 			if ref is None and self.type == EPG_TYPE_VERTICAL and self.myServices[0][0]:
 				ref = ServiceReference(self.myServices[self["list"].getSelectionIndex()+self.activeList-1][0])
 			if ref is not None:
+				self.selch = ref.ref
 				if (self.type == EPG_TYPE_INFOBAR or self.type == EPG_TYPE_INFOBARGRAPH) and config.epgselection.infobar_preview_mode.value == '2':
 					if not prev:
 						if self.session.pipshown:
@@ -1971,11 +2058,33 @@
 						self.session.pip.playService(service)
 						self.currch = self.session.pip.getCurrentService() and str(self.session.pip.getCurrentService().toString())
 				else:
-					self.zapFunc(ref.ref, bouquet = self.getCurrentBouquet(), preview = prev)
+					self.currbo = self.getCurrentBouquet()
+					self.zapFunc(self.selch, bouquet = self.currbo, preview = prev)
 					self.currch = self.session.nav.getCurrentlyPlayingServiceReference() and str(self.session.nav.getCurrentlyPlayingServiceReference().toString())
 				self['list'+str(self.activeList)].setCurrentlyPlaying(self.session.nav.getCurrentlyPlayingServiceOrGroup())
-				if self.Oldpipshown:
-					self.session.pipshown = True
+
+	def zap(self):
+		if self.session.nav.getCurrentlyPlayingServiceOrGroup() and '0:0:0:0:0:0:0:0:0' in self.session.nav.getCurrentlyPlayingServiceOrGroup().toString():
+			return
+		if self.zapFunc:
+			self.zapSelectedService()
+			if self.Oldpipshown:
+				from Screens.InfoBarGenerics import InfoBarPiP
+				if InfoBarPiP.pipWindowActive:
+					if hasattr(self.session, "pip"):
+						if not self.selch:
+							self.selch = self.prevch
+						self.session.pip.playService(self.selch, self.currbo)
+						self.session.nav.playService(self.navserviceref, checkParentalControl=False, adjust=False)
+						self.zapFunc(self.selch, bouquet = self.currbo, zaptolist=True)
+				else:
+					self.session.pip.setCurrentBouquetMain(self.currbo)
+					self.zapFunc(self.selch, bouquet = self.currbo, zaptolist=True)
+			self.closeEventViewDialog()
+			self.close(True)
+		else:
+			self.closeEventViewDialog()
+			self.close()
 
 	def zapTo(self):
 		if self.session.nav.getCurrentlyPlayingServiceOrGroup() and '0:0:0:0:0:0:0:0:0' in self.session.nav.getCurrentlyPlayingServiceOrGroup().toString():
@@ -1987,9 +2096,26 @@
 			self.refreshTimer.start(2000)
 		if not self.currch or self.currch == self.prevch:
 			if self.zapFunc:
-				self.zapFunc(None, False)
-				self.closeEventViewDialog()
-				self.close('close')
+				from Screens.InfoBarGenerics import InfoBarPiP
+				if self.Oldpipshown:
+					if InfoBarPiP.pipWindowActive:
+						if hasattr(self.session, "pip"):
+							self.session.pip.playService(eServiceReference(self.currch),self.currbo)
+							self.session.nav.playService(self.navserviceref, checkParentalControl=False, adjust=False)
+							self.closeEventViewDialog()
+							self.close('close')
+						else:
+							self.closeEventViewDialog()
+							self.close()
+					else:
+						self.session.pip.setCurrentBouquetMain(self.currbo)
+						self.zapFunc(eServiceReference(self.currch), bouquet = self.currbo, zaptolist=True)
+						self.closeEventViewDialog()
+						self.close('close')
+				else:
+					self.zapFunc(None, False)
+					self.closeEventViewDialog()
+					self.close('close')
 			else:
 				self.closeEventViewDialog()
 				self.close()
@@ -2405,10 +2531,10 @@
 			info = service.info()
 			servicename = info.getName(service.ref).replace('\xc2\x86', '').replace('\xc2\x87', '')
 			self.list.append(str(idx) + ". " + servicename)
-			self.myServices.append((service.ref.toString(),servicename))
+			self.myServices.append((service.ref.toString(), servicename))
 		if not idx:
 			self.list.append('')
-			self.myServices.append(('',''))
+			self.myServices.append(('', ''))
 		return self.list
 
 	def updateVerticalEPG(self, force = False):
@@ -2501,13 +2627,13 @@
 
 	def displayActiveEPG(self):
 		marker = config.epgselection.vertical_eventmarker.value
-		for list in range(1,self.Fields):
-			if list == self.activeList:
-				self["list"+str(list)].selectionEnabled(True)
-				self["Active"+str(list)].show()
+		for _list in list(range(1, self.Fields)):
+			if _list == self.activeList:
+				self["list"+str(_list)].selectionEnabled(True)
+				self["Active"+str(_list)].show()
 			else:
-				self["Active"+str(list)].hide()
-				self["list"+str(list)].selectionEnabled(marker)
+				self["Active"+str(_list)].hide()
+				self["list"+str(_list)].selectionEnabled(marker)
 
 	def getActivePrg(self):
 		return self["list"].getSelectionIndex()+(self.activeList-1)
@@ -2521,7 +2647,7 @@
 			self.setMinus24h(True, 6)
 			self.lastEventTime = tmp
 			self.gotoLasttime()
-		for list in range(1,self.Fields):
+		for list in list(range(1, self.Fields)):
 			self['list'+str(list)].moveTo(self['list'+str(list)].instance.pageUp)
 		self.syncUp(idx)
 		self.saveLastEventTime()
@@ -2529,10 +2655,10 @@
 	def syncUp(self, idx):
 		idx = self['list'+str(self.activeList)].getCurrentIndex()
 		curTime = self.getEventTime(self.activeList)[0]
-		for list in range(1,self.Fields):
+		for list in list(range(1, self.Fields)):
 			if list == self.activeList:
 				continue
-			for x in range(0,int(idx/config.epgselection.vertical_itemsperpage.value)):
+			for x in list(range(0, int(idx/config.epgselection.vertical_itemsperpage.value))):
 				evTime = self.getEventTime(list)[0]
 				if curTime is None or evTime is None or curTime <= evTime:
 					self['list'+str(list)].moveTo(self['list'+str(list)].instance.pageUp)
@@ -2542,10 +2668,10 @@
 
 	def syncDown(self, idx):
 		curTime = self.getEventTime(self.activeList)[0]
-		for list in range(1,self.Fields):
+		for list in list(range(1, self.Fields)):
 			if list == self.activeList:
 				continue
-			for x in range(0,int(idx/config.epgselection.vertical_itemsperpage.value)):
+			for x in list(range(0, int(idx/config.epgselection.vertical_itemsperpage.value))):
 				evTime = self.getEventTime(list)[0]
 				if curTime is None or evTime is None or curTime >= evTime:
 					self['list'+str(list)].moveTo(self['list'+str(list)].instance.pageDown)
@@ -2556,7 +2682,7 @@
 	def allDown(self):
 		if self.getEventTime(self.activeList)[0] is None:
 			return
-		for list in range(1,self.Fields):
+		for list in list(range(1, self.Fields)):
 			self['list'+str(list)].moveTo(self['list'+str(list)].instance.pageDown)
 		idx = self['list'+str(self.activeList)].getCurrentIndex()
 		self.syncDown(idx)
@@ -2574,7 +2700,7 @@
 
 	def gotoLast(self):
 		idx = len(self.list)
-		page = idx/(self.Fields-1)
+		page = idx // (self.Fields-1)
 		row = idx%(self.Fields-1)
 		if row:
 			self.activeList = row
@@ -2582,7 +2708,7 @@
 			page-=1
 			self.activeList = self.Fields-1
 		self["list"].moveToIndex(0)
-		for i in range(0,page):
+		for i in list(range(0, page)):
 			self["list"].pageDown()
 		self.updateVerticalEPG()
 
@@ -2590,7 +2716,7 @@
 		if stime is None:
 			stime = time()
 		t = localtime(stime)
-		primetime = mktime((t[0],t[1],t[2],config.epgselection.vertical_primetimehour.value,config.epgselection.vertical_primetimemins.value,0,t[6],t[7],t[8]))
+		primetime = mktime((t[0], t[1], t[2], config.epgselection.vertical_primetimehour.value, config.epgselection.vertical_primetimemins.value, 0, t[6], t[7], t[8]))
 		return primetime
 
 	def findMaxEventTime(self, stime):
@@ -2628,7 +2754,7 @@
 
 	def setMinus24h(self, force = False, daypart = 1):
 		now = time()
-		oneDay =  24*3600/daypart
+		oneDay =  24*3600 // daypart
 		if not self.lastMinus:
 			self.lastMinus = oneDay
 		ev_begin, ev_end = self.getEventTime(self.activeList)
@@ -2678,7 +2804,7 @@
 		ev_begin, ev_end = self.getEventTime(self.activeList)
 		if ev_begin is None:
 			return
-		for list in range(1, self.Fields):
+		for list in list(range(1, self.Fields)):
 			idx += self['list'+str(list)].getCurrentIndex()
 
 		primetime = self.setPrimetime(ev_begin)
@@ -2704,7 +2830,7 @@
 				else:
 					self['list'+str(self.activeList)].moveTo(self['list'+str(self.activeList)].instance.moveTop)
 					self.setMinus24h(True, 6)
-					for list in range(1, self.Fields):
+					for list in list(range(1, self.Fields)):
 						self['list'+str(list)].moveTo(self['list'+str(list)].instance.moveEnd)
 						cnt = self['list'+str(list)].getCurrentIndex()
 						self['list'+str(list)].moveTo(self['list'+str(list)].instance.moveTop)
@@ -2718,7 +2844,7 @@
 			self['list'+str(list)].moveTo(self['list'+str(list)].instance.moveTop)
 			self.findLasttime(cnt, list)
 		else:
-			for list in range(1, self.Fields):
+			for list in list(range(1, self.Fields)):
 				self['list'+str(list)].moveTo(self['list'+str(list)].instance.moveEnd)
 				cnt = self['list'+str(list)].getCurrentIndex()
 				self['list'+str(list)].moveTo(self['list'+str(list)].instance.moveTop)
@@ -2726,9 +2852,9 @@
 
 	def findLasttime(self, cnt, list, idx = 0):
 		last_begin, last_end = self.lastEventTime
-		for events in range(0,idx):
+		for events in list(range(0, idx)):
 			self['list'+str(list)].moveTo(self['list'+str(list)].instance.moveDown)
-		for events in range(idx, cnt):
+		for events in list(range(idx, cnt)):
 			ev_begin, ev_end = self.getEventTime(list)
 			if ev_begin is not None:
 				if (ev_begin <= last_begin and ev_end > last_begin) or (ev_end >= last_end):
@@ -2738,7 +2864,7 @@
 				break
 
 	def findPrimetime(self, cnt, list, primetime):
-		for events in range(0, cnt):
+		for events in list(range(0, cnt)):
 			ev_begin, ev_end = self.getEventTime(list)
 			if ev_begin is not None:
 				if (primetime >= ev_begin and primetime < ev_end):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/EventView.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/EventView.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/EventView.py	2020-06-21 10:16:12.711440042 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/EventView.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,3 +1,5 @@
+# -*- coding: utf-8 -*-
+from __future__ import print_function
 from time import localtime, mktime, time, strftime
 
 from enigma import eEPGCache, eTimer, eServiceReference, ePoint
@@ -20,6 +22,7 @@
 from Screens.TimerEntry import TimerEntry
 from Plugins.Plugin import PluginDescriptor
 from Tools.BoundFunction import boundFunction
+import six
 
 class EventViewContextMenu(Screen):
 	def __init__(self, session, menu):
@@ -132,7 +135,7 @@
 				cb_func2 = lambda ret: self.editTimer(timer)
 				menu = [(_("Delete timer"), 'CALLFUNC', self.ChoiceBoxCB, cb_func1), (_("Edit timer"), 'CALLFUNC', self.ChoiceBoxCB, cb_func2)]
 				self.ChoiceBoxDialog = self.session.instantiateDialog(ChoiceBox, title=_("Select action for timer %s:") % event.getEventName(), list=menu, keys=['green', 'blue'], skin_name="RecordTimerQuestion")
-				self.ChoiceBoxDialog.instance.move(ePoint(self.instance.position().x()+self["key_green"].getPosition()[0],self.instance.position().y()+self["key_green"].getPosition()[1]-self["key_green"].instance.size().height()))
+				self.ChoiceBoxDialog.instance.move(ePoint(self.instance.position().x()+self["key_green"].getPosition()[0], self.instance.position().y()+self["key_green"].getPosition()[1]-self["key_green"].instance.size().height()))
 				self.showChoiceBoxDialog()
 				break
 		else:
@@ -158,7 +161,7 @@
 		self['actions'].setEnabled(True)
 
 	def finishedAdd(self, answer):
-		print "finished add"
+		print("finished add")
 		if answer[0]:
 			entry = answer[1]
 			simulTimerList = self.session.nav.RecordTimer.record(entry)
@@ -191,7 +194,7 @@
 		else:
 			self["key_green"].setText(_("Add timer"))
 			self.key_green_choice = self.ADD_TIMER
-			print "Timeredit aborted"
+			print("Timeredit aborted")
 
 	def finishSanityCorrection(self, answer):
 		self.finishedAdd(answer)
@@ -208,14 +211,6 @@
 			else:
 				self["channel"].setText(_("unknown service"))
 
-	def sort_func(self,x,y):
-		if x[1] < y[1]:
-			return -1
-		elif x[1] == y[1]:
-			return 0
-		else:
-			return 1
-
 	def setEvent(self, event):
 		if event is None or not hasattr(event, 'getEventName'):
 			return
@@ -231,7 +226,7 @@
 		if short == text:
 			short = ""
 
-		if short and extended and extended.replace('\n','') == short.replace('\n',''):
+		if short and extended and extended.replace('\n', '') == short.replace('\n', ''):
 			pass #extended = extended
 		elif short and extended:
 			extended = short + '\n' + extended
@@ -269,7 +264,7 @@
 			fail = True
 
 		if fail:
-			print 'wrong timestamp detected: source = %s ,date = %s ,time = %s' %(beginTimeString,begindate,begintime)
+			print('wrong timestamp detected: source = %s ,date = %s ,time = %s' %(beginTimeString, begindate, begintime))
 			return
 		###
 
@@ -318,8 +313,7 @@
 		ret = epgcache.search(('NB', 100, eEPGCache.SIMILAR_BROADCASTINGS_SEARCH, refstr, id))
 		if ret is not None:
 			text = '\n\n' + _('Similar broadcasts:')
-			ret.sort(self.sort_func)
-			for x in ret:
+			for x in sorted(ret, key=lambda x: x[1]):
 				t = localtime(x[1])
 				text += "\n%s - %s" % (strftime(config.usage.date.long.value + ", " + config.usage.time.short.value, t), x[0])
 			descr = self["epg_description"]
@@ -340,7 +334,7 @@
 			menu = []
 			for p in plugins.getPlugins(PluginDescriptor.WHERE_EVENTINFO):
 				#only list service or event specific eventinfo plugins here, no servelist plugins
-				if 'servicelist' not in p.__call__.func_code.co_varnames:
+				if 'servicelist' not in p.__call__.__code__.co_varnames:
 					menu.append((p.name, boundFunction(self.runPlugin, p)))
 			if menu:
 				self.session.open(EventViewContextMenu, menu)
@@ -352,7 +346,7 @@
 	def __init__(self, session, event, ref, callback=None, singleEPGCB=None, multiEPGCB=None, similarEPGCB=None, skin='EventViewSimple'):
 		Screen.__init__(self, session)
 		self.setTitle(_('Eventview'))
-		self.skinName = [skin,"EventView"]
+		self.skinName = [skin, "EventView"]
 		EventViewBase.__init__(self, event, ref, callback, similarEPGCB)
 		self.key_green_choice = None
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/FixedMenu.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/FixedMenu.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/FixedMenu.py	2020-06-21 10:16:12.711440042 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/FixedMenu.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,4 +1,5 @@
-from Screen import Screen
+from __future__ import absolute_import
+from Screens.Screen import Screen
 from Components.Sources.List import List
 from Components.ActionMap import ActionMap
 from Components.Sources.StaticText import StaticText
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/HarddiskSetup.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/HarddiskSetup.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/HarddiskSetup.py	2020-06-21 10:16:12.711440042 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/HarddiskSetup.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Components.ActionMap import ActionMap
 from Components.Harddisk import harddiskmanager
@@ -33,7 +34,7 @@
 		})
 
 	def hddQuestion(self, answer=False):
-		print 'answer:',answer
+		print('answer:', answer)
 		if Screens.InfoBar.InfoBar.instance.timeshiftEnabled():
 			message = self.question + "\n\n" + _("You seem to be in timeshft, the service will briefly stop as timeshfit stops.")
 			message += '\n' + _("Do you want to continue?")
@@ -55,10 +56,10 @@
 		try:
 			job_manager.AddJob(self.action())
 			for job in job_manager.getPendingJobs():
-				if job.name in (_("Initializing storage device..."), _("Checking filesystem..."),_("Converting ext3 to ext4...")):
+				if job.name in (_("Initializing storage device..."), _("Checking filesystem..."), _("Converting ext3 to ext4...")):
 					self.showJobView(job)
 					break
-		except Exception, ex:
+		except Exception as ex:
 			self.session.open(MessageBox, str(ex), type=MessageBox.TYPE_ERROR, timeout=10)
 
 		if self.curentservice:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/HelpMenu.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/HelpMenu.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/HelpMenu.py	2020-06-21 10:16:12.711440042 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/HelpMenu.py	2020-06-21 10:20:02.351324854 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Components.Label import Label
 from Components.ActionMap import ActionMap
@@ -28,7 +29,7 @@
 		if selection:
 			selection = selection[3]
 		#arrow = self["arrowup"]
-		print "selection:", selection
+		print("selection:", selection)
 
 		longText = ""
 		if selection and len(selection) > 1:
@@ -40,7 +41,7 @@
 
 		self.selectKey(selection[0])
 		#if selection is None:
-		print "select arrow"
+		print("select arrow")
 		#	arrow.moveTo(selection[1], selection[2], 1)
 		#	arrow.startMoving()
 		#	arrow.show()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/InfoBar.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/InfoBar.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/InfoBar.py	2020-06-21 10:16:12.711440042 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/InfoBar.py	2020-06-21 10:20:02.355325403 -0400
@@ -1,3 +1,5 @@
+from __future__ import print_function
+from __future__ import absolute_import
 from Tools.Profile import profile
 
 # workaround for required config entry dependencies.
@@ -38,6 +40,7 @@
 profile("LOAD:HelpableScreen")
 from Screens.HelpMenu import HelpableScreen
 
+
 class InfoBar(InfoBarBase, InfoBarShowHide,
 	InfoBarNumberZap, InfoBarChannelSelection, InfoBarMenu, InfoBarEPG, InfoBarRdsDecoder,
 	InfoBarInstantRecord, InfoBarAudioSelection, InfoBarRedButton, InfoBarTimerButton, InfoBarINFOpanel, InfoBarResolutionSelection, InfoBarAspectSelection, InfoBarVmodeButton,
@@ -264,16 +267,16 @@
 			from Plugins.Extensions.MediaPlayer.plugin import MediaPlayer
 			self.session.open(MediaPlayer)
 			no_plugin = False
-		except Exception, e:
-			self.session.open(MessageBox, _("The MediaPlayer plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+		except Exception as e:
+			self.session.open(MessageBox, _("The MediaPlayer plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def showMediaCenter(self):
 		try:
 			from Plugins.Extensions.BMediaCenter.plugin import DMC_MainMenu
 			self.session.open(DMC_MainMenu)
 			no_plugin = False
-		except Exception, e:
-			self.session.open(MessageBox, _("The MediaCenter plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+		except Exception as e:
+			self.session.open(MessageBox, _("The MediaCenter plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def openSleepTimer(self):
 		from Screens.SleepTimerEdit import SleepTimerEdit
@@ -305,34 +308,34 @@
 		if autotimerFunc is not None:
 			autotimerFunc(self.session)
 		else:
-			self.session.open(MessageBox, _("The AutoTimer plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+			self.session.open(MessageBox, _("The AutoTimer plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def openEPGSearch(self):
 		try:
-			for plugin in plugins.getPlugins([PluginDescriptor.WHERE_PLUGINMENU ,PluginDescriptor.WHERE_EXTENSIONSMENU, PluginDescriptor.WHERE_EVENTINFO]):
+			for plugin in plugins.getPlugins([PluginDescriptor.WHERE_PLUGINMENU, PluginDescriptor.WHERE_EXTENSIONSMENU, PluginDescriptor.WHERE_EVENTINFO]):
 				if plugin.name == _("EPGSearch") or plugin.name == _("search EPG...") or plugin.name == "Durchsuche EPG...":
 					self.runPlugin(plugin)
 					break
-		except Exception, e:
-			self.session.open(MessageBox, _("The EPGSearch plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+		except Exception as e:
+			self.session.open(MessageBox, _("The EPGSearch plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def openIMDB(self):
 		try:
-			for plugin in plugins.getPlugins([PluginDescriptor.WHERE_PLUGINMENU ,PluginDescriptor.WHERE_EXTENSIONSMENU, PluginDescriptor.WHERE_EVENTINFO]):
+			for plugin in plugins.getPlugins([PluginDescriptor.WHERE_PLUGINMENU, PluginDescriptor.WHERE_EXTENSIONSMENU, PluginDescriptor.WHERE_EVENTINFO]):
 				if plugin.name == _("IMDb Details"):
 					self.runPlugin(plugin)
 					break
-		except Exception, e:
-			self.session.open(MessageBox, _("The IMDb plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+		except Exception as e:
+			self.session.open(MessageBox, _("The IMDb plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def openSimpleUnmount(self):
 		try:
-			for plugin in plugins.getPlugins([PluginDescriptor.WHERE_PLUGINMENU ,PluginDescriptor.WHERE_EXTENSIONSMENU, PluginDescriptor.WHERE_EVENTINFO]):
+			for plugin in plugins.getPlugins([PluginDescriptor.WHERE_PLUGINMENU, PluginDescriptor.WHERE_EXTENSIONSMENU, PluginDescriptor.WHERE_EVENTINFO]):
 				if plugin.name == _("SimpleUmount"):
 					self.runPlugin(plugin)
 					break
-		except Exception, e:
-			self.session.open(MessageBox, _("The SimpleUmount plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+		except Exception as e:
+			self.session.open(MessageBox, _("The SimpleUmount plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def ZoomInOut(self):
 		zoomval = 0
@@ -348,8 +351,8 @@
 			zoomval = abs(self.zoomrate) + 10
 		else:
 			zoomval = self.zoomrate
-		print 'zoomRate:', self.zoomrate
-		print 'zoomval:', zoomval
+		print('zoomRate:', self.zoomrate)
+		print('zoomval:', zoomval)
 		if fileExists("/proc/stb/vmpeg/0/zoomrate"):
 			file = open('/proc/stb/vmpeg/0/zoomrate', 'w')
 			file.write('%d' % int(zoomval))
@@ -372,8 +375,8 @@
 			from Plugins.Extensions.MediaPortal.plugin import MPmain as MediaPortal
 			MediaPortal(self.session)
 			no_plugin = False
-		except Exception, e:
-			self.session.open(MessageBox, _("The MediaPortal plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+		except Exception as e:
+			self.session.open(MessageBox, _("The MediaPortal plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 			
 	def showSetup(self):
 		from Screens.Menu import MainMenu, mdom
@@ -404,8 +407,8 @@
 			from Plugins.SystemPlugins.Videomode.plugin import videoSetupMain
 			self.session.instantiateDialog(videoSetupMain)
 			no_plugin = False
-		except Exception, e:
-			self.session.open(MessageBox, _("The VideoMode plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+		except Exception as e:
+			self.session.open(MessageBox, _("The VideoMode plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 			
 	def showPluginBrowser(self):
 		from Screens.PluginBrowser import PluginBrowser
@@ -426,10 +429,10 @@
 		if not nTracks: return
 		idx = 0
 		trackList = []
-		for i in xrange(nTracks):
+		for i in list(range(nTracks)):
 			audioInfo = tracks.getTrackInfo(i)
 			lang = audioInfo.getLanguage()
-			if langC.has_key(lang):
+			if lang in langC:
 				lang = langC[lang][0]
 			desc = audioInfo.getDescription()
 			track = idx, lang,  desc
@@ -461,7 +464,7 @@
 			matchedAc3 = tryAudioTrack(tracks, audiolang, caudiolang, trackList, seltrack, useAc3)
 			if matchedAc3: return
 			tracks.selectTrack(0)    # fallback to track 1(0)
-	except Exception, e:
+	except Exception as e:
 		print("[MoviePlayer] audioTrack exception:\n" + str(e))
 
 def tryAudioTrack(tracks, audiolang, caudiolang, trackList, seltrack, useAc3):
@@ -671,8 +674,8 @@
 						else:
 							self.movielistAgain()
 						return
-					except Exception, e:
-						print "[InfoBar] Failed to move to .Trash folder:", e
+					except Exception as e:
+						print("[InfoBar] Failed to move to .Trash folder:", e)
 						msg = _("Cannot move to trash can") + "\n" + str(e) + "\n"
 				info = serviceHandler.info(ref)
 				name = info and info.getName(ref) or _("this recording")
@@ -706,8 +709,8 @@
 		elif answer == "restart":
 			self.doSeek(0)
 			self.setSeekState(self.SEEK_STATE_PLAY)
-		elif answer in ("playlist","playlistquit","loop"):
-			( next_service, item , length ) = self.getPlaylistServiceInfo(self.cur_service)
+		elif answer in ("playlist", "playlistquit", "loop"):
+			( next_service, item, length ) = self.getPlaylistServiceInfo(self.cur_service)
 			if next_service is not None:
 				if config.usage.next_movie_msg.value:
 					self.displayPlayedName(next_service, item, length)
@@ -715,11 +718,11 @@
 				self.cur_service = next_service
 			else:
 				if answer == "playlist":
-					self.leavePlayerConfirmed([True,"movielist"])
+					self.leavePlayerConfirmed([True, "movielist"])
 				elif answer == "loop" and length > 0:
-					self.leavePlayerConfirmed([True,"loop"])
+					self.leavePlayerConfirmed([True, "loop"])
 				else:
-					self.leavePlayerConfirmed([True,"quit"])
+					self.leavePlayerConfirmed([True, "quit"])
 		elif answer in "repeatcurrent":
 			if config.usage.next_movie_msg.value:
 				(item, length) = self.getPlaylistServiceInfo(self.cur_service)
@@ -823,7 +826,7 @@
 					self.session.pipshown = False
 					del self.session.pip
 			else:
-				self.session.open(MessageBox, _("Your %s %s does not support PiP HD") % (getMachineBrand(), getMachineName()), type = MessageBox.TYPE_INFO,timeout = 5 )
+				self.session.open(MessageBox, _("Your %s %s does not support PiP HD") % (getMachineBrand(), getMachineName()), type = MessageBox.TYPE_INFO, timeout = 5 )
 				
 	def movePiP(self):
 		if self.session.pipshown:
@@ -860,7 +863,7 @@
 				pass		
 
 	def getPlaylistServiceInfo(self, service):
-		from MovieSelection import playlist
+		from Screens.MovieSelection import playlist
 		for i, item in enumerate(playlist):
 			if item == service:
 				if config.usage.on_movie_eof.value == "repeatcurrent":
@@ -873,8 +876,8 @@
 		return None, 0, 0
 
 	def displayPlayedName(self, ref, index, n):
-		from Tools import Notifications
-		Notifications.AddPopup(text = _("%s/%s: %s") % (index, n, self.ref2HumanName(ref)), type = MessageBox.TYPE_INFO, timeout = 5)
+		import Tools.Notifications
+		Tools.Notifications.AddPopup(text = _("%s/%s: %s") % (index, n, self.ref2HumanName(ref)), type = MessageBox.TYPE_INFO, timeout = 5)
 
 	def ref2HumanName(self, ref):
 		return enigma.eServiceCenter.getInstance().info(ref).getName(ref)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/InfoBarGenerics.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/InfoBarGenerics.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/InfoBarGenerics.py	2020-06-21 10:16:12.715440842 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/InfoBarGenerics.py	2020-06-21 10:20:02.355325403 -0400
@@ -1,4 +1,7 @@
 # -*- coding: utf-8 -*-
+from __future__ import division
+from __future__ import print_function
+from __future__ import absolute_import
 from Components.ActionMap import ActionMap, HelpableActionMap, NumberActionMap
 from Components.Harddisk import harddiskmanager, findMountPoint
 from Components.Input import Input
@@ -55,9 +58,11 @@
 from keyids import KEYIDS
 from datetime import datetime
 import itertools, datetime
-from sys import maxint
+from sys import maxsize
 
-import os, cPickle
+import os
+from six.moves import cPickle as pickle
+import six
 
 # hack alert!
 from Screens.Menu import MainMenu, Menu, mdom
@@ -70,6 +75,8 @@
 jump_last_pts = None
 jump_last_pos = None
 
+onzap_show_infobar = True
+
 if fileExists("/usr/lib/enigma2/python/Plugins/Extensions/CoolTVGuide/plugin.pyo"):
 	COOLTVGUIDE = True
 else:
@@ -99,7 +106,7 @@
 				else:
 					l = None
 				resumePointCache[key] = [lru, pos[1], l]
-				for k, v in resumePointCache.items():
+				for k, v in list(resumePointCache.items()):
 					if v[0] < lru:
 						candidate = k
 						filepath = os.path.realpath(candidate.split(':')[-1])
@@ -131,20 +138,20 @@
 	global resumePointCache, resumePointCacheLast
 	try:
 		f = open('/etc/enigma2/resumepoints.pkl', 'wb')
-		cPickle.dump(resumePointCache, f, cPickle.HIGHEST_PROTOCOL)
+		pickle.dump(resumePointCache, f, pickle.HIGHEST_PROTOCOL)
 		f.close()
-	except Exception, ex:
-		print "[InfoBar] Failed to write resumepoints:", ex
+	except Exception as ex:
+		print("[InfoBar] Failed to write resumepoints:", ex)
 	resumePointCacheLast = int(time())
 
 def loadResumePoints():
 	try:
 		file = open('/etc/enigma2/resumepoints.pkl', 'rb')
-		PickleFile = cPickle.load(file)
+		PickleFile = pickle.load(file)
 		file.close()
 		return PickleFile
-	except Exception, ex:
-		print "[InfoBar] Failed to load resumepoints:", ex
+	except Exception as ex:
+		print("[InfoBar] Failed to load resumepoints:", ex)
 		return {}
 
 def updateresumePointCache():
@@ -153,7 +160,7 @@
 
 def ToggleVideo():
 	mode = open("/proc/stb/video/policy").read()[:-1]
-	print mode
+	print(mode)
 	if mode == "letterbox":
 		f = open("/proc/stb/video/policy", "w")
 		f.write("panscan")
@@ -178,7 +185,7 @@
 			groupedservices = "/etc/enigma2/groupedservices"
 			if not os.path.isfile(groupedservices):
 				groupedservices = "/usr/share/enigma2/groupedservices"
-			subservice_groupslist = [list(g) for k,g in itertools.groupby([line.split('#')[0].strip() for line in open(groupedservices).readlines()], lambda x:not x) if not k]
+			subservice_groupslist = [list(g) for k, g in itertools.groupby([line.split('#')[0].strip() for line in open(groupedservices).readlines()], lambda x:not x) if not k]
 		except:
 			subservice_groupslist = []
 reload_subservice_groupslist()
@@ -219,7 +226,7 @@
 
 class InfoBarLongKeyDetection:
 	def __init__(self):
-		eActionMap.getInstance().bindAction('', -maxint -1, self.detection) #highest prio
+		eActionMap.getInstance().bindAction('', -maxsize -1, self.detection) #highest prio
 		self.LongButtonPressed = False
 
 	#this function is called on every keypress!
@@ -238,20 +245,20 @@
 		self.checkUnusedTimer = eTimer()
 		self.checkUnusedTimer.callback.append(self.checkUnused)
 		self.onLayoutFinish.append(self.unhandledKeyDialog.hide)
-		eActionMap.getInstance().bindAction('', -maxint -1, self.actionA) #highest prio
-		eActionMap.getInstance().bindAction('', maxint, self.actionB) #lowest prio
+		eActionMap.getInstance().bindAction('', -maxsize -1, self.actionA) #highest prio
+		eActionMap.getInstance().bindAction('', maxsize, self.actionB) #lowest prio
 		self.flags = (1<<1)
 		self.uflags = 0
 
 	#this function is called on every keypress!
 	def actionA(self, key, flag):
 		try:
-			print 'KEY: %s %s %s %s' % (key,flag,(key_name for key_name,value in KEYIDS.items() if value==key).next(),getKeyDescription(key)[0])
+			print('KEY: %s %s %s %s' % (key, flag, six.next(key_name for key_name, value in list(KEYIDS.items()) if value==key), getKeyDescription(key)[0]))
 		except:
 			try:
-				print 'KEY: %s %s %s' % (key,flag,(key_name for key_name,value in KEYIDS.items() if value==key).next()) # inverse dictionary lookup in KEYIDS
+				print('KEY: %s %s %s' % (key, flag, six.next(key_name for key_name, value in list(KEYIDS.items()) if value==key))) # inverse dictionary lookup in KEYIDS
 			except:
-				print 'KEY: %s %s' % (key,flag)
+				print('KEY: %s %s' % (key, flag))
 		self.unhandledKeyDialog.hide()
 		if self.closeSIB(key) and self.secondInfoBarScreen and self.secondInfoBarScreen.shown:
 			self.secondInfoBarScreen.hide()
@@ -324,7 +331,7 @@
 				except:
 					pass
 			self.screensaver.show()
-			eActionMap.getInstance().bindAction('', -maxint - 1, self.keypressScreenSaver)
+			eActionMap.getInstance().bindAction('', -maxsize - 1, self.keypressScreenSaver)
 
 	def keypressScreenSaver(self, key, flag):
 		if flag:
@@ -528,7 +535,7 @@
 			else:
 				self["channel"].setText(_("unknown service"))
 
-	def sort_func(self,x,y):
+	def sort_func(self, x, y):
 		if x[1] < y[1]:
 			return -1
 		elif x[1] == y[1]:
@@ -592,7 +599,7 @@
 	skipToggleShow = False
 
 	def __init__(self):
-		self["ShowHideActions"] = ActionMap( ["InfobarShowHideActions"] ,
+		self["ShowHideActions"] = ActionMap( ["InfobarShowHideActions"],
 			{
 				"LongOKPressed": self.toggleShowLong,
 				"toggleShow": self.OkPressed,
@@ -699,7 +706,7 @@
 
 	def doWriteAlpha(self, value):
 		if fileExists("/proc/stb/video/alpha"):
-			f=open("/proc/stb/video/alpha","w")
+			f=open("/proc/stb/video/alpha", "w")
 			f.write("%i" % (value))
 			f.close()
 			if value == config.av.osd_alpha.value:
@@ -719,7 +726,7 @@
 			self.unDimmingTimer.callback.append(self.unDimming)
 			self.unDimmingTimer.start(300, True)
 
-	def keyHide(self, SHOW=True):
+	def keyHide(self, SHOW=True, pipout=True):
 		if self.__state == self.STATE_HIDDEN:
 			ref = self.session.nav.getCurrentlyPlayingServiceOrGroup()
 			if ref:
@@ -733,12 +740,12 @@
 				if self.secondInfoBarScreen and self.secondInfoBarScreen.shown:
 					self.secondInfoBarScreen.hide()
 					self.secondInfoBarWasShown = False
-			if self.session.pipshown and "popup" in config.usage.pip_hideOnExit.value:
-				if config.usage.pip_hideOnExit.value == "popup":
-					self.session.openWithCallback(self.hidePipOnExitCallback, MessageBox, _("Disable Picture in Picture"), simple=True)
-				else:
-					self.hidePipOnExitCallback(True)
-		else:
+			if pipout:
+				if self.session.pipshown and "popup" in config.usage.pip_hideOnExit.value:
+					if config.usage.pip_hideOnExit.value == "popup":
+						self.session.openWithCallback(self.hidePipOnExitCallback, MessageBox, _("Disable Picture in Picture"), simple=True)
+					else:
+						self.hidePipOnExitCallback(True)
 			self.hide()
 			if hasattr(self, "pvrStateDialog"):
 				try:
@@ -761,7 +768,11 @@
 	def serviceStarted(self):
 		if self.execing:
 			if config.usage.show_infobar_on_zap.value:
-				self.doShow()
+				global onzap_show_infobar
+				if onzap_show_infobar:
+					#to-do:  Information panel show on PiP right window on sid-by-side mode
+					if not InfoBarPiP.pipWindowActive:
+						self.doShow()
 		self.showHideVBI()
 
 	def startHideTimer(self):
@@ -838,7 +849,11 @@
 		if not self.LongButtonPressed:
 			if self.__state == self.STATE_HIDDEN:
 				if not self.secondInfoBarWasShown or (config.usage.show_second_infobar.value == "1" and not self.EventViewIsShown):
-					self.show()
+					if hasattr(self.session, "pip") and InfoBarPiP.pipWindowActive:
+						#to-do:  Information panel show on PiP right window on sid-by-side mode by OK button pressed
+						self.session.open(MessageBox, _('This feature is currently unavailable!'), type=MessageBox.TYPE_INFO, timeout=10)
+					else:
+						self.show()
 				if self.secondInfoBarScreen:
 					self.secondInfoBarScreen.hide()
 				self.secondInfoBarWasShown = False
@@ -879,8 +894,8 @@
 				if isinstance(self, InfoBarEPG):
 					if config.plisettings.InfoBarEpg_mode.value == "1":
 						self.openInfoBarEPG()
-		except Exception, e:
-			print "[InfoBarGenerics] 'toggleShowLong' failed:", e
+		except Exception as e:
+			print("[InfoBarGenerics] 'toggleShowLong' failed:", e)
 
 	def lockShow(self):
 		try:
@@ -910,7 +925,14 @@
 				return
 		except:
 			simple = True
-		ref = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+		if hasattr(self.session, "pip") and InfoBarPiP.pipWindowActive:
+			ref = self.session.pip.getCurrentService()
+			#to-do:  Show information on PiP right window on side-by-side mode by INFO button pressed
+			if self.session.pip.getCurrentServicePtrPiP() is None:
+				self.session.open(MessageBox, _('This feature is currently unavailable!'), type=MessageBox.TYPE_INFO, timeout=10)
+				return
+		else:
+			ref = self.session.nav.getCurrentlyPlayingServiceOrGroup()
 		self.getNowNext()
 		epglist = self.epglist
 		if not epglist:
@@ -934,7 +956,14 @@
 
 	def getNowNext(self):
 		epglist = [ ]
-		service = self.session.nav.getCurrentService()
+		if hasattr(self.session, "pip") and InfoBarPiP.pipWindowActive:
+			#to-do:  PiP -> getCurrentService   -  convert to ePtr< iPlayableService >
+			if self.session.pip.getCurrentServicePtrPiP() is not None:
+				service = self.session.pip.getCurrentServicePtrPiP()
+			else:	
+				service = self.session.nav.getCurrentService()
+		else:
+			service = self.session.nav.getCurrentService()
 		info = service and service.info()
 		ptr = info and info.getEvent(0)
 		if ptr:
@@ -973,7 +1002,7 @@
 					self.runPlugin(plugin)
 					break
 		else:
-			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def showCoolSingleGuide(self):
 		if self.servicelist is None:
@@ -984,7 +1013,7 @@
 					self.runPlugin(plugin)
 					break
 		else:
-			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def showCoolTVGuide(self):
 		if self.servicelist is None:
@@ -995,7 +1024,7 @@
 					self.runPlugin(plugin)
 					break
 		else:
-			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def showCoolEasyGuide(self):
 		if self.servicelist is None:
@@ -1006,7 +1035,7 @@
 					self.runPlugin(plugin)
 					break
 		else:
-			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def showCoolChannelGuide(self):
 		if self.servicelist is None:
@@ -1017,7 +1046,7 @@
 					self.runPlugin(plugin)
 					break
 		else:
-			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def checkHideVBI(self):
 		service = self.session.nav.getCurrentlyPlayingServiceReference()
@@ -1196,7 +1225,7 @@
 			})
 
 	def keyNumberGlobal(self, number):
-		if self.pvrStateDialog.has_key("PTSSeekPointer") and self.timeshiftEnabled() and self.isSeekable():
+		if "PTSSeekPointer" in self.pvrStateDialog and self.timeshiftEnabled() and self.isSeekable():
 			InfoBarTimeshiftState._mayShow(self)
 			self.pvrStateDialog["PTSSeekPointer"].setPosition((self.pvrStateDialog["PTSSeekBack"].instance.size().width()-4)/2, self.pvrStateDialog["PTSSeekPointer"].position[1])
 			if self.seekstate != self.SEEK_STATE_PLAY:
@@ -1217,7 +1246,7 @@
 			elif len(self.servicelist.history) > 1 or config.usage.panicbutton.value:
 				self.checkTimeshiftRunning(self.recallPrevService)
 		else:
-			if self.has_key("TimeshiftActions") and self.timeshiftEnabled():
+			if "TimeshiftActions" in self and self.timeshiftEnabled():
 				ts = self.getTimeshift()
 				if ts and ts.isTimeshiftActive():
 					return
@@ -1440,7 +1469,7 @@
 
 	def switchChannelUp(self):
 		if not self.secondInfoBarScreen or not self.secondInfoBarScreen.shown:
-			self.keyHide(False)
+			self.keyHide(False, False)
 			if not self.LongButtonPressed or SystemInfo.get("NumVideoDecoders", 1) <= 1:
 				if not config.usage.show_bouquetalways.value:
 					if "keep" not in config.usage.servicelist_cursor_behavior.value:
@@ -1460,7 +1489,7 @@
 
 	def switchChannelDown(self):
 		if not self.secondInfoBarScreen or not self.secondInfoBarScreen.shown:
-			self.keyHide(False)
+			self.keyHide(False, False)
 			if not self.LongButtonPressed or SystemInfo.get("NumVideoDecoders", 1) <= 1:
 				if not config.usage.show_bouquetalways.value:
 					if "keep" not in config.usage.servicelist_cursor_behavior.value:
@@ -1562,6 +1591,7 @@
 			if self.servicelist.inBouquet():
 				prev = self.servicelist.getCurrentSelection()
 				if prev:
+					currbo = self.servicelist.getRoot()
 					prev = prev.toString()
 					while True:
 						if config.usage.quickzap_bouquet_change.value and self.servicelist.atEnd():
@@ -1570,6 +1600,7 @@
 						else:
 							self.servicelist.moveDown()
 						cur = self.servicelist.getCurrentSelection()
+						currbo_new = self.servicelist.getRoot()
 						if cur:
 							if self.servicelist.dopipzap:
 								isPlayable = self.session.pip.isPlayableForPipService(cur)
@@ -1578,7 +1609,11 @@
 						if cur and (cur.toString() == prev or isPlayable):
 							break
 			else:
+				currservice = self.servicelist.getCurrentSelection()
+				currbo = self.servicelist.getRoot()
 				self.servicelist.moveDown()
+				currservice_new = self.servicelist.getCurrentSelection()
+				currbo_new = self.servicelist.getRoot()
 			self.servicelist.zap(enable_pipzap = True)
 		elif self.LongButtonPressed:
 			if not hasattr(self.session, 'pip') and not self.session.pipshown:
@@ -1619,7 +1654,7 @@
 	def volumeDown(self):
 		VolumeControl.instance.volDown()
 		
-	def zapDownToPiP(self):
+	def zapDownToPiP(self, service=None):
 		if self.pts_blockZap_timer.isActive():
 			return
 		self["SeekActionsPTS"].setEnabled(False)
@@ -1643,11 +1678,10 @@
 						break
 		else:
 			self.servicelist.moveDown()
-		self.servicelist.zap(enable_pipzap = True)
 		if self.timeshiftEnabled() and self.isSeekable():
 			self["SeekActionsPTS"].setEnabled(True)
 			
-	def zapUpToPiP(self):
+	def zapUpToPiP(self, service=None):
 		if self.pts_blockZap_timer.isActive():
 			return
 		self["SeekActionsPTS"].setEnabled(False)
@@ -1671,7 +1705,6 @@
 						break
 		else:
 			self.servicelist.moveUp()
-		self.servicelist.zap(enable_pipzap = True)
 		if self.timeshiftEnabled() and self.isSeekable():
 			self["SeekActionsPTS"].setEnabled(True)
 
@@ -2002,24 +2035,33 @@
 			self.toggleShow()
 			return 1
 
-	def zapToService(self, service, bouquet = None, preview = False, zapback = False):
-		if self.servicelist.startServiceRef is None:
-			self.servicelist.startServiceRef = self.session.nav.getCurrentlyPlayingServiceOrGroup()
-		self.servicelist.currentServiceRef = self.session.nav.getCurrentlyPlayingServiceOrGroup()
-		if service is not None:
-			if self.servicelist.getRoot() != bouquet: #already in correct bouquet?
-				self.servicelist.clearPath()
-				if self.servicelist.bouquet_root != bouquet:
-					self.servicelist.enterPath(self.servicelist.bouquet_root)
-				self.servicelist.enterPath(bouquet)
-			self.servicelist.setCurrentSelection(service) #select the service in servicelist
-		if not zapback or preview:
-			self.servicelist.zap(preview_zap = preview)
-		if (self.servicelist.dopipzap or zapback) and not preview:
-			self.servicelist.zapBack()
-		if not preview:
-			self.servicelist.startServiceRef = None
-			self.servicelist.startRoot = None
+	def zapToService(self, service, bouquet = None, preview = False, zapback = False, zaptolist=False):
+		if zaptolist:
+			self.zapToServiceinList(service, bouquet)
+		else:
+			if self.servicelist.startServiceRef is None:
+				self.servicelist.startServiceRef = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+			self.servicelist.currentServiceRef = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+			if service is not None:
+				if self.servicelist.getRoot() != bouquet: #already in correct bouquet?
+					self.servicelist.clearPath()
+					if self.servicelist.bouquet_root != bouquet:
+						self.servicelist.enterPath(self.servicelist.bouquet_root)
+					self.servicelist.enterPath(bouquet)
+				self.servicelist.setCurrentSelection(service) #select the service in servicelist
+			if not zapback or preview:
+				self.servicelist.zap(preview_zap = preview)
+			if (self.servicelist.dopipzap or zapback) and not preview:
+				self.servicelist.zapBack()
+			if not preview:
+				self.servicelist.startServiceRef = None
+				self.servicelist.startRoot = None
+
+	def zapToServiceinList(self, service=None, bouquet=None):
+		if service is not None and bouquet is not None:
+			if hasattr(self, 'servicelist') and self.servicelist:
+				self.servicelist.enterUserbouquet(bouquet, save_root=False)
+				self.servicelist.setCurrentSelection(service)
 
 	def getBouquetServices(self, bouquet):
 		services = []
@@ -2131,7 +2173,7 @@
 					self.runPlugin(plugin)
 					break
 		else:
-			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def SingleServiceEPG(self):
 		self.StartBouquet = self.servicelist.getRoot()
@@ -2144,7 +2186,7 @@
 			services = self.getBouquetServices(self.StartBouquet)
 			self.serviceSel = SimpleServicelist(services)
 			if self.serviceSel.selectService(ref):
-				self.session.openWithCallback(self.SingleServiceEPGClosed,EPGSelection, self.servicelist, zapFunc=self.zapToService, serviceChangeCB = self.changeServiceCB, EPGtype=self.EPGtype, StartBouquet=self.StartBouquet, StartRef=self.StartRef)
+				self.session.openWithCallback(self.SingleServiceEPGClosed, EPGSelection, self.servicelist, zapFunc=self.zapToService, serviceChangeCB = self.changeServiceCB, EPGtype=self.EPGtype, StartBouquet=self.StartBouquet, StartRef=self.StartRef)
 			else:
 				self.session.openWithCallback(self.SingleServiceEPGClosed, EPGSelection, ref)
 
@@ -2174,13 +2216,13 @@
 	def openMerlinEPGCenter(self):
 		if self.servicelist is None:
 			return
-		if fileExists("/usr/lib/enigma2/python/Plugins/Extensions/MerlinEPGCenter/plugin.pyo"):
+		if fileExists("/usr/lib/enigma2/python/Plugins/Extensions/MerlinEPGCenter/plugin.py*"):
 			for plugin in plugins.getPlugins([PluginDescriptor.WHERE_EXTENSIONSMENU, PluginDescriptor.WHERE_EVENTINFO]):
 				if plugin.name == _("Merlin EPG Center"):
 					self.runPlugin(plugin)
 					break
 		else:
-			self.session.open(MessageBox, _("The Merlin EPG Center plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+			self.session.open(MessageBox, _("The Merlin EPG Center plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def showCoolInfoGuide(self):
 		if self.servicelist is None:
@@ -2191,7 +2233,7 @@
 					self.runPlugin(plugin)
 					break
 		else:
-			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 	
 	def showCoolSingleGuide(self):
 		if self.servicelist is None:
@@ -2202,7 +2244,7 @@
 					self.runPlugin(plugin)
 					break
 		else:
-			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+			self.session.open(MessageBox, _("The Cool TV Guide plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def openSimilarList(self, eventid, refstr):
 		self.session.open(EPGSelection, refstr, eventid=eventid)
@@ -2230,6 +2272,11 @@
 		if self.defaultEPGType is not None:
 			self.defaultEPGType()
 			return
+		global onzap_show_infobar
+		if hasattr(self.session, "pip"):
+			onzap_show_infobar = False
+		else:
+			onzap_show_infobar = True
 		self.EPGPressed()
 
 	def openEventView(self, simple=False):
@@ -2281,7 +2328,7 @@
 		self["RdsActions"] = ActionMap(["InfobarRdsActions"],
 		{
 			"startRassInteractive": self.startRassInteractive
-		},-1)
+		}, -1)
 
 		self["RdsActions"].setEnabled(False)
 
@@ -2550,7 +2597,7 @@
 
 		global seek_withjumps_muted
 		if seek_withjumps_muted and eDVBVolumecontrol.getInstance().isMuted():
-			print "STILL MUTED AFTER FFWD/FBACK !!!!!!!! so we unMute"
+			print("STILL MUTED AFTER FFWD/FBACK !!!!!!!! so we unMute")
 			seek_withjumps_muted = False
 			eDVBVolumecontrol.getInstance().volumeUnMute()
 
@@ -2660,7 +2707,7 @@
 			self.unPauseService()
 
 	def playpauseService(self):
-		if self.seekAction <> 0:
+		if self.seekAction != 0:
 			self.seekAction = 0
 			self.doPause(False)
 			global seek_withjumps_muted
@@ -2697,7 +2744,7 @@
 	def unPauseService(self):
 		SystemInfo["StatePlayPause"] = False
 		if self.seekstate == self.SEEK_STATE_PLAY:
-			if self.seekAction <> 0: self.playpauseService()
+			if self.seekAction != 0: self.playpauseService()
 			#return 0 # if 'return 0', plays timeshift again from the beginning
 			return
 		self.doPause(False)
@@ -2743,7 +2790,7 @@
 
 	def doSeekRelative(self, pts):
 		try:
-			if "<class 'Screens.InfoBar.InfoBar'>" in `self`:
+			if "<class 'Screens.InfoBar.InfoBar'>" in repr(self):
 				if InfoBarTimeshift.timeshiftEnabled(self):
 					length = InfoBarTimeshift.ptsGetLength(self)
 					position = InfoBarTimeshift.ptsGetPosition(self)
@@ -2759,7 +2806,7 @@
 						return
 		except:
 			from sys import exc_info
-			print "[InfoBarGenerics] error in 'def doSeekRelative'", exc_info()[:2]
+			print("[InfoBarGenerics] error in 'def doSeekRelative'", exc_info()[:2])
 
 		seekable = self.getSeek()
 		if seekable is None or int(seekable.getLength()[1]) < 1:
@@ -2777,9 +2824,9 @@
 
 	def DoSeekAction(self):
 		if self.seekAction > int(config.seek.withjumps_after_ff_speed.getValue()):
-			self.doSeekRelativeAvoidStall(self.seekAction * long(config.seek.withjumps_forwards_ms.getValue()) * 90)
+			self.doSeekRelativeAvoidStall(self.seekAction * int(config.seek.withjumps_forwards_ms.getValue()) * 90)
 		elif self.seekAction < 0:
-			self.doSeekRelativeAvoidStall(self.seekAction * long(config.seek.withjumps_backwards_ms.getValue()) * 90)
+			self.doSeekRelativeAvoidStall(self.seekAction * int(config.seek.withjumps_backwards_ms.getValue()) * 90)
 
 		for c in self.onPlayStateChanged:
 			if self.seekAction > int(config.seek.withjumps_after_ff_speed.getValue()): # Forward
@@ -2993,7 +3040,7 @@
 			if not len[0] and not pos[0]:
 				if len[1] <= pos[1]:
 					return 0
-				time = (len[1] - pos[1])*speedden/(90*speednom)
+				time = (len[1] - pos[1])*speedden//(90*speednom)
 				return time
 		return False
 
@@ -3003,7 +3050,7 @@
 
 		global seek_withjumps_muted
 		if seek_withjumps_muted and eDVBVolumecontrol.getInstance().isMuted():
-			print "STILL MUTED AFTER FFWD/FBACK !!!!!!!! so we unMute"
+			print("STILL MUTED AFTER FFWD/FBACK !!!!!!!! so we unMute")
 			seek_withjumps_muted = False
 			eDVBVolumecontrol.getInstance().volumeUnMute()
 
@@ -3043,7 +3090,7 @@
 		return InfoBarMoviePlayerSummary
 
 	def _mayShow(self):
-		if self.has_key("state") and not config.usage.movieplayer_pvrstate.value:
+		if "state" in self and not config.usage.movieplayer_pvrstate.value:
 			self["state"].setText("")
 			self["statusicon"].setPixmapNum(6)
 			self["speed"].setText("")
@@ -3056,14 +3103,14 @@
 	def __playStateChanged(self, state):
 		playstateString = state[3]
 		state_summary = playstateString
-		if self.pvrStateDialog.has_key("statusicon"):
+		if "statusicon" in self.pvrStateDialog:
 			self.pvrStateDialog["state"].setText(playstateString)
 			if playstateString == '>':
 				self.pvrStateDialog["statusicon"].setPixmapNum(0)
 				self.pvrStateDialog["speed"].setText("")
 				speed_summary = self.pvrStateDialog["speed"].text
 				statusicon_summary = 0
-				if self.has_key("state") and config.usage.movieplayer_pvrstate.value:
+				if "state" in self and config.usage.movieplayer_pvrstate.value:
 					self["state"].setText(playstateString)
 					self["statusicon"].setPixmapNum(0)
 					self["speed"].setText("")
@@ -3072,7 +3119,7 @@
 				self.pvrStateDialog["speed"].setText("")
 				speed_summary = self.pvrStateDialog["speed"].text
 				statusicon_summary = 1
-				if self.has_key("state") and config.usage.movieplayer_pvrstate.value:
+				if "state" in self and config.usage.movieplayer_pvrstate.value:
 					self["state"].setText(playstateString)
 					self["statusicon"].setPixmapNum(1)
 					self["speed"].setText("")
@@ -3081,7 +3128,7 @@
 				self.pvrStateDialog["speed"].setText("")
 				speed_summary = self.pvrStateDialog["speed"].text
 				statusicon_summary = 2
-				if self.has_key("state") and config.usage.movieplayer_pvrstate.value:
+				if "state" in self and config.usage.movieplayer_pvrstate.value:
 					self["state"].setText(playstateString)
 					self["statusicon"].setPixmapNum(2)
 					self["speed"].setText("")
@@ -3091,7 +3138,7 @@
 				self.pvrStateDialog["speed"].setText(speed[1])
 				speed_summary = self.pvrStateDialog["speed"].text
 				statusicon_summary = 3
-				if self.has_key("state") and config.usage.movieplayer_pvrstate.value:
+				if "state" in self and config.usage.movieplayer_pvrstate.value:
 					self["state"].setText(playstateString)
 					self["statusicon"].setPixmapNum(3)
 					self["speed"].setText(speed[1])
@@ -3101,7 +3148,7 @@
 				self.pvrStateDialog["speed"].setText(speed[1])
 				speed_summary = self.pvrStateDialog["speed"].text
 				statusicon_summary = 4
-				if self.has_key("state") and config.usage.movieplayer_pvrstate.value:
+				if "state" in self and config.usage.movieplayer_pvrstate.value:
 					self["state"].setText(playstateString)
 					self["statusicon"].setPixmapNum(4)
 					self["speed"].setText(speed[1])
@@ -3110,7 +3157,7 @@
 				self.pvrStateDialog["speed"].setText(playstateString)
 				speed_summary = self.pvrStateDialog["speed"].text
 				statusicon_summary = 5
-				if self.has_key("state") and config.usage.movieplayer_pvrstate.value:
+				if "state" in self and config.usage.movieplayer_pvrstate.value:
 					self["state"].setText(playstateString)
 					self["statusicon"].setPixmapNum(5)
 					self["speed"].setText(playstateString)
@@ -3143,9 +3190,9 @@
 		self["TimeshiftSeekPointerActions"].setEnabled(False)
 		self.pvrStateDialog.hide()
 
-	def __timeshiftEventName(self,state):
-		if self.timeshiftEnabled() and os.path.exists("%spts_livebuffer_%s.meta" % (config.usage.timeshift_path.value,self.pts_currplaying)):
-			readmetafile = open("%spts_livebuffer_%s.meta" % (config.usage.timeshift_path.value,self.pts_currplaying), "r")
+	def __timeshiftEventName(self, state):
+		if self.timeshiftEnabled() and os.path.exists("%spts_livebuffer_%s.meta" % (config.usage.timeshift_path.value, self.pts_currplaying)):
+			readmetafile = open("%spts_livebuffer_%s.meta" % (config.usage.timeshift_path.value, self.pts_currplaying), "r")
 			servicerefname = readmetafile.readline()[0:-1]
 			eventname = readmetafile.readline()[0:-1]
 			readmetafile.close()
@@ -3229,7 +3276,7 @@
 			else:
 				self.showExtensionSelection()
 		except:
-			print "[INFOBARGENERICS] QuickMenu: error pipshow, starting Quick Menu"
+			print("[INFOBARGENERICS] QuickMenu: error pipshow, starting Quick Menu")
 			from Plugins.Extensions.Infopanel.QuickMenu import QuickMenu
 			self.session.open(QuickMenu)
 
@@ -3304,12 +3351,12 @@
 	def updateExtension(self, extension, key = None):
 		self.extensionsList.append(extension)
 		if key is not None:
-			if self.extensionKeys.has_key(key):
+			if key in self.extensionKeys:
 				key = None
 
 		if key is None:
 			for x in self.availableKeys:
-				if not self.extensionKeys.has_key(x):
+				if x not in self.extensionKeys:
 					key = x
 					break
 
@@ -3337,7 +3384,7 @@
 		new_list = []
 		colorlist = []
 		for x in self.availableKeys:
-			if self.extensionKeys.has_key(x):
+			if x in self.extensionKeys:
 				entry = self.extensionKeys[x]
 				extension = self.extensionsList[entry]
 				if extension[2]():
@@ -3434,10 +3481,10 @@
 			from Plugins.Extensions.Infopanel.RestartNetwork import RestartNetwork
 			self.session.open(RestartNetwork)
 		except:
-			print'[INFOBARGENERICS] failed to restart network'
+			print('[INFOBARGENERICS] failed to restart network')
 
 	def showAutoTimerList(self):
-		if os.path.exists("/usr/lib/enigma2/python/Plugins/Extensions/AutoTimer/plugin.pyo"):
+		if os.path.exists("/usr/lib/enigma2/python/Plugins/Extensions/AutoTimer/plugin.py*"):
 			from Plugins.Extensions.AutoTimer.plugin import main, autostart
 			from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
 			from Plugins.Extensions.AutoTimer.AutoPoller import AutoPoller
@@ -3465,7 +3512,7 @@
 				self.autotimer
 			)
 		else:
-			self.session.open(MessageBox, _("The AutoTimer plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+			self.session.open(MessageBox, _("The AutoTimer plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def editCallback(self, session):
 		# XXX: canceling of GUI (Overview) won't affect config values which might have been changed - is this intended?
@@ -3499,7 +3546,7 @@
 				name = self.session.nav.getCurrentlyPlayingServiceOrGroup().toString()
 				name = name.split('/')
 				name = name[-1]
-				name = name.replace('.',' ')
+				name = name.replace('.', ' ')
 				name = name.split('-')
 				name = name[0]
 				if name.endswith(' '):
@@ -3512,7 +3559,7 @@
 			self.session.open(EPGSearch)
 
 	def showIMDB(self):
-		if os.path.exists("/usr/lib/enigma2/python/Plugins/Extensions/IMDb/plugin.pyo"):
+		if os.path.exists("/usr/lib/enigma2/python/Plugins/Extensions/IMDb/plugin.py*"):
 			from Plugins.Extensions.IMDb.plugin import IMDB
 			s = self.session.nav.getCurrentService()
 			if s:
@@ -3521,7 +3568,7 @@
 				name = event and event.getEventName() or ''
 				self.session.open(IMDB, name)
 		else:
-			self.session.open(MessageBox, _("The IMDb plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+			self.session.open(MessageBox, _("The IMDb plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def showMediaPlayer(self):
 		if isinstance(self, InfoBarExtensions):
@@ -3530,15 +3577,15 @@
 					from Plugins.Extensions.MediaPlayer.plugin import MediaPlayer
 					self.session.open(MediaPlayer)
 					no_plugin = False
-				except Exception, e:
-					self.session.open(MessageBox, _("The MediaPlayer plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+				except Exception as e:
+					self.session.open(MessageBox, _("The MediaPlayer plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def showDreamPlex(self):
-		if os.path.exists("/usr/lib/enigma2/python/Plugins/Extensions/DreamPlex/plugin.pyo"):
+		if os.path.exists("/usr/lib/enigma2/python/Plugins/Extensions/DreamPlex/plugin.py*"):
 			from Plugins.Extensions.DreamPlex.plugin import DPS_MainMenu
 			self.session.open(DPS_MainMenu)
 		else:
-			self.session.open(MessageBox, _("The DreamPlex plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )					
+			self.session.open(MessageBox, _("The DreamPlex plugin is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )					
 
 from Tools.BoundFunction import boundFunction
 import inspect
@@ -3566,8 +3613,8 @@
 		else:
 			try:
 				plugin(session = self.session)
-			except Exception, err:
-				print '[InfoBarGenerics] Error: ', err
+			except Exception as err:
+				print('[InfoBarGenerics] Error: ', err)
 
 from Components.Task import job_manager
 class InfoBarJobman:
@@ -3593,6 +3640,8 @@
 
 # depends on InfoBarExtensions
 class InfoBarPiP:
+	
+	pipWindowActive = False
 	def __init__(self):
 		try:
 			self.session.pipshown
@@ -3600,7 +3649,6 @@
 			self.session.pipshown = False
 			
 		self.lastPiPService = None
-		self.TogglePiPZapSidebySide = False
 
 		if SystemInfo["PIPAvailable"] and isinstance(self, InfoBarEPG):
 			self["PiPActions"] = HelpableActionMap(self, "InfobarPiPActions",
@@ -3719,7 +3767,7 @@
 			("standard", _("Standard")), ("noadspip", _("Ads filtering mode")), ("byside", _("Side by side mode")) ])
 		if self.session.pipshown:
 			if config.usage.pip_mode.value == "standard":
-				return _("PiP standard Setup")
+				return _("PiP size and position change")
 			else:
 				if config.usage.pip_mode.value == "noadspip":
 					return _("Close Picture in Picture screen")
@@ -3776,15 +3824,20 @@
 			if slist and slist.dopipzap:
 				self.togglePipzap()
 			if self.session.pipshown:
+				currentBouquet = self.session.pip.getCurrentBouquetMain()
+				navCurrentService = self.session.nav.getCurrentlyPlayingServiceOrGroup()
 				lastPiPServiceTimeout = int(config.usage.pip_last_service_timeout.value)
 				if lastPiPServiceTimeout >= 0:
 					self.lastPiPService = self.session.pip.getCurrentServiceReference()
 					if lastPiPServiceTimeout:
 						self.lastPiPServiceTimeoutTimer.startLongTimer(lastPiPServiceTimeout)
+				self.session.pip.inactive()
+				self.session.pip.inactiveToogle()
+				self.session.pip.inactiveSide()
 				del self.session.pip
 				if SystemInfo["LCDMiniTV"]:
 					if config.lcd.modepip.value >= "1":
-						print '[LCDMiniTV] disable PIP'
+						print('[LCDMiniTV] disable PIP')
 						f = open("/proc/stb/lcd/mode", "w")
 						f.write(config.lcd.modeminitv.value)
 						f.close()
@@ -3792,21 +3845,28 @@
 				config.usage.pip_lastusage = ConfigInteger(default = int(time()))
 				config.usage.pip_lastusage.setValue(int(time())-1)
 				config.usage.pip_lastusage.save()
-				configfile.save()													 
+				configfile.save()
+				self.zapToServiceinList(navCurrentService, currentBouquet)
+				self.session.nav.playService(navCurrentService, checkParentalControl=False, adjust=False)
 			if hasattr(self, "ScreenSaverTimerStart"):
 				self.ScreenSaverTimerStart()
 		else:
+			curServicePath = self.servicelist.getCurrentServicePath()
+			curBouquet = curServicePath[1]
+			curservice = curServicePath[2]
 			if config.usage.pip_mode.value == "standard":
 				service = self.session.nav.getCurrentService()
 			if config.usage.pip_mode.value == "noadspip":
 				newservice = self.servicelist.getCurrentSelection()
 				if InfoBar and InfoBar.instance:
 					InfoBar.zapDownToPiP(InfoBar.instance)
+				self.session.nav.playService(self.servicelist.getCurrentSelection(), checkParentalControl=False, adjust=False)
 				service = self.session.nav.getCurrentService()
 			if config.usage.pip_mode.value == "byside":
 				if InfoBar and InfoBar.instance:
 					InfoBar.zapDownToPiP(InfoBar.instance)
 				newservice = self.servicelist.getCurrentSelection()
+				curServicePath[2] = newservice
 				if InfoBar and InfoBar.instance:
 					InfoBar.zapUpToPiP(InfoBar.instance)
 				service = self.session.nav.getCurrentService()
@@ -3819,11 +3879,13 @@
 				self.session.pip.show()
 				if config.usage.pip_mode.value == "standard":
 					newservice = self.lastPiPService or self.session.nav.getCurrentlyPlayingServiceReference() or self.servicelist.servicelist.getCurrent()
-				if self.session.pip.playService(newservice):
+				if self.session.pip.playService(newservice,curBouquet):
+					self.session.pip.setCurrentBouquetMain(curBouquet)
 					self.session.pipshown = True
-					self.session.pip.servicePath = self.servicelist.getCurrentServicePath()
+					InfoBarPiP.pipWindowActive = False
+					self.session.pip.servicePath = curServicePath
 					if SystemInfo["LCDMiniTVPiP"] and int(config.lcd.modepip.value) >= 1:
-						print '[LCDMiniTV] enable PIP'
+						print('[LCDMiniTV] enable PIP')
 						f = open("/proc/stb/lcd/mode", "w")
 						f.write(config.lcd.modepip.value)
 						f.close()
@@ -3839,11 +3901,13 @@
 				else:
 					if config.usage.pip_mode.value == "standard":
 						newservice = self.session.nav.getCurrentlyPlayingServiceReference() or self.servicelist.servicelist.getCurrent()
-					if self.session.pip.playService(newservice):
+					if self.session.pip.playService(newservice,curBouquet):
+						self.session.pip.setCurrentBouquetMain(curBouquet)
 						self.session.pipshown = True
+						InfoBarPiP.pipWindowActive = False
 						self.session.pip.servicePath = self.servicelist.getCurrentServicePath()
 						if SystemInfo["LCDMiniTVPiP"] and int(config.lcd.modepip.value) >= 1:
-							print '[LCDMiniTV] enable PIP'
+							print('[LCDMiniTV] enable PIP')
 							f = open("/proc/stb/lcd/mode", "w")
 							f.write(config.lcd.modepip.value)
 							f.close()
@@ -3861,9 +3925,9 @@
 						self.session.pipshown = False
 						del self.session.pip
 			elif info:
-				self.session.open(MessageBox, _("Your %s %s does not support PiP HD") % (getMachineBrand(), getMachineName()), type = MessageBox.TYPE_INFO,timeout = 5 )
+				self.session.open(MessageBox, _("Your %s %s does not support PiP HD") % (getMachineBrand(), getMachineName()), type = MessageBox.TYPE_INFO, timeout = 5 )
 			else:
-				self.session.open(MessageBox, _("No active channel found."), type = MessageBox.TYPE_INFO,timeout = 5 )
+				self.session.open(MessageBox, _("No active channel found."), type = MessageBox.TYPE_INFO, timeout = 5 )
 		if self.session.pipshown and hasattr(self, "screenSaverTimer"):
 			self.screenSaverTimer.stop()
 
@@ -3881,17 +3945,17 @@
 			choicelist.append(("external", _("External PiP")))
 		config.av.pip_mode = ConfigSelection(default="standard", choices=choicelist)
 		config.av.pip = ConfigPosition(default=[510, 28, 180, 135], args = (720, 576, 720, 576))
-		config.usage.show_infobar_on_zap = ConfigYesNo(default = True)
-		config.usage.pip_zero_button = ConfigSelection(default = "standard", choices = [
+		config.av.pip_standard = ConfigPosition(default=[510, 28, 180, 135], args = (720, 576, 720, 576))
+		config.usage.pip_zero_button = ConfigSelection(default = "swap", choices = [
 			("standard", _("Standard")), ("swap", _("Swap PiP and main picture")),
 			("swapstop", _("Move PiP to main picture")), ("stop", _("Stop PiP")) ])
-		config.usage.pip_hideOnExit = ConfigSelection(default = "no", choices = [
+		config.usage.pip_hideOnExit = ConfigSelection(default = "without popup", choices = [
 			("no", _("No")), ("popup", _("With popup")), ("without popup", _("Without popup")) ])
 		choicelist = [("-1", _("Disabled")), ("0", _("No timeout"))]
 		for i in [60, 300, 600, 900, 1800, 2700, 3600]:
 			m = i/60
 			choicelist.append(("%d" % i, ngettext("%d minute", "%d minutes", m) % m))
-		config.usage.pip_last_service_timeout = ConfigSelection(default = "-1", choices = choicelist)
+		config.usage.pip_last_service_timeout = ConfigSelection(default = "0", choices = choicelist)
 		if config.usage.pip_mode.value != "noadspip":
 			self.usageModeChecking()
 		if config.usage.pip_mode.value == "standard":
@@ -3899,13 +3963,12 @@
 				config.av.pip_mode.setValue('standard')
 				config.av.pip_mode.save()
 				configfile.save()
-			config.av.pip.value[0] = 456
-			config.av.pip.value[1] = 60
-			config.av.pip.value[2] = 219
-			config.av.pip.value[3] = 160
+			config.av.pip.value[0] = config.av.pip_standard.value[0]
+			config.av.pip.value[1] = config.av.pip_standard.value[1]
+			config.av.pip.value[2] = config.av.pip_standard.value[2]
+			config.av.pip.value[3] = config.av.pip_standard.value[3]
 			config.av.pip.save()
 			configfile.save()
-			self.show_infobar_on_zap(True)
 			if self.servicelist and self.servicelist.dopipzap or not self.session.pipshown:
 				self.showPiP()
 			else:
@@ -3924,12 +3987,18 @@
 					config.av.pip_mode.setValue('standard')
 					config.av.pip_mode.save()
 					configfile.save()
-				config.av.pip.value[0] = 544
-				config.av.pip.value[1] = 29
-				config.av.pip.value[2] = 153
-				config.av.pip.value[3] = 112
-				config.av.pip.save()
-				configfile.save()
+				if config.usage.pip_position_size_save.value == "standard and noadspip":
+					config.av.pip.value[0] = config.av.pip_noadspip.value[0]
+					config.av.pip.value[1] = config.av.pip_noadspip.value[1]
+					config.av.pip.value[2] = config.av.pip_noadspip.value[2]
+					config.av.pip.value[3] = config.av.pip_noadspip.value[3]
+				else:
+					config.av.pip.value[0] = 544
+					config.av.pip.value[1] = 29
+					config.av.pip.value[2] = 153
+					config.av.pip.value[3] = 112
+					config.av.pip.save()
+					configfile.save()
 				if not self.session.pipshown:
 					self.showPiP()
 				else:
@@ -3944,13 +4013,15 @@
 					config.usage.pip_zero_button.setValue('swap')
 					config.usage.pip_zero_button.save()
 					configfile.save()
-				self.show_infobar_on_zap(False)
+				global onzap_show_infobar
+				onzap_show_infobar = True
 				if not self.session.pipshown:
 					self.showPiP()
 				else:
 					self.swapPiP()
 					self.showPiP()
-				self.show_infobar_on_zap(True)
+				onzap_show_infobar = True
+
 
 	def checkingBlueButton(self):
 		list = [(_("Yes, I'm setting it up now"), True),
@@ -3992,22 +4063,10 @@
 				config.usage.pip_mode.setValue('noadspip')
 				config.usage.pip_mode.save()
 				configfile.save()
-				self.TogglePiPZapSidebySide = False
+				InfoBarPiP.pipWindowActive = False
 		except:
 			return
 
-	def show_infobar_on_zap(self, mode=True):
-		if mode:
-			if not config.usage.show_infobar_on_zap.value:
-				config.usage.show_infobar_on_zap.setValue(True)
-				config.usage.show_infobar_on_zap.save()
-				configfile.save()
-		else:
-			if config.usage.show_infobar_on_zap.value:
-				config.usage.show_infobar_on_zap.setValue(False)
-				config.usage.show_infobar_on_zap.save()
-				configfile.save()
-
 	def activePiPName(self):
 		if self.servicelist and self.servicelist.dopipzap:
 			return _("Disable Picture in Picture")
@@ -4020,15 +4079,22 @@
 		if self.pipShown():
 			swapservice = self.session.nav.getCurrentlyPlayingServiceOrGroup()
 			pipref = self.session.pip.getCurrentService()
+			currboMain = self.session.pip.getCurrentBouquetMain()
+			currboPiP = self.session.pip.getCurrentBouquetPiP()
 			if swapservice and pipref and pipref.toString() != swapservice.toString():
 				currentServicePath = self.servicelist.getCurrentServicePath()
-				currentBouquet = self.servicelist and self.servicelist.getRoot()
+				if currboMain is not None:
+					currentBouquet = currboMain
+				else:
+					currentBouquet = self.servicelist and self.servicelist.getRoot()
 				self.servicelist.setCurrentServicePath(self.session.pip.servicePath, doZap=False)
-				self.session.pip.playService(swapservice)
+				self.session.pip.playService(swapservice,currentBouquet)
 				self.session.nav.stopService() # stop portal
+				self.session.pip.setCurrentBouquetMain(currboPiP)
 				self.session.nav.playService(pipref, checkParentalControl=False, adjust=False)
 				self.session.pip.servicePath = currentServicePath
 				self.session.pip.servicePath[1] = currentBouquet
+				self.zapToServiceinList(pipref, currboPiP)
 				if self.servicelist.dopipzap:
 					# This unfortunately won't work with subservices
 					self.servicelist.setCurrentSelection(self.session.pip.getCurrentService())
@@ -4064,7 +4130,7 @@
 
 	def doSwapPiP(self):
 		if hasattr(self.session, "pip"):
-			if self.TogglePiPZapSidebySide:
+			if InfoBarPiP.pipWindowActive:
 				slist = self.servicelist
 				if slist and self.session.pipshown:
 					slist.togglePipzapSidebySide()
@@ -4073,18 +4139,22 @@
 						self.servicelist.setCurrentServicePath(self.session.pip.servicePath, doZap=False)
 						self.session.pip.servicePath = currentServicePath
 					else:
-						self.TogglePiPZapSidebySide = False
 						self.session.pip.inactive()
 						self.session.pip.inactiveToogle()
 						self.session.pip.activeSide()
+						InfoBarPiP.pipWindowActive = False
+						currbo = self.session.pip.getCurrentBouquetMain()
+						currservice = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+						self.zapToServiceinList(currservice, currbo)
 			else:
 				self.session.pip.inactive()
 				if config.usage.pip_mode.value == "byside":
 					self.session.pip.inactiveToogle()
 					self.session.pip.activeSide()
-					self.show_infobar_on_zap(False)
+					global onzap_show_infobar
+					onzap_show_infobar = False
 					self.swapPiP()
-					self.show_infobar_on_zap(True)
+					onzap_show_infobar = True
 				else:
 					self.session.pip.inactiveToogle()
 					self.session.pip.inactiveSide()
@@ -4092,24 +4162,30 @@
 		else:
 			if isinstance(self, InfoBarChannelSelection):
 				self.LeftPressed()
-			
- 	def doTogglePipzap(self):
+	
+	def doTogglePipzap(self):
 		if hasattr(self.session, "pip"):
-			if config.usage.pip_mode.value == "byside":
-				if not self.TogglePiPZapSidebySide:
-					slist = self.servicelist
-					if slist and self.session.pipshown:
-						slist.togglePipzapSidebySide()
-						if slist.dopipzap:
-							self.TogglePiPZapSidebySide = True
-							self.session.pip.inactive()
-							self.session.pip.inactiveSide()
-							self.session.pip.activeToggle()
-							currentServicePath = slist.getCurrentServicePath()
-							self.servicelist.setCurrentServicePath(self.session.pip.servicePath, doZap=False)
-							self.session.pip.servicePath = currentServicePath
-				else:
-					self.doSwapPiP()
+			if self.session.pipshown:
+				if config.usage.pip_mode.value == "byside":
+					if InfoBarPiP.pipWindowActive:
+						self.doSwapPiP()
+					else:
+						slist = self.servicelist
+						if slist:
+							slist.togglePipzapSidebySide()
+							if slist.dopipzap:
+										 
+								self.session.pip.inactive()
+								self.session.pip.inactiveSide()
+								self.session.pip.activeToggle()
+								currentServicePath = slist.getCurrentServicePath()
+								pip_servicePath = self.session.pip.servicePath
+								self.servicelist.setCurrentServicePath(self.session.pip.servicePath, doZap=False)
+								self.session.pip.servicePath = currentServicePath
+								InfoBarPiP.pipWindowActive = True
+								currbo = self.session.pip.getCurrentBouquetPiP()
+								currservice = self.session.pip.getCurrentService()
+								self.zapToServiceinList(currservice, currbo)
 		else:
 			if isinstance(self, InfoBarChannelSelection):
 				self.RightPressed()
@@ -4132,21 +4208,21 @@
 	def selectRedKeytask(self):
 		isWEBBROWSER = None
 		isHBBTV = None
-		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/WebBrowser/browser.pyo"):
+		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/WebBrowser/browser.py*"):
 			isWEBBROWSER = True
-		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/HbbTV/plugin.pyo"):
+		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/HbbTV/plugin.py*"):
 			isHBBTV = True
-		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/E3Opera/plugin.pyo"):
+		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/E3Opera/plugin.py*"):
 			isHBBTV = True
-		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/NXHbbTV/plugin.pyo"):
+		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/NXHbbTV/plugin.py*"):
 			isHBBTV = True
-		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/OpenOpera/plugin.pyo"):
+		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/OpenOpera/plugin.py*"):
 			isHBBTV = True
-		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/WebkitHbbTV/plugin.pyo"):
+		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/WebkitHbbTV/plugin.py*"):
 			isHBBTV = True
-		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/QtHbbtv/plugin.pyo"):
+		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/QtHbbtv/plugin.py*"):
 			isHBBTV = True
-		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/Hbbtv/plugin.pyo"):
+		if os.path.isfile("/usr/lib/enigma2/python/Plugins/Extensions/Hbbtv/plugin.py*"):
 			isHBBTV = True
 
 		if isWEBBROWSER or isHBBTV:
@@ -4183,7 +4259,7 @@
 				self.StartPlugin(config.plugins.infopanel_redpanel.selection.value)
 
 		except:
-			print "Error on RedKeyTask !!"
+			print("Error on RedKeyTask !!")
 		
 	def softcamPanel(self):
 		try:
@@ -4202,7 +4278,7 @@
 				self.StartPlugin(config.plugins.infopanel_redpanel.selectionLong.value)
 
 		except:
-			print "Error on RedKeyTask Long!!"
+			print("Error on RedKeyTask Long!!")
 			
 	def StartsoftcamPanel(self):
 		try:
@@ -4239,7 +4315,7 @@
 			else:
 				self.showExtensionSelection()
 		except:
-			print "[INFOBARGENERICS] QuickMenu: error pipshow, starting Quick Menu"
+			print("[INFOBARGENERICS] QuickMenu: error pipshow, starting Quick Menu")
 			from Plugins.Extensions.Infopanel.QuickMenu import QuickMenu
 			self.session.open(QuickMenu)
 
@@ -4380,14 +4456,14 @@
 			else:
 				self.session.openWithCallback(self.setEndtime, TimerSelection, list)
 		elif answer[1] == "timer":
-			import TimerEdit
+			import Screens.TimerEdit
 			self.session.open(TimerEdit.TimerEditList)
 		elif answer[1] == "stop":
 			self.session.openWithCallback(self.stopCurrentRecording, TimerSelection, list)
-		elif answer[1] in ( "indefinitely" , "manualduration", "manualendtime", "event"):
+		elif answer[1] in ( "indefinitely", "manualduration", "manualendtime", "event"):
 			from Components.About import about
 			if len(list) >= 2 and about.getChipSetString() in ('meson-6', 'meson-64'):
-				Notifications.AddNotification(MessageBox,_("Sorry only possible to record 2 channels at once"), MessageBox.TYPE_ERROR, timeout=5)
+				Notifications.AddNotification(MessageBox, _("Sorry only possible to record 2 channels at once"), MessageBox.TYPE_ERROR, timeout=5)
 				return
 			self.startInstantRecording(limitEvent = answer[1] in ("event", "manualendtime") or False)
 			if answer[1] == "manualduration":
@@ -4401,7 +4477,7 @@
 				InfoBarTimeshift.SaveTimeshift(self, timeshiftfile="pts_livebuffer_%s" % self.pts_currplaying)
 			else:
 				# print 'test3'
-				Notifications.AddNotification(MessageBox,_("Timeshift will get saved at end of event!"), MessageBox.TYPE_INFO, timeout=5)
+				Notifications.AddNotification(MessageBox, _("Timeshift will get saved at end of event!"), MessageBox.TYPE_INFO, timeout=5)
 				self.save_current_timeshift = True
 				config.timeshift.isRecording.value = True
 		elif answer[1] == "savetimeshiftEvent":
@@ -4509,7 +4585,7 @@
 			list = list + ((_("Do not record"), "no"),)
 
 		if list:
-			self.session.openWithCallback(self.recordQuestionCallback, ChoiceBox,title=title,list=list)
+			self.session.openWithCallback(self.recordQuestionCallback, ChoiceBox, title=title, list=list)
 		else:
 			return 0
 
@@ -4525,12 +4601,12 @@
 	def yellow_key(self):
 		if not hasattr(self, "LongButtonPressed"):
 			self.LongButtonPressed = False
+		global AUDIO
 		if not self.LongButtonPressed:
 			if config.plugins.infopanel_yellowkey.list.value == '0':
 				from Screens.AudioSelection import AudioSelection
 				self.session.openWithCallback(self.audioSelected, AudioSelection, infobar=self)
 			elif config.plugins.infopanel_yellowkey.list.value == '2':
-				global AUDIO
 				AUDIO = True
 				ToggleVideo()
 			elif config.plugins.infopanel_yellowkey.list.value == '3':
@@ -4545,7 +4621,6 @@
 				from Screens.AudioSelection import AudioSelection
 				self.session.openWithCallback(self.audioSelected, AudioSelection, infobar=self)
 			elif config.plugins.infopanel_yellowkey.listLong.value == '2':
-				global AUDIO
 				AUDIO = True
 				ToggleVideo()
 			elif config.plugins.infopanel_yellowkey.listLong.value == '3':
@@ -4561,18 +4636,18 @@
 		self.session.openWithCallback(self.audioSelected, AudioSelection, infobar=self)
 
 	def audioSelected(self, ret=None):
-		print "[infobar::audioSelected]", ret
+		print("[infobar::audioSelected]", ret)
 
 	def audioDownmixToggle(self, popup = True):
 		if SystemInfo["CanDownmixAC3"]:
 			if config.av.downmix_ac3.value:
 				message = _("Dolby Digital downmix is now") + " " + _("disabled")
-				print '[Audio] Dolby Digital downmix is now disabled'
+				print('[Audio] Dolby Digital downmix is now disabled')
 				config.av.downmix_ac3.setValue(False)
 			else:
 				config.av.downmix_ac3.setValue(True)
 				message = _("Dolby Digital downmix is now") + " " + _("enabled")
-				print '[Audio] Dolby Digital downmix is now enabled'
+				print('[Audio] Dolby Digital downmix is now enabled')
 			if popup:
 				Notifications.AddPopup(text = message, type = MessageBox.TYPE_INFO, timeout = 5, id = "DDdownmixToggle")
 
@@ -4758,15 +4833,15 @@
 		for x in self.onReadyForAIT:
 			try:
 				x(orgId)
-			except Exception, ErrMsg:
-				print ErrMsg
+			except Exception as ErrMsg:
+				print(ErrMsg)
 				#self.onReadyForAIT.remove(x)
 
 	def updateInfomation(self):
 		try:
 			self["HbbtvApplication"].setApplicationName("")
 			self.updateAIT()
-		except Exception, ErrMsg:
+		except Exception as ErrMsg:
 			pass
 
 	def detectedHbbtvApplication(self):
@@ -4774,12 +4849,12 @@
 		info = service and service.info()
 		try:
 			for x in info.getInfoObject(iServiceInformation.sHBBTVUrl):
-				print x
+				print(x)
 				if x[0] in (-1, 1):
 					self.updateAIT(x[3])
 					self["HbbtvApplication"].setApplicationName(x[1])
 					break
-		except Exception, ErrMsg:
+		except Exception as ErrMsg:
 			pass
 
 	def activateRedButton(self):
@@ -4816,35 +4891,35 @@
 		self.__ExGreen_state = self.STATE_HIDDEN
 
 	def ExGreen_doAspect(self):
-		print "do self.STATE_ASPECT"
+		print("do self.STATE_ASPECT")
 		self.__ExGreen_state = self.STATE_ASPECT
 		self.aspectSelection()
 
 	def ExGreen_doResolution(self):
-		print "do self.STATE_RESOLUTION"
+		print("do self.STATE_RESOLUTION")
 		self.__ExGreen_state = self.STATE_RESOLUTION
 		self.resolutionSelection()
 		
 	def ExGreen_doHide(self):
-		print "do self.STATE_HIDDEN"
+		print("do self.STATE_HIDDEN")
 		self.__ExGreen_state = self.STATE_HIDDEN 
 
 	def ExGreen_toggleGreen(self, arg=""):
-		print self.__ExGreen_state
+		print(self.__ExGreen_state)
 		if self.__ExGreen_state == self.STATE_HIDDEN:
-			print "self.STATE_HIDDEN"
+			print("self.STATE_HIDDEN")
 			self.ExGreen_doAspect()
 		elif self.__ExGreen_state == self.STATE_ASPECT:
-			print "self.STATE_ASPECT"
+			print("self.STATE_ASPECT")
 			self.ExGreen_doResolution()
 		elif self.__ExGreen_state == self.STATE_RESOLUTION:
-			print "self.STATE_RESOLUTION"
+			print("self.STATE_RESOLUTION")
 			self.ExGreen_doHide()
 
 	def aspectSelection(self):
 		selection = 0
-		tlist= [(_("Resolution"), "resolution"),("--", ""),(_("4_3_letterbox"), "0"), (_("4_3_panscan"), "1"), (_("16_9"), "2"), (_("16_9_always"), "3"), (_("16_10_letterbox"), "4"), (_("16_10_panscan"), "5"), (_("16_9_letterbox"), "6")]
-		for x in range(len(tlist)):
+		tlist= [(_("Resolution"), "resolution"), ("--", ""), (_("4_3_letterbox"), "0"), (_("4_3_panscan"), "1"), (_("16_9"), "2"), (_("16_9_always"), "3"), (_("16_10_letterbox"), "4"), (_("16_10_panscan"), "5"), (_("16_9_letterbox"), "6")]
+		for x in list(range(len(tlist))):
 			selection = x
 		keys = ["green", "",  "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
 		self.session.openWithCallback(self.aspectSelected, ChoiceBox, title=_("Please select an aspect ratio..."), list = tlist, selection = selection, keys = keys)
@@ -4884,7 +4959,7 @@
 				fpsString = f.read()
 				f.close()
 			except:
-				print"[InfoBarResolutionSelection] Error open /proc/stb/vmpeg/0/framerate !!"
+				print("[InfoBarResolutionSelection] Error open /proc/stb/vmpeg/0/framerate !!")
 				fpsString = '50000'
 		
 		xres = int(xresString, 16)
@@ -4917,8 +4992,8 @@
 		keys = ["green", "yellow", "blue", "", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
 
 		mode = open("/proc/stb/video/videomode").read()[:-1]
-		print mode
-		for x in range(len(tlist)):
+		print(mode)
+		for x in list(range(len(tlist))):
 			if tlist[x][1] == mode:
 				selection = x
 
@@ -4951,7 +5026,7 @@
 		self.session.open(VideoMode)
 
 class VideoMode(Screen):
-	def __init__(self,session):
+	def __init__(self, session):
 		Screen.__init__(self, session)
 		self["videomode"] = Label()
 
@@ -5015,21 +5090,21 @@
 			del notifications[0]
 			cb = n[0]
 
-			if n[3].has_key("onSessionOpenCallback"):
+			if "onSessionOpenCallback" in n[3]:
 				n[3]["onSessionOpenCallback"]()
 				del n[3]["onSessionOpenCallback"]
 
 			if cb:
 				dlg = self.session.openWithCallback(cb, n[1], *n[2], **n[3])
 			elif not Notifications.current_notifications and n[4] == "ZapError":
-				if n[3].has_key("timeout"):
+				if "timeout" in n[3]:
 					del n[3]["timeout"]
 				n[3]["enable_input"] = False
 				dlg = self.session.instantiateDialog(n[1], *n[2], **n[3])
 				self.hide()
 				dlg.show()
 				self.notificationDialog = dlg
-				eActionMap.getInstance().bindAction('', -maxint - 1, self.keypressNotification)
+				eActionMap.getInstance().bindAction('', -maxsize - 1, self.keypressNotification)
 			else:
 				dlg = self.session.open(n[1], *n[2], **n[3])
 
@@ -5109,12 +5184,12 @@
 			seekable = self.__getSeekable()
 			if seekable is None:
 				return # Should not happen?
-			length = seekable.getLength() or (None,0)
+			length = seekable.getLength() or (None, 0)
 #			print "seekable.getLength() returns:", length
 			# Hmm, this implies we don't resume if the length is unknown...
 			if (last > 900000) and (not length[1]  or (last < length[1] - 900000)):
 				self.resume_point = last
-				l = last / 90000
+				l = last // 90000
 				if "ask" in config.usage.on_movie_start.value or not length[1]:
 					Notifications.AddNotificationWithCallback(self.playLastCB, MessageBox, _("Do you want to resume this playback?") + "\n" + (_("Resume position at %s") % ("%d:%02d:%02d" % (l/3600, l%3600/60, l%60))), timeout=30, default="yes" in config.usage.on_movie_start.value)
 				elif config.usage.on_movie_start.value == "resume":
@@ -5142,7 +5217,7 @@
 		r = seek.getPlayPosition()
 		if r[0]:
 			return None
-		return long(r[1])
+		return int(r[1])
 
 	def cueGetEndCutPosition(self):
 		ret = False
@@ -5353,7 +5428,7 @@
 					"startTeletext": (self.startTeletext, _("View teletext..."))
 				})
 		else:
-			print "no teletext plugin found!"
+			print("no teletext plugin found!")
 
 	def startTeletext(self):
 		self.teletext_plugin and self.teletext_plugin(session=self.session, service=self.session.nav.getCurrentService())
@@ -5415,7 +5490,7 @@
 		service = self.session.nav.getCurrentService()
 		subtitle = service and service.subtitle()
 		subtitlelist = subtitle and subtitle.getSubtitleList()
-		if self.selected_subtitle and self.selected_subtitle != (0,0,0,0):
+		if self.selected_subtitle and self.selected_subtitle != (0, 0, 0, 0):
 			from Screens.AudioSelection import QuickSubtitlesConfigMenu
 			self.session.open(QuickSubtitlesConfigMenu, self)
 		else:
@@ -5503,8 +5578,8 @@
 
 		self["ZoomActions"] = HelpableActionMap(self, "InfobarZoomActions",
 			{
-				"ZoomInOut":(self.ZoomInOut, _("Zoom In/Out TV...")),
-				"ZoomOff":(self.ZoomOff, _("Zoom Off...")),
+				"ZoomInOut": (self.ZoomInOut, _("Zoom In/Out TV...")),
+				"ZoomOff": (self.ZoomOff, _("Zoom Off...")),
 			}, prio=2)
 
 	def ZoomInOut(self):
@@ -5549,8 +5624,8 @@
 				self.addExtension((self.getHDMIInPiPScreen, self.HDMIInPiP, lambda: True), "green")
 		self["HDMIActions"] = HelpableActionMap(self, "InfobarHDMIActions",
 			{
-				"HDMIin":(self.HDMIIn, _("Switch to HDMI in mode")),
-				"HDMIinLong":(self.HDMIInLong, _("Switch to HDMI in mode")),
+				"HDMIin": (self.HDMIIn, _("Switch to HDMI in mode")),
+				"HDMIinLong": (self.HDMIInLong, _("Switch to HDMI in mode")),
 			}, prio=2)
 
 	def HDMIInLong(self):
@@ -5593,21 +5668,21 @@
 
 	def HDMIInPiP(self):
 		if getMachineBuild() in ('dm7080', 'dm820', 'dm900', 'dm920'):
-			f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor","r")
+			f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor", "r")
 			check=f.read()
 			f.close()
 			if check.startswith("off"):
-				f=open("/proc/stb/audio/hdmi_rx_monitor","w")
+				f=open("/proc/stb/audio/hdmi_rx_monitor", "w")
 				f.write("on")
 				f.close()
-				f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor","w")
+				f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor", "w")
 				f.write("on")
 				f.close()
 			else:
-				f=open("/proc/stb/audio/hdmi_rx_monitor","w")
+				f=open("/proc/stb/audio/hdmi_rx_monitor", "w")
 				f.write("off")
 				f.close()
-				f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor","w")
+				f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor", "w")
 				f.write("off")
 				f.close()
 		else:
@@ -5631,45 +5706,45 @@
 
 	def HDMIInFull(self):
 		if getMachineBuild() in ('dm7080', 'dm820', 'dm900', 'dm920'):
-			f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor","r")
+			f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor", "r")
 			check=f.read()
 			f.close()
 			if check.startswith("off"):
-				f=open("/proc/stb/video/videomode","r")
+				f=open("/proc/stb/video/videomode", "r")
 				self.oldvideomode=f.read()
 				f.close()
-				f=open("/proc/stb/video/videomode_50hz","r")
+				f=open("/proc/stb/video/videomode_50hz", "r")
 				self.oldvideomode_50hz=f.read()
 				f.close()
-				f=open("/proc/stb/video/videomode_60hz","r")
+				f=open("/proc/stb/video/videomode_60hz", "r")
 				self.oldvideomode_60hz=f.read()
 				f.close()
-				f=open("/proc/stb/video/videomode","w")
+				f=open("/proc/stb/video/videomode", "w")
 				if getMachineBuild() in ('dm900', 'dm920'):
 					f.write("1080p")
 				else:
 					f.write("720p")
 				f.close()
-				f=open("/proc/stb/audio/hdmi_rx_monitor","w")
+				f=open("/proc/stb/audio/hdmi_rx_monitor", "w")
 				f.write("on")
 				f.close()
-				f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor","w")
+				f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor", "w")
 				f.write("on")
 				f.close()
 			else:
-				f=open("/proc/stb/audio/hdmi_rx_monitor","w")
+				f=open("/proc/stb/audio/hdmi_rx_monitor", "w")
 				f.write("off")
 				f.close()
-				f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor","w")
+				f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor", "w")
 				f.write("off")
 				f.close()
-				f=open("/proc/stb/video/videomode","w")
+				f=open("/proc/stb/video/videomode", "w")
 				f.write(self.oldvideomode)
 				f.close()
-				f=open("/proc/stb/video/videomode_50hz","w")
+				f=open("/proc/stb/video/videomode_50hz", "w")
 				f.write(self.oldvideomode_50hz)
 				f.close()
-				f=open("/proc/stb/video/videomode_60hz","w")
+				f=open("/proc/stb/video/videomode_60hz", "w")
 				f.write(self.oldvideomode_60hz)
 				f.close()
 		else:
@@ -5694,7 +5769,7 @@
 		return 0
 
 	def setSleepTimer(self, sleepTime, showMessage = True):
-		print "[InfoBarSleepTimer] set sleeptimer", sleepTime
+		print("[InfoBarSleepTimer] set sleeptimer", sleepTime)
 		if sleepTime:
 			m = abs(sleepTime / 60)
 			message = _("The sleep timer has been activated.") + "\n" + _("Delay:") + " " + _("%d minutes") % m
@@ -5740,15 +5815,15 @@
 	def goStandby(self, answer = None):
 		if config.usage.sleep_timer_action.value == "standby" or answer:
 			if not Screens.Standby.inStandby:
-				print "[InfoBarSleepTimer] goto standby"
+				print("[InfoBarSleepTimer] goto standby")
 				self.session.open(Screens.Standby.Standby)
 		elif answer is None:
 			if not Screens.Standby.inStandby:
 				if not Screens.Standby.inTryQuitMainloop:
-					print "[InfoBarSleepTimer] goto deep standby"
+					print("[InfoBarSleepTimer] goto deep standby")
 					self.session.open(Screens.Standby.TryQuitMainloop, 1)
 			else:
-				print "[InfoBarSleepTimer] goto deep standby"
+				print("[InfoBarSleepTimer] goto deep standby")
 				quitMainloop(1)
 
 #########################################################################################
@@ -5761,14 +5836,14 @@
 	def openInfoBarMessage(self, message, messageboxtyp, timeout=-1):
 		try:
 			self.session.open(MessageBox, message, messageboxtyp, timeout=timeout)
-		except Exception, e:
-			print "[InfoBarOpenMessage] Exception:", e
+		except Exception as e:
+			print("[InfoBarOpenMessage] Exception:", e)
 
 	def openInfoBarMessageWithCallback(self, callback, message, messageboxtyp, timeout=-1, default=True):
 		try:
 			self.session.openWithCallback(callback, MessageBox, message, messageboxtyp, timeout=timeout, default=default)
-		except Exception, e:
-			print "[openInfoBarMessageWithCallback] Exception:", e
+		except Exception as e:
+			print("[openInfoBarMessageWithCallback] Exception:", e)
 
 	def openInfoBarSession(self, session, option=None):
 		try:
@@ -5776,8 +5851,8 @@
 				self.session.open(session)
 			else:
 				self.session.open(session, option)
-		except Exception, e:
-			print "[openInfoBarSession] Exception:", e
+		except Exception as e:
+			print("[openInfoBarSession] Exception:", e)
 
 #########################################################################################
 # handle bsod (python crashes) and show information after crash                         #
@@ -5806,7 +5881,7 @@
 			txt += _("(Attention: There will be a restart after %d crashes.)") %maxbs
 			if writelog:
 				txt += "\n" + "-"*80 + "\n"
-				txt += _("A crashlog was %s created in '%s'") %((_('not'),'')[int(writelog)], config.crash.debug_path.value)
+				txt += _("A crashlog was %s created in '%s'") %((_('not'), '')[int(writelog)], config.crash.debug_path.value)
 			#if not writelog:
 			#	txt += "\n" + "-"*80 + "\n"
 			#	txt += _("(It is set that '%s' crash logs are displayed and written.\nInfo: It will always write the first, last but one and lastest crash log.)") % str(int(config.crash.bsodhide.value) or _('never'))
@@ -5818,7 +5893,7 @@
 			try:
 				self.session.openWithCallback(self.infoBsodCallback, MessageBox, txt, type=MessageBox.TYPE_ERROR, default = False, close_on_any_key=not self.lastestBsodWarning, showYESNO = self.lastestBsodWarning)
 				self.infoBsodIsShown = True
-			except Exception, e:
+			except Exception as e:
 				#print "[InfoBarHandleBsod] Exception:", e
 				self.checkBsodTimer.stop()
 				self.checkBsodTimer.start(5000, True)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/InputBox.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/InputBox.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/InputBox.py	2020-06-21 10:16:12.715440842 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/InputBox.py	2020-06-21 10:20:02.355325403 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from enigma import getPrevAsciiCode
 from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
@@ -152,7 +153,7 @@
 				pass
 
 	def closePinWrong(self, *args):
-		print "args:", args
+		print("args:", args)
 		self.close(False)
 
 	def closePinCorrect(self, *args):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/InputDeviceSetup.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/InputDeviceSetup.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/InputDeviceSetup.py	2020-06-21 10:16:12.715440842 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/InputDeviceSetup.py	2020-06-21 10:20:02.355325403 -0400
@@ -1,4 +1,6 @@
-from Screen import Screen
+from __future__ import print_function
+from __future__ import absolute_import
+from Screens.Screen import Screen
 from Screens.HelpMenu import HelpableScreen
 from Screens.MessageBox import MessageBox
 from Components.InputDevice import iInputDevices, iRcTypeControl
@@ -26,8 +28,8 @@
 		self["key_blue"] = StaticText("")
 		self["introduction"] = StaticText(self.edittext)
 
-		self.devices = [(iInputDevices.getDeviceName(x),x) for x in iInputDevices.getDeviceList()]
-		print "[InputDeviceSelection] found devices :->", len(self.devices),self.devices
+		self.devices = [(iInputDevices.getDeviceName(x), x) for x in iInputDevices.getDeviceList()]
+		print("[InputDeviceSelection] found devices :->", len(self.devices), self.devices)
 
 		self["OkCancelActions"] = HelpableActionMap(self, "OkCancelActions",
 			{
@@ -93,7 +95,7 @@
 
 		for x in self.devices:
 			dev_type = iInputDevices.getDeviceAttribute(x[1], 'type')
-			self.list.append(self.buildInterfaceList(x[1],_(x[0]), dev_type))
+			self.list.append(self.buildInterfaceList(x[1], _(x[0]), dev_type))
 
 		self["list"].setList(self.list)
 		self["list"].setIndex(self.currentIndex)
@@ -142,7 +144,7 @@
 		self["introduction"] = StaticText()
 
 		# for generating strings into .po only
-		devicenames = [_("%s %s front panel") % (getMachineBrand(), getMachineName()),_("%s %s front panel") % (getMachineBrand(), getMachineName()),_("%s %s remote control (native)") % (getMachineBrand(), getMachineName()),_("%s %s advanced remote control (native)") % (getMachineBrand(), getMachineName()),_("%s %s ir keyboard") % (getMachineBrand(), getMachineName()),_("%s %s ir mouse") % (getMachineBrand(), getMachineName())]
+		devicenames = [_("%s %s front panel") % (getMachineBrand(), getMachineName()), _("%s %s front panel") % (getMachineBrand(), getMachineName()), _("%s %s remote control (native)") % (getMachineBrand(), getMachineName()), _("%s %s advanced remote control (native)") % (getMachineBrand(), getMachineName()), _("%s %s ir keyboard") % (getMachineBrand(), getMachineName()), _("%s %s ir mouse") % (getMachineBrand(), getMachineName())]
 
 		self.createSetup()
 		self.onLayoutFinish.append(self.layoutFinished)
@@ -161,16 +163,16 @@
 		self.list = [ ]
 		label = _("Change repeat and delay settings?")
 		cmd = "self.enableEntry = getConfigListEntry(label, config.inputDevices." + self.inputDevice + ".enabled)"
-		exec cmd
+		exec(cmd)
 		label = _("Interval between keys when repeating:")
 		cmd = "self.repeatEntry = getConfigListEntry(label, config.inputDevices." + self.inputDevice + ".repeat)"
-		exec cmd
+		exec(cmd)
 		label = _("Delay before key repeat starts:")
 		cmd = "self.delayEntry = getConfigListEntry(label, config.inputDevices." + self.inputDevice + ".delay)"
-		exec cmd
+		exec(cmd)
 		label = _("Devicename:")
 		cmd = "self.nameEntry = getConfigListEntry(label, config.inputDevices." + self.inputDevice + ".name)"
-		exec cmd
+		exec(cmd)
 		if self.enableEntry:
 			if isinstance(self.enableEntry[1], ConfigYesNo):
 				self.enableConfigEntry = self.enableEntry[1]
@@ -216,12 +218,12 @@
 
 	def confirm(self, confirmed):
 		if not confirmed:
-			print "not confirmed"
+			print("not confirmed")
 			return
 		else:
 			self.nameEntry[1].setValue(iInputDevices.getDeviceAttribute(self.inputDevice, 'name'))
 			cmd = "config.inputDevices." + self.inputDevice + ".name.save()"
-			exec cmd
+			exec(cmd)
 			self.keySave()
 
 	def apply(self):
@@ -257,7 +259,7 @@
 
 
 class RemoteControlType(Screen, ConfigListScreen):
-	if getBrandOEM() in ('broadmedia','octagon','odin','protek','ultramini') or getBoxType() in ('et7000','et7100','et7200','et7500','et7x00','et8500','et1x000','et13000'):
+	if getBrandOEM() in ('broadmedia', 'octagon', 'odin', 'protek', 'ultramini') or getBoxType() in ('et7000', 'et7100', 'et7200', 'et7500', 'et7x00', 'et8500', 'et1x000', 'et13000'):
 		rcList = [
 				("0", _("Default")),
 				("3", _("MaraM9")),
@@ -291,34 +293,34 @@
 				("et5000", 7),
 				("et6000", 7),
 				("et6500", 11),
-				("et7x00",16),
-				("et7100",16),
-				("et7000",16),
-				("et7500",16),
-				("et7000mini",16),
+				("et7x00", 16),
+				("et7100", 16),
+				("et7000", 16),
+				("et7500", 16),
+				("et7000mini", 16),
 				("et8000", 9),
 				("et13000", 9),
-				("et8500",16),
+				("et8500", 16),
 				("et9000", 5),
 				("et9100", 5),
 				("et9200", 11),
 				("et9500", 11),
 				("et10000", 9),
-				("formuler1",18),
-				("formuler3",18),
-				("formuler4",18),
-				("formuler4turbo",18),
-				("hd11",16),
-				("hd51",16),
-				("hd1100",16),
-				("hd1200",16),
-				("hd1265",16),
-				("hd500c",16),
-				("hd530c",16),
-				("vs1000",16),
-				("vs1500",16),
-				("hd2400",19),
-				("triplex",18),
+				("formuler1", 18),
+				("formuler3", 18),
+				("formuler4", 18),
+				("formuler4turbo", 18),
+				("hd11", 16),
+				("hd51", 16),
+				("hd1100", 16),
+				("hd1200", 16),
+				("hd1265", 16),
+				("hd500c", 16),
+				("hd530c", 16),
+				("vs1000", 16),
+				("vs1500", 16),
+				("hd2400", 19),
+				("triplex", 18),
 				("xp1000", 14),
 				("xp3000", 17),
 				("sh1", 20),
@@ -379,21 +381,21 @@
 				("et9200", 11),
 				("et9500", 11),
 				("et10000", 9),
-				("formuler1",18),
-				("formuler3",18),
-				("formuler4",18),
-				("formuler4turbo",18),
-				("hd11",16),
-				("hd51",16),
-				("hd1100",16),
-				("hd1200",16),
-				("hd1265",16),
-				("hd500c",16),
-				("hd530c",16),
-				("vs1000",16),
-				("vs1500",16),
-				("hd2400",19),
-				("triplex",18),
+				("formuler1", 18),
+				("formuler3", 18),
+				("formuler4", 18),
+				("formuler4turbo", 18),
+				("hd11", 16),
+				("hd51", 16),
+				("hd1100", 16),
+				("hd1200", 16),
+				("hd1265", 16),
+				("hd500c", 16),
+				("hd530c", 16),
+				("vs1000", 16),
+				("vs1500", 16),
+				("hd2400", 19),
+				("triplex", 18),
 				("xp1000", 14),
 				("xp3000", 17),
 				("sh1", 20),
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/InstallWizard.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/InstallWizard.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/InstallWizard.py	2020-06-21 10:16:12.715440842 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/InstallWizard.py	2020-06-21 10:20:02.355325403 -0400
@@ -31,7 +31,7 @@
 			config.misc.installwizard.ipkgloaded.value = False
 			modes = {0: " "}
 			self.enabled = ConfigSelection(choices = modes, default = 0)
-			self.adapters = [(iNetwork.getFriendlyAdapterName(x),x) for x in iNetwork.getAdapterList()]
+			self.adapters = [(iNetwork.getFriendlyAdapterName(x), x) for x in iNetwork.getAdapterList()]
 			is_found = False
 			for x in self.adapters:
 				if x[1] == 'eth0' or x[1] == 'eth1':
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Ipkg.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Ipkg.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Ipkg.py	2020-06-21 10:16:12.715440842 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Ipkg.py	2020-06-21 10:20:02.355325403 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Components.ActionMap import ActionMap
 from Components.Ipkg import IpkgComponent
 from Components.Label import Label
@@ -51,7 +52,7 @@
 			self.runningCmd = 0
 		else:
 			self.runningCmd += 1
-		print len(self.cmdList), self.runningCmd
+		print(len(self.cmdList), self.runningCmd)
 		if len(self.cmdList) - 1 < self.runningCmd:
 			self.activityslider.setValue(0)
 			self.slider.setValue(len(self.cmdList))
@@ -84,7 +85,7 @@
 		if event == IpkgComponent.EVENT_DOWNLOAD:
 			self.status.setText(_("Downloading"))
 		elif event == IpkgComponent.EVENT_UPGRADE:
-			if self.sliderPackages.has_key(param):
+			if param in self.sliderPackages:
 				self.slider.setValue(self.sliderPackages[param])
 			self.package.setText(param)
 			self.status.setText(_("Upgrading"))
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/LanguageSelection.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/LanguageSelection.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/LanguageSelection.py	2020-06-21 10:16:12.715440842 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/LanguageSelection.py	2020-06-21 10:20:02.355325403 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
 from Screens.Standby import TryQuitMainloop
@@ -68,8 +69,8 @@
 		}, -1)
 
 	def updateCache(self):
-		print"updateCache"
-		self["languages"].setList([('update cache',_('Updating cache, please wait...'),None)])
+		print("updateCache")
+		self["languages"].setList([('update cache', _('Updating cache, please wait...'), None)])
 		self.updateTimer = eTimer()
 		self.updateTimer.callback.append(self.startupdateCache)
 		self.updateTimer.start(100)
@@ -100,7 +101,7 @@
 			self.close()
 		else:
 			if self.oldActiveLanguage != config.osd.language.value:
-				self.session.openWithCallback(self.restartGUI, MessageBox,_("GUI needs a restart to apply a new language\nDo you want to restart the GUI now?"), MessageBox.TYPE_YESNO)
+				self.session.openWithCallback(self.restartGUI, MessageBox, _("GUI needs a restart to apply a new language\nDo you want to restart the GUI now?"), MessageBox.TYPE_YESNO)
 			else:
 				self.close()
 
@@ -139,7 +140,7 @@
 			self.selectActiveLanguage()
 
 	def run(self, justlocal = False):
-		print "updating language..."
+		print("updating language...")
 		lang = self["languages"].getCurrent()[0]
 
 		if lang == 'update cache':
@@ -166,7 +167,7 @@
 		language.activateLanguage(lang)
 		config.misc.languageselected.value = 0
 		config.misc.languageselected.save()
-		print "ok"
+		print("ok")
 
 	def updateList(self):
 		languageList = language.getLanguageList()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/LocationBox.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/LocationBox.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/LocationBox.py	2020-06-21 10:16:12.715440842 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/LocationBox.py	2020-06-21 10:20:02.355325403 -0400
@@ -28,6 +28,7 @@
 
 # Timer
 from enigma import eTimer
+import six
 
 defaultInhibitDirs = ["/bin", "/boot", "/dev", "/etc", "/lib", "/proc", "/sbin", "/sys", "/usr", "/var"]
 
@@ -445,7 +446,7 @@
 
 		# Get char and append to text
 		char = self.getKey(number)
-		self.quickselect = self.quickselect[:self.curr_pos] + unicode(char)
+		self.quickselect = self.quickselect[:self.curr_pos] + six.text_type(char)
 
 		# Start Timeout
 		self.qs_timer_type = 0
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/LogManager.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/LogManager.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/LogManager.py	2020-06-21 10:16:12.715440842 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/LogManager.py	2020-06-21 10:20:02.359325953 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Components.GUIComponent import GUIComponent
 from Components.VariableText import VariableText
@@ -19,6 +20,7 @@
 from skin import getSkinFactor
 
 import Components.Task
+import sys
 
 # Import smtplib for the actual sending function
 import smtplib, base64
@@ -26,7 +28,10 @@
 # Here are the email package modules we'll need
 from email.mime.multipart import MIMEMultipart
 from email.mime.text import MIMEText
-from email.Utils import formatdate
+if sys.version_info[0] >= 3:
+	from email.utils import formatdate
+else:
+	from email.Utils import formatdate
 
 _session = None
 
@@ -69,11 +74,11 @@
 		self.TrashTimer.stop()
 
 	def TrimTimerJob(self):
-		print '[LogManager] Trim Poll Started'
+		print('[LogManager] Trim Poll Started')
 		Components.Task.job_manager.AddJob(self.createTrimJob())
 
 	def TrashTimerJob(self):
-		print '[LogManager] Trash Poll Started'
+		print('[LogManager] Trash Poll Started')
 		self.JobTrash()
 		# Components.Task.job_manager.AddJob(self.createTrashJob())
 
@@ -117,7 +122,7 @@
 
 		mounts = []
 		matches = []
-		print "[LogManager] probing folders"
+		print("[LogManager] probing folders")
 		f = open('/proc/mounts', 'r')
 		for line in f.readlines():
 			parts = line.strip().split()
@@ -130,17 +135,17 @@
 			config.crash.lastfulljobtrashtime.save()
 			configfile.save()
 			for mount in mounts:
-				if path.isdir(path.join(mount,'logs')):
-					matches.append(path.join(mount,'logs'))
+				if path.isdir(path.join(mount, 'logs')):
+					matches.append(path.join(mount, 'logs'))
 			matches.append('/home/root/logs')
 		else:
 			#small JobTrash (in selected log file dir only) twice a day
 			matches.append(config.crash.debug_path.value)
 
-		print "[LogManager] found following log's:", matches
+		print("[LogManager] found following log's:", matches)
 		if len(matches):
 			for logsfolder in matches:
-				print "[LogManager] looking in:", logsfolder
+				print("[LogManager] looking in:", logsfolder)
 				logssize = get_size(logsfolder)
 				bytesToRemove = logssize - allowedBytes
 				candidates = []
@@ -154,14 +159,14 @@
 							#print "Last created: %s" % ctime(st.st_ctime)
 							#print "Last modified: %s" % ctime(st.st_mtime)
 							if st.st_mtime < ctimeLimit:
-								print "[LogManager] " + str(fn) + ": Too old:", ctime(st.st_mtime)
+								print("[LogManager] " + str(fn) + ": Too old:", ctime(st.st_mtime))
 								eBackgroundFileEraser.getInstance().erase(fn)
 								bytesToRemove -= st.st_size
 							else:
 								candidates.append((st.st_mtime, fn, st.st_size))
 								size += st.st_size
-						except Exception, e:
-							print "[LogManager] Failed to stat %s:"% name, e
+						except Exception as e:
+							print("[LogManager] Failed to stat %s:"% name, e)
 					# Remove empty directories if possible
 					for name in dirs:
 						try:
@@ -171,7 +176,7 @@
 					candidates.sort()
 					# Now we have a list of ctime, candidates, size. Sorted by ctime (=deletion time)
 					for st_ctime, fn, st_size in candidates:
-						print "[LogManager] " + str(logsfolder) + ": bytesToRemove", bytesToRemove
+						print("[LogManager] " + str(logsfolder) + ": bytesToRemove", bytesToRemove)
 						if bytesToRemove < 0:
 							break
 						eBackgroundFileEraser.getInstance().erase(fn)
@@ -463,9 +468,9 @@
 			wos_pwd = base64.b64decode('NDJJWnojMEpldUxX')
 
 			try:
-				print "connecting to server: mail.dummy.org"
+				print("connecting to server: mail.dummy.org")
 				#socket.setdefaulttimeout(30)
-				s = smtplib.SMTP("mail.dummy.org",26)
+				s = smtplib.SMTP("mail.dummy.org", 26)
 				s.login(wos_user, wos_pwd)
 				if config.logmanager.usersendcopy.value:
 					s.sendmail(fromlogman, [tocrashlogs, fromlogman], msg.as_string())
@@ -475,7 +480,7 @@
 					s.sendmail(fromlogman, tocrashlogs, msg.as_string())
 					s.quit()
 					self.session.open(MessageBox, sentfiles + ' ' + _('has been sent to the SVN team team.\nplease quote') + ' ' + str(ref) + ' ' + _('when asking question about this log'), MessageBox.TYPE_INFO)
-			except Exception,e:
+			except Exception as e:
 				self.session.open(MessageBox, _("Error:\n%s" % e), MessageBox.TYPE_INFO, timeout = 10)
 		else:
 			self.session.open(MessageBox, _('You have not setup your user info in the setup screen\nPress MENU, and enter your info, then try again'), MessageBox.TYPE_INFO, timeout = 10)
@@ -514,8 +519,8 @@
 		fontwidth = getTextBoundarySize(self.instance, font, self["list"].instance.size(), _(" ")).width()
 		listwidth = int(self["list"].instance.size().width() / fontwidth)
 		if path.exists(self.logfile):
-			for line in file(self.logfile ).readlines():
-				line = line.replace('\t',' '*9)
+			for line in open(self.logfile ).readlines():
+				line = line.replace('\t', ' '*9)
 				if len(line) > listwidth:
 					pos = 0
 					offset = 0
@@ -561,7 +566,7 @@
 		self["blue"] = Label(_("rename"))
 
 
-		self["actions"] = ActionMap(["ChannelSelectBaseActions","WizardActions", "DirectionActions", "MenuActions", "NumberActions", "ColorActions"],
+		self["actions"] = ActionMap(["ChannelSelectBaseActions", "WizardActions", "DirectionActions", "MenuActions", "NumberActions", "ColorActions"],
 			{
 			 "ok": self.ok,
 			 "back": self.exit,
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Menu.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Menu.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Menu.py	2020-06-21 10:16:12.715440842 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Menu.py	2020-06-21 10:20:02.359325953 -0400
@@ -16,6 +16,7 @@
 from Components.Button import Button
 from Tools.LoadPixmap import LoadPixmap
 import os
+import six
 from skin import findSkinScreen
 
 import xml.etree.cElementTree
@@ -49,21 +50,21 @@
 
 def MenuEntryName(name):
 	def splitUpperCase(name, maxlen):
-		for c in range(len(name),0,-1):
+		for c in list(range(len(name), 0, -1)):
 			if name[c-1].isupper() and c-1 and c-1 <= maxlen:
 				return name[:c-1] + "-:-" + name[c-1:]
 		return name
 	def splitLowerCase(name, maxlen):
-		for c in range(len(name),0,-1):
+		for c in list(range(len(name), 0, -1)):
 			if name[c-1].islower() and c-1 and c-1 <= maxlen:
 				return name[:c-1] + "-:-" + name[c-1:]
 		return name
 	def splitName(name, maxlen):
 		for s in (" ", "-", "/"):
-			pos = name.rfind(s,0,maxlen+1)
+			pos = name.rfind(s, 0, maxlen+1)
 			if pos > 1:
 				return [name[:pos+1] if pos+1 <= maxlen and s != " " else name[:pos], name[pos+1:]]
-		return splitUpperCase(name, maxlen).split("-:-",1)
+		return splitUpperCase(name, maxlen).split("-:-", 1)
 
 	maxrow = 3
 	maxlen = 18
@@ -71,14 +72,14 @@
 	if len(name) > maxlen and maxrow > 1:
 		namesplit = splitName(name, maxlen)
 		if len(namesplit) == 1 or (len(namesplit) == 2 and len(namesplit[1]) > maxlen * (maxrow-1)):
-			tmp = splitLowerCase(name, maxlen).split("-:-",1)
+			tmp = splitLowerCase(name, maxlen).split("-:-", 1)
 			if len(tmp[0]) > len(namesplit[0]) or len(namesplit) < 2:
 				namesplit = tmp
-		for x in range(1,maxrow):
+		for x in list(range(1, maxrow)):
 			if len(namesplit) > x and len(namesplit) < maxrow and len(namesplit[x]) > maxlen:
 				tmp = splitName(namesplit[x], maxlen)
 				if len(tmp) == 1 or (len(tmp) == 2 and len(tmp[1]) > maxlen * (maxrow-x)):
-					tmp = splitLowerCase(namesplit[x], maxlen).split("-:-",1)
+					tmp = splitLowerCase(namesplit[x], maxlen).split("-:-", 1)
 				if len(tmp) == 2:
 					namesplit.pop(x)
 					namesplit.extend(tmp)
@@ -103,7 +104,7 @@
 			return
 		if(self.thistory == ''):
 			return
-		result = self.thistory.rsplit('>',2)
+		result = self.thistory.rsplit('>', 2)
 		if(result[0] == ''):
 			self.reset()
 			return
@@ -124,7 +125,7 @@
 		self.updatedMenuItems[id].remove([text, pos, module, screen, weight, description])
 
 	def updatedMenuAvailable(self, id):
-		return self.updatedMenuItems.has_key(id)
+		return id in self.updatedMenuItems
 
 	def getUpdatedMenu(self, id):
 		return self.updatedMenuItems[id]
@@ -148,7 +149,7 @@
 			selection[1]()
 
 	def execText(self, text):
-		exec text
+		exec(text)
 
 	def runScreen(self, arg):
 		# arg[0] is the module (as string)
@@ -157,7 +158,7 @@
 		#	string (as we want to reference
 		#	stuff which is just imported)
 		if arg[0] != "":
-			exec "from %s import %s" % (arg[0], arg[1].split(",")[0])
+			exec("from %s import %s" % (arg[0], arg[1].split(",")[0]))
 			self.openDialog(*eval(arg[1]))
 
 	def nothing(self): #dummy
@@ -182,10 +183,10 @@
 					return
 			elif not SystemInfo.get(requires, False):
 				return
-		MenuTitle = _(node.get("text", "??").encode("UTF-8"))
+		MenuTitle = _(six.ensure_str(node.get("text", "??")))
 		entryID = node.get("entryID", "undefined")
 		weight = node.get("weight", 50)
-		description = node.get('description', '').encode('UTF-8') or None
+		description = six.ensure_str(node.get("description", "")) or None
 		description = description and _(description)
 		menupng = MenuEntryPixmap(entryID, self.png_cache, lastMenuID)
 		x = node.get("flushConfigOnClose")
@@ -217,10 +218,10 @@
 		configCondition = node.get("configcondition")
 		if configCondition and not eval(configCondition + ".value"):
 			return
-		item_text = node.get("text", "").encode("UTF-8")
+		item_text = six.ensure_str(node.get("text", ""))
 		entryID = node.get("entryID", "undefined")
 		weight = node.get("weight", 50)
-		description = node.get('description', '').encode('UTF-8') or ''
+		description = six.ensure_str(node.get("description", "")) or ''
 		description = description and _(description)
 		menupng = MenuEntryPixmap(entryID, self.png_cache, lastMenuID)
 		for x in node:
@@ -325,7 +326,7 @@
 				if menuupdater.updatedMenuAvailable(menuID):
 					for x in menuupdater.getUpdatedMenu(menuID):
 						if x[1] == count:
-							description = x.get('description', '').encode('UTF-8') or None
+							description = six.ensure_str(x.get("description", "")) or None
 							description = description and _(description)
 							menupng = MenuEntryPixmap(menuID, self.png_cache, lastMenuID)
 							m_list.append((x[0], boundFunction(self.runScreen, (x[2], x[3] + ", ")), x[4], description, menupng))
@@ -367,8 +368,8 @@
 		if config.usage.menu_sort_mode.value == "user" and menuID == "mainmenu":
 			plugin_list = []
 			id_list = []
-			for l in plugins.getPlugins([PluginDescriptor.WHERE_PLUGINMENU ,PluginDescriptor.WHERE_EXTENSIONSMENU, PluginDescriptor.WHERE_EVENTINFO]):
-				l.id = (l.name.lower()).replace(' ','_')
+			for l in plugins.getPlugins([PluginDescriptor.WHERE_PLUGINMENU, PluginDescriptor.WHERE_EXTENSIONSMENU, PluginDescriptor.WHERE_EVENTINFO]):
+				l.id = (l.name.lower()).replace(' ', '_')
 				if l.id not in id_list:
 					id_list.append(l.id)
 					plugin_list.append((l.name, boundFunction(l.__call__, session), l.id, 200))
@@ -442,10 +443,10 @@
 				"blue": self.keyBlue,
 			})
 
-		a = parent.get("title", "").encode("UTF-8") or None
+		a = six.ensure_str(parent.get("title", "")) or None
 		a = a and _(a)
 		if a is None:
-			a = _(parent.get("text", "").encode("UTF-8"))
+			a = _(six.ensure_str(parent.get("text", "")))
 		else:
 			t_history.reset()
 		self["title"] = StaticText(a)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/MessageBox.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/MessageBox.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/MessageBox.py	2020-06-21 10:16:12.715440842 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/MessageBox.py	2020-06-21 10:20:02.359325953 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function, division
 from enigma import eTimer, ePoint, eSize, getDesktop
 
 from Components.ActionMap import HelpableActionMap
@@ -132,7 +133,7 @@
 			self.baseTitle = self.baseTitle % prefix
 		self.setTitle(self.baseTitle)
 		if self.timeout > 0:
-			print "[MessageBox] Timeout set to %d seconds." % self.timeout
+			print("[MessageBox] Timeout set to %d seconds." % self.timeout)
 			self.timer.start(25)
 
 	def processTimer(self):
@@ -156,7 +157,7 @@
 				self.ok()
 
 	def stopTimer(self, reason):
-		print "[MessageBox] %s" % reason
+		print("[MessageBox] %s" % reason)
 		self.timer.stop()
 		self.timeout = 0
 		if self.baseTitle is not None:
@@ -196,7 +197,7 @@
 			self["list"].instance.resize(eSize(*listsize))
 		wsizey = textsize[1] + listsize[1]
 		self.instance.resize(eSize(*(wsizex, wsizey)))
-		self.instance.move(ePoint((getDesktop(0).size().width() - wsizex) / 2, (getDesktop(0).size().height() - wsizey) / 2))
+		self.instance.move(ePoint((getDesktop(0).size().width() - wsizex) // 2, (getDesktop(0).size().height() - wsizey) // 2))
 
 	def cancel(self):
 		if self["list"].list:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/MinuteInput.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/MinuteInput.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/MinuteInput.py	2020-06-21 10:16:12.715440842 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/MinuteInput.py	2020-06-21 10:20:02.359325953 -0400
@@ -11,7 +11,7 @@
 		self["minutes"] = Input(str(basemins), type=Input.NUMBER)
 		self.MaxMinutes = 9999
 
-		self["actions"] = NumberActionMap([ "InputActions" , "MinuteInputActions", "TextEntryActions", "KeyboardInputActions" ],
+		self["actions"] = NumberActionMap([ "InputActions", "MinuteInputActions", "TextEntryActions", "KeyboardInputActions" ],
 		{
 			"1": self.keyNumberGlobal,
 			"2": self.keyNumberGlobal,
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/MovieSelection.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/MovieSelection.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/MovieSelection.py	2020-06-21 10:16:12.715440842 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/MovieSelection.py	2020-06-21 10:20:02.359325953 -0400
@@ -1,10 +1,13 @@
+from __future__ import print_function
+from __future__ import absolute_import
 import os
 import time
-import cPickle as pickle
+import six
+from six.moves import cPickle as pickle
 
 from enigma import eServiceReference, eServiceReferenceFS, eServiceCenter, eTimer, eSize, iPlayableService, iServiceInformation, getPrevAsciiCode, eRCInput, pNavigation
 
-from Screen import Screen
+from Screens.Screen import Screen
 from Components.Button import Button
 from Components.ActionMap import HelpableActionMap, ActionMap, NumberActionMap
 from Components.MenuList import MenuList
@@ -37,6 +40,7 @@
 import RecordTimer
 
 
+
 config.movielist = ConfigSubsection()
 config.movielist.curentlyplayingservice = ConfigText()
 config.movielist.show_live_tv_in_movielist = ConfigYesNo(default=True)
@@ -53,7 +57,7 @@
 config.movielist.last_selected_tags = ConfigSet([], default=[])
 config.movielist.play_audio_internal = ConfigYesNo(default=True)
 config.movielist.settings_per_directory = ConfigYesNo(default=True)
-config.movielist.root = ConfigSelection(default="/media", choices=["/","/media","/media/hdd","/media/hdd/movie","/media/usb","/media/usb/movie"])
+config.movielist.root = ConfigSelection(default="/media", choices=["/", "/media", "/media/hdd", "/media/hdd/movie", "/media/usb", "/media/usb/movie"])
 config.movielist.hide_extensions = ConfigYesNo(default=False)
 config.movielist.stop_service = ConfigYesNo(default=True)
 
@@ -64,7 +68,7 @@
 # this kludge is needed because ConfigSelection only takes numbers
 # and someone appears to be fascinated by 'enums'.
 l_moviesort = [
-	(str(MovieList.SORT_GROUPWISE), _("default") , '02/01 & A-Z'),
+	(str(MovieList.SORT_GROUPWISE), _("default"), '02/01 & A-Z'),
 	(str(MovieList.SORT_RECORDED), _("by date"), '03/02/01'),
 	(str(MovieList.SORT_ALPHANUMERIC), _("alphabetic"), 'A-Z'),
 	(str(MovieList.SORT_ALPHANUMERIC_FLAT), _("flat alphabetic"), 'A-Z Flat'),
@@ -86,9 +90,9 @@
 	global preferredTagEditor
 	if preferredTagEditor is None:
 		preferredTagEditor = te
-		print "Preferred tag editor changed to", preferredTagEditor
+		print("Preferred tag editor changed to", preferredTagEditor)
 	else:
-		print "Preferred tag editor already set to", preferredTagEditor, "ignoring", te
+		print("Preferred tag editor already set to", preferredTagEditor, "ignoring", te)
 
 def getPreferredTagEditor():
 	global preferredTagEditor
@@ -136,7 +140,7 @@
 	srcPath, srcName = os.path.split(src)
 	if os.path.normpath(srcPath) == dest:
 		# move file to itself is allowed, so we have to check it
-		raise Exception, "Refusing to move to the same directory"
+		raise Exception("Refusing to move to the same directory")
 	# Make a list of items to move
 	moveList = [(src, os.path.join(dest, srcName))]
 	if not serviceref.flags & eServiceReference.mustDescent:
@@ -164,8 +168,8 @@
 		if name is None:
 			name = os.path.split(moveList[-1][0])[1]
 		Tools.CopyFiles.moveFiles(moveList, name)
-	except Exception, e:
-		print "[MovieSelection] Failed move:", e
+	except Exception as e:
+		print("[MovieSelection] Failed move:", e)
 		# rethrow exception
 		raise
 
@@ -181,8 +185,8 @@
 		if name is None:
 			name = os.path.split(moveList[-1][0])[1]
 		Tools.CopyFiles.copyFiles(moveList, name)
-	except Exception, e:
-		print "[MovieSelection] Failed copy:", e
+	except Exception as e:
+		print("[MovieSelection] Failed copy:", e)
 		# rethrow exception
 		raise
 
@@ -192,14 +196,14 @@
 	inlist = []
 	for d in config.movielist.videodirs.value:
 		d = os.path.normpath(d)
-		bookmarks.append((d,d))
+		bookmarks.append((d, d))
 		inlist.append(d)
 	for p in Components.Harddisk.harddiskmanager.getMountedPartitions():
 		d = os.path.normpath(p.mountpoint)
 		if d in inlist:
 			# improve shortcuts to mountpoints
 			try:
-				bookmarks[bookmarks.index((d,d))] = (p.tabbedDescription(), d)
+				bookmarks[bookmarks.index((d, d))] = (p.tabbedDescription(), d)
 			except:
 				pass # When already listed as some "friendly" name
 		else:
@@ -207,9 +211,9 @@
 		inlist.append(d)
 	for d in last_selected_dest:
 		if d not in inlist:
-			bookmarks.append((d,d))
+			bookmarks.append((d, d))
 
-class MovieBrowserConfiguration(ConfigListScreen,Screen):
+class MovieBrowserConfiguration(ConfigListScreen, Screen):
 	def __init__(self, session, args = 0):
 		Screen.__init__(self, session)
 		self.session = session
@@ -250,7 +254,7 @@
 		configList.append(getConfigListEntry(_("Root directory"), config.movielist.root, _("Sets the root folder of movie list, to remove the '..' from benign shown in that folder.")))
 		configList.append(getConfigListEntry(_("Hide known extensions"), config.movielist.hide_extensions, _("Allows you to hide the extensions of known file types.")))
 		configList.append(getConfigListEntry(_("Show live tv when movie stopped"), config.movielist.show_live_tv_in_movielist, _("When set the PIG will return to live after a movie has stopped playing.")))
-		for btn in (('red', _('Red')), ('green', _('Green')), ('yellow', _('Yellow')), ('blue', _('Blue')),('redlong', _('Red long')), ('greenlong', _('Green long')), ('yellowlong', _('Yellow long')), ('bluelong', _('Blue long')), ('TV', _('TV')), ('Radio', _('Radio')), ('Text', _('Text')), ('F1', _('F1')), ('F2', _('F2')), ('F3', _('F3'))):
+		for btn in (('red', _('Red')), ('green', _('Green')), ('yellow', _('Yellow')), ('blue', _('Blue')), ('redlong', _('Red long')), ('greenlong', _('Green long')), ('yellowlong', _('Yellow long')), ('bluelong', _('Blue long')), ('TV', _('TV')), ('Radio', _('Radio')), ('Text', _('Text')), ('F1', _('F1')), ('F2', _('F2')), ('F3', _('F3'))):
 			configList.append(getConfigListEntry(_("Button") + " " + _(btn[1]), userDefinedButtons[btn[0]], _("Allows you to setup the button to do what you choose.")))
 		ConfigListScreen.__init__(self, configList, session = self.session, on_change = self.changedEntry)
 		self["config"].setList(configList)
@@ -477,7 +481,7 @@
 	def __init__(self, session, selectedmovie = None, timeshiftEnabled = False):
 		Screen.__init__(self, session)
 		if config.movielist.useslim.value:
-			self.skinName = ["MovieSelectionSlim","MovieSelection"]
+			self.skinName = ["MovieSelectionSlim", "MovieSelection"]
 		else:
 			self.skinName = "MovieSelection"
 		HelpableScreen.__init__(self)
@@ -693,7 +697,7 @@
 			locations = []
 			buildMovieLocationList(locations)
 			prefix = _("Goto") + ": "
-			for d,p in locations:
+			for d, p in locations:
 				if p and p.startswith('/'):
 					userDefinedActions[p] = prefix + d
 			config.movielist.btn_red = ConfigSelection(default='delete', choices=userDefinedActions)
@@ -749,42 +753,42 @@
 			a()
 
 	def btn_red(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if not InfoBarInstance.LongButtonPressed:
 			self._callButton(config.movielist.btn_red.value)
 	def btn_green(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if not InfoBarInstance.LongButtonPressed:
 			self._callButton(config.movielist.btn_green.value)
 	def btn_yellow(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if not InfoBarInstance.LongButtonPressed:
 			self._callButton(config.movielist.btn_yellow.value)
 	def btn_blue(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if not InfoBarInstance.LongButtonPressed:
 			self._callButton(config.movielist.btn_blue.value)
 	def btn_redlong(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if InfoBarInstance.LongButtonPressed:
 			self._callButton(config.movielist.btn_redlong.value)
 	def btn_greenlong(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if InfoBarInstance.LongButtonPressed:
 			self._callButton(config.movielist.btn_greenlong.value)
 	def btn_yellowlong(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if InfoBarInstance.LongButtonPressed:
 			self._callButton(config.movielist.btn_yellowlong.value)
 	def btn_bluelong(self):
-		from InfoBar import InfoBar
+		from Screens.InfoBar import InfoBar
 		InfoBarInstance = InfoBar.instance
 		if InfoBarInstance.LongButtonPressed:
 			self._callButton(config.movielist.btn_bluelong.value)
@@ -838,7 +842,7 @@
 			self.list.moveToChar(charstr[0], self["chosenletter"])
 
 	def keyAsciiCode(self):
-		unichar = unichr(getPrevAsciiCode())
+		unichar = six.unichr(getPrevAsciiCode())
 		charstr = unichar.encode("utf-8")
 		if len(charstr) == 1:
 			self.list.moveToString(charstr[0], self["chosenletter"])
@@ -900,8 +904,8 @@
 	def __onClose(self):
 		try:
 			NavigationInstance.instance.RecordTimer.on_state_change.remove(self.list.updateRecordings)
-		except Exception, e:
-			print "[ML] failed to unsubscribe:", e
+		except Exception as e:
+			print("[ML] failed to unsubscribe:", e)
 			pass
 
 	def createSummary(self):
@@ -1034,8 +1038,8 @@
 				path = os.path.split(path.rstrip('/'))[0]
 			self.session.open(DVD.DVDPlayer, dvd_filelist=[path])
 			return True
-		except Exception, e:
-			print "[ML] DVD Player not installed:", e
+		except Exception as e:
+			print("[ML] DVD Player not installed:", e)
 
 	def __serviceStarted(self):
 		if not self.list.playInBackground or not self.list.playInForeground:
@@ -1086,10 +1090,10 @@
 		playInBackground = self.list.playInBackground
 		playInForeground = self.list.playInForeground
 		if not playInBackground:
-			print "Not playing anything in background"
+			print("Not playing anything in background")
 			return
 		if not playInBackground:
-			print "Not playing anything in foreground"
+			print("Not playing anything in foreground")
 			return
 		current = self.getCurrent()
 		self.session.nav.stopService()
@@ -1104,7 +1108,7 @@
 				return
 			path = next.getPath()
 			ext = os.path.splitext(path)[1].lower()
-			print "Next up:", path
+			print("Next up:", path)
 			if ext in AUDIO_EXTENSIONS:
 				self.nextInBackground = next
 				self.callLater(self.preview)
@@ -1231,10 +1235,10 @@
 							if p == path:
 								index = len(filelist)
 							if os.path.splitext(p)[1].lower() in IMAGE_EXTENSIONS:
-								filelist.append(((p,False), None))
+								filelist.append(((p, False), None))
 						self.session.open(ui.Pic_Full_View, filelist, index, path)
-					except Exception, ex:
-						print "[ML] Cannot display", str(ex)
+					except Exception as ex:
+						print("[ML] Cannot display", str(ex))
 					return
 				Screens.InfoBar.InfoBar.instance.checkTimeshiftRunning(boundFunction(self.itemSelectedCheckTimeshiftCallback, ext, path))
 
@@ -1266,8 +1270,8 @@
 			file = open(path, "wb")
 			pickle.dump(self.settings, file)
 			file.close()
-		except Exception, e:
-			print "Failed to save settings to %s: %s" % (path, e)
+		except Exception as e:
+			print("Failed to save settings to %s: %s" % (path, e))
 		# Also set config items, in case the user has a read-only disk
 		config.movielist.moviesort.value = self.settings["moviesort"]
 		config.movielist.description.value = self.settings["description"]
@@ -1285,7 +1289,7 @@
 				updates = pickle.load(file)
 				file.close()
 				self.applyConfigSettings(updates)
-			except IOError, e:
+			except IOError as e:
 				updates = {
 					"moviesort": config.movielist.moviesort.default,
 					"description": config.movielist.description.default,
@@ -1293,8 +1297,8 @@
 				}
 				self.applyConfigSettings(updates)
 				pass # ignore fail to open errors
-			except Exception, e:
-				print "Failed to load settings from %s: %s" % (path, e)
+			except Exception as e:
+				print("Failed to load settings from %s: %s" % (path, e))
 		else:
 			updates = {
 				"moviesort": config.movielist.moviesort.value,
@@ -1321,7 +1325,7 @@
 		return needUpdate
 
 	def sortBy(self, newType):
-		print 'SORTYBY:',newType
+		print('SORTYBY:', newType)
 		self.settings["moviesort"] = newType
 		self.saveLocalSettings()
 		self.setSortType(newType)
@@ -1646,14 +1650,14 @@
 			ref = eServiceReference(eServiceReference.idFile, eServiceReference.noFlags, eServiceReferenceFS.directory)
 			ref.setPath(path)
 			self.reloadList(sel=ref)
-		except OSError, e:
-			print "Error %s:" % e.errno, e
+		except OSError as e:
+			print("Error %s:" % e.errno, e)
 			if e.errno == 17:
 				msg = _("The path %s already exists.") % name
 			else:
 				msg = _("Error") + '\n' + str(e)
-		except Exception, e:
-			print "[ML] Unexpected error:", e
+		except Exception as e:
+			print("[ML] Unexpected error:", e)
 			msg = _("Error") + '\n' + str(e)
 		if msg:
 			mbox=self.session.open(MessageBox, msg, type = MessageBox.TYPE_ERROR, timeout = 5)
@@ -1720,23 +1724,23 @@
 					else:
 						self.list.invalidateCurrentItem()
 					return
-				pathname,filename = os.path.split(path)
+				pathname, filename = os.path.split(path)
 				newpath = os.path.join(pathname, name)
 				msg = None
-				print "[ML] rename", path, "to", newpath
+				print("[ML] rename", path, "to", newpath)
 				os.rename(path, newpath)
 				ref = eServiceReference(eServiceReference.idFile, eServiceReference.noFlags, eServiceReferenceFS.directory)
 				ref.setPath(newpath)
 				self.reloadList(sel=ref)
-			except OSError, e:
-				print "Error %s:" % e.errno, e
+			except OSError as e:
+				print("Error %s:" % e.errno, e)
 				if e.errno == 17:
 					msg = _("The path %s already exists.") % name
 				else:
 					msg = _("Error") + '\n' + str(e)
-			except Exception, e:
+			except Exception as e:
 				import traceback
-				print "[ML] Unexpected error:", e
+				print("[ML] Unexpected error:", e)
 				traceback.print_exc()
 				msg = _("Error") + '\n' + str(e)
 			if msg:
@@ -1771,18 +1775,18 @@
 					if not fn.startswith('.'): # Skip hidden things
 						d = os.path.join(base, fn)
 						if os.path.isdir(d) and (d not in inlist):
-							bookmarks.append((fn,d))
+							bookmarks.append((fn, d))
 							inlist.append(d)
-			except Exception, e :
-				print "[MovieSelection]", e
+			except Exception as e :
+				print("[MovieSelection]", e)
 			# Last favourites
 			for d in last_selected_dest:
 				if d not in inlist:
-					bookmarks.append((d,d))
+					bookmarks.append((d, d))
 			# Other favourites
 			for d in config.movielist.videodirs.value:
 				d = os.path.normpath(d)
-				bookmarks.append((d,d))
+				bookmarks.append((d, d))
 				inlist.append(d)
 			for p in Components.Harddisk.harddiskmanager.getMountedPartitions():
 				d = os.path.normpath(p.mountpoint)
@@ -1806,7 +1810,7 @@
 				name = item[1].getName(current)
 			moveServiceFiles(current, dest, name)
 			self["list"].removeService(current)
-		except Exception, e:
+		except Exception as e:
 			mbox=self.session.open(MessageBox, str(e), MessageBox.TYPE_ERROR)
 			mbox.setTitle(self.getTitle())
 
@@ -1833,7 +1837,7 @@
 			else:
 				name = item[1].getName(current)
 			copyServiceFiles(current, dest, name)
-		except Exception, e:
+		except Exception as e:
 			mbox=self.session.open(MessageBox, str(e), MessageBox.TYPE_ERROR)
 			mbox.setTitle(self.getTitle())
 
@@ -1909,7 +1913,7 @@
 							files += 1
 				if files or subdirs:
 					folder_filename = os.path.split(os.path.split(name)[0])[1]
-					mbox=self.session.openWithCallback(self.delete, MessageBox, _("'%s' contains %d file(s) and %d sub-directories.\n") % (folder_filename,files,subdirs) + are_you_sure)
+					mbox=self.session.openWithCallback(self.delete, MessageBox, _("'%s' contains %d file(s) and %d sub-directories.\n") % (folder_filename, files, subdirs) + are_you_sure)
 					mbox.setTitle(self.getTitle())
 					return
 			else:
@@ -1924,8 +1928,8 @@
 						self["list"].removeService(current)
 						self.showActionFeedback(_("Deleted") + " " + name)
 						return
-					except Exception, e:
-						print "[MovieSelection] Weird error moving to trash", e
+					except Exception as e:
+						print("[MovieSelection] Weird error moving to trash", e)
 						msg = _("Cannot delete file") + "\n" + str(e) + "\n"
 						return
 				for fn in os.listdir(cur_path):
@@ -1937,14 +1941,14 @@
 							files += 1
 				if files or subdirs:
 					folder_filename = os.path.split(os.path.split(name)[0])[1]
-					mbox=self.session.openWithCallback(self.delete, MessageBox, _("'%s' contains %d file(s) and %d sub-directories.\n") % (folder_filename,files,subdirs) + are_you_sure)
+					mbox=self.session.openWithCallback(self.delete, MessageBox, _("'%s' contains %d file(s) and %d sub-directories.\n") % (folder_filename, files, subdirs) + are_you_sure)
 					mbox.setTitle(self.getTitle())
 					return
 				else:
 					try:
 						os.rmdir(cur_path)
-					except Exception, e:
-						print "[MovieSelection] Failed delete", e
+					except Exception as e:
+						print("[MovieSelection] Failed delete", e)
 						self.session.open(MessageBox, _("Delete failed!") + "\n" + str(e), MessageBox.TYPE_ERROR)
 					else:
 						self["list"].removeService(current)
@@ -2006,17 +2010,17 @@
 				eBackgroundFileEraser.getInstance().erase(os.path.realpath(current.getPath()))
 			else:
 				if offline.deleteFromDisk(0):
-					raise Exception, "Offline delete failed"
+					raise Exception("Offline delete failed")
 			self["list"].removeService(current)
 			from Screens.InfoBarGenerics import delResumePoint
 			delResumePoint(current)
 			self.showActionFeedback(_("Deleted") + " " + name)
-		except Exception, ex:
+		except Exception as ex:
 			mbox=self.session.open(MessageBox, _("Delete failed!") + "\n" + name + "\n" + str(ex), MessageBox.TYPE_ERROR)
 			mbox.setTitle(self.getTitle())
 
 	def purgeAll(self):
-		recordings = self.session.nav.getRecordings(False,pNavigation.isRealRecording)
+		recordings = self.session.nav.getRecordings(False, pNavigation.isRealRecording)
 		next_rec_time = -1
 		if not recordings:
 			next_rec_time = self.session.nav.RecordTimer.getNextRecordingTime()
@@ -2064,9 +2068,9 @@
 		self.gotFilename(defaultMoviePath())
 
 	def do_sortdefault(self):
-		print 'SORT:',config.movielist.moviesort.value
+		print('SORT:', config.movielist.moviesort.value)
 		config.movielist.moviesort.load()
-		print 'SORT:',config.movielist.moviesort.value
+		print('SORT:', config.movielist.moviesort.value)
 		self.sortBy(int(config.movielist.moviesort.value))
 
 	def do_sort(self):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/MultiBootSelector.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/MultiBootSelector.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/MultiBootSelector.py	2020-06-21 10:16:12.719441640 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/MultiBootSelector.py	2020-06-21 10:20:02.359325953 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from enigma import getDesktop
 from os import mkdir, path
 
@@ -92,7 +93,7 @@
 		list = []
 		mode = GetCurrentImageMode() or 0
 		currentimageslot = GetCurrentImage()
-		print "[MultiBootSelector] reboot1 slot:", currentimageslot
+		print("[MultiBootSelector] reboot1 slot:", currentimageslot)
 		current = "  %s" % _("(current image)")
 		slotSingle = _("Slot %s: %s%s")
 		slotMulti = _("Slot %s: %s - Mode %d%s")
@@ -116,14 +117,14 @@
 		self.currentSelected = self["config"].l.getCurrentSelection()
 		self.slot = self.currentSelected[0][1]
 		if self.currentSelected[0][1] != "Queued":
-			print "[MultiBootSelector] reboot2 rebootslot = %s, " % self.slot
-			print "[MultiBootSelector] reboot3 slotinfo = %s" % SystemInfo["canMultiBoot"]
+			print("[MultiBootSelector] reboot2 rebootslot = %s, " % self.slot)
+			print("[MultiBootSelector] reboot3 slotinfo = %s" % SystemInfo["canMultiBoot"])
 			if self.slot < 12:
 				copyfile(path.join(self.mountDir, SystemInfo["canMultiBoot"][self.slot]["startupfile"]), path.join(self.mountDir, "STARTUP"))
 			else:
 				self.slot -= 12
 				startupfile = path.join(self.mountDir, SystemInfo["canMultiBoot"][self.slot]["startupfile"].replace("BOXMODE_1", "BOXMODE_12"))
-				print "[MultiBootSelector] reboot5 startupfile = %s" % startupfile
+				print("[MultiBootSelector] reboot5 startupfile = %s" % startupfile)
 				if "BOXMODE" in startupfile:
 					copyfile(startupfile, path.join(self.mountDir, "STARTUP"))
 				else:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/NetworkSetup.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/NetworkSetup.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/NetworkSetup.py	2020-06-21 10:16:12.719441640 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/NetworkSetup.py	2020-06-21 10:20:02.359325953 -0400
@@ -1,7 +1,9 @@
+from __future__ import print_function
 from boxbranding import getBoxType, getMachineBrand, getMachineName
 from os import path as os_path, remove, unlink, rename, chmod, access, X_OK
 from shutil import move
 import time
+import six
 
 from enigma import eTimer, eConsoleAppContainer
 
@@ -31,18 +33,17 @@
 from Tools.LoadPixmap import LoadPixmap
 from Plugins.Plugin import PluginDescriptor
 from random import Random
-from subprocess import call
-import commands
 import string
 import os
 import glob
+import sys
 
 if float(getVersionString()) >= 4.0:
 	basegroup = "packagegroup-base"
 else:
 	basegroup = "task-base"
 
-class NetworkAdapterSelection(Screen,HelpableScreen):
+class NetworkAdapterSelection(Screen, HelpableScreen):
 	def __init__(self, session):
 		Screen.__init__(self, session)
 		HelpableScreen.__init__(self)
@@ -76,16 +77,16 @@
 
 		self["DefaultInterfaceAction"] = HelpableActionMap(self, "ColorActions",
 			{
-			"yellow": (self.setDefaultInterface, [_("Set interface as the default Interface"),_("* Only available if more than one interface is active.")] ),
+			"yellow": (self.setDefaultInterface, [_("Set interface as the default Interface"), _("* Only available if more than one interface is active.")] ),
 			})
 
-		self.adapters = [(iNetwork.getFriendlyAdapterName(x),x) for x in iNetwork.getAdapterList()]
+		self.adapters = [(iNetwork.getFriendlyAdapterName(x), x) for x in iNetwork.getAdapterList()]
 
 		if not self.adapters:
-			self.adapters = [(iNetwork.getFriendlyAdapterName(x),x) for x in iNetwork.getConfiguredAdapters()]
+			self.adapters = [(iNetwork.getFriendlyAdapterName(x), x) for x in iNetwork.getConfiguredAdapters()]
 
 		if len(self.adapters) == 0:
-			self.adapters = [(iNetwork.getFriendlyAdapterName(x),x) for x in iNetwork.getInstalledAdapters()]
+			self.adapters = [(iNetwork.getFriendlyAdapterName(x), x) for x in iNetwork.getInstalledAdapters()]
 
 		self.onChangedEntry = [ ]
 		self.list = []
@@ -113,7 +114,7 @@
 		for cb in self.onChangedEntry:
 			cb(name, desc)
 
-	def buildInterfaceList(self,iface,name,default,active ):
+	def buildInterfaceList(self, iface, name, default, active ):
 		divpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "div-h.png"))
 		defaultpng = None
 		activepng = None
@@ -121,29 +122,29 @@
 		interfacepng = None
 
 		if not iNetwork.isWirelessInterface(iface):
-			if active is True:
+			if active == True:
 				interfacepng = LoadPixmap(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/network_wired-active.png"))
-			elif active is False:
+			elif active == False:
 				interfacepng = LoadPixmap(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/network_wired-inactive.png"))
 			else:
 				interfacepng = LoadPixmap(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/network_wired.png"))
 		elif iNetwork.isWirelessInterface(iface):
-			if active is True:
+			if active == True:
 				interfacepng = LoadPixmap(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/network_wireless-active.png"))
-			elif active is False:
+			elif active == False:
 				interfacepng = LoadPixmap(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/network_wireless-inactive.png"))
 			else:
 				interfacepng = LoadPixmap(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/network_wireless.png"))
 
 		num_configured_if = len(iNetwork.getConfiguredAdapters())
 		if num_configured_if >= 2:
-			if default is True:
+			if default == True:
 				defaultpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "buttons/button_blue.png"))
-			elif default is False:
+			elif default == False:
 				defaultpng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "buttons/button_blue_off.png"))
-		if active is True:
+		if active == True:
 			activepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/lock_on.png"))
-		elif active is False:
+		elif active == False:
 			activepng = LoadPixmap(cached=True, path=resolveFilename(SCOPE_ACTIVE_SKIN, "icons/lock_error.png"))
 
 		description = iNetwork.getFriendlyAdapterDescription(iface)
@@ -167,7 +168,7 @@
 			unlink("/etc/default_gw")
 
 		if os_path.exists("/etc/default_gw"):
-			fp = file('/etc/default_gw', 'r')
+			fp = open('/etc/default_gw', 'r')
 			result = fp.read()
 			fp.close()
 			default_gw = result
@@ -177,7 +178,7 @@
 				default_int = True
 			else:
 				default_int = False
-			if iNetwork.getAdapterAttribute(x[1], 'up') is True:
+			if iNetwork.getAdapterAttribute(x[1], 'up') == True:
 				active_int = True
 			else:
 				active_int = False
@@ -207,7 +208,7 @@
 
 	def okbuttonClick(self):
 		selection = self["list"].getCurrent()
-		if selection is not None:
+		if selection != None:
 			self.session.openWithCallback(self.AdapterSetupClosed, AdapterSetupConfiguration, selection[0])
 
 	def AdapterSetupClosed(self, *ret):
@@ -226,15 +227,15 @@
 		self.restartLanRef = self.session.openWithCallback(self.restartfinishedCB, MessageBox, _("Please wait while we configure your network..."), type = MessageBox.TYPE_INFO, enable_input = False)
 
 	def restartLanDataAvail(self, data):
-		if data is True:
+		if data == True:
 			iNetwork.getInterfaces(self.getInterfacesDataAvail)
 
 	def getInterfacesDataAvail(self, data):
-		if data is True:
+		if data == True:
 			self.restartLanRef.close(True)
 
 	def restartfinishedCB(self, data):
-		if data is True:
+		if data == True:
 			self.updateList()
 			self.session.open(MessageBox, _("Finished configuring your network"), type = MessageBox.TYPE_INFO, timeout = 10, default = False)
 
@@ -243,10 +244,10 @@
 			try:
 				from Plugins.SystemPlugins.NetworkWizard.NetworkWizard import NetworkWizard
 			except ImportError:
-				self.session.open(MessageBox, _("The network wizard extension is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+				self.session.open(MessageBox, _("The network wizard extension is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 			else:
 				selection = self["list"].getCurrent()
-				if selection is not None:
+				if selection != None:
 					self.session.openWithCallback(self.AdapterSetupClosed, NetworkWizard, selection[0])
 
 
@@ -256,7 +257,7 @@
 		HelpableScreen.__init__(self)
 		Screen.setTitle(self, _("Nameserver settings"))
 		self.backupNameserverList = iNetwork.getNameserverList()[:]
-		print "backup-list:", self.backupNameserverList
+		print("backup-list:", self.backupNameserverList)
 
 		self["key_red"] = StaticText(_("Cancel"))
 		self["key_green"] = StaticText(_("Save"))
@@ -316,7 +317,7 @@
 
 	def cancel(self):
 		iNetwork.clearNameservers()
-		print "backup-list:", self.backupNameserverList
+		print("backup-list:", self.backupNameserverList)
 		for nameserver in self.backupNameserverList:
 			iNetwork.addNameserver(nameserver)
 		self.close()
@@ -327,7 +328,7 @@
 		self.createSetup()
 
 	def remove(self):
-		print "currentIndex:", self["config"].getCurrentIndex()
+		print("currentIndex:", self["config"].getCurrentIndex())
 		index = self["config"].getCurrentIndex()
 		if index < len(self.nameservers):
 			iNetwork.removeNameserver(self.nameservers[index])
@@ -396,15 +397,15 @@
 		self.restartLanRef = self.session.openWithCallback(self.restartfinishedCB, MessageBox, _("Please wait while we configure your network..."), type = MessageBox.TYPE_INFO, enable_input = False)
 
 	def restartLanDataAvail(self, data):
-		if data is True:
+		if data == True:
 			iNetwork.getInterfaces(self.getInterfacesDataAvail)
 
 	def getInterfacesDataAvail(self, data):
-		if data is True:
+		if data == True:
 			self.restartLanRef.close(True)
 
 	def restartfinishedCB(self, data):
-		if data is True:
+		if data == True:
 			self.session.openWithCallback(self.close, MessageBox, _("Finished configuring your network"), type = MessageBox.TYPE_INFO, timeout = 10, default = False)
 
 class AdapterSetup(Screen, ConfigListScreen, HelpableScreen):
@@ -446,7 +447,7 @@
 		}, -2)
 
 		self.list = []
-		ConfigListScreen.__init__(self, self.list,session = self.session)
+		ConfigListScreen.__init__(self, self.list, session = self.session)
 		self.createSetup()
 		self.onLayoutFinish.append(self.layoutFinished)
 		self.onClose.append(self.cleanup)
@@ -479,14 +480,14 @@
 	def layoutFinished(self):
 		self["DNS1"].setText(self.primaryDNS.getText())
 		self["DNS2"].setText(self.secondaryDNS.getText())
-		if self.ipConfigEntry.getText() is not None:
+		if self.ipConfigEntry.getText() != None:
 			if self.ipConfigEntry.getText() == "0.0.0.0":
 				self["IP"].setText(_("N/A"))
 			else:
 				self["IP"].setText(self.ipConfigEntry.getText())
 		else:
 			self["IP"].setText(_("N/A"))
-		if self.netmaskConfigEntry.getText() is not None:
+		if self.netmaskConfigEntry.getText() != None:
 			if self.netmaskConfigEntry.getText() == "0.0.0.0":
 				self["Mask"].setText(_("N/A"))
 			else:
@@ -551,7 +552,7 @@
 				iface_file = "/etc/network/interfaces"
 				default_v = False
 				if os_path.exists(iface_file):
-					with open(iface_file,'r') as f:
+					with open(iface_file, 'r') as f:
 						output = f.read()
 					search_str = "#only WakeOnWiFi " + self.iface
 					if output.find(search_str) >= 0:
@@ -565,23 +566,23 @@
 
 		self.activateInterfaceEntry = NoSave(ConfigYesNo(default=iNetwork.getAdapterAttribute(self.iface, "up") or False))
 		self.dhcpConfigEntry = NoSave(ConfigYesNo(default=iNetwork.getAdapterAttribute(self.iface, "dhcp") or False))
-		self.ipConfigEntry = NoSave(ConfigIP(default=iNetwork.getAdapterAttribute(self.iface, "ip")) or [0,0,0,0])
-		self.netmaskConfigEntry = NoSave(ConfigIP(default=iNetwork.getAdapterAttribute(self.iface, "netmask") or [255,0,0,0]))
+		self.ipConfigEntry = NoSave(ConfigIP(default=iNetwork.getAdapterAttribute(self.iface, "ip")) or [0, 0, 0, 0])
+		self.netmaskConfigEntry = NoSave(ConfigIP(default=iNetwork.getAdapterAttribute(self.iface, "netmask") or [255, 0, 0, 0]))
 		if iNetwork.getAdapterAttribute(self.iface, "gateway"):
 			self.dhcpdefault = True
 		else:
 			self.dhcpdefault = False
 		self.hasGatewayConfigEntry = NoSave(ConfigYesNo(default=self.dhcpdefault or False))
-		self.gatewayConfigEntry = NoSave(ConfigIP(default=iNetwork.getAdapterAttribute(self.iface, "gateway") or [0,0,0,0]))
+		self.gatewayConfigEntry = NoSave(ConfigIP(default=iNetwork.getAdapterAttribute(self.iface, "gateway") or [0, 0, 0, 0]))
 		if iNetwork.getAdapterAttribute(self.iface, "dns-nameservers"):
 			self.dnsconfigdefault=True
 		else:
 			self.dnsconfigdefault=False
 		self.hasDNSConfigEntry = NoSave(ConfigYesNo(default=self.dnsconfigdefault or False))
-		manualNameservers = (iNetwork.getInterfacesNameserverList(self.iface) + [[0,0,0,0]] * 2)[0:2]
+		manualNameservers = (iNetwork.getInterfacesNameserverList(self.iface) + [[0, 0, 0, 0]] * 2)[0:2]
 		self.manualPrimaryDNS = NoSave(ConfigIP(default=manualNameservers[0]))
 		self.manualSecondaryDNS = NoSave(ConfigIP(default=manualNameservers[1]))
-		nameserver = (iNetwork.getNameserverList() + [[0,0,0,0]] * 2)[0:2]
+		nameserver = (iNetwork.getNameserverList() + [[0, 0, 0, 0]] * 2)[0:2]
 		self.primaryDNS = NoSave(ConfigIP(default=nameserver[0]))
 		self.secondaryDNS = NoSave(ConfigIP(default=nameserver[1]))
 
@@ -618,7 +619,7 @@
 			havewol = False
 			if SystemInfo["WakeOnLAN"] and not getBoxType() in ('et10000', 'gb800seplus', 'gb800ueplus', 'gbultrase', 'gbultraue', 'gbultraueh', 'gbipbox', 'gbquad', 'gbx1', 'gbx2', 'gbx3', 'gbx3h'):
 				havewol = True
-			if getBoxType() in ('et10000' , 'vuultimo4k') and self.iface == 'eth0':
+			if getBoxType() in ('et10000', 'vuultimo4k') and self.iface == 'eth0':
 				havewol = False
 			if havewol and self.onlyWakeOnWiFi != True:
 				self.list.append(getConfigListEntry(_('Enable Wake On LAN'), config.network.wol))
@@ -627,10 +628,10 @@
 			self.configStrings = None
 			for p in plugins.getPlugins(PluginDescriptor.WHERE_NETWORKSETUP):
 				callFnc = p.__call__["ifaceSupported"](self.iface)
-				if callFnc is not None:
-					if p.__call__.has_key("WlanPluginEntry"): # internally used only for WLAN Plugin
+				if callFnc != None:
+					if "WlanPluginEntry" in p.__call__: # internally used only for WLAN Plugin
 						self.extended = callFnc
-						if p.__call__.has_key("configStrings"):
+						if "configStrings" in p.__call__:
 							self.configStrings = p.__call__["configStrings"]
 
 						isExistBcmWifi = os_path.exists("/tmp/bcm/" + self.iface)
@@ -698,7 +699,7 @@
 		if ret == True:
 			num_configured_if = len(iNetwork.getConfiguredAdapters())
 			if num_configured_if >= 1:
-				if self.iface in iNetwork.getConfiguredAdapters() or (iNetwork.onlyWoWifaces.has_key(self.iface) and iNetwork.onlyWoWifaces[self.iface] is True):
+				if self.iface in iNetwork.getConfiguredAdapters() or (self.iface in iNetwork.onlyWoWifaces and iNetwork.onlyWoWifaces[self.iface] == True):
 					self.applyConfig(True)
 				else:
 					self.session.openWithCallback(self.secondIfaceFoundCB, MessageBox, _("A second configured interface has been found.\n\nDo you want to disable the second network interface?"), default = True)
@@ -708,7 +709,7 @@
 			self.keyCancel()
 
 	def secondIfaceFoundCB(self, data):
-		if data is False:
+		if data == False:
 			self.applyConfig(True)
 		else:
 			configuredInterfaces = iNetwork.getConfiguredAdapters()
@@ -716,10 +717,10 @@
 				if interface == self.iface:
 					continue
 				iNetwork.setAdapterAttribute(interface, "up", False)
-			iNetwork.deactivateInterface(configuredInterfaces,self.deactivateSecondInterfaceCB)
+			iNetwork.deactivateInterface(configuredInterfaces, self.deactivateSecondInterfaceCB)
 
 	def deactivateSecondInterfaceCB(self, data):
-		if data is True:
+		if data == True:
 			self.applyConfig(True)
 
 	def applyConfig(self, ret = False):
@@ -742,50 +743,50 @@
 			else:
 				iNetwork.setAdapterAttribute(self.iface, "dns-nameservers", False)
 
-			if self.extended is not None and self.configStrings is not None:
+			if self.extended != None and self.configStrings != None:
 				iNetwork.setAdapterAttribute(self.iface, "configStrings", self.configStrings(self.iface))
 				self.ws.writeConfig(self.iface)
 
-			if self.activateInterfaceEntry.value is False and not  (self.onlyWakeOnWiFi and self.onlyWakeOnWiFi.value is True):
-				iNetwork.deactivateInterface(self.iface,self.deactivateInterfaceCB)
+			if self.activateInterfaceEntry.value == False and not  (self.onlyWakeOnWiFi and self.onlyWakeOnWiFi.value == True):
+				iNetwork.deactivateInterface(self.iface, self.deactivateInterfaceCB)
 				iNetwork.writeNetworkConfig()
 				self.applyConfigRef = self.session.openWithCallback(self.applyConfigfinishedCB, MessageBox, _("Please wait for activation of your network configuration..."), type = MessageBox.TYPE_INFO, enable_input = False)
 			else:
-				if self.oldInterfaceState is False:
-					iNetwork.activateInterface(self.iface,self.deactivateInterfaceCB)
+				if self.oldInterfaceState == False:
+					iNetwork.activateInterface(self.iface, self.deactivateInterfaceCB)
 				else:
-					iNetwork.deactivateInterface(self.iface,self.activateInterfaceCB)
+					iNetwork.deactivateInterface(self.iface, self.activateInterfaceCB)
 				iNetwork.writeNetworkConfig()
 				self.applyConfigRef = self.session.openWithCallback(self.applyConfigfinishedCB, MessageBox, _("Please wait for activation of your network configuration..."), type = MessageBox.TYPE_INFO, enable_input = False)
 		else:
 			self.keyCancel()
 
 	def deactivateInterfaceCB(self, data):
-		if data is True:
+		if data == True:
 			self.applyConfigDataAvail(True)
 
 	def activateInterfaceCB(self, data):
-		if data is True:
-			iNetwork.activateInterface(self.iface,self.applyConfigDataAvail)
+		if data == True:
+			iNetwork.activateInterface(self.iface, self.applyConfigDataAvail)
 
 	def applyConfigDataAvail(self, data):
-		if data is True:
+		if data == True:
 			iNetwork.getInterfaces(self.getInterfacesDataAvail)
 
 	def getInterfacesDataAvail(self, data):
-		if data is True:
+		if data == True:
 			self.applyConfigRef.close(True)
 
-	def applyConfigfinishedCB(self,data):
-		if data is True:
+	def applyConfigfinishedCB(self, data):
+		if data == True:
 			if self.finished_cb:
 				self.session.openWithCallback(lambda x : self.finished_cb(), MessageBox, _("Your network configuration has been activated."), type = MessageBox.TYPE_INFO, timeout = 10)
 			else:
 				self.session.openWithCallback(self.ConfigfinishedCB, MessageBox, _("Your network configuration has been activated."), type = MessageBox.TYPE_INFO, timeout = 10)
 
-	def ConfigfinishedCB(self,data):
-		if data is not None:
-			if data is True:
+	def ConfigfinishedCB(self, data):
+		if data != None:
+			if data == True:
 				self.close('ok')
 
 	def keyCancelConfirm(self, result):
@@ -793,8 +794,8 @@
 			return
 		if SystemInfo["WakeOnLAN"]:
 			config.network.wol.setValue(self.wolstartvalue)
-		if self.oldInterfaceState is False:
-			iNetwork.deactivateInterface(self.iface,self.keyCancelCB)
+		if self.oldInterfaceState == False:
+			iNetwork.deactivateInterface(self.iface, self.keyCancelCB)
 		else:
 			self.close('cancel')
 
@@ -805,9 +806,9 @@
 		else:
 			self.close('cancel')
 
-	def keyCancelCB(self,data):
-		if data is not None:
-			if data is True:
+	def keyCancelCB(self, data):
+		if data != None:
+			if data == True:
 				self.close('cancel')
 
 	def runAsync(self, finished_cb):
@@ -816,7 +817,7 @@
 
 	def NameserverSetupClosed(self, *ret):
 		iNetwork.loadNameserverConfig()
-		nameserver = (iNetwork.getNameserverList() + [[0,0,0,0]] * 2)[0:2]
+		nameserver = (iNetwork.getNameserverList() + [[0, 0, 0, 0]] * 2)[0:2]
 		self.primaryDNS = NoSave(ConfigIP(default=nameserver[0]))
 		self.secondaryDNS = NoSave(ConfigIP(default=nameserver[1]))
 		self.createSetup()
@@ -828,10 +829,10 @@
 	def hideInputHelp(self):
 		current = self["config"].getCurrent()
 		if current == self.wlanSSID:
-			if current[1].help_window.instance is not None:
+			if current[1].help_window.instance != None:
 				current[1].help_window.instance.hide()
-		elif current == self.encryptionKey and config.plugins.wlan.encryption.value is not "Unencrypted":
-			if current[1].help_window.instance is not None:
+		elif current == self.encryptionKey and config.plugins.wlan.encryption.value != "Unencrypted":
+			if current[1].help_window.instance != None:
 				current[1].help_window.instance.hide()
 
 	def makeLineDnsNameservers(self, nameservers = []):
@@ -843,7 +844,7 @@
 
 
 class AdapterSetupConfiguration(Screen, HelpableScreen):
-	def __init__(self, session,iface):
+	def __init__(self, session, iface):
 		Screen.__init__(self, session)
 		HelpableScreen.__init__(self)
 		Screen.setTitle(self, _("Network Setup"))
@@ -886,7 +887,7 @@
 			"red": (self.close, _("exit networkadapter setup menu")),
 			})
 
-		self["actions"] = NumberActionMap(["WizardActions","ShortcutActions"],
+		self["actions"] = NumberActionMap(["WizardActions", "ShortcutActions"],
 		{
 			"ok": self.ok,
 			"back": self.close,
@@ -904,21 +905,21 @@
 		self.selectionChanged()
 
 
-	def queryWirelessDevice(self,iface):
+	def queryWirelessDevice(self, iface):
 		try:
-			from pythonwifi.iwlibs import Wireless
+			from wifi.scan import Cell
 			import errno
 		except ImportError:
 			return False
 		else:
 			try:
-				ifobj = Wireless(iface) # a Wireless NIC Object
-				wlanresponse = ifobj.getAPaddr()
-			except IOError, (error_no, error_str):
+				wlanresponse = list(Cell.all(iface))
+			except IOError as xxx_todo_changeme:
+				(error_no, error_str) = xxx_todo_changeme.args
 				if error_no in (errno.EOPNOTSUPP, errno.ENODEV, errno.EPERM):
 					return False
 				else:
-					print "error: ",error_no,error_str
+					print("error: ", error_no, error_str)
 					return True
 			else:
 				return True
@@ -930,16 +931,16 @@
 				try:
 					from Plugins.SystemPlugins.WirelessLan.plugin import WlanScan
 				except ImportError:
-					self.session.open(MessageBox, self.missingwlanplugintxt, type = MessageBox.TYPE_INFO,timeout = 10 )
+					self.session.open(MessageBox, self.missingwlanplugintxt, type = MessageBox.TYPE_INFO, timeout = 10 )
 				else:
 					if self.queryWirelessDevice(self.iface):
-						self.session.openWithCallback(self.AdapterSetupClosed, AdapterSetup,self.iface)
+						self.session.openWithCallback(self.AdapterSetupClosed, AdapterSetup, self.iface)
 					else:
 						self.showErrorMessage()	# Display Wlan not available Message
 			else:
-				self.session.openWithCallback(self.AdapterSetupClosed, AdapterSetup,self.iface)
+				self.session.openWithCallback(self.AdapterSetupClosed, AdapterSetup, self.iface)
 		if self["menulist"].getCurrent()[1] == 'test':
-			self.session.open(NetworkAdapterTest,self.iface)
+			self.session.open(NetworkAdapterTest, self.iface)
 		if self["menulist"].getCurrent()[1] == 'dns':
 			self.session.open(NameserverSetup)
 		if self["menulist"].getCurrent()[1] == 'mac':
@@ -948,7 +949,7 @@
 			try:
 				from Plugins.SystemPlugins.WirelessLan.plugin import WlanScan
 			except ImportError:
-				self.session.open(MessageBox, self.missingwlanplugintxt, type = MessageBox.TYPE_INFO,timeout = 10 )
+				self.session.open(MessageBox, self.missingwlanplugintxt, type = MessageBox.TYPE_INFO, timeout = 10 )
 			else:
 				if self.queryWirelessDevice(self.iface):
 					self.session.openWithCallback(self.WlanScanClosed, WlanScan, self.iface)
@@ -958,10 +959,10 @@
 			try:
 				from Plugins.SystemPlugins.WirelessLan.plugin import WlanStatus
 			except ImportError:
-				self.session.open(MessageBox, self.missingwlanplugintxt, type = MessageBox.TYPE_INFO,timeout = 10 )
+				self.session.open(MessageBox, self.missingwlanplugintxt, type = MessageBox.TYPE_INFO, timeout = 10 )
 			else:
 				if self.queryWirelessDevice(self.iface):
-					self.session.openWithCallback(self.WlanStatusClosed, WlanStatus,self.iface)
+					self.session.openWithCallback(self.WlanStatusClosed, WlanStatus, self.iface)
 				else:
 					self.showErrorMessage()	# Display Wlan not available Message
 		if self["menulist"].getCurrent()[1] == 'lanrestart':
@@ -1032,9 +1033,9 @@
 				self["statuspic"].setPixmapNum(1)
 				self["statuspic"].show()
 			else:
-				iStatus.getDataForInterface(self.iface,self.getInfoCB)
+				iStatus.getDataForInterface(self.iface, self.getInfoCB)
 		else:
-			iNetwork.getLinkState(self.iface,self.dataAvail)
+			iNetwork.getLinkState(self.iface, self.dataAvail)
 
 	def doNothing(self):
 		pass
@@ -1046,23 +1047,23 @@
 		self.extendedSetup = None
 		for p in plugins.getPlugins(PluginDescriptor.WHERE_NETWORKSETUP):
 			callFnc = p.__call__["ifaceSupported"](self.iface)
-			if callFnc is not None:
+			if callFnc != None:
 				self.extended = callFnc
-				if p.__call__.has_key("WlanPluginEntry"): # internally used only for WLAN Plugin
+				if "WlanPluginEntry" in p.__call__: # internally used only for WLAN Plugin
 					menu.append((_("Scan wireless networks"), "scanwlan"))
 					if iNetwork.getAdapterAttribute(self.iface, "up"):
 						menu.append((_("Show WLAN status"), "wlanstatus"))
 				else:
-					if p.__call__.has_key("menuEntryName"):
+					if "menuEntryName" in p.__call__:
 						menuEntryName = p.__call__["menuEntryName"](self.iface)
 					else:
 						menuEntryName = _('Extended setup...')
-					if p.__call__.has_key("menuEntryDescription"):
+					if "menuEntryDescription" in p.__call__:
 						menuEntryDescription = p.__call__["menuEntryDescription"](self.iface)
 					else:
 						menuEntryDescription = _('Extended network setup plugin...')
-					self.extendedSetup = ('extendedSetup',menuEntryDescription, self.extended)
-					menu.append((menuEntryName,self.extendedSetup))
+					self.extendedSetup = ('extendedSetup', menuEntryDescription, self.extended)
+					menu.append((menuEntryName, self.extendedSetup))
 
 		if os_path.exists(resolveFilename(SCOPE_PLUGINS, "SystemPlugins/NetworkWizard/networkwizard.xml")):
 			menu.append((_("Network wizard"), "openwizard"))
@@ -1073,15 +1074,15 @@
 		return menu
 
 	def AdapterSetupClosed(self, *ret):
-		if ret is not None and len(ret):
-			if ret[0] == 'ok' and (iNetwork.isWirelessInterface(self.iface) and iNetwork.getAdapterAttribute(self.iface, "up") is True):
+		if ret != None and len(ret):
+			if ret[0] == 'ok' and (iNetwork.isWirelessInterface(self.iface) and iNetwork.getAdapterAttribute(self.iface, "up") == True):
 				try:
 					from Plugins.SystemPlugins.WirelessLan.plugin import WlanStatus
 				except ImportError:
-					self.session.open(MessageBox, self.missingwlanplugintxt, type = MessageBox.TYPE_INFO,timeout = 10 )
+					self.session.open(MessageBox, self.missingwlanplugintxt, type = MessageBox.TYPE_INFO, timeout = 10 )
 				else:
 					if self.queryWirelessDevice(self.iface):
-						self.session.openWithCallback(self.WlanStatusClosed, WlanStatus,self.iface)
+						self.session.openWithCallback(self.WlanStatusClosed, WlanStatus, self.iface)
 					else:
 						self.showErrorMessage()	# Display Wlan not available Message
 			else:
@@ -1090,19 +1091,19 @@
 			self.updateStatusbar()
 
 	def WlanStatusClosed(self, *ret):
-		if ret is not None and len(ret):
+		if ret != None and len(ret):
 			from Plugins.SystemPlugins.WirelessLan.Wlan import iStatus
 			iStatus.stopWlanConsole()
 			self.updateStatusbar()
-			if iNetwork.getAdapterAttribute(self.iface, "up") is True and iNetwork.onlyWoWifaces.has_key(self.iface) and iNetwork.onlyWoWifaces[self.iface] is True:
+			if iNetwork.getAdapterAttribute(self.iface, "up") == True and self.iface in iNetwork.onlyWoWifaces and iNetwork.onlyWoWifaces[self.iface] == True:
 				iNetwork.deactivateInterface(self.iface, self.deactivateInterfaceCB)
 
 	def deactivateInterfaceCB(self, data):
 		iNetwork.getInterfaces()
 
 	def WlanScanClosed(self,*ret):
-		if ret[0] is not None:
-			self.session.openWithCallback(self.AdapterSetupClosed, AdapterSetup, self.iface,ret[0])
+		if ret[0] != None:
+			self.session.openWithCallback(self.AdapterSetupClosed, AdapterSetup, self.iface, ret[0])
 		else:
 			from Plugins.SystemPlugins.WirelessLan.Wlan import iStatus
 			iStatus.stopWlanConsole()
@@ -1114,19 +1115,20 @@
 			self.restartLanRef = self.session.openWithCallback(self.restartfinishedCB, MessageBox, _("Please wait while your network is restarting..."), type = MessageBox.TYPE_INFO, enable_input = False)
 
 	def restartLanDataAvail(self, data):
-		if data is True:
+		if data == True:
 			iNetwork.getInterfaces(self.getInterfacesDataAvail)
 
 	def getInterfacesDataAvail(self, data):
-		if data is True:
+		if data == True:
 			self.restartLanRef.close(True)
 
-	def restartfinishedCB(self,data):
-		if data is True:
+	def restartfinishedCB(self, data):
+		if data == True:
 			self.updateStatusbar()
 			self.session.open(MessageBox, _("Finished restarting your network"), type = MessageBox.TYPE_INFO, timeout = 10, default = False)
 
-	def dataAvail(self,data):
+	def dataAvail(self, data):
+		data = six.ensure_str(data)
 		self.LinkState = None
 		for line in data.splitlines():
 			line = line.strip()
@@ -1142,7 +1144,7 @@
 			self["statuspic"].show()
 
 	def showErrorMessage(self):
-		self.session.open(MessageBox, self.errortext, type = MessageBox.TYPE_INFO,timeout = 10 )
+		self.session.open(MessageBox, self.errortext, type = MessageBox.TYPE_INFO, timeout = 10 )
 
 	def cleanup(self):
 		iNetwork.stopLinkStateConsole()
@@ -1156,11 +1158,11 @@
 		else:
 			iStatus.stopWlanConsole()
 
-	def getInfoCB(self,data,status):
+	def getInfoCB(self, data, status):
 		self.LinkState = None
-		if data is not None:
-			if data is True:
-				if status is not None:
+		if data != None:
+			if data == True:
+				if status != None:
 					if status[self.iface]["essid"] == "off" or status[self.iface]["accesspoint"] == "Not-Associated" or status[self.iface]["accesspoint"] == False:
 						self.LinkState = False
 						self["statuspic"].setPixmapNum(1)
@@ -1169,9 +1171,9 @@
 						self.LinkState = True
 						iNetwork.checkNetworkState(self.checkNetworkCB)
 
-	def checkNetworkCB(self,data):
-		if iNetwork.getAdapterAttribute(self.iface, "up") is True:
-			if self.LinkState is True:
+	def checkNetworkCB(self, data):
+		if iNetwork.getAdapterAttribute(self.iface, "up") == True:
+			if self.LinkState == True:
 				if data <= 2:
 					self["statuspic"].setPixmapNum(0)
 				else:
@@ -1186,7 +1188,7 @@
 
 
 class NetworkAdapterTest(Screen):
-	def __init__(self, session,iface):
+	def __init__(self, session, iface):
 		Screen.__init__(self, session)
 		Screen.setTitle(self, _("Network Test"))
 		self.iface = iface
@@ -1195,7 +1197,7 @@
 		self.onClose.append(self.cleanup)
 		self.onHide.append(self.cleanup)
 
-		self["updown_actions"] = NumberActionMap(["WizardActions","ShortcutActions"],
+		self["updown_actions"] = NumberActionMap(["WizardActions", "ShortcutActions"],
 		{
 			"ok": self.KeyOK,
 			"blue": self.KeyOK,
@@ -1204,12 +1206,12 @@
 
 		}, -2)
 
-		self["shortcuts"] = ActionMap(["ShortcutActions","WizardActions"],
+		self["shortcuts"] = ActionMap(["ShortcutActions", "WizardActions"],
 		{
 			"red": self.cancel,
 			"back": self.cancel,
 		}, -2)
-		self["infoshortcuts"] = ActionMap(["ShortcutActions","WizardActions"],
+		self["infoshortcuts"] = ActionMap(["ShortcutActions", "WizardActions"],
 		{
 			"red": self.closeInfo,
 			"back": self.closeInfo,
@@ -1239,7 +1241,7 @@
 		self.nextStepTimer.callback.append(self.nextStepTimerFire)
 
 	def cancel(self):
-		if self.oldInterfaceState is False:
+		if self.oldInterfaceState == False:
 			iNetwork.setAdapterAttribute(self.iface, "up", self.oldInterfaceState)
 			iNetwork.deactivateInterface(self.iface)
 		self.close()
@@ -1260,7 +1262,7 @@
 		self.steptimer = False
 		self.runTest()
 
-	def updownhandler(self,direction):
+	def updownhandler(self, direction):
 		if direction == 'up':
 			if self.activebutton >=2:
 				self.activebutton -= 1
@@ -1274,7 +1276,7 @@
 				self.activebutton = 1
 			self.setActiveButton(self.activebutton)
 
-	def setActiveButton(self,button):
+	def setActiveButton(self, button):
 		if button == 1:
 			self["EditSettingsButton"].setPixmapNum(0)
 			self["EditSettings_Text"].setForegroundColorNum(0)
@@ -1358,7 +1360,7 @@
 
 	def doStep4(self):
 		self["Dhcptext"].setForegroundColorNum(1)
-		if iNetwork.getAdapterAttribute(self.iface, 'dhcp') is True:
+		if iNetwork.getAdapterAttribute(self.iface, 'dhcp') == True:
 			self["Dhcp"].setForegroundColorNum(2)
 			self["Dhcp"].setText(_("enabled"))
 			self["DhcpInfo_Check"].setPixmapNum(0)
@@ -1443,7 +1445,7 @@
 			self["InfoText"].show()
 			self["key_red"].setText(_("Back"))
 		if self.activebutton == 6: # Edit Settings
-			self.session.open(AdapterSetup,self.iface)
+			self.session.open(AdapterSetup, self.iface)
 
 	def KeyYellow(self):
 		self.nextstep = 0
@@ -1514,7 +1516,7 @@
 		self["InfoTextBorder"] = Pixmap()
 		self["InfoText"] = Label()
 
-	def getLinkState(self,iface):
+	def getLinkState(self, iface):
 		if iface in iNetwork.wlan_interfaces:
 			try:
 				from Plugins.SystemPlugins.WirelessLan.Wlan import iStatus
@@ -1524,11 +1526,11 @@
 				self["NetworkInfo_Check"].setPixmapNum(1)
 				self["NetworkInfo_Check"].show()
 			else:
-				iStatus.getDataForInterface(self.iface,self.getInfoCB)
+				iStatus.getDataForInterface(self.iface, self.getInfoCB)
 		else:
-			iNetwork.getLinkState(iface,self.LinkStatedataAvail)
+			iNetwork.getLinkState(iface, self.LinkStatedataAvail)
 
-	def LinkStatedataAvail(self,data):
+	def LinkStatedataAvail(self, data):
 		for item in data.splitlines():
 			if "Link detected:" in item:
 				if "yes" in item:
@@ -1544,7 +1546,7 @@
 			self["Network"].setText(_("unknown"))
 		self["NetworkInfo_Check"].show()
 
-	def NetworkStatedataAvail(self,data):
+	def NetworkStatedataAvail(self, data):
 		if data <= 2:
 			self["IP"].setForegroundColorNum(2)
 			self["IP"].setText(_("confirmed"))
@@ -1558,7 +1560,7 @@
 		self.steptimer = True
 		self.nextStepTimer.start(300)
 
-	def DNSLookupdataAvail(self,data):
+	def DNSLookupdataAvail(self, data):
 		if data <= 2:
 			self["DNS"].setForegroundColorNum(2)
 			self["DNS"].setText(_("confirmed"))
@@ -1581,10 +1583,10 @@
 		self["updown_actions"].setEnabled(True)
 		self.activebutton = 6
 
-	def getInfoCB(self,data,status):
-		if data is not None:
-			if data is True:
-				if status is not None:
+	def getInfoCB(self, data, status):
+		if data != None:
+			if data == True:
+				if status != None:
 					if status[self.iface]["essid"] == "off" or status[self.iface]["accesspoint"] == "Not-Associated" or status[self.iface]["accesspoint"] == False:
 						self["Network"].setForegroundColorNum(1)
 						self["Network"].setText(_("disconnected"))
@@ -1606,7 +1608,7 @@
 		else:
 			iStatus.stopWlanConsole()
 
-class NetworkMountsMenu(Screen,HelpableScreen):
+class NetworkMountsMenu(Screen, HelpableScreen):
 	def __init__(self, session):
 		Screen.__init__(self, session)
 		HelpableScreen.__init__(self)
@@ -1637,7 +1639,7 @@
 			"red": (self.close, _("exit networkadapter setup menu")),
 			})
 
-		self["actions"] = NumberActionMap(["WizardActions","ShortcutActions"],
+		self["actions"] = NumberActionMap(["WizardActions", "ShortcutActions"],
 		{
 			"ok": self.ok,
 			"back": self.close,
@@ -1692,18 +1694,18 @@
 		self.extendedSetup = None
 		for p in plugins.getPlugins(PluginDescriptor.WHERE_NETWORKMOUNTS):
 			callFnc = p.__call__["ifaceSupported"](self)
-			if callFnc is not None:
+			if callFnc != None:
 				self.extended = callFnc
-				if p.__call__.has_key("menuEntryName"):
+				if "menuEntryName" in p.__call__:
 					menuEntryName = p.__call__["menuEntryName"](self)
 				else:
 					menuEntryName = _('Extended Setup...')
-				if p.__call__.has_key("menuEntryDescription"):
+				if "menuEntryDescription" in p.__call__:
 					menuEntryDescription = p.__call__["menuEntryDescription"](self)
 				else:
 					menuEntryDescription = _('Extended Networksetup Plugin...')
-				self.extendedSetup = ('extendedSetup',menuEntryDescription, self.extended)
-				menu.append((menuEntryName,self.extendedSetup))
+				self.extendedSetup = ('extendedSetup', menuEntryDescription, self.extended)
+				menu.append((menuEntryName, self.extendedSetup))
 		return menu
 
 class NetworkAfp(Screen):
@@ -1734,10 +1736,11 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.checkNetworkState)
 
 	def checkNetworkState(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if 'Collected errors' in str:
 			self.session.openWithCallback(self.close, MessageBox, _("A background update check is in progress, please wait a few minutes and try again."), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif not str:
-			self.feedscheck = self.session.open(MessageBox,_('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
+			self.feedscheck = self.session.open(MessageBox, _('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
 			self.feedscheck.setTitle(_('Checking Feeds'))
 			cmd1 = "opkg update"
 			self.CheckConsole = Console()
@@ -1746,12 +1749,13 @@
 			self.updateService()
 
 	def checkNetworkStateFinished(self, result, retval,extra_args=None):
+		result = six.ensure_str(result)
 		if 'bad address' in result:
 			self.session.openWithCallback(self.InstallPackageFailed, MessageBox, _("Your %s %s is not connected to the internet, please check your network settings and try again.") % (getMachineBrand(), getMachineName()), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif ('wget returned 1' or 'wget returned 255' or '404 Not Found') in result:
 			self.session.openWithCallback(self.InstallPackageFailed, MessageBox, _("Sorry feeds are down for maintenance, please try again later."), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		else:
-			self.session.openWithCallback(self.InstallPackage,MessageBox,_('Your %s %s will be restarted after the installation of service\nReady to install %s ?') % (getMachineBrand(), getMachineName(), self.service_name), MessageBox.TYPE_YESNO)
+			self.session.openWithCallback(self.InstallPackage, MessageBox, _('Your %s %s will be restarted after the installation of service\nReady to install %s ?') % (getMachineBrand(), getMachineName(), self.service_name), MessageBox.TYPE_YESNO)
 
 	def InstallPackage(self, val):
 		if val:
@@ -1765,7 +1769,7 @@
 		self.close()
 
 	def doInstall(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Installing Service'))
 		self.Console.ePopen('/usr/bin/opkg install ' + pkgname, callback)
 
@@ -1776,8 +1780,9 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.RemovedataAvail)
 
 	def RemovedataAvail(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if str:
-			restartbox = self.session.openWithCallback(self.RemovePackage,MessageBox,_('Your %s %s will be restarted after the removal of service\nDo you want to remove now ?') % (getMachineBrand(), getMachineName()), MessageBox.TYPE_YESNO)
+			restartbox = self.session.openWithCallback(self.RemovePackage, MessageBox, _('Your %s %s will be restarted after the removal of service\nDo you want to remove now ?') % (getMachineBrand(), getMachineName()), MessageBox.TYPE_YESNO)
 			restartbox.setTitle(_('Ready to remove %s ?') % self.service_name)
 		else:
 			self.updateService()
@@ -1787,7 +1792,7 @@
 			self.doRemove(self.removeComplete, self.service_name)
 
 	def doRemove(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Removing Service'))
 		self.Console.ePopen('/usr/bin/opkg remove ' + pkgname + ' --force-remove --autoremove', callback)
 
@@ -1867,26 +1872,28 @@
 		self.my_sabnzbd_active = False
 		self.my_sabnzbd_run = False
 		self['actions'] = ActionMap(['WizardActions', 'ColorActions'], {'ok': self.close, 'back': self.close, 'red': self.UninstallCheck, 'green': self.SABnzbStartStop, 'yellow': self.activateSABnzbd})
-		self.service_name = 'sabnzbd'
+		self.service_name = ("sabnzbd3" if sys.version_info[0] >= 3 else "sabnzbd")
 		self.checkSABnzbdService()
 
 	def checkSABnzbdService(self):
-		print 'INSTALL CHECK STARTED',self.service_name
+		print('INSTALL CHECK STARTED', self.service_name)
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.checkNetworkState)
 
 	def checkNetworkState(self, str, retval, extra_args):
-		print 'INSTALL CHECK FINISHED',str
+		str = six.ensure_str(str)
+		print('INSTALL CHECK FINISHED', str)
 		if not str:
-			self.feedscheck = self.session.open(MessageBox,_('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
+			self.feedscheck = self.session.open(MessageBox, _('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
 			self.feedscheck.setTitle(_('Checking Feeds'))
 			cmd1 = "opkg update"
 			self.CheckConsole = Console()
 			self.CheckConsole.ePopen(cmd1, self.checkNetworkStateFinished)
 		else:
-			print 'INSTALL ALREADY INSTALLED'
+			print('INSTALL ALREADY INSTALLED')
 			self.updateService()
 
 	def checkNetworkStateFinished(self, result, retval,extra_args=None):
+		result = six.ensure_str(result)
 		if (float(getVersionString()) < 3.0 and result.find('mipsel/Packages.gz, wget returned 1') != -1) or (float(getVersionString()) >= 3.0 and result.find('mips32el/Packages.gz, wget returned 1') != -1):
 			self.session.openWithCallback(self.InstallPackageFailed, MessageBox, _("Sorry feeds are down for maintenance, please try again later."), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif result.find('bad address') != -1:
@@ -1906,7 +1913,7 @@
 		self.close()
 
 	def doInstall(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Installing Service'))
 		self.Console.ePopen('/usr/bin/opkg install ' + pkgname, callback)
 
@@ -1919,6 +1926,7 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.RemovedataAvail)
 
 	def RemovedataAvail(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if str:
 			self.session.openWithCallback(self.RemovePackage, MessageBox, _('Ready to remove %s ?') % self.service_name, MessageBox.TYPE_YESNO)
 		else:
@@ -1929,7 +1937,7 @@
 			self.doRemove(self.removeComplete, self.service_name)
 
 	def doRemove(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Removing Service'))
 		self.Console.ePopen('/usr/bin/opkg remove ' + pkgname + ' --force-remove --autoremove', callback)
 
@@ -2099,10 +2107,11 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.checkNetworkState)
 
 	def checkNetworkState(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if 'Collected errors' in str:
 			self.session.openWithCallback(self.close, MessageBox, _("A background update check is in progress, please wait a few minutes and try again."), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif not str:
-			self.feedscheck = self.session.open(MessageBox,_('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
+			self.feedscheck = self.session.open(MessageBox, _('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
 			self.feedscheck.setTitle(_('Checking Feeds'))
 			cmd1 = "opkg update"
 			self.CheckConsole = Console()
@@ -2111,12 +2120,13 @@
 			self.updateService()
 
 	def checkNetworkStateFinished(self, result, retval,extra_args=None):
+		result = six.ensure_str(result)
 		if 'bad address' in result:
 			self.session.openWithCallback(self.InstallPackageFailed, MessageBox, _("Your %s %s is not connected to the internet, please check your network settings and try again.") % (getMachineBrand(), getMachineName()), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif ('wget returned 1' or 'wget returned 255' or '404 Not Found') in result:
 			self.session.openWithCallback(self.InstallPackageFailed, MessageBox, _("Sorry feeds are down for maintenance, please try again later."), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		else:
-			self.session.openWithCallback(self.InstallPackage,MessageBox,_('Your %s %s will be restarted after the installation of service\nReady to install %s ?')  % (getMachineBrand(), getMachineName(), self.service_name), MessageBox.TYPE_YESNO)
+			self.session.openWithCallback(self.InstallPackage, MessageBox, _('Your %s %s will be restarted after the installation of service\nReady to install %s ?')  % (getMachineBrand(), getMachineName(), self.service_name), MessageBox.TYPE_YESNO)
 
 	def InstallPackage(self, val):
 		if val:
@@ -2130,7 +2140,7 @@
 		self.close()
 
 	def doInstall(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Installing Service'))
 		self.Console.ePopen('/usr/bin/opkg install ' + pkgname, callback)
 
@@ -2141,8 +2151,9 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.RemovedataAvail)
 
 	def RemovedataAvail(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if str:
-			restartbox = self.session.openWithCallback(self.RemovePackage,MessageBox,_('Your %s %s will be restarted after the removal of service\nDo you want to remove now ?') % (getMachineBrand(), getMachineName()), MessageBox.TYPE_YESNO)
+			restartbox = self.session.openWithCallback(self.RemovePackage, MessageBox, _('Your %s %s will be restarted after the removal of service\nDo you want to remove now ?') % (getMachineBrand(), getMachineName()), MessageBox.TYPE_YESNO)
 			restartbox.setTitle(_('Ready to remove %s ?') % self.service_name)
 		else:
 			self.updateService()
@@ -2152,7 +2163,7 @@
 			self.doRemove(self.removeComplete, self.service_name)
 
 	def doRemove(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Removing Service'))
 		self.Console.ePopen('/usr/bin/opkg remove ' + pkgname + ' --force-remove --autoremove', callback)
 
@@ -2238,10 +2249,11 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.checkNetworkState)
 
 	def checkNetworkState(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if 'Collected errors' in str:
 			self.session.openWithCallback(self.close, MessageBox, _("A background update check is in progress, please wait a few minutes and try again."), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif not str:
-			self.feedscheck = self.session.open(MessageBox,_('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
+			self.feedscheck = self.session.open(MessageBox, _('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
 			self.feedscheck.setTitle(_('Checking Feeds'))
 			cmd1 = "opkg update"
 			self.CheckConsole = Console()
@@ -2250,6 +2262,7 @@
 			self.updateService()
 
 	def checkNetworkStateFinished(self, result, retval,extra_args=None):
+		result = six.ensure_str(result)
 		if 'bad address' in result:
 			self.session.openWithCallback(self.InstallPackageFailed, MessageBox, _("Your %s %s is not connected to the internet, please check your network settings and try again.") % (getMachineBrand(), getMachineName()), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif ('wget returned 1' or 'wget returned 255' or '404 Not Found') in result:
@@ -2269,7 +2282,7 @@
 		self.close()
 
 	def doInstall(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Installing Service'))
 		self.Console.ePopen('/usr/bin/opkg install ' + pkgname, callback)
 
@@ -2282,6 +2295,7 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.RemovedataAvail)
 
 	def RemovedataAvail(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if str:
 			self.session.openWithCallback(self.RemovePackage, MessageBox, _('Ready to remove %s ?') % self.service_name, MessageBox.TYPE_YESNO)
 		else:
@@ -2292,7 +2306,7 @@
 			self.doRemove(self.removeComplete, self.service_name)
 
 	def doRemove(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Removing Service'))
 		self.Console.ePopen('/usr/bin/opkg remove ' + pkgname + ' --force-remove --autoremove', callback)
 
@@ -2411,10 +2425,11 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.checkNetworkState)
 
 	def checkNetworkState(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if 'Collected errors' in str:
 			self.session.openWithCallback(self.close, MessageBox, _("A background update check is in progress, please wait a few minutes and try again."), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif not str:
-			self.feedscheck = self.session.open(MessageBox,_('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
+			self.feedscheck = self.session.open(MessageBox, _('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
 			self.feedscheck.setTitle(_('Checking Feeds'))
 			cmd1 = "opkg update"
 			self.CheckConsole = Console()
@@ -2423,6 +2438,7 @@
 			self.updateService()
 
 	def checkNetworkStateFinished(self, result, retval,extra_args=None):
+		result = six.ensure_str(result)
 		if 'bad address' in result:
 			self.session.openWithCallback(self.InstallPackageFailed, MessageBox, _("Your %s %s is not connected to the internet, please check your network settings and try again.") % (getMachineBrand(), getMachineName()), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif ('wget returned 1' or 'wget returned 255' or '404 Not Found') in result:
@@ -2447,7 +2463,7 @@
 		self.close()
 
 	def doInstall(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Installing Service'))
 		self.Console.ePopen('/usr/bin/opkg install ' + pkgname, callback)
 
@@ -2459,8 +2475,9 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.RemovedataAvail)
 
 	def RemovedataAvail(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if str:
-			restartbox = self.session.openWithCallback(self.RemovePackage,MessageBox,_('Your %s %s will be restarted after the removal of service\nDo you want to remove now ?') % (getMachineBrand(), getMachineName()), MessageBox.TYPE_YESNO)
+			restartbox = self.session.openWithCallback(self.RemovePackage, MessageBox, _('Your %s %s will be restarted after the removal of service\nDo you want to remove now ?') % (getMachineBrand(), getMachineName()), MessageBox.TYPE_YESNO)
 			restartbox.setTitle(_('Ready to remove "%s" ?') % self.service_name)
 		else:
 			self.updateService()
@@ -2470,7 +2487,7 @@
 			self.doRemove(self.removeComplete, self.service_name)
 
 	def doRemove(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Removing Service'))
 		self.Console.ePopen('/usr/bin/opkg remove ' + pkgname + ' --force-remove --autoremove', callback)
 
@@ -2675,10 +2692,11 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.checkNetworkState)
 
 	def checkNetworkState(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if 'Collected errors' in str:
 			self.session.openWithCallback(self.close, MessageBox, _("A background update check is in progress, please wait a few minutes and try again."), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif not str:
-			self.feedscheck = self.session.open(MessageBox,_('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
+			self.feedscheck = self.session.open(MessageBox, _('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
 			self.feedscheck.setTitle(_('Checking Feeds'))
 			cmd1 = "opkg update"
 			self.CheckConsole = Console()
@@ -2687,6 +2705,7 @@
 			self.updateService()
 
 	def checkNetworkStateFinished(self, result, retval,extra_args=None):
+		result = six.ensure_str(result)
 		if 'bad address' in result:
 			self.session.openWithCallback(self.InstallPackageFailed, MessageBox, _("Your %s %s is not connected to the internet, please check your network settings and try again.") % (getMachineBrand(), getMachineName()), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif ('wget returned 1' or 'wget returned 255' or '404 Not Found') in result:
@@ -2706,7 +2725,7 @@
 		self.close()
 
 	def doInstall(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Installing Service'))
 		self.Console.ePopen('/usr/bin/opkg install ' + pkgname, callback)
 
@@ -2719,6 +2738,7 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.RemovedataAvail)
 
 	def RemovedataAvail(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if str:
 			self.session.openWithCallback(self.RemovePackage, MessageBox, _('Ready to remove %s ?') % self.service_name, MessageBox.TYPE_YESNO)
 		else:
@@ -2729,7 +2749,7 @@
 			self.doRemove(self.removeComplete, self.service_name)
 
 	def doRemove(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Removing Service'))
 		self.Console.ePopen('/usr/bin/opkg remove ' + pkgname + ' --force-remove --autoremove', callback)
 
@@ -2912,7 +2932,7 @@
 		sel = self['config'].getCurrent()
 		if sel:
 			if isinstance(self["config"].getCurrent()[1], ConfigText) or isinstance(self["config"].getCurrent()[1], ConfigPassword):
-				if self["config"].getCurrent()[1].help_window.instance is not None:
+				if self["config"].getCurrent()[1].help_window.instance != None:
 					self["config"].getCurrent()[1].help_window.hide()
 			self.vkvar = sel[0]
 			if self.vkvar == _("Username") + ':' or self.vkvar == _("Password") + ':' or self.vkvar == _("Alias") + ':' or self.vkvar == _("System") + ':':
@@ -2920,7 +2940,7 @@
 				self.session.openWithCallback(self.VirtualKeyBoardCallback, VirtualKeyBoard, title = self["config"].getCurrent()[0], text = self["config"].getCurrent()[1].value)
 
 	def VirtualKeyBoardCallback(self, callback = None):
-		if callback is not None and len(callback):
+		if callback != None and len(callback):
 			self["config"].getCurrent()[1].setValue(callback)
 			self["config"].invalidate(self["config"].getCurrent())
 
@@ -3024,10 +3044,11 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.checkNetworkState)
 
 	def checkNetworkState(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if 'Collected errors' in str:
 			self.session.openWithCallback(self.close, MessageBox, _("A background update check is in progress, please wait a few minutes and try again."), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif not str:
-			self.feedscheck = self.session.open(MessageBox,_('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
+			self.feedscheck = self.session.open(MessageBox, _('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
 			self.feedscheck.setTitle(_('Checking Feeds'))
 			cmd1 = "opkg update"
 			self.CheckConsole = Console()
@@ -3036,6 +3057,7 @@
 			self.updateService()
 
 	def checkNetworkStateFinished(self, result, retval,extra_args=None):
+		result = six.ensure_str(result)
 		if 'bad address' in result:
 			self.session.openWithCallback(self.InstallPackageFailed, MessageBox, _("Your %s %s is not connected to the internet, please check your network settings and try again.") % (getMachineBrand(), getMachineName()), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif ('wget returned 1' or 'wget returned 255' or '404 Not Found') in result:
@@ -3055,7 +3077,7 @@
 		self.close()
 
 	def doInstall(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Installing Service'))
 		self.Console.ePopen('/usr/bin/opkg install ' + pkgname, callback)
 
@@ -3068,6 +3090,7 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.RemovedataAvail)
 
 	def RemovedataAvail(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if str:
 			self.session.openWithCallback(self.RemovePackage, MessageBox, _('Ready to remove %s ?') % self.service_name, MessageBox.TYPE_YESNO)
 		else:
@@ -3078,7 +3101,7 @@
 			self.doRemove(self.removeComplete, self.service_name)
 
 	def doRemove(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Removing Service'))
 		self.Console.ePopen('/usr/bin/opkg remove ' + pkgname + ' --force-remove --autoremove', callback)
 
@@ -3236,7 +3259,7 @@
 
 	def updateList(self, ret=None):
 		self.list = []
-		self.ushare_user = NoSave(ConfigText(default=getBoxType(),fixed_size=False))
+		self.ushare_user = NoSave(ConfigText(default=getBoxType(), fixed_size=False))
 		self.ushare_iface = NoSave(ConfigText(fixed_size=False))
 		self.ushare_port = NoSave(ConfigNumber())
 		self.ushare_telnetport = NoSave(ConfigNumber())
@@ -3306,7 +3329,7 @@
 		sel = self['config'].getCurrent()
 		if sel:
 			if isinstance(self["config"].getCurrent()[1], ConfigText) or isinstance(self["config"].getCurrent()[1], ConfigPassword):
-				if self["config"].getCurrent()[1].help_window.instance is not None:
+				if self["config"].getCurrent()[1].help_window.instance != None:
 					self["config"].getCurrent()[1].help_window.hide()
 			self.vkvar = sel[0]
 			if self.vkvar == _("uShare Name") + ":" or self.vkvar == _("Share Folder's") + ":":
@@ -3314,7 +3337,7 @@
 				self.session.openWithCallback(self.VirtualKeyBoardCallback, VirtualKeyBoard, title = self["config"].getCurrent()[0], text = self["config"].getCurrent()[1].value)
 
 	def VirtualKeyBoardCallback(self, callback = None):
-		if callback is not None and len(callback):
+		if callback != None and len(callback):
 			self["config"].getCurrent()[1].setValue(callback)
 			self["config"].invalidate(self["config"].getCurrent())
 
@@ -3373,7 +3396,7 @@
 			self["config"].getCurrent()[1].help_window.hide()
 		except:
 			pass
-		self.session.openWithCallback(self.updateList,uShareSelection)
+		self.session.openWithCallback(self.updateList, uShareSelection)
 
 class uShareSelection(Screen):
 	def __init__(self, session):
@@ -3392,7 +3415,7 @@
 					self.mediafolders = line
 		self.selectedFiles = [str(n) for n in self.mediafolders.split(', ')]
 		defaultDir = '/media/'
-		self.filelist = MultiFileSelectList(self.selectedFiles, defaultDir,showFiles = False )
+		self.filelist = MultiFileSelectList(self.selectedFiles, defaultDir, showFiles = False )
 		self["checkList"] = self.filelist
 
 		self["actions"] = ActionMap(["DirectionActions", "OkCancelActions", "ShortcutActions"],
@@ -3418,7 +3441,7 @@
 
 	def selectionChanged(self):
 		current = self["checkList"].getCurrent()[0]
-		if current[2] is True:
+		if current[2] == True:
 			self["key_yellow"].setText(_("Deselect"))
 		else:
 			self["key_yellow"].setText(_("Select"))
@@ -3516,10 +3539,11 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.checkNetworkState)
 
 	def checkNetworkState(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if 'Collected errors' in str:
 			self.session.openWithCallback(self.close, MessageBox, _("A background update check is in progress, please wait a few minutes and try again."), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif not str:
-			self.feedscheck = self.session.open(MessageBox,_('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
+			self.feedscheck = self.session.open(MessageBox, _('Please wait whilst feeds state is checked.'), MessageBox.TYPE_INFO, enable_input = False)
 			self.feedscheck.setTitle(_('Checking Feeds'))
 			cmd1 = "opkg update"
 			self.CheckConsole = Console()
@@ -3528,6 +3552,7 @@
 			self.updateService()
 
 	def checkNetworkStateFinished(self, result, retval,extra_args=None):
+		result = six.ensure_str(result)
 		if 'bad address' in result:
 			self.session.openWithCallback(self.InstallPackageFailed, MessageBox, _("Your %s %s is not connected to the internet, please check your network settings and try again.") % (getMachineBrand(), getMachineName()), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif ('wget returned 1' or 'wget returned 255' or '404 Not Found') in result:
@@ -3547,7 +3572,7 @@
 		self.close()
 
 	def doInstall(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Installing Service'))
 		self.Console.ePopen('/usr/bin/opkg install ' + pkgname, callback)
 
@@ -3560,6 +3585,7 @@
 		self.Console.ePopen('/usr/bin/opkg list_installed ' + self.service_name, self.RemovedataAvail)
 
 	def RemovedataAvail(self, str, retval, extra_args):
+		str = six.ensure_str(str)
 		if str:
 			self.session.openWithCallback(self.RemovePackage, MessageBox, _('Ready to remove %s ?') % self.service_name, MessageBox.TYPE_YESNO)
 		else:
@@ -3570,7 +3596,7 @@
 			self.doRemove(self.removeComplete, self.service_name)
 
 	def doRemove(self, callback, pkgname):
-		self.message = self.session.open(MessageBox,_("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
+		self.message = self.session.open(MessageBox, _("please wait..."), MessageBox.TYPE_INFO, enable_input = False)
 		self.message.setTitle(_('Removing Service'))
 		self.Console.ePopen('/usr/bin/opkg remove ' + pkgname + ' --force-remove --autoremove', callback)
 
@@ -3717,7 +3743,7 @@
 
 	def updateList(self, ret=None):
 		self.list = []
-		self.minidlna_name = NoSave(ConfigText(default=getBoxType(),fixed_size=False))
+		self.minidlna_name = NoSave(ConfigText(default=getBoxType(), fixed_size=False))
 		self.minidlna_iface = NoSave(ConfigText(fixed_size=False))
 		self.minidlna_port = NoSave(ConfigNumber())
 		self.minidlna_serialno = NoSave(ConfigNumber())
@@ -3779,7 +3805,7 @@
 		sel = self['config'].getCurrent()
 		if sel:
 			if isinstance(self["config"].getCurrent()[1], ConfigText) or isinstance(self["config"].getCurrent()[1], ConfigPassword):
-				if self["config"].getCurrent()[1].help_window.instance is not None:
+				if self["config"].getCurrent()[1].help_window.instance != None:
 					self["config"].getCurrent()[1].help_window.hide()
 			self.vkvar = sel[0]
 			if self.vkvar == _("Name") + ":" or self.vkvar == _("Share Folder's") + ":":
@@ -3787,7 +3813,7 @@
 				self.session.openWithCallback(self.VirtualKeyBoardCallback, VirtualKeyBoard, title = self["config"].getCurrent()[0], text = self["config"].getCurrent()[1].value)
 
 	def VirtualKeyBoardCallback(self, callback = None):
-		if callback is not None and len(callback):
+		if callback != None and len(callback):
 			self["config"].getCurrent()[1].setValue(callback)
 			self["config"].invalidate(self["config"].getCurrent())
 
@@ -3840,7 +3866,7 @@
 			self["config"].getCurrent()[1].help_window.hide()
 		except:
 			pass
-		self.session.openWithCallback(self.updateList,MiniDLNASelection)
+		self.session.openWithCallback(self.updateList, MiniDLNASelection)
 
 class MiniDLNASelection(Screen):
 	def __init__(self, session):
@@ -3860,7 +3886,7 @@
 					self.mediafolders = line
 		self.selectedFiles = [str(n) for n in self.mediafolders.split(', ')]
 		defaultDir = '/media/'
-		self.filelist = MultiFileSelectList(self.selectedFiles, defaultDir,showFiles = False )
+		self.filelist = MultiFileSelectList(self.selectedFiles, defaultDir, showFiles = False )
 		self["checkList"] = self.filelist
 
 		self["actions"] = ActionMap(["DirectionActions", "OkCancelActions", "ShortcutActions"],
@@ -3886,7 +3912,7 @@
 
 	def selectionChanged(self):
 		current = self["checkList"].getCurrent()[0]
-		if current[2] is True:
+		if current[2] == True:
 			self["key_yellow"].setText(_("Deselect"))
 		else:
 			self["key_yellow"].setText(_("Select"))
@@ -4021,7 +4047,7 @@
 		self.hideHelpWindow()
 		password = self.password.value
 		if not password:
-			self.session.openWithCallback(self.showHelpWindow, MessageBox, _("The password can not be blank.") , MessageBox.TYPE_ERROR)
+			self.session.openWithCallback(self.showHelpWindow, MessageBox, _("The password can not be blank."), MessageBox.TYPE_ERROR)
 			return
 		#print "[NetworkPassword] Changing the password for %s to %s" % (self.user,self.password) 
 		self.container = eConsoleAppContainer()
@@ -4030,37 +4056,38 @@
 		retval = self.container.execute("echo -e '%s\n%s' | (passwd %s)"  % (password, password, self.user))
 		if retval:
 			message=_("Unable to change password")
-			self.session.openWithCallback(self.showHelpWindow, MessageBox, message , MessageBox.TYPE_ERROR)
+			self.session.openWithCallback(self.showHelpWindow, MessageBox, message, MessageBox.TYPE_ERROR)
 		else:
 			message=_("Password changed")
-			self.session.open(MessageBox, message , MessageBox.TYPE_INFO, timeout=5)
+			self.session.open(MessageBox, message, MessageBox.TYPE_INFO, timeout=5)
 			self.close()
 
 	def showHelpWindow(self, ret=None):
 		if self['config'].getCurrent() and isinstance(self["config"].getCurrent()[1], ConfigText) or isinstance(self["config"].getCurrent()[1], ConfigPassword):
-			if self["config"].getCurrent()[1].help_window.instance is not None:
+			if self["config"].getCurrent()[1].help_window.instance != None:
 				self["config"].getCurrent()[1].help_window.show()
 
 	def hideHelpWindow(self):
 		if self['config'].getCurrent() and isinstance(self["config"].getCurrent()[1], ConfigText) or isinstance(self["config"].getCurrent()[1], ConfigPassword):
-			if self["config"].getCurrent()[1].help_window.instance is not None:
+			if self["config"].getCurrent()[1].help_window.instance != None:
 				self["config"].getCurrent()[1].help_window.hide()
 
 	def KeyText(self):
 		if self['config'].getCurrent() and isinstance(self["config"].getCurrent()[1], ConfigText) or isinstance(self["config"].getCurrent()[1], ConfigPassword):
-			if self["config"].getCurrent()[1].help_window.instance is not None:
+			if self["config"].getCurrent()[1].help_window.instance != None:
 				self["config"].getCurrent()[1].help_window.hide()
 			from Screens.VirtualKeyBoard import VirtualKeyBoard
 			self.session.openWithCallback(self.VirtualKeyBoardCallback, VirtualKeyBoard, title = self["config"].getCurrent()[0], text = self["config"].getCurrent()[1].value)
 
 	def VirtualKeyBoardCallback(self, callback = None):
-		if callback is not None and len(callback):
+		if callback != None and len(callback):
 			self["config"].getCurrent()[1].setValue(callback)
 			self["config"].invalidate(self["config"].getCurrent())
 		self.showHelpWindow()
 
 
-	def dataAvail(self,data):
+	def dataAvail(self, data):
+		data = six.ensure_str(data)
 		self.output_line += data
 		while True:
 			i = self.output_line.find('\n')
@@ -4069,11 +4096,11 @@
 			self.processOutputLine(self.output_line[:i+1])
 			self.output_line = self.output_line[i+1:]
 
-	def processOutputLine(self,line):
+	def processOutputLine(self, line):
 		if line.find('password: '):
 			self.container.write("%s\n" % self.password.value)
 
-	def runFinished(self,retval):
+	def runFinished(self, retval):
 		del self.container.dataAvail[:]
 		del self.container.appClosed[:]
 		del self.container
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/NumericalTextInputHelpDialog.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/NumericalTextInputHelpDialog.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/NumericalTextInputHelpDialog.py	2020-06-21 10:16:12.719441640 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/NumericalTextInputHelpDialog.py	2020-06-21 10:20:02.359325953 -0400
@@ -1,5 +1,7 @@
-from Screen import Screen
+from __future__ import absolute_import
+from Screens.Screen import Screen
 from Components.Label import Label
+import six
 
 class NumericalTextInputHelpDialog(Screen):
 	def __init__(self, session, textinput):
@@ -7,7 +9,7 @@
 		self["help1"] = Label(text="<")
 		self["help2"] = Label(text=">")
 		for x in (1, 2, 3, 4, 5, 6, 7, 8, 9, 0):
-			self["key%d" % x] = Label(text=textinput.mapping[x].encode("utf-8"))
+			self["key%d" % x] = Label(text=six.ensure_str(textinput.mapping[x]))
 		self.last_marked = 0
 
 	def update(self, textinput):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/OScamInfo.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/OScamInfo.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/OScamInfo.py	2020-06-21 10:16:12.719441640 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/OScamInfo.py	2020-06-21 10:20:02.359325953 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
 from Screens.ChoiceBox import ChoiceBox
@@ -17,9 +18,12 @@
 
 from operator import itemgetter
 import os, time
-import urllib2
 import skin
 
+from six.moves import urllib
+from six.moves.urllib.request import HTTPHandler, HTTPDigestAuthHandler
+
+
 ###global
 sf = skin.getSkinFactor()
 sizeH = 700
@@ -63,7 +67,7 @@
 		for file in ["/tmp/.ncam/ncam.version", "/tmp/.oscam/oscam.version"]:
 			if fileExists(file):
 				with open(file, 'r') as data:
-					conffile = file.split('/')[-1].replace("version","conf")
+					conffile = file.split('/')[-1].replace("version", "conf")
 					for i in data:
 						if "web interface support:" in i.lower():
 							owebif = i.split(":")[1].strip()
@@ -94,7 +98,7 @@
 		if conffile == "":
 			conffile = "oscam.conf"
 		conf += "/" + conffile
-		api = conffile.replace(".conf","api")
+		api = conffile.replace(".conf", "api")
 
 		# Assume that oscam webif is NOT blocking localhost, IPv6 is also configured if it is compiled in,
 		# and no user and password are required
@@ -158,7 +162,7 @@
 
 		if self.port.startswith( '+' ):
 			self.proto = "https"
-			self.port.replace("+","")
+			self.port.replace("+", "")
 
 		if part is None:
 			self.url = "%s://%s:%s/%s.html?part=status" % ( self.proto, self.ip, self.port, self.api )
@@ -167,25 +171,25 @@
 		if part is not None and reader is not None:
 			self.url = "%s://%s:%s/%s.html?part=%s&label=%s" % ( self.proto, self.ip, self.port, self.api, part, reader )
 
-		opener = urllib2.build_opener( urllib2.HTTPHandler )
+		opener = urllib.request.build_opener( HTTPHandler )
 		if not self.username == "":
-			pwman = urllib2.HTTPPasswordMgrWithDefaultRealm()
+			pwman = urllib.request.HTTPPasswordMgrWithDefaultRealm()
 			pwman.add_password( None, self.url, self.username, self.password )
-			handlers = urllib2.HTTPDigestAuthHandler( pwman )
-			opener = urllib2.build_opener( urllib2.HTTPHandler, handlers )
-			urllib2.install_opener( opener )
-		request = urllib2.Request( self.url )
+			handlers = HTTPDigestAuthHandler( pwman )
+			opener = urllib.request.build_opener( HTTPHandler, handlers )
+			urllib.request.install_opener( opener )
+		request = urllib.request.Request( self.url )
 		err = False
 		try:
-			data = urllib2.urlopen( request ).read()
+			data = urllib.request.urlopen( request ).read()
 			# print data
-		except urllib2.URLError, e:
+		except urllib.error.URLError as e:
 			if hasattr(e, "reason"):
 				err = str(e.reason)
 			elif hasattr(e, "code"):
 				err = str(e.code)
 		if err is not False:
-			print "[openWebIF] error: %s" % err
+			print("[openWebIF] error: %s" % err)
 			return False, err
 		else:
 			return True, data
@@ -214,13 +218,13 @@
 				for cl in clients:
 					name = cl.attrib["name"]
 					proto = cl.attrib["protocol"]
-					if cl.attrib.has_key("au"):
+					if "au" in cl.attrib:
 						au = cl.attrib["au"]
 					else:
 						au = ""
 					caid = cl.find("request").attrib["caid"]
 					srvid = cl.find("request").attrib["srvid"]
-					if cl.find("request").attrib.has_key("ecmtime"):
+					if "ecmtime" in cl.find("request").attrib:
 						ecmtime = cl.find("request").attrib["ecmtime"]
 						if ecmtime == "0" or ecmtime == "":
 							ecmtime = _("n/a")
@@ -253,7 +257,7 @@
 							tmp[cl.attrib["type"]] = []
 							tmp[cl.attrib["type"]].append( (name, proto, "%s:%s" % (caid, srvid), srvname_short, ecmtime, ip, connstatus) )
 			else:
-				if "<![CDATA" not in result[1]:
+				if b"<![CDATA" not in result[1]:
 					tmp = result[1].replace("<log>", "<log><![CDATA[").replace("</log>", "]]></log>")
 				else:
 					tmp = result[1]
@@ -261,14 +265,14 @@
 				log = data.find("log")
 				logtext = log.text
 			if typ == "s":
-				if tmp.has_key("r"):
+				if "r" in tmp:
 					for i in tmp["r"]:
 						retval.append(i)
-				if tmp.has_key("p"):
+				if "p" in tmp:
 					for i in tmp["p"]:
 						retval.append(i)
 			elif typ == "c":
-				if tmp.has_key("c"):
+				if "c" in tmp:
 					for i in tmp["c"]:
 						retval.append(i)
 			elif typ == "l":
@@ -291,7 +295,7 @@
 		xmldata = self.openWebIF()
 		if xmldata[0]:
 			data = ElementTree.XML(xmldata[1])
-			if data.attrib.has_key("version"):
+			if "version" in data.attrib:
 				self.version = data.attrib["version"]
 			else:
 				self.version = _("n/a")
@@ -317,7 +321,7 @@
 			status = data.find("status")
 			clients = status.findall("client")
 			for cl in clients:
-				if cl.attrib.has_key("type"):
+				if "type" in cl.attrib:
 					if cl.attrib["type"] == "p" or cl.attrib["type"] == "r":
 						if spec is not None:
 							proto = cl.attrib["protocol"]
@@ -340,7 +344,7 @@
 			status = data.find("status")
 			clients = status.findall("client")
 			for cl in clients:
-				if cl.attrib.has_key("type"):
+				if "type" in cl.attrib:
 					if cl.attrib["type"] == "c":
 						readers.append( (cl.attrib["name"], cl.attrib["name"]) )  # return tuple for later use in Choicebox
 			return clientnames
@@ -445,7 +449,7 @@
 	def down(self):
 		pass
 	def goEntry(self, entry):
-		if entry in (1,2,3) and config.oscaminfo.userdatafromconf.value and self.osc.confPath()[0] is None:
+		if entry in (1, 2, 3) and config.oscaminfo.userdatafromconf.value and self.osc.confPath()[0] is None:
 			config.oscaminfo.userdatafromconf.setValue(False)
 			config.oscaminfo.userdatafromconf.save()
 			self.session.openWithCallback(self.ErrMsgCallback, MessageBox, _("File oscam.conf not found.\nPlease enter username/password manually."), MessageBox.TYPE_ERROR)
@@ -484,7 +488,7 @@
 			self.session.open(OscamInfoConfigScreen)
 
 	def chooseReaderCallback(self, retval):
-		print retval
+		print(retval)
 		if retval is not None:
 			if self.callbackmode == "cccam":
 				self.session.open(oscEntitlements, retval[1])
@@ -492,7 +496,7 @@
 				self.session.open(oscReaderStats, retval[1])
 
 	def ErrMsgCallback(self, retval):
-		print retval
+		print(retval)
 		self.session.open(OscamInfoConfigScreen)
 
 	def buildMenu(self, mlist):
@@ -506,24 +510,24 @@
 				if fileExists(png):
 					png = LoadPixmap(png)
 				if png is not None:
-					x, y, w, h = skin.parameters.get("ChoicelistDash",(0, 2*sf, 800*sf, 2*sf))
+					x, y, w, h = skin.parameters.get("ChoicelistDash", (0, 2*sf, 800*sf, 2*sf))
 					res.append((eListboxPythonMultiContent.TYPE_PIXMAP, x, y, w, h, png))
-					x, y, w, h = skin.parameters.get("ChoicelistName",(45*sf, 2*sf, 800*sf, 25*sf))
+					x, y, w, h = skin.parameters.get("ChoicelistName", (45*sf, 2*sf, 800*sf, 25*sf))
 					res.append((eListboxPythonMultiContent.TYPE_TEXT, x, y, w, h, 0, RT_HALIGN_LEFT, t[2:]))
 					png2 = resolveFilename(SCOPE_ACTIVE_SKIN, "buttons/key_" + keys[k] + ".png")
 					if fileExists(png2):
 						png2 = LoadPixmap(png2)
 					if png2 is not None:
-						x, y, w, h = skin.parameters.get("ChoicelistIcon",(5*sf, 0, 35*sf, 25*sf))
+						x, y, w, h = skin.parameters.get("ChoicelistIcon", (5*sf, 0, 35*sf, 25*sf))
 						res.append((eListboxPythonMultiContent.TYPE_PIXMAP_ALPHATEST, x, y, w, h, png2))
 			else:
-				x, y, w, h = skin.parameters.get("ChoicelistName",(45*sf, 2*sf, 800*sf, 25*sf))
+				x, y, w, h = skin.parameters.get("ChoicelistName", (45*sf, 2*sf, 800*sf, 25*sf))
 				res.append((eListboxPythonMultiContent.TYPE_TEXT, x, y, w, h, 0, RT_HALIGN_LEFT, t))
 				png2 = resolveFilename(SCOPE_ACTIVE_SKIN, "buttons/key_" + keys[k] + ".png")
 				if fileExists(png2):
 					png2 = LoadPixmap(png2)
 				if png2 is not None:
-					x, y, w, h = skin.parameters.get("ChoicelistIcon",(5*sf, 0, 35*sf, 25*sf))
+					x, y, w, h = skin.parameters.get("ChoicelistIcon", (5*sf, 0, 35*sf, 25*sf))
 					res.append((eListboxPythonMultiContent.TYPE_PIXMAP_ALPHATEST, x, y, w, h, png2))
 			menuentries.append(res)
 			if k < len(keys) - 1:
@@ -751,7 +755,7 @@
 		res = [""]
 		for i in listentry:
 			if i.strip() != "" or i is not None:
-				res.append( (eListboxPythonMultiContent.TYPE_TEXT, 5*sf, 0, self.sizeLH,self.itemheight*sf, 2, RT_HALIGN_LEFT, i) )
+				res.append( (eListboxPythonMultiContent.TYPE_TEXT, 5*sf, 0, self.sizeLH, self.itemheight*sf, 2, RT_HALIGN_LEFT, i) )
 		return res
 
 	def showData(self):
@@ -762,7 +766,7 @@
 			data = self.readXML(typ = self.what)
 		self.out = []
 		self.itemheight = 25
-		if not isinstance(data,str):
+		if not isinstance(data, str):
 			if self.what != "l":
 				heading = ( self.HEAD[self.NAME], self.HEAD[self.PROT], self.HEAD[self.CAID_SRVID],
 						self.HEAD[self.SRVNAME], self.HEAD[self.ECMTIME], self.HEAD[self.IP_PORT], "")
@@ -885,7 +889,7 @@
 		self.close()
 
 	def buildList(self, data):
-		caids = data.keys()
+		caids = list(data.keys())
 		caids.sort()
 		outlist = []
 		res = [ ("CAID", _("System"), "1", "2", "3", "4", "5", "Total", _("Reshare"), "") ]
@@ -907,7 +911,7 @@
 				providertxt += "%s - %s%s" % ( j[0], j[1], linefeed )
 			res.append( ( 	ca_id,
 					csystem,
-					str(hops[1]),str(hops[2]), str(hops[3]), str(hops[4]), str(hops[5]), str(csum), str(creshare),
+					str(hops[1]), str(hops[2]), str(hops[3]), str(hops[4]), str(hops[5]), str(csum), str(creshare),
 					providertxt[:-1]
 					) )
 			outlist.append(res)
@@ -917,7 +921,7 @@
 		xmldata_for_reader = self.openWebIF(part = "entitlement", reader = self.cccamreader)
 		xdata = ElementTree.XML(xmldata_for_reader[1])
 		reader = xdata.find("reader")
-		if reader.attrib.has_key("hostaddress"):
+		if "hostaddress" in reader.attrib:
 			hostadr = reader.attrib["hostaddress"]
 			host_ok = True
 		else:
@@ -935,8 +939,8 @@
 			chop = int(i.attrib["hop"])
 			if chop > 5:
 				chop = 5
-			if caid.has_key(ccaid):
-				if caid[ccaid].has_key("hop"):
+			if ccaid in caid:
+				if "hop" in caid[ccaid]:
 					caid[ccaid]["hop"][chop] += 1
 				else:
 					caid[ccaid]["hop"] = [ 0, 0, 0, 0, 0, 0 ]
@@ -949,7 +953,7 @@
 				caid[ccaid]["system"] = csystem
 			else:
 				caid[ccaid] = {}
-				if caid[ccaid].has_key("hop"):
+				if "hop" in caid[ccaid]:
 					caid[ccaid]["hop"][chop] += 1
 				else:
 					caid[ccaid]["hop"] = [ 0, 0, 0, 0, 0, 0]
@@ -1024,7 +1028,7 @@
 		self.close()
 
 	def buildList(self, data):
-		caids = data.keys()
+		caids = list(data.keys())
 		caids.sort()
 		outlist = []
 		res = [ ("CAID", "System", "1", "2", "3", "4", "5", "Total", "Reshare", "") ]
@@ -1046,7 +1050,7 @@
 				providertxt += "%s - %s%s" % ( j[0], j[1], linefeed )
 			res.append( ( 	ca_id,
 					csystem,
-					str(hops[1]),str(hops[2]), str(hops[3]), str(hops[4]), str(hops[5]), str(csum), str(creshare),
+					str(hops[1]), str(hops[2]), str(hops[3]), str(hops[4]), str(hops[5]), str(csum), str(creshare),
 					providertxt[:-1]
 					) )
 			outlist.append(res)
@@ -1077,7 +1081,7 @@
 
 				ecmstat = rdr.find("ecmstats")
 				totalecm = ecmstat.attrib["totalecm"]
-				ecmcount = ecmstat.attrib["count"]
+				ecmcount = int(ecmstat.attrib["count"])
 				lastacc = ecmstat.attrib["lastaccess"]
 				ecm = ecmstat.findall("ecm")
 				if ecmcount > 0:
@@ -1092,12 +1096,12 @@
 						if rcs == "found":
 							avg_time = str(float(avgtime) / 1000)[:5]
 							last_time = str(float(lasttime) / 1000)[:5]
-							if j.attrib.has_key("lastrequest"):
+							if "lastrequest" in j.attrib:
 								lastreq = j.attrib["lastrequest"]
 								try:
 									last_req = lastreq.split("T")[1][:-5]
 								except IndexError:
-									last_req = time.strftime("%H:%M:%S",time.localtime(float(lastreq)))
+									last_req = time.strftime("%H:%M:%S", time.localtime(float(lastreq)))
 							else:
 								last_req = ""
 						else:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PVRState.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PVRState.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PVRState.py	2020-06-21 10:16:12.719441640 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PVRState.py	2020-06-21 10:20:02.359325953 -0400
@@ -1,4 +1,5 @@
-from Screen import Screen
+from __future__ import absolute_import
+from Screens.Screen import Screen
 
 from Components.Label import Label
 from Components.Pixmap import Pixmap, MultiPixmap
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PiPSetup.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PiPSetup.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PiPSetup.py	2020-06-21 10:16:12.719441640 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PiPSetup.py	2020-06-21 10:17:46.624209593 -0400
@@ -18,10 +18,20 @@
 	if min <= val:
 		return max
 	return min
+	
+class MyPiPSetup(Screen):
+	skin = """<screen name="MyPiPSetup" position="center,center" size="662,302" flags="wfNoBorder" backgroundColor="background" zPosition="2">
+		<eLabel text="PiPSetup" position="1,5" size="660,50" font="Regular;28" foregroundColor="white" backgroundColor="background" halign="center" valign="center" zPosition="2" />
+		<eLabel position="1,60" size="660,1" backgroundColor="white" zPosition="2" />
+		<widget name="text" position="40,90" size="620,200" halign="left" font="Regular;20" foregroundColor="white" backgroundColor="background" zPosition="2" />
+	</screen>"""
 
 class PiPSetup(Screen):
+	
 	def __init__(self, session, pip):
+		self.skin = MyPiPSetup.skin
 		Screen.__init__(self, session)
+		self.skinName = "MyPiPSetup"
 
 		self.pip = pip
 
@@ -35,10 +45,10 @@
 
 		self.resize = 100
 
-		self.helptext = _("Please use direction keys to move the PiP window.\nPress Bouquet +/- to resize the window.\nPress OK to go back to the TV mode or EXIT to cancel the moving.")
+		self.helptext = _("Position change:  Use direction keys to move the PiP window\nSize change:  Channel +/- to resize the window\nOK  -  save changes  |  EXIT  -  cancel")
 		if SystemInfo["VideoDestinationConfigurable"] or SystemInfo["HasExternalPIP"]:
-			self.helptext += "\n" + _("Press '0' to toggle PiP mode")
-		self.modetext = _("Current mode: %s \n")
+			self.helptext += "\n\n" + _("Press '0' to toggle PiP current mode")
+		self.modetext = _("Current mode:   %s\n\n")
 
 		self["text"] = Label((self.modetext % self.pip.getModeName()) + self.helptext)
 
@@ -65,6 +75,7 @@
 		}, -1)
 
 	def go(self):
+		self.pip.savePiPSettings()
 		self.close()
 
 	def cancel(self):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PiPusageModeSetup.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PiPusageModeSetup.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PiPusageModeSetup.py	2020-06-21 10:16:12.719441640 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PiPusageModeSetup.py	2020-06-21 10:17:46.624209593 -0400
@@ -14,9 +14,12 @@
 	def __init__(self, session):
 		self.skin = MyPiPmode.skin
 		Screen.__init__(self, session)
+		self.skinName = "MyPiPmode"
 		
 		self.choicelist = [("standard", _("Standard")), ("noadspip", _("Ads filtering mode")), ("byside", _("Side by side mode"))]
 		config.usage.pip_mode = ConfigSelection(default = "standard", choices = self.choicelist)
+		
+		self.usageModeChecking()
 
 		self.mode = self.getMode()
 		self.orgmode = self.mode
@@ -37,12 +40,16 @@
 		}, -1)
 
 	def go(self):
+		config.usage.pip_lastusage = ConfigInteger(default = int(time()))
+		config.usage.pip_lastusage.setValue(int(time())+1000)
+		config.usage.pip_lastusage.save()
+		configfile.save()
 		self.close()
 
 	def cancel(self):
 		self.mode = self.orgmode
 		self.setMode(self.mode)
-		self.close()
+		self.go()
 
 	def left(self):
 		self.togglePiPMode(False)
@@ -59,13 +66,27 @@
 
 	def getModeName(self):
 		return self.choicelist[config.usage.pip_mode.index][1]
+			
+	def usageModeChecking(self):
+		try:
+			config.usage.noadspip_default_mode_time = ConfigSelection(default = "180", choices = [
+				("0", _("Setting by user")), ("180", _("After 3 minutes")), ("300", _("After 5 minutes")), ("1800", _("After 30 minutes")) ])
+			config.usage.pip_lastusage = ConfigInteger(default = int(time()))
+			if config.usage.noadspip_default_mode_time.value == "0":
+				return
+			time_config = int(config.usage.pip_lastusage.value)
+			time_now = int(time())
+			diff_time = time_now - time_config
+			if diff_time > int(config.usage.noadspip_default_mode_time.value):
+				config.usage.pip_mode.setValue('noadspip')
+				config.usage.pip_mode.save()
+				configfile.save()
+		except:
+			return
 		
 	def setMode(self, mode):
-		config.usage.pip_lastusage = ConfigInteger(default = int(time()))
 		config.usage.pip_mode.value = mode
 		config.usage.pip_mode.save()
-		config.usage.pip_lastusage.setValue(int(time())+1000)
-		config.usage.pip_lastusage.save()
 		configfile.save()
 		
 	def togglePiPMode(self, mod=True):
@@ -73,3 +94,4 @@
 			self.setMode(config.usage.pip_mode.choices[(config.usage.pip_mode.index + 1) % len(config.usage.pip_mode.choices)])
 		else:
 			self.setMode(config.usage.pip_mode.choices[(config.usage.pip_mode.index - 1) % len(config.usage.pip_mode.choices)])
+
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PictureInPicture.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PictureInPicture.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PictureInPicture.py	2020-06-21 10:16:12.719441640 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PictureInPicture.py	2020-06-21 10:20:02.363326502 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Screens.Dish import Dishpip
 from enigma import ePoint, eSize, eRect, eServiceCenter, getBestPlayableServiceReference, eServiceReference, eTimer, getDesktop
@@ -5,7 +6,7 @@
 from Components.VideoWindow import VideoWindow
 from Components.config import config, configfile, ConfigPosition, ConfigYesNo, ConfigSelection
 from Components.Label import Label
-from Tools import Notifications
+import Tools.Notifications
 from Screens.MessageBox import MessageBox
 from os import access, W_OK
 
@@ -34,7 +35,7 @@
 		if SystemInfo["hasPIPVisibleProc"]:
 			open(SystemInfo["hasPIPVisibleProc"], "w").write("1")
 		elif hasattr(InfoBar.instance.session, "pip"):
-			InfoBar.instance.session.pip.playService(InfoBar.instance.session.pip.currentService)
+			InfoBar.instance.session.pip.playService(InfoBar.instance.session.pip.currentServicePiP,InfoBar.instance.session.pip.currentBouquetPiP)
 	global PipPigModeEnabled
 	PipPigModeEnabled = False
 
@@ -100,14 +101,18 @@
 		self.skin = MyPiP.skin
 		global pip_config_initialized
 		Screen.__init__(self, session)
+		self.skinName = "MyPip"
 		self["video"] = VideoWindow()
 		self.pipActive = session.instantiateDialog(PictureInPictureZapping)
 		self.pipSideSide = session.instantiateDialog(PictureInPictureSidebySide)
 		self.pipSideSideToogle = session.instantiateDialog(PictureInPictureSidebySideToogle)
 		self.dishpipActive = session.instantiateDialog(Dishpip)
-		self.currentService = None
-		self.currentServiceReference = None
-
+		self.currentBouquetMain = None
+		self.currentBouquetPiP = None
+		self.currentServicePiP = None
+		self.currentServiceReferencePiP = None
+		self.currentServicePtrPiP = None
+		
 		self.choicelist = [("standard", _("Standard"))]
 		if SystemInfo["VideoDestinationConfigurable"]:
 			self.choicelist.append(("cascade", _("Cascade PiP")))
@@ -119,9 +124,11 @@
 
 		if not pip_config_initialized:
 			config.av.pip = ConfigPosition(default=[510, 28, 180, 135], args = (MAX_X, MAX_Y, MAX_X, MAX_Y))
+			config.av.pip_standard = ConfigPosition(default=[510, 28, 180, 135], args = (MAX_X, MAX_Y, MAX_X, MAX_Y))
+			config.av.pip_noadspip = ConfigPosition(default=[510, 28, 180, 135], args = (MAX_X, MAX_Y, MAX_X, MAX_Y))
 			config.av.pip_mode = ConfigSelection(default="standard", choices=self.choicelist)
 			pip_config_initialized = True
-
+			
 		self.onLayoutFinish.append(self.LayoutFinished)
 
 	def __del__(self):
@@ -143,6 +150,23 @@
 		self.onLayoutFinish.remove(self.LayoutFinished)
 		self.relocate()
 		self.setExternalPiP(config.av.pip_mode.value == "external")
+		
+	def savePiPSettings(self):
+		if config.usage.pip_mode.value == "standard":
+			if config.av.pip_mode.value == "standard":
+				config.av.pip_standard.value[0] = config.av.pip.value[0]
+				config.av.pip_standard.value[1] = config.av.pip.value[1]
+				config.av.pip_standard.value[2] = config.av.pip.value[2]
+				config.av.pip_standard.value[3] = config.av.pip.value[3]
+				config.av.pip_standard.save()
+				configfile.save()
+				if config.usage.pip_position_size_save.value == "standard and noadspip":
+					config.av.pip_noadspip.value[0] = config.av.pip.value[0]
+					config.av.pip_noadspip.value[1] = config.av.pip.value[1]
+					config.av.pip_noadspip.value[2] = config.av.pip.value[2]
+					config.av.pip_noadspip.value[3] = config.av.pip.value[3]
+					config.av.pip_noadspip.save()
+					configfile.save()
 
 	def move(self, x, y):
 		config.av.pip.value[0] = x
@@ -250,51 +274,71 @@
 	def getModeName(self):
 		return self.choicelist[config.av.pip_mode.index][1]
 
-	def playService(self, service):
+	def playService(self, service, bouquet=None):
 		if service is None:
 			return False
 		ref = self.resolveAlternatePipService(service)
 		if ref:
 			if self.isPlayableForPipService(ref):
-				print "playing pip service", ref and ref.toString()
+				print("playing pip service", ref and ref.toString())
 			else:
 				if not config.usage.hide_zap_errors.value:
-					Notifications.AddPopup(text = _("No free tuner!"), type = MessageBox.TYPE_ERROR, timeout = 5, id = "ZapPipError")
+					Tools.Notifications.AddPopup(text = _("No free tuner!"), type = MessageBox.TYPE_ERROR, timeout = 5, id = "ZapPipError")
 				return False
 			self.pipservice = eServiceCenter.getInstance().play(ref)
 			if self.pipservice and not self.pipservice.setTarget(1, True):
 				if hasattr(self, "dishpipActive") and self.dishpipActive is not None:
 					self.dishpipActive.startPiPService(ref)
 				self.pipservice.start()
-				self.currentService = service
-				self.currentServiceReference = ref
+				self.currentBouquetPiP = bouquet
+				self.currentServicePiP = service
+				self.currentServiceReferencePiP = ref
 				return True
 			else:
 				self.pipservice = None
-				self.currentService = None
-				self.currentServiceReference = None
+				self.currentBouquetPiP = None
+				self.currentServicePiP = None
+				self.currentServiceReferencePiP = None
 				if not config.usage.hide_zap_errors.value:
-					Notifications.AddPopup(text = _("Incorrect type service for PiP!"), type = MessageBox.TYPE_ERROR, timeout = 5, id = "ZapPipError")
+					Tools.Notifications.AddPopup(text = _("Incorrect type service for PiP!"), type = MessageBox.TYPE_ERROR, timeout = 5, id = "ZapPipError")
 		return False
+		
+	def setCurrentServicePtrPiP(self, currSerPtr=None):
+		self.currentServicePtrPiP = currSerPtr
+
+	def getCurrentServicePtrPiP(self):
+		return self.currentServicePtrPiP
+		
+	def setCurrentBouquetMain(self, bouquet=None):
+		self.currentBouquetMain = bouquet
 
+	def getCurrentBouquetMain(self):
+		return self.currentBouquetMain
+		
+	def setCurrentBouquetPiP(self, bouquet=None):
+		self.currentBouquetPiP = bouquet
+		
+	def getCurrentBouquetPiP(self):
+		return self.currentBouquetPiP
+		
 	def getCurrentService(self):
-		return self.currentService
+		return self.currentServicePiP
 
 	def getCurrentServiceReference(self):
-		return self.currentServiceReference
+		return self.currentServiceReferencePiP
 
 	def isPlayableForPipService(self, service):
 		playingref = self.session.nav.getCurrentlyPlayingServiceReference()
 		if playingref is None or service == playingref:
 			return True
 		info = eServiceCenter.getInstance().info(service)
-		oldref = self.currentServiceReference or eServiceReference()
+		oldref = self.currentServiceReferencePiP or eServiceReference()
 		if info and info.isPlayable(service, oldref):
 			return True
 		return False
 
 	def resolveAlternatePipService(self, service):
 		if service and (service.flags & eServiceReference.isGroup):
-			oldref = self.currentServiceReference or eServiceReference()
+			oldref = self.currentServiceReferencePiP or eServiceReference()
 			return getBestPlayableServiceReference(service, oldref)
 		return service
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PluginBrowser.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PluginBrowser.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PluginBrowser.py	2020-06-21 10:16:12.719441640 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PluginBrowser.py	2020-06-21 10:20:02.363326502 -0400
@@ -1,6 +1,9 @@
+from __future__ import print_function
+from __future__ import absolute_import
 from boxbranding import getImageVersion
 import os
-from Screen import Screen
+import six
+from Screens.Screen import Screen
 from Screens.ParentalControlSetup import ProtectedScreen
 from Components.Language import language
 from enigma import eConsoleAppContainer, eDVBDB
@@ -385,7 +388,7 @@
 			try:
 				from Plugins.SystemPlugins.SoftwareManager.plugin import PluginManager
 			except ImportError:
-				self.session.open(MessageBox, _("The software management extension is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO,timeout = 10 )
+				self.session.open(MessageBox, _("The software management extension is not installed!\nPlease install it."), type = MessageBox.TYPE_INFO, timeout = 10 )
 			else:
 				self.session.openWithCallback(self.PluginDownloadBrowserClosed, PluginManager)
 
@@ -545,7 +548,7 @@
 			if dest.startswith('/'):
 				# Custom install path, add it to the list too
 				dest = os.path.normpath(dest)
-				extra = '--add-dest %s:%s -d %s' % (dest,dest,dest)
+				extra = '--add-dest %s:%s -d %s' % (dest, dest, dest)
 				Ipkg.opkgAddDestination(dest)
 			else:
 				extra = '-d ' + dest
@@ -557,7 +560,7 @@
 		if val:
 			if self.type == self.DOWNLOAD:
 				if self["list"].l.getCurrentSelection()[0].name.startswith("picons-"):
-					supported_filesystems = frozenset(('vfat','ext4', 'ext3', 'ext2', 'reiser', 'reiser4', 'jffs2', 'ubifs', 'rootfs'))
+					supported_filesystems = frozenset(('vfat', 'ext4', 'ext3', 'ext2', 'reiser', 'reiser4', 'jffs2', 'ubifs', 'rootfs'))
 					candidates = []
 					import Components.Harddisk
 					mounts = Components.Harddisk.getProcMounts()
@@ -570,7 +573,7 @@
 						self.session.openWithCallback(self.installDestinationCallback, ChoiceBox, title=_("Install picons on"), list=candidates)
 					return
 				elif self["list"].l.getCurrentSelection()[0].name.startswith("display-picon"):
-					supported_filesystems = frozenset(('vfat','ext4', 'ext3', 'ext2', 'reiser', 'reiser4', 'jffs2', 'ubifs', 'rootfs'))
+					supported_filesystems = frozenset(('vfat', 'ext4', 'ext3', 'ext2', 'reiser', 'reiser4', 'jffs2', 'ubifs', 'rootfs'))
 					candidates = []
 					import Components.Harddisk
 					mounts = Components.Harddisk.getProcMounts()
@@ -649,8 +652,8 @@
 		if hasattr(self, 'postInstallCall'):
 			try:
 				self.postInstallCall()
-			except Exception, ex:
-				print "[PluginBrowser] postInstallCall failed:", ex
+			except Exception as ex:
+				print("[PluginBrowser] postInstallCall failed:", ex)
 			self.resetPostInstall()
 		try:
 			os.unlink('/tmp/opkg.conf')
@@ -694,6 +697,7 @@
 					self["text"].setText(_("Sorry feeds are down for maintenance"))
 
 	def dataAvail(self, str):
+		str = six.ensure_str(str)
 		if self.type == self.DOWNLOAD and str.find('404 Not Found') >= 0:
 			self["text"].setText(_("Sorry feeds are down for maintenance"))
 			self.run = 3
@@ -750,7 +754,7 @@
 									self.pluginlist.append(plugin)
 
 	def updateList(self):
-		list = []
+		_list = []
 		expandableIcon = LoadPixmap(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/expandable-plugins.png"))
 		expandedIcon = LoadPixmap(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/expanded-plugins.png"))
 		verticallineIcon = LoadPixmap(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/verticalline-plugins.png"))
@@ -758,8 +762,8 @@
 		self.plugins = {}
 
 		if self.type == self.UPDATE:
-			self.list = list
-			self["list"].l.setList(list)
+			self.list = _list
+			self["list"].l.setList(_list)
 			return
 
 		for x in self.pluginlist:
@@ -769,7 +773,7 @@
 			elif x[0][0:15] == 'enigma2-locale-':
 				split[0] = "languages"
 
-			if not self.plugins.has_key(split[0]):
+			if split[0] not in self.plugins:
 				self.plugins[split[0]] = []
 
 			if split[0] == "kernel modules":
@@ -778,7 +782,7 @@
 				for t in self.LanguageList:
 					if len(x[2])>2:
 						tmpT = t[0].lower()
-						tmpT = tmpT.replace('_','-')
+						tmpT = tmpT.replace('_', '-')
 						if tmpT == x[2]:
 							countryIcon = LoadPixmap(resolveFilename(SCOPE_ACTIVE_SKIN, "countries/" + t[0] + ".png"))
 							if countryIcon is None:
@@ -798,17 +802,17 @@
 					continue
 				self.plugins[split[0]].append((PluginDescriptor(name = x[3], description = x[2], icon = verticallineIcon), split[1], x[1]))
 
-		temp = self.plugins.keys()
+		temp = list(self.plugins.keys())
 		if config.usage.sort_pluginlist.value:
 			temp.sort()
 		for x in temp:
 			if x in self.expanded:
-				list.append(PluginCategoryComponent(x, expandedIcon, self.listWidth))
-				list.extend([PluginDownloadComponent(plugin[0], plugin[1], plugin[2], self.listWidth) for plugin in self.plugins[x]])
+				_list.append(PluginCategoryComponent(x, expandedIcon, self.listWidth))
+				_list.extend([PluginDownloadComponent(plugin[0], plugin[1], plugin[2], self.listWidth) for plugin in self.plugins[x]])
 			else:
-				list.append(PluginCategoryComponent(x, expandableIcon, self.listWidth))
-		self.list = list
-		self["list"].l.setList(list)
+				_list.append(PluginCategoryComponent(x, expandableIcon, self.listWidth))
+		self.list = _list
+		self["list"].l.setList(_list)
 
 class PluginFilter(ConfigListScreen, Screen):
 	def __init__(self, session):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PowerLost.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PowerLost.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PowerLost.py	2020-06-21 10:16:12.719441640 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PowerLost.py	2020-06-21 10:20:02.363326502 -0400
@@ -1,5 +1,6 @@
-from Screen import Screen
-from MessageBox import MessageBox
+from __future__ import absolute_import
+from Screens.Screen import Screen
+from Screens.MessageBox import MessageBox
 from Components.config import config
 import Screens.Standby
 from boxbranding import getMachineBrand, getMachineName
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PowerTimerEdit.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PowerTimerEdit.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PowerTimerEdit.py	2020-06-21 10:16:12.719441640 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PowerTimerEdit.py	2020-06-21 10:20:02.363326502 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Components.ActionMap import ActionMap
 from Components.Button import Button
 from Components.Label import Label
@@ -12,6 +13,7 @@
 from Screens.PowerTimerEntry import TimerEntry, TimerLog
 from Tools.BoundFunction import boundFunction
 from Tools.FuzzyDate import FuzzyTime
+from functools import cmp_to_key
 from time import time
 from timer import TimerEntry as RealTimerEntry
 
@@ -85,7 +87,7 @@
 		if cur:
 			t = cur
 			if t.disabled:
-				print "try to ENABLE timer"
+				print("try to ENABLE timer")
 				t.enable()
 			else:
 				if t.isRunning():
@@ -208,7 +210,7 @@
 		list.extend([(timer, False) for timer in self.session.nav.PowerTimer.timer_list])
 		list.extend([(timer, True) for timer in self.session.nav.PowerTimer.processed_timers])
 		if config.usage.timerlist_finished_timer_position.index: #end of list
-			list.sort(cmp = eol_compare)
+			list.sort(key=cmp_to_key(eol_compare))
 		else:
 			list.sort(key = lambda x: x[0].begin)
 
@@ -275,7 +277,7 @@
 			self.fillTimerList()
 			self.updateState()
 		else:
-			print "PowerTimeredit aborted"
+			print("PowerTimeredit aborted")
 
 	def finishedAdd(self, answer):
 		if answer[0]:
@@ -284,7 +286,7 @@
 			self.fillTimerList()
 			self.updateState()
 		else:
-			print "Timeredit aborted"
+			print("Timeredit aborted")
 
 	def finishSanityCorrection(self, answer):
 		self.finishedAdd(answer)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PowerTimerEntry.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PowerTimerEntry.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/PowerTimerEntry.py	2020-06-21 10:16:12.723442439 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/PowerTimerEntry.py	2020-06-21 10:20:02.363326502 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Screens.MessageBox import MessageBox
 from Components.config import ConfigSelection, ConfigSelectionNumber, ConfigSubList, ConfigDateTime, ConfigClock, ConfigYesNo, ConfigInteger, getConfigListEntry, ConfigIP
@@ -81,10 +82,10 @@
 			}[self.timer.timerType]
 
 		weekday_table = ("mon", "tue", "wed", "thu", "fri", "sat", "sun")
-		time_table = [(1,"1"),(3,"3"),(5,"5"),(10,"10"),(15,"15"),(30,"30"),(45,"45"),(60,"60"),
-					(75,"75"),(90,"90"),(105,"105"),(120,"120"),(135,"135"),(150,"150"),(165,"165"),(180,"180"),
-					(195,"195"),(210,"210"),(225,"225"),(240,"240"),(255,"255"),(270,"270"),(285,"285"),(300,"300")]
-		traffic_table = [(10,"10"),(50,"50"),(100,"100"),(500,"500"),(1000,"1000")]
+		time_table = [(1, "1"), (3, "3"), (5, "5"), (10, "10"), (15, "15"), (30, "30"), (45, "45"), (60, "60"),
+					(75, "75"), (90, "90"), (105, "105"), (120, "120"), (135, "135"), (150, "150"), (165, "165"), (180, "180"),
+					(195, "195"), (210, "210"), (225, "225"), (240, "240"), (255, "255"), (270, "270"), (285, "285"), (300, "300")]
+		traffic_table = [(10, "10"), (50, "50"), (100, "100"), (500, "500"), (1000, "1000")]
 
 		# calculate default values
 		day = []
@@ -103,7 +104,7 @@
 				count = 0
 				for x in (0, 1, 2, 3, 4, 5, 6):
 					if flags == 1: # weekly
-						print "Set to weekday " + str(x)
+						print("Set to weekday " + str(x))
 						weekday = x
 					if flags & 1 == 1: # set user defined flags
 						day[x] = 1
@@ -123,15 +124,15 @@
 			shutdownString = _("go to deep standby")
 		else:
 			shutdownString = _("shut down")
-		self.timerentry_timertype = ConfigSelection(choices = [("nothing", _("do nothing")),("wakeup", _("wakeup")),("wakeuptostandby", _("wakeup to standby")), ("autostandby", _("auto standby")), ("autodeepstandby", _("auto deepstandby")), ("standby", _("go to standby")), ("deepstandby", shutdownString), ("reboot", _("reboot system")), ("restart", _("restart GUI"))], default = timertype)
-		self.timerentry_afterevent = ConfigSelection(choices = [("nothing", _("do nothing")),("wakeup", _("wakeup")), ("wakeuptostandby", _("wakeup to standby")), ("standby", _("go to standby")), ("deepstandby", shutdownString)], default = afterevent)
-		self.timerentry_type = ConfigSelection(choices = [("once",_("once")), ("repeated", _("repeated"))], default = type)
+		self.timerentry_timertype = ConfigSelection(choices = [("nothing", _("do nothing")), ("wakeup", _("wakeup")), ("wakeuptostandby", _("wakeup to standby")), ("autostandby", _("auto standby")), ("autodeepstandby", _("auto deepstandby")), ("standby", _("go to standby")), ("deepstandby", shutdownString), ("reboot", _("reboot system")), ("restart", _("restart GUI"))], default = timertype)
+		self.timerentry_afterevent = ConfigSelection(choices = [("nothing", _("do nothing")), ("wakeup", _("wakeup")), ("wakeuptostandby", _("wakeup to standby")), ("standby", _("go to standby")), ("deepstandby", shutdownString)], default = afterevent)
+		self.timerentry_type = ConfigSelection(choices = [("once", _("once")), ("repeated", _("repeated"))], default = type)
 
 		self.timerentry_repeated = ConfigSelection(default = repeated, choices = [("daily", _("daily")), ("weekly", _("weekly")), ("weekdays", _("Mon-Fri")), ("user", _("user defined"))])
 		self.timerrntry_autosleepdelay = ConfigSelection(choices = time_table, default = self.timer.autosleepdelay)
-		self.timerentry_autosleeprepeat = ConfigSelection(choices = [("once",_("once")), ("repeated", _("repeated"))], default = self.timer.autosleeprepeat)
-		self.timerrntry_autosleepinstandbyonly = ConfigSelection(choices = [("yes",_("only in Standby")), ("no", _("Standard (always)")), ("noquery", _("without Query"))],default = self.timer.autosleepinstandbyonly)
-		self.timerrntry_autosleepwindow = ConfigSelection(choices = [("yes",_("Yes")), ("no", _("No"))],default = self.timer.autosleepwindow)
+		self.timerentry_autosleeprepeat = ConfigSelection(choices = [("once", _("once")), ("repeated", _("repeated"))], default = self.timer.autosleeprepeat)
+		self.timerrntry_autosleepinstandbyonly = ConfigSelection(choices = [("yes", _("only in Standby")), ("no", _("Standard (always)")), ("noquery", _("without Query"))], default = self.timer.autosleepinstandbyonly)
+		self.timerrntry_autosleepwindow = ConfigSelection(choices = [("yes", _("Yes")), ("no", _("No"))], default = self.timer.autosleepwindow)
 		self.timerrntry_autosleepbegin = ConfigClock(default = self.timer.autosleepbegin)
 		self.timerrntry_autosleepend = ConfigClock(default = self.timer.autosleepend)
 
@@ -142,24 +143,24 @@
 
 		self.timerentry_repeatedbegindate = ConfigDateTime(default = self.timer.repeatedbegindate, formatstring = config.usage.date.full.value, increment = 86400)
 
-		self.timerentry_weekday = ConfigSelection(default = weekday_table[weekday], choices = [("mon",_("Monday")), ("tue", _("Tuesday")), ("wed",_("Wednesday")), ("thu", _("Thursday")), ("fri", _("Friday")), ("sat", _("Saturday")), ("sun", _("Sunday"))])
+		self.timerentry_weekday = ConfigSelection(default = weekday_table[weekday], choices = [("mon", _("Monday")), ("tue", _("Tuesday")), ("wed", _("Wednesday")), ("thu", _("Thursday")), ("fri", _("Friday")), ("sat", _("Saturday")), ("sun", _("Sunday"))])
 
 		self.timerentry_day = ConfigSubList()
 		for x in (0, 1, 2, 3, 4, 5, 6):
 			self.timerentry_day.append(ConfigYesNo(default = day[x]))
 
 		self.timerrntry_showExtended = ConfigSelection(default = (self.timer.nettraffic == "yes" or self.timer.netip == "yes"), choices = [(True, _("yes")), (False, _("no"))])
-		self.timerrntry_nettraffic = ConfigSelection(choices = [("yes",_("Yes")), ("no", _("No"))],default = self.timer.nettraffic)
+		self.timerrntry_nettraffic = ConfigSelection(choices = [("yes", _("Yes")), ("no", _("No"))], default = self.timer.nettraffic)
 		self.timerrntry_trafficlimit = ConfigSelection(choices = traffic_table, default = self.timer.trafficlimit)
-		self.timerrntry_netip = ConfigSelection(choices = [("yes",_("Yes")), ("no", _("No"))],default = self.timer.netip)
+		self.timerrntry_netip = ConfigSelection(choices = [("yes", _("Yes")), ("no", _("No"))], default = self.timer.netip)
 		self.timerrntry_ipadress = self.timer.ipadress.split(',')
 		self.ipcount = ConfigSelectionNumber(default = len(self.timerrntry_ipadress), stepwidth = 1, min = 1, max = 5)
 		self.ipadressEntry = ConfigSubList()
 		for x in (0, 1, 2, 3, 4, 5):
 			try:
-				self.ipadressEntry.append(ConfigIP(default = [int(n) for n in self.timerrntry_ipadress[x].split('.')] or [0,0,0,0]))
+				self.ipadressEntry.append(ConfigIP(default = [int(n) for n in self.timerrntry_ipadress[x].split('.')] or [0, 0, 0, 0]))
 			except:
-				self.ipadressEntry.append(ConfigIP(default = [0,0,0,0]))
+				self.ipadressEntry.append(ConfigIP(default = [0, 0, 0, 0]))
 
 	def createSetup(self, widget):
 		self.list = []
@@ -200,7 +201,7 @@
 					self.list.append(self.netipEntry)
 					if self.timerrntry_netip.value == "yes":
 						self.list.append(self.ipcountEntry)
-						for x in range(0,self.ipcount.value):
+						for x in list(range(0, self.ipcount.value)):
 							self.list.append(getConfigListEntry(("%d. " + _("IP address")) %(x+1), self.ipadressEntry[x]))
 
 		else:
@@ -376,9 +377,9 @@
 		self.timer.nettraffic = self.timerrntry_nettraffic.value
 		self.timer.trafficlimit = self.timerrntry_trafficlimit.value
 		self.timer.netip = self.timerrntry_netip.value
-		self.timer.ipadress = "%d.%d.%d.%d" % (self.ipadressEntry[0].value[0],self.ipadressEntry[0].value[1],self.ipadressEntry[0].value[2],self.ipadressEntry[0].value[3])
-		for x in range(1,self.ipcount.value):
-			self.timer.ipadress += ",%d.%d.%d.%d" % (self.ipadressEntry[x].value[0],self.ipadressEntry[x].value[1],self.ipadressEntry[x].value[2],self.ipadressEntry[x].value[3])
+		self.timer.ipadress = "%d.%d.%d.%d" % (self.ipadressEntry[0].value[0], self.ipadressEntry[0].value[1], self.ipadressEntry[0].value[2], self.ipadressEntry[0].value[3])
+		for x in list(range(1, self.ipcount.value)):
+			self.timer.ipadress += ",%d.%d.%d.%d" % (self.ipadressEntry[x].value[0], self.ipadressEntry[x].value[1], self.ipadressEntry[x].value[2], self.ipadressEntry[x].value[3])
 
 		self.saveTimer()
 		self.close((True, self.timer))
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/QuadPiP.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/QuadPiP.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/QuadPiP.py	2020-06-21 10:16:12.723442439 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/QuadPiP.py	2020-06-21 10:20:02.363326502 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from enigma import ePoint, eSize, eServiceCenter, getBestPlayableServiceReference, eServiceReference
 from Components.VideoWindow import VideoWindow
@@ -39,7 +40,7 @@
 		return (self.instance.size().width(), self.instance.size().height())
 
 	def playService(self, service, playAudio):
-		print "  ---PLAY-->   ",service,playAudio
+		print("  ---PLAY-->   ", service, playAudio)
 		if service and (service.flags & eServiceReference.isGroup):
 			ref = getBestPlayableServiceReference(service, eServiceReference())
 		else:
@@ -57,7 +58,7 @@
 
 	def setQpipMode(self, pipMode, playAudio):
 		if self.pipservice:
-			print "   ---->   index, mode, audio ---> ",self.decoderIdx, pipMode, playAudio
+			print("   ---->   index, mode, audio ---> ", self.decoderIdx, pipMode, playAudio)
 			self.pipservice.setQpipMode(pipMode, playAudio)
 
 	def getCurrentService(self):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Rc.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Rc.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Rc.py	2020-06-21 10:16:12.723442439 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Rc.py	2020-06-21 10:20:02.363326502 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Components.Pixmap import MovingPixmap, MultiPixmap
 from Tools.Directories import resolveFilename, SCOPE_SKIN
 from xml.etree.ElementTree import ElementTree
@@ -21,8 +22,8 @@
 		self.rcheighthalf = 250
 
 		self.selectpics = []
-		self.selectpics.append((self.rcheighthalf, ["arrowdown", "arrowdown2"], (-18,-70)))
-		self.selectpics.append((self.rcheight, ["arrowup", "arrowup2"], (-18,0)))
+		self.selectpics.append((self.rcheighthalf, ["arrowdown", "arrowdown2"], (-18, -70)))
+		self.selectpics.append((self.rcheight, ["arrowup", "arrowup2"], (-18, 0)))
 
 		self.readPositions()
 		self.clearSelectedKeys()
@@ -75,7 +76,7 @@
 			except:
 				rc = self.rcs[config.misc.rcused.value]
 
-		if rc.has_key(key):
+		if key in rc:
 			rcpos = self["rc"].getPosition()
 			pos = rc[key]
 			selectPics = self.getSelectPic(pos)
@@ -85,7 +86,7 @@
 					selectPic = x
 					break
 			if selectPic is not None:
-				print "selectPic:", selectPic
+				print("selectPic:", selectPic)
 				self[selectPic].moveTo(rcpos[0] + pos[0] + selectPics[1][0], rcpos[1] + pos[1] + selectPics[1][1], 1)
 				self[selectPic].startMoving()
 				self[selectPic].show()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/RdsDisplay.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/RdsDisplay.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/RdsDisplay.py	2020-06-21 10:16:12.723442439 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/RdsDisplay.py	2020-06-21 10:20:02.363326502 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from enigma import iPlayableService, iRdsDecoder
 from Screens.Screen import Screen
 from Components.ActionMap import NumberActionMap
@@ -48,7 +49,7 @@
 		return RdsInfoDisplaySummary
 
 	def hideWidgets(self):
-		for x in (self["RadioText"],self["RtpText"],self["RassLogo"]):
+		for x in (self["RadioText"], self["RtpText"], self["RassLogo"]):
 			x.hide()
 		for x in self.onText:
 			x('')
@@ -153,14 +154,14 @@
 
 		self.current_page=0
 		self.current_subpage=0
-		self.showRassPage(0,0)
+		self.showRassPage(0, 0)
 		self.onLayoutFinish.append(self.updateSubPagePixmaps)
 
 	def updateSubPagePixmaps(self):
 		service = self.session.nav.getCurrentService()
 		decoder = service and service.rdsDecoder()
 		if not decoder: # this should never happen
-			print "NO RDS DECODER in showRassPage"
+			print("NO RDS DECODER in showRassPage")
 		else:
 			mask = decoder.getRassInteractiveMask()
 			page = 1
@@ -174,7 +175,7 @@
 							subpage.instance.setPixmap(png)
 							subpage.show()
 						else:
-							print "rass png missing"
+							print("rass png missing")
 				else:
 					subpage.hide()
 				page += 1
@@ -186,7 +187,7 @@
 		service = self.session.nav.getCurrentService()
 		decoder = service and service.rdsDecoder()
 		if not decoder: # this should never happen
-			print "NO RDS DECODER in showRassPage"
+			print("NO RDS DECODER in showRassPage")
 		else:
 			decoder.showRassInteractivePic(page, subpage)
 			page_diff = page - self.current_page
@@ -195,14 +196,14 @@
 				current_pos = self["Marker"].getPosition()
 				y = current_pos[1]
 				y += page_diff * 25
-				self["Marker"].setPosition(current_pos[0],y)
+				self["Marker"].setPosition(current_pos[0], y)
 
 	def getMaskForPage(self, page, masks=None):
 		if not masks:
 			service = self.session.nav.getCurrentService()
 			decoder = service and service.rdsDecoder()
 			if not decoder: # this should never happen
-				print "NO RDS DECODER in getMaskForPage"
+				print("NO RDS DECODER in getMaskForPage")
 			masks = decoder.getRassInteractiveMask()
 		if masks:
 			mask = masks[(page*4)/8]
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Recordings.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Recordings.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Recordings.py	2020-06-21 10:16:12.723442439 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Recordings.py	2020-06-21 10:20:02.363326502 -0400
@@ -12,7 +12,7 @@
 from Components.Sources.Boolean import Boolean
 from Components.Sources.StaticText import StaticText
 from Components.SystemInfo import SystemInfo
-
+import six
 
 class SetupSummary(Screen):
 	def __init__(self, session, parent):
@@ -35,15 +35,15 @@
 	def selectionChanged(self):
 		self["SetupEntry"].text = self.parent.getCurrentEntry()
 		self["SetupValue"].text = self.parent.getCurrentValue()
-		if hasattr(self.parent,"getCurrentDescription"):
+		if hasattr(self.parent, "getCurrentDescription"):
 			self.parent["description"].text = self.parent.getCurrentDescription()
-		if self.parent.has_key('footnote'):
-			if self.parent.getCurrentEntry().endswith('*'):
+		if 'footnote' in self.parent:
+			if six.ensure_str(self.parent.getCurrentEntry()).endswith('*'):
 				self.parent['footnote'].text = (_("* = Restart Required"))
 			else:
 				self.parent['footnote'].text = (_(" "))
 
-class RecordingSettings(Screen,ConfigListScreen):
+class RecordingSettings(Screen, ConfigListScreen):
 	def removeNotifier(self):
 		if config.usage.setup_level.notifiers:
 			config.usage.setup_level.notifiers.remove(self.levelChanged)
@@ -63,7 +63,7 @@
 			if x.get("key") != self.setup:
 				continue
 			self.addItems(list, x)
-			self.setup_title = x.get("title", "").encode("UTF-8")
+			self.setup_title = six.ensure_str(x.get("title", ""))
 			self.seperation = int(x.get('separation', '0'))
 
 	def __init__(self, session):
@@ -310,8 +310,8 @@
 				if requires and not SystemInfo.get(requires, False):
 					continue
 
-				item_text = _(x.get("text", "??").encode("UTF-8"))
-				item_description = _(x.get("description", " ").encode("UTF-8"))
+				item_text = _(six.ensure_str(x.get("text", "??")))
+				item_description = _(six.ensure_str(x.get("description", " ")))
 				b = eval(x.text or "")
 				if b == "":
 					continue
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ResolutionSelection.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ResolutionSelection.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ResolutionSelection.py	2020-06-21 10:16:12.723442439 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ResolutionSelection.py	2020-06-21 10:20:02.363326502 -0400
@@ -1,4 +1,6 @@
-from Screen import Screen
+from __future__ import print_function
+from __future__ import absolute_import
+from Screens.Screen import Screen
 from Screens.ChoiceBox import ChoiceBox
 
 class ResolutionSelection(Screen):
@@ -33,8 +35,8 @@
 		keys = ["green", "yellow", "blue", "", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ] 
 
 		mode = open("/proc/stb/video/videomode").read()[:-1] 
-		print mode 
-		for x in range(len(tlist)): 
+		print(mode) 
+		for x in list(range(len(tlist))):
 			if tlist[x][1] == mode: 
 				selection = x
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/SDswap.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/SDswap.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/SDswap.py	2020-06-21 10:16:12.723442439 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/SDswap.py	2020-06-21 10:20:02.363326502 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import os
 from Components.Sources.StaticText import StaticText
 from Components.ActionMap import ActionMap
@@ -65,7 +66,7 @@
 	def SwaptoSD(self):
 		self.switchtype = "mmc"
 		f = open('/proc/cmdline', 'r').read()
-		print "[H9SDswap] switchtype %s cmdline %s" %(self.switchtype, f) 
+		print("[H9SDswap] switchtype %s cmdline %s" %(self.switchtype, f)) 
 		if "root=/dev/mmcblk0p1" in f:
 			self.session.open(MessageBox, _("SDcard switch ERROR! - already on mmc"), MessageBox.TYPE_INFO, timeout=20)
 		elif os.path.isfile("/media/mmc/usr/bin/enigma2"):
@@ -77,7 +78,7 @@
 	def SwaptoUSB(self):
 		self.switchtype = "usb"
 		f = open('/proc/cmdline', 'r').read()
-		print "[H9SDswap] switchtype %s cmdline %s" %(self.switchtype, f) 
+		print("[H9SDswap] switchtype %s cmdline %s" %(self.switchtype, f)) 
 		if "root=/dev/SDA1" in f:
 			self.session.open(MessageBox, _("USB switch ERROR! - already on USB"), MessageBox.TYPE_INFO, timeout=20)
 		elif os.path.isfile("/media/mmc/usr/bin/enigma2"):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Satconfig.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Satconfig.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Satconfig.py	2020-06-21 10:16:12.723442439 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Satconfig.py	2020-06-21 10:20:02.363326502 -0400
@@ -1,3 +1,5 @@
+from __future__ import print_function
+from __future__ import division
 from enigma import eDVBDB, eDVBResourceManager, getLinkedSlotID, isFBCLink
 from Screens.Screen import Screen
 from Components.SystemInfo import SystemInfo
@@ -22,6 +24,7 @@
 from time import mktime, localtime
 from datetime import datetime
 from os import path
+import six
 
 from  Tools.BugHunting import printCallSequence
 
@@ -204,7 +207,7 @@
 				self.nimConfig.dvbs.configMode.setChoices(choices, default = "simple")
 
 	def createSetup(self):
-		print "Creating setup"
+		print("Creating setup")
 		self.list = [ ]
 
 		self.multiType = None
@@ -286,7 +289,7 @@
 				self.list.append(getConfigListEntry(_("Tuner"), nimConfig.connectedTo, _("Select the tuner that controls the motorised dish.")))
 			elif nimConfig.configMode.value == "loopthrough":
 				choices = []
-				print "connectable to:", nimmanager.canConnectTo(self.slotid)
+				print("connectable to:", nimmanager.canConnectTo(self.slotid))
 				connectable = nimmanager.canConnectTo(self.slotid)
 				for id in connectable:
 					choices.append((str(id), nimmanager.getNimDescription(id)))
@@ -305,7 +308,7 @@
 					self.fillListWithAdvancedSatEntrys(nimConfig.advanced.sat[int(current_config_sats)])
 				else:
 					cur_orb_pos = nimConfig.advanced.sats.orbital_position
-					satlist = nimConfig.advanced.sat.keys()
+					satlist = list(nimConfig.advanced.sat.keys())
 					if cur_orb_pos is not None:
 						if cur_orb_pos not in satlist:
 							cur_orb_pos = satlist[0]
@@ -535,9 +538,9 @@
 					self.list.append(getConfigListEntry(_("LNB/Switch Bootup time [ms]"), currLnb.bootuptimeuser))
 				elif currLnb.unicable.value == "unicable_matrix":
 					nimmanager.sec.reconstructUnicableDate(currLnb.unicableMatrixManufacturer, currLnb.unicableMatrix, currLnb)
-					manufacturer_name = currLnb.unicableMatrixManufacturer.value.decode('utf-8')
+					manufacturer_name = six.ensure_text(currLnb.unicableMatrixManufacturer.value)
 					manufacturer = currLnb.unicableMatrix[manufacturer_name]
-					product_name = manufacturer.product.value.decode('utf-8')
+					product_name = six.ensure_text(manufacturer.product.value)
 					self.advancedManufacturer = getConfigListEntry(_("Manufacturer"), currLnb.unicableMatrixManufacturer, _("Select the manufacturer of your SCR device. If the manufacturer is not listed, set 'SCR' to 'user defined' and enter the device parameters manually according to its spec sheet."))
 					self.list.append(self.advancedManufacturer)
 					if product_name in manufacturer.scr:
@@ -549,9 +552,9 @@
 						self.list.append(getConfigListEntry(_("Frequency"), manufacturer.vco[product_name][manufacturer.scr[product_name].index], _("Select the User Band frequency to be assigned to this tuner. This is the frequency the SCR switch uses to pass the requested transponder to the tuner.")))
 				elif currLnb.unicable.value == "unicable_lnb":
 					nimmanager.sec.reconstructUnicableDate(currLnb.unicableLnbManufacturer, currLnb.unicableLnb, currLnb)
-					manufacturer_name = currLnb.unicableLnbManufacturer.value.decode('utf-8')
+					manufacturer_name = six.ensure_text(currLnb.unicableLnbManufacturer.value)
 					manufacturer = currLnb.unicableLnb[manufacturer_name]
-					product_name = manufacturer.product.value.decode('utf-8')
+					product_name = six.ensure_text(manufacturer.product.value)
 					self.advancedManufacturer = getConfigListEntry(_("Manufacturer"), currLnb.unicableLnbManufacturer, _("Select the manufacturer of your SCR device. If the manufacturer is not listed, set 'SCR' to 'user defined' and enter the device parameters manually according to its spec sheet."))
 					self.list.append(self.advancedManufacturer)
 					if product_name in manufacturer.scr:
@@ -659,7 +662,7 @@
 		self.list.append(self.configMode)
 		self.advancedSatsEntry = getConfigListEntry(_("Satellite"), self.nimConfig.dvbs.advanced.sats)
 		self.list.append(self.advancedSatsEntry)
-		for x in self.nimConfig.dvbs.advanced.sat.keys():
+		for x in list(self.nimConfig.dvbs.advanced.sat.keys()):
 			Sat = self.nimConfig.dvbs.advanced.sat[x]
 			self.fillListWithAdvancedSatEntrys(Sat)
 		self["config"].list = self.list
@@ -686,7 +689,7 @@
 		self.slot_dest_list = []
 		def checkRecursiveConnect(slot_id):
 			if slot_id in self.slot_dest_list:
-				print slot_id
+				print(slot_id)
 				return False
 			self.slot_dest_list.append(slot_id)
 			slot_config = nimmanager.nim_slots[slot_id].config.dvbs
@@ -749,10 +752,10 @@
 	def keySave(self):
 		if self.nim.canBeCompatible("DVB-S"):
 			if not self.unicableconnection():
-				self.session.open(MessageBox, _("The unicable connection setting is wrong.\n Maybe recursive connection of tuners."),MessageBox.TYPE_ERROR,timeout=10)
+				self.session.open(MessageBox, _("The unicable connection setting is wrong.\n Maybe recursive connection of tuners."), MessageBox.TYPE_ERROR, timeout=10)
 				return
 			if not self.checkLoopthrough():
-				self.session.open(MessageBox, _("The loopthrough setting is wrong."),MessageBox.TYPE_ERROR,timeout=10)
+				self.session.open(MessageBox, _("The loopthrough setting is wrong."), MessageBox.TYPE_ERROR, timeout=10)
 				return
 
 		old_configured_sats = nimmanager.getConfiguredSats()
@@ -789,7 +792,7 @@
 					h = _("W")
 				else:
 					h = _("E")
-				sat_name = ("%d.%d" + h) % (orbpos / 10, orbpos % 10)
+				sat_name = ("%d.%d" + h) % (orbpos // 10, orbpos % 10)
 
 			if confirmed[1] == "yes" or confirmed[1] == "no":
 				# TRANSLATORS: The satellite with name '%s' is no longer used after a configuration change. The user is asked whether or not the satellite should be deleted.
@@ -1067,7 +1070,7 @@
 						text = _("Enabled") + ":" + text[:-1]
 					else:
 						text = _("nothing connected")
-					text = _("Switchable tuner types:") + "(" + ','.join(x.getMultiTypeList().values()) + ")" + "\n" + text
+					text = _("Switchable tuner types:") + "(" + ','.join(list(x.getMultiTypeList().values())) + ")" + "\n" + text
 				elif x.isCompatible("DVB-S"):
 					nimConfig = nimmanager.getNimConfig(x.slot).dvbs
 					text = nimConfig.configMode.value
@@ -1197,7 +1200,7 @@
 			menu = [(_("Reverse list"), "2"), (_("Standard list"), "1")]
 			connected_sat = [x[0][1] for x in lst if x[0][3]]
 			if len(connected_sat) > 0:
-				menu.insert(0,(_("Connected satellites"), "3"))
+				menu.insert(0, (_("Connected satellites"), "3"))
 			def sortAction(choice):
 				if choice:
 					reverse_flag = False
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ScanSetup.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ScanSetup.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ScanSetup.py	2020-06-21 10:16:12.723442439 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ScanSetup.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,5 +1,8 @@
-from Screen import Screen
-from ServiceScan import ServiceScan
+from __future__ import print_function
+from __future__ import division
+from __future__ import absolute_import
+from Screens.Screen import Screen
+from Screens.ServiceScan import ServiceScan
 from Components.config import config, ConfigSubsection, ConfigSelection, ConfigYesNo, ConfigInteger, getConfigListEntry, ConfigSlider, ConfigEnableDisable, integer_limits, ConfigFloat
 
 from Components.ActionMap import NumberActionMap, ActionMap
@@ -13,6 +16,7 @@
 from enigma import eTimer, eDVBFrontendParametersSatellite, eComponentScan, eDVBFrontendParametersTerrestrial, eDVBFrontendParametersCable, eDVBFrontendParametersATSC, eConsoleAppContainer, eDVBResourceManager, iDVBFrontend
 from Components.Converter.ChannelNumbers import channelnumbers
 from boxbranding import getMachineBrand
+import six
 
 def buildTerTransponder(frequency,
 		inversion=2, bandwidth = 7000000, fechigh = 6, feclow = 6,
@@ -96,18 +100,18 @@
 			tlist.append(parm)
 
 cable_bands = {
-	"DVBC_BAND_EU_VHF_I" : 1 << 0,
-	"DVBC_BAND_EU_MID" : 1 << 1,
-	"DVBC_BAND_EU_VHF_III" : 1 << 2,
-	"DVBC_BAND_EU_SUPER" : 1 << 3,
-	"DVBC_BAND_EU_HYPER" : 1 << 4,
-	"DVBC_BAND_EU_UHF_IV" : 1 << 5,
-	"DVBC_BAND_EU_UHF_V" : 1 << 6,
-	"DVBC_BAND_US_LO" : 1 << 7,
-	"DVBC_BAND_US_MID" : 1 << 8,
-	"DVBC_BAND_US_HI" : 1 << 9,
-	"DVBC_BAND_US_SUPER" : 1 << 10,
-	"DVBC_BAND_US_HYPER" : 1 << 11,
+	"DVBC_BAND_EU_VHF_I": 1 << 0,
+	"DVBC_BAND_EU_MID": 1 << 1,
+	"DVBC_BAND_EU_VHF_III": 1 << 2,
+	"DVBC_BAND_EU_SUPER": 1 << 3,
+	"DVBC_BAND_EU_HYPER": 1 << 4,
+	"DVBC_BAND_EU_UHF_IV": 1 << 5,
+	"DVBC_BAND_EU_UHF_V": 1 << 6,
+	"DVBC_BAND_US_LO": 1 << 7,
+	"DVBC_BAND_US_MID": 1 << 8,
+	"DVBC_BAND_US_HI": 1 << 9,
+	"DVBC_BAND_US_SUPER": 1 << 10,
+	"DVBC_BAND_US_HYPER": 1 << 11,
 }
 
 cable_autoscan_nimtype = {
@@ -167,9 +171,9 @@
 				if frontend:
 					if delsys == 'DVB-C':
 						frontend.changeType(iDVBFrontend.feCable)
-					elif delsys in ('DVB-T','DVB-T2'):
+					elif delsys in ('DVB-T', 'DVB-T2'):
 						frontend.changeType(iDVBFrontend.feTerrestrial)
-					elif delsys in ('DVB-S','DVB-S2'):
+					elif delsys in ('DVB-S', 'DVB-S2'):
 						frontend.changeType(iDVBFrontend.feSatellite)
 					elif delsys == 'ATSC':
 						frontend.changeType(iDVBFrontend.feATSC)
@@ -180,7 +184,7 @@
 		return False
 
 	def cableTransponderSearchSessionClosed(self, *val):
-		print "cableTransponderSearchSessionClosed, val", val
+		print("cableTransponderSearchSessionClosed, val", val)
 		self.cable_search_container.appClosed.remove(self.cableTransponderSearchClosed)
 		self.cable_search_container.dataAvail.remove(self.getCableTransponderData)
 		if val and len(val):
@@ -195,10 +199,11 @@
 		self.cableTransponderSearchFinished()
 
 	def cableTransponderSearchClosed(self, retval):
-		print "cableTransponderSearch finished", retval
+		print("cableTransponderSearch finished", retval)
 		self.cable_search_session.close(True)
 
 	def getCableTransponderData(self, str):
+		str = six.ensure_str(str)
 		#prepend any remaining data from the previous call
 		str = self.remainingdata + str
 		#split in lines
@@ -215,7 +220,7 @@
 			data = line.split()
 			if len(data):
 				if data[0] == 'OK':
-					print str
+					print(str)
 					parm = eDVBFrontendParametersCable()
 					qam = { "QAM16" : parm.Modulation_QAM16,
 						"QAM32" : parm.Modulation_QAM32,
@@ -246,7 +251,7 @@
 					self.__tlist.append(parm)
 				tmpstr = _("Try to find used transponders in cable network.. please wait...")
 				tmpstr += "\n\n"
-				tmpstr += data[1].isdigit() and "%s MHz " % (int(data[1]) / 1000.) or data[1]
+				tmpstr += data[1].isdigit() and "%s MHz " % (int(data[1]) // 1000.) or data[1]
 				tmpstr += data[0]
 				self.cable_search_session["text"].setText(tmpstr)
 
@@ -262,14 +267,14 @@
 						try:
 							device_id = GetDeviceId('TT3L10', nim_idx)
 							device_id = "--device=%s" % (device_id)
-						except Exception, err:
-							print "GetCommand ->", err
+						except Exception as err:
+							print("GetCommand ->", err)
 							device_id = "--device=0"
 #						print nim_idx, nim_name, cable_autoscan_nimtype[nim_name], device_id
 					command = "%s %s" % (cable_autoscan_nimtype[nim_name], device_id)
 					return command
-			except Exception, err:
-				print "GetCommand ->", err
+			except Exception as err:
+				print("GetCommand ->", err)
 			return "tda1002x"
 
 		if not self.tryGetRawFrontend(nim_idx, "DVB-C"):
@@ -290,7 +295,7 @@
 		try:
 			bus = nimmanager.getI2CDevice(nim_idx)
 			if bus is None:
-				print "ERROR: could not get I2C device for nim", nim_idx, "for cable transponder search"
+				print("ERROR: could not get I2C device for nim", nim_idx, "for cable transponder search")
 				bus = 2
 		except:
 			# older API
@@ -375,7 +380,7 @@
 				cmd += " --sr "
 				cmd += str(cableConfig.scan_sr_ext2.value)
 				cmd += "000"
-		print bin_name, " CMD is", cmd
+		print(bin_name, " CMD is", cmd)
 
 		self.cable_search_container.execute(cmd)
 		tmpstr = _("Try to find used transponders in cable network.. please wait...")
@@ -390,7 +395,7 @@
 #		pass
 
 	def terrestrialTransponderSearchSessionClosed(self, *val):
-		print "TerrestrialTransponderSearchSessionClosed, val", val
+		print("TerrestrialTransponderSearchSessionClosed, val", val)
 		self.terrestrial_search_container.appClosed.remove(self.terrestrialTransponderSearchClosed)
 		self.terrestrial_search_container.dataAvail.remove(self.getTerrestrialTransponderData)
 		if val and len(val):
@@ -408,17 +413,18 @@
 		self.setTerrestrialTransponderData()
 		opt = self.terrestrialTransponderGetOpt()
 		if opt is None:
-			print "terrestrialTransponderSearch finished", retval
+			print("terrestrialTransponderSearch finished", retval)
 			self.terrestrial_search_session.close(True)
 		else:
 			(freq, bandWidth) = opt
 			self.terrestrialTransponderSearch(freq, bandWidth)
 
 	def getTerrestrialTransponderData(self, str):
+		str = six.ensure_str(str)
 		self.terrestrial_search_data += str
 
 	def setTerrestrialTransponderData(self):
-		print self.terrestrial_search_data
+		print(self.terrestrial_search_data)
 		data = self.terrestrial_search_data.split()
 		if len(data):
 #			print "[setTerrestrialTransponderData] data : ", data
@@ -480,23 +486,23 @@
 
 	def terrestrialTransponderConvBandwidth_I(self, _bandWidth):
 		bandWidth = {
-			eDVBFrontendParametersTerrestrial.Bandwidth_8MHz : 8000000,
-			eDVBFrontendParametersTerrestrial.Bandwidth_7MHz : 7000000,
-			eDVBFrontendParametersTerrestrial.Bandwidth_6MHz : 6000000,
-			eDVBFrontendParametersTerrestrial.Bandwidth_5MHz : 5000000,
-			eDVBFrontendParametersTerrestrial.Bandwidth_1_712MHz : 1712000,
-			eDVBFrontendParametersTerrestrial.Bandwidth_10MHz : 10000000,
+			eDVBFrontendParametersTerrestrial.Bandwidth_8MHz: 8000000,
+			eDVBFrontendParametersTerrestrial.Bandwidth_7MHz: 7000000,
+			eDVBFrontendParametersTerrestrial.Bandwidth_6MHz: 6000000,
+			eDVBFrontendParametersTerrestrial.Bandwidth_5MHz: 5000000,
+			eDVBFrontendParametersTerrestrial.Bandwidth_1_712MHz: 1712000,
+			eDVBFrontendParametersTerrestrial.Bandwidth_10MHz: 10000000,
 		}.get(_bandWidth, 8000000)
 		return bandWidth
 
 	def terrestrialTransponderconvBandwidth_P(self, _bandWidth):
 		bandWidth = {
-			8000000 : eDVBFrontendParametersTerrestrial.Bandwidth_8MHz,
-			7000000 : eDVBFrontendParametersTerrestrial.Bandwidth_7MHz,
-			6000000 : eDVBFrontendParametersTerrestrial.Bandwidth_6MHz,
-			5000000 : eDVBFrontendParametersTerrestrial.Bandwidth_5MHz,
-			1712000 : eDVBFrontendParametersTerrestrial.Bandwidth_1_712MHz,
-			10000000 : eDVBFrontendParametersTerrestrial.Bandwidth_10MHz,
+			8000000: eDVBFrontendParametersTerrestrial.Bandwidth_8MHz,
+			7000000: eDVBFrontendParametersTerrestrial.Bandwidth_7MHz,
+			6000000: eDVBFrontendParametersTerrestrial.Bandwidth_6MHz,
+			5000000: eDVBFrontendParametersTerrestrial.Bandwidth_5MHz,
+			1712000: eDVBFrontendParametersTerrestrial.Bandwidth_1_712MHz,
+			10000000: eDVBFrontendParametersTerrestrial.Bandwidth_10MHz,
 		}.get(_bandWidth, eDVBFrontendParametersTerrestrial.Bandwidth_8MHz)
 		return bandWidth
 
@@ -517,14 +523,14 @@
 					try:
 						device_id = GetDeviceId(nim_name, nim_idx)
 						device_id = "--device %s" % (device_id)
-					except Exception, err:
-						print "terrestrialTransponderGetCmd ->", err
+					except Exception as err:
+						print("terrestrialTransponderGetCmd ->", err)
 						device_id = "--device 0"
 #					print nim_idx, nim_name, terrestrial_autoscan_nimtype[nim_name], device_id
 				command = "%s %s" % (terrestrial_autoscan_nimtype[nim_name], device_id)
 				return command
-		except Exception, err:
-			print "terrestrialTransponderGetCmd ->", err
+		except Exception as err:
+			print("terrestrialTransponderGetCmd ->", err)
 		return ""
 
 	def startTerrestrialTransponderSearch(self, nim_idx, region):
@@ -553,7 +559,7 @@
 		self.terrestrial_search_enable_5v = GetTerrestrial5VEnable(nim_idx)
 
 		self.terrestrial_search_list = []
-		self.terrestrialTransponderInitSearchList(self.terrestrial_search_list ,region)
+		self.terrestrialTransponderInitSearchList(self.terrestrial_search_list, region)
 		(freq, bandWidth) = self.terrestrialTransponderGetOpt()
 		self.terrestrialTransponderSearch(freq, bandWidth)
 
@@ -566,7 +572,7 @@
 		cmd = "%s --freq %d --bw %d --bus %d --ds 2" % (self.terrestrial_search_binName, freq, bandWidth, self.terrestrial_search_bus)
 		if self.terrestrial_search_enable_5v:
 			cmd += " --feid %d --5v %d" % (self.terrestrial_search_feid, self.terrestrial_search_enable_5v)
-		print "SCAN CMD : ",cmd
+		print("SCAN CMD : ", cmd)
 		self.terrestrial_search_container.execute(cmd)
 
 class ConfigFrequency(ConfigInteger):
@@ -664,18 +670,18 @@
 		fe_id = int(self.scan_nims.value)
 		multiType = config.Nims[fe_id].multiType
 		slot = nimmanager.nim_slots[fe_id]
-		print "dvb_api_version ",iDVBFrontend.dvb_api_version
+		print("dvb_api_version ", iDVBFrontend.dvb_api_version)
 		if eDVBResourceManager.getInstance().allocateRawChannel(fe_id) is None:
 			self.session.nav.stopService()
 			if eDVBResourceManager.getInstance().allocateRawChannel(fe_id) is None:
-				print "type change failed"
+				print("type change failed")
 				return
 		frontend = eDVBResourceManager.getInstance().allocateRawChannel(fe_id).getFrontend()
 
 		if slot.isMultiType():
 			eDVBResourceManager.getInstance().setFrontendType(slot.frontend_id, "dummy", False) #to force a clear of m_delsys_whitelist
 			types = slot.getMultiTypeList()
-			for FeType in types.itervalues():
+			for FeType in six.itervalues(types):
 				if FeType in ("DVB-S", "DVB-S2", "DVB-S2X") and config.Nims[slot.slot].dvbs.configMode.value == "nothing":
 					continue
 				elif FeType in ("DVB-T", "DVB-T2") and config.Nims[slot.slot].dvbt.configMode.value == "nothing":
@@ -690,24 +696,24 @@
 
 		system = multiType.getText()
 #			if not path.exists("/proc/stb/frontend/%d/mode" % fe_id) and iDVBFrontend.dvb_api_version >= 5:
-		print "api >=5 and new style tuner driver"
+		print("api >=5 and new style tuner driver")
 		if frontend:
 			if system == 'DVB-C':
 				ret = frontend.changeType(iDVBFrontend.feCable)
-			elif system in ('DVB-T','DVB-T2'):
+			elif system in ('DVB-T', 'DVB-T2'):
 				ret = frontend.changeType(iDVBFrontend.feTerrestrial)
-			elif system in ('DVB-S','DVB-S2'):
+			elif system in ('DVB-S', 'DVB-S2'):
 				ret = frontend.changeType(iDVBFrontend.feSatellite)
 			elif system == 'ATSC':
 				ret = frontend.changeType(iDVBFrontend.feATSC)
 			else:
 				ret = False
 			if not ret:
-				print "%d: tunerTypeChange to '%s' failed" %(fe_id, system)
+				print("%d: tunerTypeChange to '%s' failed" %(fe_id, system))
 			else:
-				print "new system ",system
+				print("new system ", system)
 		else:
-			print "%d: tunerTypeChange to '%s' failed (BUSY)" %(fe_id, multiType.getText())
+			print("%d: tunerTypeChange to '%s' failed (BUSY)" %(fe_id, multiType.getText()))
 #		self.createConfig()
 		self.createSetup()
 
@@ -715,7 +721,7 @@
 		self.list = []
 		self.multiscanlist = []
 		index_to_scan = int(self.scan_nims.value)
-		print "ID: ", index_to_scan
+		print("ID: ", index_to_scan)
 
 		self.tunerEntry = getConfigListEntry(_("Tuner"), self.scan_nims)
 		self.list.append(self.tunerEntry)
@@ -834,7 +840,7 @@
 
 			elif self.scan_type.value == "single_satellite":
 				self.updateSatList()
-				print self.scan_satselection[index_to_scan]
+				print(self.scan_satselection[index_to_scan])
 				self.list.append(getConfigListEntry(_("Satellite"), self.scan_satselection[index_to_scan]))
 				self.scan_networkScan.value = True
 			elif "multisat" in self.scan_type.value:
@@ -870,12 +876,12 @@
 				else:
 					self.scan_ter.system.value = eDVBFrontendParametersTerrestrial.System_DVB_T
 				if self.ter_channel_input and self.scan_input_as.value == "channel":
-					self.scan_ter.frequency.floatint = channelnumbers.channel2frequency(self.scan_ter.channel.value, self.ter_tnumber)/1000
+					self.scan_ter.frequency.floatint = channelnumbers.channel2frequency(self.scan_ter.channel.value, self.ter_tnumber)//1000
 					self.list.append(getConfigListEntry(_("Channel"), self.scan_ter.channel))
 				else:
 					channel = channelnumbers.getChannelNumber(self.scan_ter.frequency.floatint * 1000, self.ter_tnumber)
 					if channel:
-						self.scan_ter.channel.value = int(channel.replace("+","").replace("-",""))
+						self.scan_ter.channel.value = int(channel.replace("+", "").replace("-", ""))
 					self.list.append(getConfigListEntry(_("Frequency"), self.scan_ter.frequency))
 				self.list.append(getConfigListEntry(_("Inversion"), self.scan_ter.inversion))
 				self.list.append(getConfigListEntry(_("Bandwidth"), self.scan_ter.bandwidth))
@@ -928,8 +934,8 @@
 
 	def newConfig(self):
 		cur = self["config"].getCurrent()
-		print "cur is", cur
-		print type(cur)
+		print("cur is", cur)
+		print(type(cur))
 		if cur is not None:
 			if cur == self.multiType:
 				self.TunerTypeChanged()
@@ -1043,9 +1049,9 @@
 			ttype = frontendData.get("tuner_type", "UNKNOWN")
 			if ttype == "DVB-S":
 				defaultSat["system"] = frontendData.get("system", eDVBFrontendParametersSatellite.System_DVB_S)
-				defaultSat["frequency"] = frontendData.get("frequency", 0) / 1000
+				defaultSat["frequency"] = frontendData.get("frequency", 0) // 1000
 				defaultSat["inversion"] = frontendData.get("inversion", eDVBFrontendParametersSatellite.Inversion_Unknown)
-				defaultSat["symbolrate"] = frontendData.get("symbol_rate", 0) / 1000
+				defaultSat["symbolrate"] = frontendData.get("symbol_rate", 0) // 1000
 				defaultSat["polarization"] = frontendData.get("polarization", eDVBFrontendParametersSatellite.Polarisation_Horizontal)
 				if defaultSat["system"] == eDVBFrontendParametersSatellite.System_DVB_S2:
 					defaultSat["fec_s2"] = frontendData.get("fec_inner", eDVBFrontendParametersSatellite.FEC_Auto)
@@ -1062,13 +1068,13 @@
 				defaultSat["orbpos"] = frontendData.get("orbital_position", 0)
 			elif ttype == "DVB-C":
 				defaultCab["frequency"] = frontendData.get("frequency", 0)
-				defaultCab["symbolrate"] = frontendData.get("symbol_rate", 0) / 1000
+				defaultCab["symbolrate"] = frontendData.get("symbol_rate", 0) // 1000
 				defaultCab["inversion"] = frontendData.get("inversion", eDVBFrontendParametersCable.Inversion_Unknown)
 				defaultCab["fec"] = frontendData.get("fec_inner", eDVBFrontendParametersCable.FEC_Auto)
 				defaultCab["modulation"] = frontendData.get("modulation", eDVBFrontendParametersCable.Modulation_QAM16)
 				defaultCab["system"] = frontendData.get("system", eDVBFrontendParametersCable.System_DVB_C_ANNEX_A)
 			elif ttype == "DVB-T":
-				defaultTer["frequency"] = frontendData.get("frequency", 47400000) / 1000
+				defaultTer["frequency"] = frontendData.get("frequency", 47400000) // 1000
 				defaultTer["inversion"] = frontendData.get("inversion", eDVBFrontendParametersTerrestrial.Inversion_Unknown)
 				defaultTer["bandwidth"] = frontendData.get("bandwidth", 8000000)
 				defaultTer["fechigh"] = frontendData.get("code_rate_hp", eDVBFrontendParametersTerrestrial.FEC_Auto)
@@ -1080,7 +1086,7 @@
 				defaultTer["system"] = frontendData.get("system", eDVBFrontendParametersTerrestrial.System_DVB_T)
 				defaultTer["plp_id"] = frontendData.get("plp_id", 0)
 			elif ttype == "ATSC":
-				defaultATSC["frequency"] = frontendData.get("frequency", 47400000) / 1000
+				defaultATSC["frequency"] = frontendData.get("frequency", 47400000) // 1000
 				defaultATSC["inversion"] = frontendData.get("inversion", eDVBFrontendParametersATSC.Inversion_Unknown)
 				defaultATSC["modulation"] = frontendData.get("modulation", eDVBFrontendParametersATSC.Modulation_Auto)
 				defaultATSC["system"] = frontendData.get("system", eDVBFrontendParametersATSC.System_ATSC)
@@ -1177,7 +1183,7 @@
 			(eDVBFrontendParametersSatellite.Pilot_On, _("On")),
 			(eDVBFrontendParametersSatellite.Pilot_Unknown, _("Auto"))])
 		self.scan_sat.is_id = ConfigInteger(default = defaultSat["is_id"], limits = (eDVBFrontendParametersSatellite.No_Stream_Id_Filter, 255))
-		self.scan_sat.is_id_bool = ConfigSelection(default = defaultSat["is_id"] != eDVBFrontendParametersSatellite.No_Stream_Id_Filter, choices = [(True, _("Multistream")),(False, _("Ordinary"))])
+		self.scan_sat.is_id_bool = ConfigSelection(default = defaultSat["is_id"] != eDVBFrontendParametersSatellite.No_Stream_Id_Filter, choices = [(True, _("Multistream")), (False, _("Ordinary"))])
 		self.scan_sat.pls_mode = ConfigSelection(default = defaultSat["pls_mode"], choices = [
 			(eDVBFrontendParametersSatellite.PLS_Root, _("Root")),
 			(eDVBFrontendParametersSatellite.PLS_Gold, _("Gold")),
@@ -1185,7 +1191,7 @@
 		self.scan_sat.pls_code = ConfigInteger(default = defaultSat.get("pls_code"), limits = (0, 262142))
 		self.scan_sat.t2mi_plp_id = ConfigInteger(default = defaultSat["t2mi_plp_id"], limits = (eDVBFrontendParametersSatellite.No_T2MI_PLP_Id, 255))
 		self.scan_sat.t2mi_pid = ConfigInteger(default = defaultSat["t2mi_pid"] if self.scan_sat.t2mi_plp_id.value != eDVBFrontendParametersSatellite.No_T2MI_PLP_Id else eDVBFrontendParametersSatellite.T2MI_Default_Pid, limits = (0, 8191))
-		self.scan_sat.t2mi_plp_id_bool  = ConfigSelection(default = defaultSat["t2mi_plp_id"] != eDVBFrontendParametersSatellite.No_T2MI_PLP_Id, choices = [(True, _("Enabled")),(False, _("Disabled"))])
+		self.scan_sat.t2mi_plp_id_bool  = ConfigSelection(default = defaultSat["t2mi_plp_id"] != eDVBFrontendParametersSatellite.No_T2MI_PLP_Id, choices = [(True, _("Enabled")), (False, _("Disabled"))])
 
 		self.is_id_memory = self.scan_sat.is_id.value # used to prevent is_id value being lost when self.scan_sat.is_id_bool state changes
 		self.pls_mode_memory = self.scan_sat.pls_mode.value
@@ -1194,7 +1200,7 @@
 		self.t2mi_pid_memory = self.scan_sat.t2mi_pid.value
 
 		# cable
-		self.scan_cab.frequency = ConfigFloat(default = [defaultCab["frequency"] / 1000, defaultCab["frequency"] % 1000], limits = [(50, 999), (0,999)])
+		self.scan_cab.frequency = ConfigFloat(default = [defaultCab["frequency"] // 1000, defaultCab["frequency"] % 1000], limits = [(50, 999), (0, 999)])
 		self.scan_cab.inversion = ConfigSelection(default = defaultCab["inversion"], choices = [
 			(eDVBFrontendParametersCable.Inversion_Off, _("Off")),
 			(eDVBFrontendParametersCable.Inversion_On, _("On")),
@@ -1224,7 +1230,7 @@
 			(eDVBFrontendParametersCable.System_DVB_C_ANNEX_C, _("DVB-C ANNEX C"))])
 
 		# terrestial
-		self.scan_ter.frequency = ConfigFloat(default = [defaultTer["frequency"] / 1000, defaultTer["frequency"] % 1000], limits = [(50, 999), (0,999)])
+		self.scan_ter.frequency = ConfigFloat(default = [defaultTer["frequency"] // 1000, defaultTer["frequency"] % 1000], limits = [(50, 999), (0, 999)])
 		self.scan_ter.channel = ConfigChannel(default = 21, limits = (1, 99))
 		self.scan_ter.inversion = ConfigSelection(default = defaultTer["inversion"], choices = [
 			(eDVBFrontendParametersTerrestrial.Inversion_Off, _("Off")),
@@ -1298,7 +1304,7 @@
 		self.scan_ter.plp_id = ConfigInteger(default = defaultTer["plp_id"], limits = (0, 255))
 
 		# ATSC
-		self.scan_ats.frequency = ConfigFloat(default = [defaultATSC["frequency"] / 1000, defaultATSC["frequency"] % 1000], limits = [(50, 999), (0,999)])
+		self.scan_ats.frequency = ConfigFloat(default = [defaultATSC["frequency"] // 1000, defaultATSC["frequency"] % 1000], limits = [(50, 999), (0, 999)])
 		self.scan_ats.inversion = ConfigSelection(default = defaultATSC["inversion"], choices = [
 			(eDVBFrontendParametersATSC.Inversion_Off, _("Off")),
 			(eDVBFrontendParametersATSC.Inversion_On, _("On")),
@@ -1436,11 +1442,11 @@
 		self.newConfig()
 
 	def updateStatus(self):
-		print "updatestatus"
+		print("updatestatus")
 
 	def addSatTransponder(self, tlist, frequency, symbol_rate, polarisation, fec, inversion, orbital_position, system, modulation, rolloff, pilot, is_id, pls_mode, pls_code, t2mi_plp_id, t2mi_pid):
-		print "Add Sat: frequ: " + str(frequency) + " symbol: " + str(symbol_rate) + " pol: " + str(polarisation) + " fec: " + str(fec) + " inversion: " + str(inversion) + " modulation: " + str(modulation) + " system: " + str(system) + " rolloff" + str(rolloff) + " pilot" + str(pilot) + " is_id" + str(is_id) + " pls_mode" + str(pls_mode) + " pls_code" + str(pls_code) + " t2mi_plp_id" + str(t2mi_plp_id) + " t2mi_pid " + str(t2mi_pid)
-		print "orbpos: " + str(orbital_position)
+		print("Add Sat: frequ: " + str(frequency) + " symbol: " + str(symbol_rate) + " pol: " + str(polarisation) + " fec: " + str(fec) + " inversion: " + str(inversion) + " modulation: " + str(modulation) + " system: " + str(system) + " rolloff" + str(rolloff) + " pilot" + str(pilot) + " is_id" + str(is_id) + " pls_mode" + str(pls_mode) + " pls_code" + str(pls_code) + " t2mi_plp_id" + str(t2mi_plp_id) + " t2mi_pid " + str(t2mi_pid))
+		print("orbpos: " + str(orbital_position))
 		parm = eDVBFrontendParametersSatellite()
 		parm.modulation = modulation
 		parm.system = system
@@ -1460,7 +1466,7 @@
 		tlist.append(parm)
 
 	def addCabTransponder(self, tlist, frequency, symbol_rate, modulation, fec, inversion):
-		print "Add Cab: frequ: " + str(frequency) + " symbol: " + str(symbol_rate) + " pol: " + str(modulation) + " fec: " + str(fec) + " inversion: " + str(inversion)
+		print("Add Cab: frequ: " + str(frequency) + " symbol: " + str(symbol_rate) + " pol: " + str(modulation) + " fec: " + str(fec) + " inversion: " + str(inversion))
 		parm = eDVBFrontendParametersCable()
 		parm.frequency = frequency
 		parm.symbol_rate = symbol_rate
@@ -1473,7 +1479,7 @@
 		tlist.append(buildTerTransponder(*args, **kwargs))
 
 	def addATSCTransponder(self, tlist, frequency, modulation, inversion, system):
-		print "Add ATSC frequency: %s inversion: %s modulation: %s system: %s" % (frequency, modulation, inversion, system)
+		print("Add ATSC frequency: %s inversion: %s modulation: %s system: %s" % (frequency, modulation, inversion, system))
 		parm = eDVBFrontendParametersATSC()
 		parm.frequency = frequency
 		parm.inversion = inversion
@@ -1505,14 +1511,14 @@
 			return
 
 		nim = nimmanager.nim_slots[index_to_scan]
-		print "nim", nim.slot
+		print("nim", nim.slot)
 		if nim.isCompatible("DVB-S"):
-			print "is compatible with DVB-S"
+			print("is compatible with DVB-S")
 			if "multisat" in self.scan_type.value:
 				SatList = nimmanager.getSatListForNim(index_to_scan)
 				for x in self.multiscanlist:
 					if x[1].value:
-						print "   " + str(x[0])
+						print("   " + str(x[0]))
 						getInitialTransponderList(tlist, x[0])
 			else:
 				# these lists are generated for each tuner, so this has work.
@@ -1529,7 +1535,7 @@
 							fec = self.scan_sat.fec.value
 						else:
 							fec = self.scan_sat.fec_s2.value
-						print "add sat transponder"
+						print("add sat transponder")
 
 						self.addSatTransponder(tlist, self.scan_sat.frequency.value,
 									self.scan_sat.symbolrate.value,
@@ -1550,7 +1556,7 @@
 						tps = nimmanager.getTransponders(orbpos)
 						if len(tps) and len(tps) > self.preDefTransponders.index:
 							tp = tps[self.preDefTransponders.index]
-							self.addSatTransponder(tlist, tp[1] / 1000, tp[2] / 1000, tp[3], tp[4], tp[7], orbpos, tp[5], tp[6], tp[8], tp[9], tp[10], tp[11], tp[12], tp[13], tp[14])
+							self.addSatTransponder(tlist, tp[1] // 1000, tp[2] // 1000, tp[3], tp[4], tp[7], orbpos, tp[5], tp[6], tp[8], tp[9], tp[10], tp[11], tp[12], tp[13], tp[14])
 					elif self.scan_type.value == "single_satellite":
 						getInitialTransponderList(tlist, orbpos)
 
@@ -1578,7 +1584,7 @@
 				elif nimmanager.nim_slots[index_to_scan].supportsBlindScan():
 					flags |= eComponentScan.scanBlindSearch
 					self.addCabTransponder(tlist, 73000,
-												  (866000 - 73000) / 1000,
+												  (866000 - 73000) // 1000,
 												  eDVBFrontendParametersCable.Modulation_Auto,
 												  eDVBFrontendParametersCable.FEC_Auto,
 												  eDVBFrontendParametersCable.Inversion_Unknown)
@@ -1736,10 +1742,10 @@
 		return default
 
 	def humanReadableTransponder(self, tp):
-		if tp[3] in range (4) and tp[4] in range (11):
-			pol_list = ['H','V','L','R']
-			fec_list = ['Auto','1/2','2/3','3/4','5/6','7/8','8/9','3/5','4/5','9/10','None']
-			tp_text = str(tp[1] / 1000) + " " + pol_list[tp[3]] + " " + str(tp[2] / 1000) + " " + fec_list[tp[4]]
+		if tp[3] in list(range(4)) and tp[4] in list(range(11)):
+			pol_list = ['H', 'V', 'L', 'R']
+			fec_list = ['Auto', '1/2', '2/3', '3/4', '5/6', '7/8', '8/9', '3/5', '4/5', '9/10', 'None']
+			tp_text = str(tp[1] // 1000) + " " + pol_list[tp[3]] + " " + str(tp[2] // 1000) + " " + fec_list[tp[4]]
 			if tp[5] == eDVBFrontendParametersSatellite.System_DVB_S2:
 				if tp[10] > eDVBFrontendParametersSatellite.No_Stream_Id_Filter:
 					tp_text = ("%s MIS %d") % (tp_text, tp[10])
@@ -1771,9 +1777,9 @@
 					channel = _(' (Channel %s)') % (channelnumbers.getChannelNumber(tp[1], index_to_scan))
 				if default is None and self.compareTerrTransponders(tp, compare):
 					default = str(i)
-				list.append((str(i), '%s MHz %s' % (str(tp[1] / 1000000), channel)))
+				list.append((str(i), '%s MHz %s' % (str(tp[1] // 1000000), channel)))
 				i += 1
-				print "channel", channel
+				print("channel", channel)
 		if self.TerrestrialTransponders is None:
 			self.TerrestrialTransponders = ConfigSelection(choices = list, default = default)
 		else:
@@ -1817,11 +1823,11 @@
 		return default
 
 	def humanReadableCabTransponder(self, tp):
-		if tp[3] in range (7) and (tp[4] in range (10) or tp[4] == 15):
-			mod_list = ['Auto', '16-QAM','32-QAM','64-QAM','128-QAM', '256-QAM', 'Auto']
+		if tp[3] in list(range(7)) and (tp[4] in list(range(10)) or tp[4] == 15):
+			mod_list = ['Auto', '16-QAM', '32-QAM', '64-QAM', '128-QAM', '256-QAM', 'Auto']
 			fec_list = {0:"Auto", 1:'1/2', 2:'2/3', 3:'3/4', 4:'5/6', 5:'7/8', 6:'8/9', 7:'3/5', 8:'4/5', 9:'9/10', 15:'None'}
-#			print str(tp[1]/1000.) + " MHz " + fec_list[tp[4]] + " " + str(tp[2]/1000) + " " + mod_list[tp[3]]
-			return str(tp[1]/1000.) + " MHz " + fec_list[tp[4]] + " " + str(tp[2]/1000) + " " + mod_list[tp[3]]
+#			print str(tp[1]//1000.) + " MHz " + fec_list[tp[4]] + " " + str(tp[2]/1000) + " " + mod_list[tp[3]]
+			return str(tp[1]//1000.) + " MHz " + fec_list[tp[4]] + " " + str(tp[2]//1000) + " " + mod_list[tp[3]]
 		return _("Invalid transponder data")
 
 	def compareCabTransponders(self, tp, compare):
@@ -1836,7 +1842,7 @@
 		tps = nimmanager.getTranspondersATSC(index_to_scan)
 		for i, tp in enumerate(tps):
 			if tp[0] == 3: #ATSC
-				list.append((str(i), '%s MHz' % (str(tp[1] / 1000000))))
+				list.append((str(i), '%s MHz' % (str(tp[1] // 1000000))))
 		if self.ATSCTransponders is None:
 			self.ATSCTransponders = ConfigSelection(choices = list, default = default)
 		else:
@@ -1883,7 +1889,7 @@
 		#	networks += [ nimmanager.getATSCDescription(nim.slot)]
 		#if not nim.empty and not (nim.canBeCompatible("DVB-S") or nim.canBeCompatible("DVB-C") or nim.canBeCompatible("DVB-S") or nim.canBeCompatible("ATSC")):
 		if not nim.empty and not (nim.canBeCompatible("DVB-S") or nim.canBeCompatible("DVB-C") or nim.canBeCompatible("DVB-S")):
-			print"unsupported nim type %s" % nim.type
+			print("unsupported nim type %s" % nim.type)
 			networks += [nim.type]
 
 		return networks
@@ -1989,7 +1995,7 @@
 
 			#assign nims
 			tag_dvbc_default = tag_dvbt_default = tag_dvbs_default = tag_atsc_default = True
-			for item in networks.iteritems():
+			for item in six.iteritems(networks):
 				req_type = item[0]
 				for req_network in item[1]:
 					for nim in nimmanager.nim_slots:
@@ -2100,7 +2106,7 @@
 							else:
 								skip_t2 = False
 					getInitialTerrestrialTransponderList(tlist, n.network, skip_t2)
-				if n.nim_type == "ATSC":
+				elif n.nim_type == "ATSC":
 					getInitialATSCTransponderList(tlist, nim.slot)
 				else:
 					assert False
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Scart.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Scart.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Scart.py	2020-06-21 10:16:12.723442439 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Scart.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,7 +1,9 @@
-from Screen import Screen
-from MessageBox import MessageBox
+from __future__ import print_function
+from __future__ import absolute_import
+from Screens.Screen import Screen
+from Screens.MessageBox import MessageBox
 from Components.AVSwitch import AVSwitch
-from Tools import Notifications
+import Tools.Notifications
 
 class Scart(Screen):
 	def __init__(self, session, start_visible=True):
@@ -27,7 +29,7 @@
 			self.avswitch.setInput("SCART")
 			if not self.session.in_exec:
 				self.notificationVisible = True
-				Notifications.AddNotificationWithCallback(self.MsgBoxClosed, MessageBox, _("If you see this, something is wrong with\nyour scart connection. Press OK to return."), MessageBox.TYPE_ERROR, msgBoxID = "scart_msgbox")
+				Tools.Notifications.AddNotificationWithCallback(self.MsgBoxClosed, MessageBox, _("If you see this, something is wrong with\nyour scart connection. Press OK to return."), MessageBox.TYPE_ERROR, msgBoxID = "scart_msgbox")
 			else:
 				self.msgBox = self.session.openWithCallback(self.MsgBoxClosed, MessageBox, _("If you see this, something is wrong with\nyour scart connection. Press OK to return."), MessageBox.TYPE_ERROR)
 
@@ -45,9 +47,9 @@
 		if self.notificationVisible:
 			self.avswitch.setInput("ENCODER")
 			self.notificationVisible = False
-			for notification in Notifications.current_notifications:
+			for notification in Tools.Notifications.current_notifications:
 				try:
 					if notification[1].msgBoxID == "scart_msgbox":
 						notification[1].close()
 				except:
-					print "other notification is open. try another one."
+					print("other notification is open. try another one.")
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Screen.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Screen.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Screen.py	2020-06-21 10:16:12.723442439 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Screen.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Tools.Profile import profile
 
 profile("LOAD:GUISkin")
@@ -11,8 +12,11 @@
 
 class Screen(dict, GUISkin):
 
-	False, SUSPEND_STOPS, SUSPEND_PAUSES = range(3)
-	ALLOW_SUSPEND = False
+	SUSPEND_NONE = 0
+	SUSPEND_STOPS = 1
+	SUSPEND_PAUSES = 2
+
+	ALLOW_SUSPEND = SUSPEND_NONE
 
 	global_screen = None
 
@@ -86,7 +90,7 @@
 #			assert self.session == None, "a screen can only exec once per time"
 #			self.session = session
 
-			for val in self.values() + self.renderer:
+			for val in list(self.values()) + self.renderer:
 				val.execBegin()
 				if not self.stand_alone and self.session.current_dialog != self:
 					return
@@ -127,7 +131,7 @@
 			val.disconnectAll()  # disconnected converter/sources and probably destroy them. Sources will not be destroyed.
 
 		del self.session
-		for (name, val) in self.items():
+		for (name, val) in list(self.items()):
 			val.destroy()
 			del self[name]
 
@@ -147,7 +151,7 @@
 
 	def show(self):
 		# Temporarily add to ease up identification of screens
-		print '[SCREENNAME] ',self.skinName
+		print('[SCREENNAME] ', self.skinName)
 		if (self.shown and self.already_shown) or not self.instance:
 			return
 		self.shown = True
@@ -155,7 +159,7 @@
 		self.instance.show()
 		for x in self.onShow:
 			x()
-		for val in self.values() + self.renderer:
+		for val in list(self.values()) + self.renderer:
 			if isinstance(val, GUIComponent) or isinstance(val, Source):
 				val.onShow()
 
@@ -166,7 +170,7 @@
 		self.instance.hide()
 		for x in self.onHide:
 			x()
-		for val in self.values() + self.renderer:
+		for val in list(self.values()) + self.renderer:
 			if isinstance(val, GUIComponent) or isinstance(val, Source):
 				val.onHide()
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ScreenSaver.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ScreenSaver.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ScreenSaver.py	2020-06-21 10:16:12.723442439 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ScreenSaver.py	2020-06-21 10:20:02.367327052 -0400
@@ -49,8 +49,8 @@
 
 	def doMovePicture(self):
 		try:
-			self.posx = random.randint(1,self.maxx)
-			self.posy = random.randint(1,self.maxy)
+			self.posx = random.randint(1, self.maxx)
+			self.posy = random.randint(1, self.maxy)
 		except Exception:
 			self.posx = 0
 			self.posy = 0
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ServiceInfo.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ServiceInfo.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ServiceInfo.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ServiceInfo.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,15 +1,18 @@
-from Components.HTMLComponent import HTMLComponent
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+from __future__ import print_function
 from Components.GUIComponent import GUIComponent
 from Screens.Screen import Screen
+from Screens.AudioSelection import AudioSelection
 from Components.ActionMap import ActionMap
 from Components.Label import Label
 from ServiceReference import ServiceReference
-from enigma import eListboxPythonMultiContent, eListbox, gFont, iServiceInformation, eServiceCenter, getDesktop, RT_HALIGN_LEFT, RT_VALIGN_CENTER, eDVBFrontendParametersSatellite
-from Tools.Transponder import ConvertToHumanReadable
-from Components.Converter.ChannelNumbers import channelnumbers
+from enigma import eListboxPythonMultiContent, eListbox, gFont, iServiceInformation, eServiceCenter, eDVBFrontendParametersSatellite, RT_HALIGN_LEFT, RT_VALIGN_CENTER
+from Tools.Transponder import ConvertToHumanReadable, getChannelNumber
 import skin
+import six
 
-RT_HALIGN_LEFT = 0
+SIGN = '°' if six.PY3 else str('\xc2\xb0')
 
 TYPE_TEXT = 0
 TYPE_VALUE_HEX = 1
@@ -17,25 +20,31 @@
 TYPE_VALUE_HEX_DEC = 3
 TYPE_SLIDER = 4
 TYPE_VALUE_ORBIT_DEC = 5
+TYPE_VALUE_FREQ = 6
+TYPE_VALUE_FREQ_FLOAT = 7
+TYPE_VALUE_BITRATE = 8
 
 def to_unsigned(x):
 	return x & 0xFFFFFFFF
 
-def ServiceInfoListEntry(a, b, valueType=TYPE_TEXT, param=4):
-	#screenwidth = getDesktop(0).size().width()
+def ServiceInfoListEntry(a, b="", valueType=TYPE_TEXT, param=4):
 	if not isinstance(b, str):
 		if valueType == TYPE_VALUE_HEX:
-			b = ("0x%0" + str(param) + "x") % to_unsigned(b)
-		elif valueType == TYPE_VALUE_DEC:
-			b = str(b)
+			b = ("%0" + str(param) + "X") % to_unsigned(b)
+		elif valueType == TYPE_VALUE_FREQ:
+			b = "%s MHz" % (b / 1000)
+		elif valueType == TYPE_VALUE_FREQ_FLOAT:
+			b = "%.3f MHz" % (b / 1000.0)
+		elif valueType == TYPE_VALUE_BITRATE:
+			b = "%s KSymbols/s" % (b / 1000)
 		elif valueType == TYPE_VALUE_HEX_DEC:
-			b = ("0x%0" + str(param) + "x (%dd)") % (to_unsigned(b), b)
+			b = ("%0" + str(param) + "X (%d)") % (to_unsigned(b), b)
 		elif valueType == TYPE_VALUE_ORBIT_DEC:
 			direction = 'E'
 			if b > 1800:
 				b = 3600 - b
 				direction = 'W'
-			b = "%d.%d%s" % (b // 10, b % 10, direction)
+			b = ("%d.%d%s") % (b // 10, b % 10, direction)
 		else:
 			b = str(b)
 
@@ -49,43 +58,20 @@
 		(eListboxPythonMultiContent.TYPE_TEXT, xb, yb, wb, hb, 0, RT_HALIGN_LEFT, b)
 	]
 
-class ServiceInfoList(HTMLComponent, GUIComponent):
+class ServiceInfoList(GUIComponent):
 	def __init__(self, source):
 		GUIComponent.__init__(self)
 		self.l = eListboxPythonMultiContent()
 		self.list = source
 		self.l.setList(self.list)
-		self.fontName, self.fontSize = skin.parameters.get("ServiceInfoFont", ('Regular', 23))
-		self.l.setFont(0, gFont(self.fontName, self.fontSize))
-		self.ItemHeight = 25
-
-	def applySkin(self, desktop, screen):
-		if self.skinAttributes is not None:
-			attribs = [ ]
-			for (attrib, value) in self.skinAttributes:
-				if attrib == "font":
-					font = skin.parseFont(value, ((1,1),(1,1)))
-					self.fontName = font.family
-					self.fontSize = font.pointSize
-				elif attrib == "itemHeight":
-					self.ItemHeight = int(value)
-				else:
-					attribs.append((attrib,value))
-			self.skinAttributes = attribs
-		rc = GUIComponent.applySkin(self, desktop, screen)
-		self.setFontsize()
-		self.l.setItemHeight(self.ItemHeight)
-		return rc
+		font = skin.fonts.get("ServiceInfo", ("Regular", 21, 25))
+		self.l.setFont(0, gFont(font[0], font[1]))
+		self.l.setItemHeight(font[2])
 
 	GUI_WIDGET = eListbox
 
-	def setFontsize(self):
-		self.l.setFont(0, gFont(self.fontName, self.fontSize))
-		self.l.setFont(1, gFont(self.fontName, self.fontSize + 5))
-
 	def postWidgetCreate(self, instance):
 		self.instance.setContent(self.l)
-		self.setFontsize()
 
 TYPE_SERVICE_INFO = 1
 TYPE_TRANSPONDER_INFO = 2
@@ -93,56 +79,63 @@
 class ServiceInfo(Screen):
 	def __init__(self, session, serviceref=None):
 		Screen.__init__(self, session)
-		Screen.setTitle(self, _("Service Information"))
 
 		self["actions"] = ActionMap(["OkCancelActions", "ColorActions"],
 		{
 			"ok": self.close,
 			"cancel": self.close,
-			"red": self.information,
-			"green": self.pids,
-			"yellow": self.transponder,
-			"blue": self.tuner
+			"red": self.close,
+			"green": self.ShowECMInformation,
+			"yellow": self.ShowServiceInformation,
+			"blue": self.ShowTransponderInformation
 		}, -1)
 
-		if serviceref:
+		self["infolist"] = ServiceInfoList([])
+		self.setTitle(_("Service info"))
+		self["key_red"] = self["red"] = Label(_("Exit"))
+		self["key_green"] = self["green"] = Label(_("ECM Info"))
+
+		self.transponder_info = self.info = self.feinfo = None
+		play_service = session.nav.getCurrentlyPlayingServiceReference()
+		if serviceref and not (play_service and play_service == serviceref):
 			self.type = TYPE_TRANSPONDER_INFO
 			self.skinName="ServiceInfoSimple"
-			info = eServiceCenter.getInstance().info(serviceref)
-			self.transponder_info = info.getInfoObject(serviceref, iServiceInformation.sTransponderData)
+			self.transponder_info = eServiceCenter.getInstance().info(serviceref).getInfoObject(serviceref, iServiceInformation.sTransponderData)
 			# info is a iStaticServiceInformation, not a iServiceInformation
-			self.info = None
-			self.feinfo = None
 		else:
 			self.type = TYPE_SERVICE_INFO
-			self["key_red"] = self["red"] = Label(_("Service"))
-			self["key_green"] = self["green"] = Label(_("PIDs"))
-			self["key_yellow"] = self["yellow"] = Label(_("Multiplex"))
-			self["key_blue"] = self["blue"] = Label(_("Tuner status"))
 			service = session.nav.getCurrentService()
-			if service is not None:
+			if service:
+				self.transponder_info = None
 				self.info = service.info()
 				self.feinfo = service.frontendInfo()
+				if self.feinfo and not self.feinfo.getAll(True):
+					self.feinfo = None
+					serviceref = play_service
+					self.transponder_info = serviceref and eServiceCenter.getInstance().info(serviceref).getInfoObject(serviceref, iServiceInformation.sTransponderData)
+			self["key_yellow"] = self["yellow"] = Label(_("Service & PIDs"))
+			if self.feinfo or self.transponder_info:
+				self["key_blue"] = self["blue"] = Label(_("Tuner setting values"))
 			else:
-				self.info = None
-				self.feinfo = None
-
-		tlist = [ ]
+				self.skinName="ServiceInfoSimple"
 
-		self["infolist"] = ServiceInfoList(tlist)
-		self.onShown.append(self.information)
+		self.onShown.append(self.ShowServiceInformation)
 
-	def information(self):
+	def ShowServiceInformation(self):
 		if self.type == TYPE_SERVICE_INFO:
+			self["Title"].text = _("Service info - service & PIDs")
+			if self.feinfo or self.transponder_info:
+				self["key_blue"].text = self["blue"].text = _("Tuner setting values")
 			if self.session.nav.getCurrentlyPlayingServiceOrGroup():
 				name = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference()).getServiceName()
 				refstr = self.session.nav.getCurrentlyPlayingServiceReference().toString()
+				reftype = self.session.nav.getCurrentlyPlayingServiceReference().type
 			else:
 				name = _("N/A")
 				refstr = _("N/A")
+				reftype = 0
 			aspect = "-"
 			videocodec = "-"
-			videomode = "-"
 			resolution = "-"
 			if self.info:
 				from Components.Converter.PliExtraInfo import codec_data
@@ -150,162 +143,257 @@
 				width = self.info.getInfo(iServiceInformation.sVideoWidth)
 				height = self.info.getInfo(iServiceInformation.sVideoHeight)
 				if width > 0 and height > 0:
-					resolution = "%dx%d" % (width,height)
-					resolution += ("i", "p", "-")[self.info.getInfo(iServiceInformation.sProgressive)]
+					resolution = videocodec + " - "
+					resolution += "%dx%d - " % (width,height)
 					resolution += str((self.info.getInfo(iServiceInformation.sFrameRate) + 500) / 1000)
+					resolution += (" i", " p", "")[self.info.getInfo(iServiceInformation.sProgressive)]
 					aspect = self.getServiceInfoValue(iServiceInformation.sAspect)
 					aspect = aspect in ( 1, 2, 5, 6, 9, 0xA, 0xD, 0xE ) and "4:3" or "16:9"
 					resolution += " - ["+aspect+"]"
-					gammas = ("SDR", "HDR", "HDR10", "HLG", "")
-					if self.info.getInfo(iServiceInformation.sGamma) < len(gammas):
-						gamma = gammas[self.info.getInfo(iServiceInformation.sGamma)]
-						if gamma:
-							resolution += " - " + gamma
-				f = open("/proc/stb/video/videomode")
-				videomode = f.read()[:-1].replace('\n','')
-				f.close()
+				gamma = ("SDR", "HDR", "HDR10", "HLG", "")[self.info.getInfo(iServiceInformation.sGamma)]
+				if gamma:
+					resolution += " - " + gamma
+			self.service = self.session.nav.getCurrentService()
+			if "%3a//" in refstr and reftype not in (1,257,4098,4114):
+			#IPTV 4097 5001, no PIDs shown
+				fillList = [(_("Service name"), name, TYPE_TEXT),
+					(_("Videocodec, size & format"), resolution, TYPE_TEXT),
+					(_("Service reference"), ":".join(refstr.split(":")[:9]), TYPE_TEXT),
+					(_("URL"), refstr.split(":")[10].replace("%3a", ":"), TYPE_TEXT)]
+				subList = self.getSubtitleList()
+			else:
+				if ":/" in refstr:
+				# mp4 videos, dvb-s-t recording
+					fillList = [(_("Service name"), name, TYPE_TEXT),
+						(_("Videocodec, size & format"), resolution, TYPE_TEXT),
+						(_("Service reference"), ":".join(refstr.split(":")[:9]), TYPE_TEXT),
+						(_("Filename"), refstr.split(":")[10], TYPE_TEXT)]
+				else:
+				# fallback, movistartv, live dvb-s-t
+					fillList = [(_("Service name"), name, TYPE_TEXT),
+						(_("Provider"), self.getServiceInfoValue(iServiceInformation.sProvider), TYPE_TEXT),
+						(_("Videocodec, size & format"), resolution, TYPE_TEXT)]
+					if "%3a//" in refstr:
+					#fallback, movistartv
+						fillList = fillList + [(_("Service reference"), ":".join(refstr.split(":")[:9]), TYPE_TEXT),
+							(_("URL"), refstr.split(":")[10].replace("%3a", ":"), TYPE_TEXT)]
+					else:
+					#live dvb-s-t
+						fillList = fillList + [(_("Service reference"), refstr, TYPE_TEXT)]
+				self.audio = self.service and self.service.audioTracks()
+				self.numberofTracks = self.audio and self.audio.getNumberOfTracks()
+				self.subList = self.getSubtitleList()
+				self.togglePIDButton()
+				trackList = self.getTrackList()
+				fillList = fillList + ([(_("Namespace & Orbital pos."), self.namespace(self.getServiceInfoValue(iServiceInformation.sNamespace)), TYPE_TEXT),
+					(_("TSID"), self.getServiceInfoValue(iServiceInformation.sTSID), TYPE_VALUE_HEX_DEC, 4),
+					(_("ONID"), self.getServiceInfoValue(iServiceInformation.sONID), TYPE_VALUE_HEX_DEC, 4),
+					(_("Service ID"), self.getServiceInfoValue(iServiceInformation.sSID), TYPE_VALUE_HEX_DEC, 4),
+					(_("Video PID"), self.getServiceInfoValue(iServiceInformation.sVideoPID), TYPE_VALUE_HEX_DEC, 4)]
+					+ trackList + [(_("PCR PID"), self.getServiceInfoValue(iServiceInformation.sPCRPID), TYPE_VALUE_HEX_DEC, 4),
+					(_("PMT PID"), self.getServiceInfoValue(iServiceInformation.sPMTPID), TYPE_VALUE_HEX_DEC, 4),
+					(_("TXT PID"), self.getServiceInfoValue(iServiceInformation.sTXTPID), TYPE_VALUE_HEX_DEC, 4)])
+				if self.showAll == True:
+					fillList = fillList + self.subList
 
-			Labels = ( (_("Name"), name, TYPE_TEXT),
-					(_("Provider"), self.getServiceInfoValue(iServiceInformation.sProvider), TYPE_TEXT),
-					(_("Videoformat"), aspect, TYPE_TEXT),
-					(_("Videomode"), videomode, TYPE_TEXT),
-					(_("Videosize"), resolution, TYPE_TEXT),
-					(_("Videocodec"), videocodec, TYPE_TEXT),
-					(_("Namespace"), self.getServiceInfoValue(iServiceInformation.sNamespace), TYPE_VALUE_HEX, 8),
-					(_("Service reference"), ":".join(refstr.split(":")[:10]), TYPE_TEXT),
-					(_("URL"), refstr.split(":")[10].replace("%3a", ":"), TYPE_TEXT))
+			self.fillList(fillList)
+		elif self.transponder_info:
+			self.fillList(self.getFEData(self.transponder_info))
 
-			self.fillList(Labels)
+	def namespace(self, nmspc):
+		if isinstance(nmspc, str):
+			return "N/A - N/A"
+		namespace = "%08X" % (to_unsigned(nmspc))
+		if namespace[:4] == "EEEE":
+			return "%s - DVB-T" % (namespace)
+		elif namespace[:4] == "FFFF":
+			return "%s - DVB-C" % (namespace)
 		else:
-			if self.transponder_info:
-				tp_info = ConvertToHumanReadable(self.transponder_info)
-				conv = { "tuner_type" 				: _("Transponder type"),
-						 "system"					: _("System"),
-						 "modulation"				: _("Modulation"),
-						 "orbital_position"			: _("Orbital position"),
-						 "frequency"				: _("Frequency"),
-						 "symbol_rate"				: _("Symbol rate"),
-						 "bandwidth"				: _("Bandwidth"),
-						 "polarization"				: _("Polarization"),
-						 "inversion"				: _("Inversion"),
-						 "pilot"					: _("Pilot"),
-						 "rolloff"					: _("Roll-off"),
-						 "is_id"					: _("Input Stream ID"),
-						 "pls_mode"					: _("PLS Mode"),
-						 "pls_code"					: _("PLS Code"),
-						 "t2mi_plp_id"				: _("T2MI PLP ID"),
-						 "t2mi_pip"					: _("T2MI PID"),
-						 "fec_inner"				: _("FEC"),
-						 "code_rate_lp"				: _("Coderate LP"),
-						 "code_rate_hp"				: _("Coderate HP"),
-						 "constellation"			: _("Constellation"),
-						 "transmission_mode"		: _("Transmission mode"),
-						 "guard_interval"			: _("Guard interval"),
-						 "hierarchy_information"	: _("Hierarchy information")}
-				Labels = [(conv[i], tp_info[i], i == "orbital_position" and TYPE_VALUE_ORBIT_DEC or TYPE_VALUE_DEC) for i in tp_info.keys() if i in conv]
-				self.fillList(Labels)
+			EW = "E"
+			posi = int(namespace[:4], 16)
+			if posi > 1800:
+				posi = 3600 - posi
+				EW = "W"
+		return "%s - %s" + SIGN + "%s" % (namespace, (float(posi) / 10.0), EW)
 
-	def pids(self):
-		if self.type == TYPE_SERVICE_INFO:
-			Labels = ( (_("Video PID"), self.getServiceInfoValue(iServiceInformation.sVideoPID), TYPE_VALUE_HEX_DEC, 4),
-					   (_("Audio PID"), self.getServiceInfoValue(iServiceInformation.sAudioPID), TYPE_VALUE_HEX_DEC, 4),
-					   (_("PCR PID"), self.getServiceInfoValue(iServiceInformation.sPCRPID), TYPE_VALUE_HEX_DEC, 4),
-					   (_("PMT PID"), self.getServiceInfoValue(iServiceInformation.sPMTPID), TYPE_VALUE_HEX_DEC, 4),
-					   (_("TXT PID"), self.getServiceInfoValue(iServiceInformation.sTXTPID), TYPE_VALUE_HEX_DEC, 4),
-					   (_("TSID"), self.getServiceInfoValue(iServiceInformation.sTSID), TYPE_VALUE_HEX_DEC, 4),
-					   (_("ONID"), self.getServiceInfoValue(iServiceInformation.sONID), TYPE_VALUE_HEX_DEC, 4),
-					   (_("SID"), self.getServiceInfoValue(iServiceInformation.sSID), TYPE_VALUE_HEX_DEC, 4))
-			self.fillList(Labels)
+	def getTrackList(self):
+		trackList = []
+		if self.numberofTracks:
+			currentTrack = self.audio.getCurrentTrack()
+			for i in list(range(0, self.numberofTracks)):
+				audioDesc = self.audio.getTrackInfo(i).getDescription()
+				audioPID = self.audio.getTrackInfo(i).getPID()
+				audioLang = self.audio.getTrackInfo(i).getLanguage()
+				if audioLang == "":
+					audioLang = "Not defined"
+				if self.showAll or currentTrack == i:
+					trackList += [(_("Audio PID%s, codec & lang") % ((" %s") % (i + 1) if self.numberofTracks > 1 and self.showAll else ""), "%04X (%d) - %s - %s" % (to_unsigned(audioPID), audioPID, audioDesc, audioLang), TYPE_TEXT)]
+				if self.getServiceInfoValue(iServiceInformation.sAudioPID) == "N/A":
+					trackList = [(_("Audio PID, codec & lang"), "N/A - %s - %s" % (audioDesc, audioLang), TYPE_TEXT)]
+		else:
+			trackList = [(_("Audio PID"), "N/A", TYPE_TEXT)]
+		return trackList
 
-	def showFrontendData(self, real):
-		if self.type == TYPE_SERVICE_INFO:
-			frontendData = self.feinfo and self.feinfo.getAll(real)
-			Labels = self.getFEData(frontendData)
-			self.fillList(Labels)
+	def togglePIDButton(self):
+		if self.numberofTracks:
+			if (self["key_yellow"].text == _("Service & PIDs") or self["key_yellow"].text == _("Basic PID info")) and (self.numberofTracks > 1 or self.subList):
+				self.showAll = False
+				self["key_yellow"].text = self["yellow"].text = _("Extended PID info")
+				self["Title"].text = _("Service info - service & Basic PID Info")
+			elif (self.numberofTracks < 2) and not self.subList:
+				self.showAll = False
+			else:
+				self.showAll = True
+				self["key_yellow"].text = self["yellow"].text = _("Basic PID info")
+				self["Title"].text = _("Service info - service & Extended PID Info")
+		else:
+			self.showAll = True
+			self["key_yellow"].text = self["yellow"].text = _("Basic PID info")
+			self["Title"].text = _("Service info - service & Extended PID Info")
 
-	def transponder(self):
-		if self.type == TYPE_SERVICE_INFO:
-			self.showFrontendData(True)
+	def getSubtitleList(self):
+		subtitle = self.service and self.service.subtitle()
+		subtitlelist = subtitle and subtitle.getSubtitleList()
+		subList = []
+		if subtitlelist:
+			for x in subtitlelist:
+				subNumber = str(x[1])
+				subPID = x[1]
+				subLang = ""
+				subLang = x[4]
 
-	def tuner(self):
+				if x[0] == 0:  # DVB PID
+					subNumber = "%04X" % (x[1])
+					subList += [(_("DVB Subtitles PID & lang"), "%04X (%d) - %s" % (to_unsigned(subPID), subPID, subLang), TYPE_TEXT)]
+
+				elif x[0] == 1: # Teletext
+					subNumber = "%x%02x" %(x[3] and x[3] or 8, x[2])
+					subList += [(_("TXT Subtitles page & lang"), "%s - %s" % (subNumber, subLang), TYPE_TEXT)]
+
+				elif x[0] == 2: # File
+					types = (_("unknown"), _("Embedded"), _("SSA File"), _("ASS File"),
+							_("SRT File"), _("VOB File"), _("PGS File"))
+					try:
+						description = types[x[2]]
+					except:
+						description = _("unknown") + ": %s" % x[2]
+					subNumber = str(int(subNumber) + 1)
+					subList += [(_("Other Subtitles & lang"), "%s - %s - %s" % (subNumber, description, subLang), TYPE_TEXT)]
+		return subList
+
+	def ShowTransponderInformation(self):
 		if self.type == TYPE_SERVICE_INFO:
-			self.showFrontendData(False)
+			self["key_yellow"].text = self["yellow"].text = _("Service & PIDs")
+			frontendData = self.feinfo and self.feinfo.getAll(True)
+			if frontendData:
+				if self["key_blue"].text == _("Tuner setting values"):
+					self["Title"].text = _("Service info - tuner setting values")
+					self["key_blue"].text = self["blue"].text = _("Tuner live values")
+				else:
+					self["Title"].text = _("Service info - tuner live values")
+					self["key_blue"].text = self["blue"].text = _("Tuner setting values")
+					frontendData = self.feinfo.getAll(False)
+				self.fillList(self.getFEData(frontendData))
+			elif self.transponder_info:
+				self["Title"].text = _("Service info - tuner setting values")
+				self["key_blue"].text = self["blue"].text = _("Tuner setting values")
+				self.fillList(self.getFEData(self.transponder_info))
 
 	def getFEData(self, frontendDataOrg):
 		if frontendDataOrg and len(frontendDataOrg):
 			frontendData = ConvertToHumanReadable(frontendDataOrg)
+			if self.transponder_info:
+				tuner = (_("Type"), frontendData["tuner_type"], TYPE_TEXT)
+			else:
+				tuner = (_("NIM & Type"), chr(ord('A') + frontendData["tuner_number"]) + " - " + frontendData["tuner_type"], TYPE_TEXT)
 			if frontendDataOrg["tuner_type"] == "DVB-S":
+				issy = lambda x: 0 if x == -1 else x
 				t2mi = lambda x: None if x == -1 else str(x)
-				return ((_("NIM"), chr(ord('A') + frontendData["tuner_number"]), TYPE_TEXT),
-						(_("Type"), frontendData["tuner_type"], TYPE_TEXT),
-						(_("System"), frontendData["system"], TYPE_TEXT),
-						(_("Modulation"), frontendData["modulation"], TYPE_TEXT),
-						(_("Orbital position"), frontendData["orbital_position"], TYPE_VALUE_DEC),
-						(_("Frequency"), frontendData["frequency"], TYPE_VALUE_DEC),
-						(_("Symbol rate"), frontendData["symbol_rate"], TYPE_VALUE_DEC),
-						(_("Polarization"), frontendData["polarization"], TYPE_TEXT),
-						(_("Inversion"), frontendData["inversion"], TYPE_TEXT),
-						(_("FEC"), frontendData["fec_inner"], TYPE_TEXT),
-						(_("Pilot"), frontendData.get("pilot", None), TYPE_TEXT),
-						(_("Roll-off"), frontendData.get("rolloff", None), TYPE_TEXT),
-						(_("Input Stream ID"), frontendData.get("is_id", 0), TYPE_VALUE_DEC),
-						(_("PLS Mode"), frontendData.get("pls_mode", None), TYPE_TEXT),
-						(_("PLS Code"), frontendData.get("pls_code", 0), TYPE_VALUE_DEC),
+				return (tuner,
+					(_("System & Modulation"), frontendData["system"] + " " + frontendData["modulation"], TYPE_TEXT),
+					(_("Orbital position"), frontendData["orbital_position"], TYPE_VALUE_DEC),
+					(_("Frequency & Polarization"), "%s MHz" % (frontendData.get("frequency", 0) / 1000) + " - " + frontendData["polarization"], TYPE_TEXT),
+					(_("Symbol rate & FEC"), "%s KSymb/s" % (frontendData.get("symbol_rate", 0) / 1000) + " - " + frontendData["fec_inner"], TYPE_TEXT),
+					(_("Inversion, Pilot & Roll-off"), frontendData["inversion"] + " - " + str(frontendData.get("pilot", None)) + " - " + str(frontendData.get("rolloff", None)), TYPE_TEXT),
+					(_("Input Stream ID"), issy(frontendData.get("is_id", 0)), TYPE_VALUE_DEC),
+					(_("PLS Mode"), frontendData.get("pls_mode", None), TYPE_TEXT),
+					(_("PLS Code"), frontendData.get("pls_code", 0), TYPE_VALUE_DEC),
 					(_("T2MI PLP ID"), t2mi(frontendData.get("t2mi_plp_id", -1)), TYPE_TEXT),
 					(_("T2MI PID"), None if frontendData.get("t2mi_plp_id", -1) == -1 else str(frontendData.get("t2mi_pid", eDVBFrontendParametersSatellite.T2MI_Default_Pid)), TYPE_TEXT))
 			elif frontendDataOrg["tuner_type"] == "DVB-C":
-				return ((_("NIM"), chr(ord('A') + frontendData["tuner_number"]), TYPE_TEXT),
-						(_("Type"), frontendData["tuner_type"], TYPE_TEXT),
-						(_("Modulation"), frontendData["modulation"], TYPE_TEXT),
-						(_("Frequency"), frontendData["frequency"], TYPE_VALUE_DEC),
-						(_("Symbol rate"), frontendData["symbol_rate"], TYPE_VALUE_DEC),
-						(_("Inversion"), frontendData["inversion"], TYPE_TEXT),
-						(_("FEC"), frontendData["fec_inner"], TYPE_TEXT))
+				return (tuner,
+					(_("Modulation"), frontendData["modulation"], TYPE_TEXT),
+					(_("Frequency"), frontendData.get("frequency", 0), TYPE_VALUE_FREQ_FLOAT),
+					(_("Symbol rate & FEC"), "%s KSymb/s" % (frontendData.get("symbol_rate", 0) / 1000) + " - " + frontendData["fec_inner"], TYPE_TEXT),
+					(_("Inversion"), frontendData["inversion"], TYPE_TEXT))
 			elif frontendDataOrg["tuner_type"] == "DVB-T":
-				channel = channelnumbers.getChannelNumber(frontendDataOrg["frequency"], frontendDataOrg["tuner_number"]) if channelnumbers.supportedChannels(frontendDataOrg["tuner_number"]) else None
-				return ((_("NIM"), chr(ord('A') + frontendData["tuner_number"]), TYPE_TEXT),
-						(_("Type"), frontendData["tuner_type"], TYPE_TEXT),
-						(_("Frequency"), frontendData["frequency"], TYPE_VALUE_DEC),
-						(_("Channel"), channel, TYPE_VALUE_DEC),
-						(_("Inversion"), frontendData["inversion"], TYPE_TEXT),
-						(_("Bandwidth"), frontendData["bandwidth"], TYPE_VALUE_DEC),
-						(_("Code rate LP"), frontendData["code_rate_lp"], TYPE_TEXT),
-						(_("Code rate HP"), frontendData["code_rate_hp"], TYPE_TEXT),
-						(_("Constellation"), frontendData["constellation"], TYPE_TEXT),
-						(_("Transmission mode"), frontendData["transmission_mode"], TYPE_TEXT),
-						(_("Guard interval"), frontendData["guard_interval"], TYPE_TEXT),
-						(_("Hierarchy info"), frontendData["hierarchy_information"], TYPE_TEXT))
+				return (tuner,
+					(_("Frequency & Channel"), "%.3f MHz" % ((frontendData.get("frequency", 0) / 1000) / 1000.0) + " - " + frontendData["channel"], TYPE_TEXT),
+					(_("Inversion & Bandwidth"), frontendData["inversion"] + " - " + str(frontendData["bandwidth"]), TYPE_TEXT),
+					(_("Code R. LP-HP & Guard Int."), frontendData["code_rate_lp"] + " - " + frontendData["code_rate_hp"] + " - " + frontendData["guard_interval"], TYPE_TEXT),
+					(_("Constellation & FFT mode"), frontendData["constellation"] + " - " + frontendData["transmission_mode"], TYPE_TEXT),
+					(_("Hierarchy info"), frontendData["hierarchy_information"], TYPE_TEXT))
 			elif frontendDataOrg["tuner_type"] == "ATSC":
-				return ((_("NIM"), chr(ord('A') + frontendData["tuner_number"]), TYPE_TEXT),
-						(_("Type"), frontendData["tuner_type"], TYPE_TEXT),
-						(_("System"), frontendData["system"], TYPE_TEXT),
-						(_("Modulation"), frontendData["modulation"], TYPE_TEXT),
-						(_("Frequency"), frontendData["frequency"], TYPE_VALUE_DEC),
-						(_("Inversion"), frontendData["inversion"], TYPE_TEXT))
-		return [ ]
+				return (tuner,
+					(_("System & Modulation"), frontendData["system"] + " " + frontendData["modulation"], TYPE_TEXT),
+					(_("Frequency"), frontendData.get("frequency", 0) / 1000, TYPE_VALUE_FREQ_FLOAT),
+					(_("Inversion"), frontendData["inversion"], TYPE_TEXT))
+		return []
 
 	def fillList(self, Labels):
-		tlist = [ ]
-
+		tlist = []
 		for item in Labels:
-			if item[1] is None:
-				continue
-			value = item[1]
-			if len(item) < 4:
-				tlist.append(ServiceInfoListEntry(item[0]+":", value, item[2]))
-			else:
-				tlist.append(ServiceInfoListEntry(item[0]+":", value, item[2], item[3]))
-
+			if item[1]:
+				value = item[1]
+				if len(item) < 4:
+					tlist.append(ServiceInfoListEntry(item[0]+":", value, item[2]))
+				else:
+					tlist.append(ServiceInfoListEntry(item[0]+":", value, item[2], item[3]))
 		self["infolist"].l.setList(tlist)
 
 	def getServiceInfoValue(self, what):
-		if self.info is None:
-			return ""
-
-		v = self.info.getInfo(what)
-		if v == -2:
-			v = self.info.getInfoString(what)
-		elif v == -1:
-			v = _("N/A")
+		if self.info:
+			v = self.info.getInfo(what)
+			if v == -2:
+				v = self.info.getInfoString(what)
+			elif v == -1:
+				v = _("N/A")
+			return v
+		return ""
 
-		return v
+	def ShowECMInformation(self):
+		if self.info:
+			from Components.Converter.PliExtraInfo import caid_data
+			self["Title"].text = _("Service info - ECM Info")
+			self["key_yellow"].text = self["yellow"].text = _("Service & PIDs")
+			tlist = []
+			for caid in sorted(set(self.info.getInfoObject(iServiceInformation.sCAIDPIDs)), key=lambda x: (x[0], x[1])):
+				CaIdDescription = _("Undefined")
+				extra_info = ""
+				provid = ""
+				for caid_entry in caid_data:
+					if int(caid_entry[0], 16) <= caid[0] <= int(caid_entry[1], 16):
+						CaIdDescription = caid_entry[2]
+						break
+				if caid[2]:
+					if CaIdDescription == "Seca":
+						provid = ",".join([caid[2][i:i+4] for i in list(range(0, len(caid[2]), 30))])
+					if CaIdDescription == "Nagra":
+						provid = caid[2][-4:]
+					if CaIdDescription == "Via":
+						provid = caid[2][-6:]
+					if provid:
+						extra_info = "provid=%s" % provid
+					else:
+						extra_info = "extra data=%s" % caid[2]
+				from Tools.GetEcmInfo import GetEcmInfo
+				ecmdata = GetEcmInfo().getEcmData()
+				formatstring = "ECMPid %04X (%d) %04X-%s %s"
+				altColor = False
+				if caid[0] == int(ecmdata[1], 16) and (caid[1] == int(ecmdata[3], 16) or str(int(ecmdata[2], 16)) in provid):
+					formatstring = "%s (%s)" % (formatstring, _("active"))
+					altColor = True
+				tlist.append(ServiceInfoListEntry(formatstring % (caid[1], caid[1], caid[0], CaIdDescription, extra_info), altColor=altColor))
+			if not tlist:
+				tlist.append(ServiceInfoListEntry(_("No ECMPids available (FTA Service)")))
+			self["infolist"].l.setList(tlist)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ServiceScan.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ServiceScan.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ServiceScan.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ServiceScan.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,3 +1,5 @@
+from __future__ import print_function
+from __future__ import division
 import Screens.InfoBar
 from enigma import eServiceReference, eTimer
 
@@ -52,8 +54,8 @@
 				from Plugins.SystemPlugins.LCNScanner.plugin import LCNBuildHelper
 				lcn = LCNBuildHelper()
 				lcn.buildAfterScan()
-			except Exception, e:
-				print e
+			except Exception as e:
+				print(e)
 
 			if self.currentInfobar.__class__.__name__ == "InfoBar":
 				selectedService = self["servicelist"].getCurrentSelection()
@@ -111,7 +113,7 @@
 		self["transponder"] = Label()
 
 		self["pass"] = Label("")
-		self["servicelist"] = FIFOList()
+		self["servicelist"] = FIFOList(len=10)
 		self["FrontendInfo"] = FrontendInfo()
 		self["key_red"] = Label(_("Cancel"))
 		self["key_green"] = Label(_("OK"))
@@ -139,7 +141,7 @@
 				self.session.summary.updateService(selectedService[0])
 
 	def doServiceScan(self):
-		self["servicelist"].len = self["servicelist"].instance.size().height() / self["servicelist"].l.getItemSize().height()
+		self["servicelist"].len = self["servicelist"].instance.size().height() // self["servicelist"].l.getItemSize().height()
 		self["scan"] = CScan(self["scan_progress"], self["scan_state"], self["servicelist"], self["pass"], self.scanList, self["network"], self["transponder"], self["FrontendInfo"], self.session.summary)
 		self.scanTimer.start(250)
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ServiceStopScreen.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ServiceStopScreen.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/ServiceStopScreen.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/ServiceStopScreen.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.MessageBox import MessageBox
 
 class ServiceStopScreen:
@@ -5,7 +6,7 @@
 		try:
 			self.session
 		except:
-			print "[ServiceStopScreen] ERROR: no self.session set"
+			print("[ServiceStopScreen] ERROR: no self.session set")
 		self.oldref = None
 		self.onClose.append(self.__onClose)
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Setup.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Setup.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Setup.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Setup.py	2020-06-21 10:20:02.367327052 -0400
@@ -14,15 +14,16 @@
 from boxbranding import getMachineBrand, getMachineName
 
 import xml.etree.cElementTree
+import six
 
 def setupdom(plugin=None):
 	# read the setupmenu
 	if plugin:
 		# first we search in the current path
-		setupfile = file(resolveFilename(SCOPE_CURRENT_PLUGIN, plugin + '/setup.xml'), 'r')
+		setupfile = open(resolveFilename(SCOPE_CURRENT_PLUGIN, plugin + '/setup.xml'), 'r')
 	else:
 		# if not found in the current path, we use the global datadir-path
-		setupfile = file(eEnv.resolve('${datadir}/enigma2/setup.xml'), 'r')
+		setupfile = open(eEnv.resolve('${datadir}/enigma2/setup.xml'), 'r')
 	setupfiledom = xml.etree.cElementTree.parse(setupfile)
 	setupfile.close()
 	return setupfiledom
@@ -46,27 +47,27 @@
 		self["SetupTitle"] = StaticText(_(parent.setup_title))
 		self["SetupEntry"] = StaticText("")
 		self["SetupValue"] = StaticText("")
-		if hasattr(self.parent,"onChangedEntry"):
+		if hasattr(self.parent, "onChangedEntry"):
 			self.onShow.append(self.addWatcher)
 			self.onHide.append(self.removeWatcher)
 
 	def addWatcher(self):
-		if hasattr(self.parent,"onChangedEntry"):
+		if hasattr(self.parent, "onChangedEntry"):
 			self.parent.onChangedEntry.append(self.selectionChanged)
 			self.parent["config"].onSelectionChanged.append(self.selectionChanged)
 			self.selectionChanged()
 
 	def removeWatcher(self):
-		if hasattr(self.parent,"onChangedEntry"):
+		if hasattr(self.parent, "onChangedEntry"):
 			self.parent.onChangedEntry.remove(self.selectionChanged)
 			self.parent["config"].onSelectionChanged.remove(self.selectionChanged)
 
 	def selectionChanged(self):
 		self["SetupEntry"].text = self.parent.getCurrentEntry()
 		self["SetupValue"].text = self.parent.getCurrentValue()
-		if hasattr(self.parent,"getCurrentDescription") and self.parent.has_key("description"):
+		if hasattr(self.parent, "getCurrentDescription") and "description" in self.parent:
 			self.parent["description"].text = self.parent.getCurrentDescription()
-		if self.parent.has_key('footnote'):
+		if 'footnote' in self.parent:
 			if self.parent.getCurrentEntry().endswith('*'):
 				self.parent['footnote'].text = (_("* = Restart Required"))
 			else:
@@ -80,17 +81,17 @@
 		self.onNotifiers.remove(self.levelChanged)
 
 	def levelChanged(self, configElement):
-		list = []
-		self.refill(list)
-		self["config"].setList(list)
+		listItems = []
+		self.refill(listItems)
+		self["config"].setList(listItems)
 
-	def refill(self, list):
+	def refill(self, listItems):
 		xmldata = setupdom(self.plugin).getroot()
 		for x in xmldata.findall("setup"):
 			if x.get("key") != self.setup:
 				continue
-			self.addItems(list, x)
-			self.setup_title = x.get("title", "").encode("UTF-8")
+			self.addItems(listItems, x)
+			self.setup_title = six.ensure_str(x.get("title", ""))
 			self.seperation = int(x.get('separation', '0'))
 
 	def __init__(self, session, setup, plugin=None, PluginLanguageDomain=None):
@@ -108,13 +109,13 @@
 		self.setup = setup
 		self.plugin = plugin
 		self.PluginLanguageDomain = PluginLanguageDomain
-		list = []
+		listItems = []
 		self.onNotifiers = [ ]
-		self.refill(list)
-		ConfigListScreen.__init__(self, list, session = session, on_change = self.changedEntry)
+		self.refill(listItems)
+		ConfigListScreen.__init__(self, listItems, session = session, on_change = self.changedEntry)
 		self.createSetup()
 
-		#check for list.entries > 0 else self.close
+		#check for listItems.entries > 0 else self.close
 		self["key_red"] = StaticText(_("Cancel"))
 		self["key_green"] = StaticText(_("OK"))
 		self["description"] = Label("")
@@ -123,6 +124,7 @@
 			{
 				"cancel": self.keyCancel,
 				"save": self.keySave,
+				"ok": self.keySave,
 				"menu": self.closeRecursive,
 			}, -2)
 
@@ -139,16 +141,16 @@
 		self.onClose.append(self.HideHelp)
 
 	def createSetup(self):
-		list = []
-		self.refill(list)
-		self["config"].setList(list)
+		listItems = []
+		self.refill(listItems)
+		self["config"].setList(listItems)
 		if config.usage.sort_settings.value:
 			self["config"].list.sort()
 		self.moveToItem(self.item)
 
 	def getIndexFromItem(self, item):
-		if item is not None:
-			for x in range(len(self["config"].list)):
+		if item != None:
+			for x in list(range(len(self["config"].list))):
 				if self["config"].list[x][0] == item[0]:
 					return x
 		return None
@@ -164,24 +166,24 @@
 		if self["config"].getCurrent() is not None:
 			try:
 				if isinstance(self["config"].getCurrent()[1], ConfigText) or isinstance(self["config"].getCurrent()[1], ConfigPassword):
-					if self.has_key("VKeyIcon"):
+					if "VKeyIcon" in self:
 						self["VirtualKB"].setEnabled(True)
 						self["VKeyIcon"].boolean = True
-					if self.has_key("HelpWindow"):
+					if "HelpWindow" in self:
 						if self["config"].getCurrent()[1].help_window.instance is not None:
 							helpwindowpos = self["HelpWindow"].getPosition()
 							from enigma import ePoint
-							self["config"].getCurrent()[1].help_window.instance.move(ePoint(helpwindowpos[0],helpwindowpos[1]))
+							self["config"].getCurrent()[1].help_window.instance.move(ePoint(helpwindowpos[0], helpwindowpos[1]))
 				else:
-					if self.has_key("VKeyIcon"):
+					if "VKeyIcon" in self:
 						self["VirtualKB"].setEnabled(False)
 						self["VKeyIcon"].boolean = False
 			except:
-				if self.has_key("VKeyIcon"):
+				if "VKeyIcon" in self:
 					self["VirtualKB"].setEnabled(False)
 					self["VKeyIcon"].boolean = False
 		else:
-			if self.has_key("VKeyIcon"):
+			if "VKeyIcon" in self:
 				self["VirtualKB"].setEnabled(False)
 				self["VKeyIcon"].boolean = False
 
@@ -220,7 +222,7 @@
 		except:
 			pass
 
-	def addItems(self, list, parentNode):
+	def addItems(self, listItems, parentNode):
 		for x in parentNode:
 			if not x.tag:
 				continue
@@ -251,7 +253,10 @@
 				value = x.get("value")
 				if requires and requires.startswith('config.'):
 					item = eval(requires or "")
-					if value and str(item.value) == value or not value and item.value and not item.value == "0":
+					iv = item.value
+					if iv and not isinstance(iv, bool):
+						iv = six.ensure_str(iv)
+					if value and iv == value or not value and iv and not iv == "0":
 						SystemInfo[requires] = True
 					else:
 						SystemInfo[requires] = False
@@ -260,14 +265,14 @@
 					continue
 
 				if self.PluginLanguageDomain:
-					item_text = dgettext(self.PluginLanguageDomain, x.get("text", "??").encode("UTF-8"))
-					item_description = dgettext(self.PluginLanguageDomain, x.get("description", " ").encode("UTF-8"))
+					item_text = dgettext(self.PluginLanguageDomain, six.ensure_str(x.get("text", "??")))
+					item_description = dgettext(self.PluginLanguageDomain, six.ensure_str(x.get("description", " ")))
 				else:
-					item_text = _(x.get("text", "??").encode("UTF-8"))
-					item_description = _(x.get("description", " ").encode("UTF-8"))
+					item_text = _(six.ensure_str(x.get("text", "??")))
+					item_description = _(six.ensure_str(x.get("description", " ")))
 
-				item_text = item_text.replace("%s %s","%s %s" % (getMachineBrand(), getMachineName()))
-				item_description = item_description.replace("%s %s","%s %s" % (getMachineBrand(), getMachineName()))
+				item_text = item_text.replace("%s %s", "%s %s" % (getMachineBrand(), getMachineName()))
+				item_description = item_description.replace("%s %s", "%s %s" % (getMachineBrand(), getMachineName()))
 				b = eval(x.text or "")
 				if b == "":
 					continue
@@ -276,20 +281,20 @@
 				# the first b is the item itself, ignored by the configList.
 				# the second one is converted to string.
 				if not isinstance(item, ConfigNothing):
-					list.append((item_text, item, item_description))
+					listItems.append((item_text, item, item_description))
 
-def getSetupTitle(id):
+def getSetupTitle(setupId):
 	xmldata = setupdom().getroot()
 	for x in xmldata.findall("setup"):
-		if x.get("key") == id:
-			if _(x.get("title", "").encode("UTF-8")) == _("OSD Settings") or _(x.get("title", "").encode("UTF-8")) == _("Softcam Setup") or _(x.get("title", "").encode("UTF-8")) == _("EPG settings"):
+		if x.get("key") == setupId:
+			if _(six.ensure_str(x.get("title", ""))) == _("OSD Settings") or _(six.ensure_str(x.get("title", ""))) == _("Softcam Setup") or _(six.ensure_str(x.get("title", ""))) == _("EPG settings"):
 				return _("Settings...")
-			return x.get("title", "").encode("UTF-8")
-	raise SetupError("unknown setup id '%s'!" % repr(id))
+			return six.ensure_str(x.get("title", ""))
+	raise SetupError("unknown setup id '%s'!" % repr(setupId))
 
-def getSetupTitleLevel(id):
+def getSetupTitleLevel(setupId):
 	xmldata = setupdom().getroot()
 	for x in xmldata.findall("setup"):
-		if x.get("key") == id:
+		if x.get("key") == setupId:
 			return int(x.get("level", 0))
 	return 0
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/SkinSelector.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/SkinSelector.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/SkinSelector.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/SkinSelector.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
 from Screens.Screen import Screen
 from Screens.Standby import TryQuitMainloop
 from Screens.MessageBox import MessageBox
@@ -95,8 +96,8 @@
 			self.skinfile = self["SkinList"].getCurrent()
 			self.skinfile = os.path.join(self.skinfile, self.SKINXML)
 
-		print "Skinselector: Selected Skin: "+self.root+self.skinfile
-		restartbox = self.session.openWithCallback(self.restartGUI,MessageBox,_("GUI needs a restart to apply a new skin\nDo you want to restart the GUI now?"), MessageBox.TYPE_YESNO)
+		print("Skinselector: Selected Skin: "+self.root+self.skinfile)
+		restartbox = self.session.openWithCallback(self.restartGUI, MessageBox, _("GUI needs a restart to apply a new skin\nDo you want to restart the GUI now?"), MessageBox.TYPE_YESNO)
 		restartbox.setTitle(_("Restart GUI now?"))
 
 	def up(self):
@@ -116,7 +117,7 @@
 		self.loadPreview()
 
 	def info(self):
-		aboutbox = self.session.open(MessageBox,_("Enigma2 skin selector"), MessageBox.TYPE_INFO)
+		aboutbox = self.session.open(MessageBox, _("Enigma2 skin selector"), MessageBox.TYPE_INFO)
 		aboutbox.setTitle(_("About..."))
 
 	def loadPreview(self):
@@ -174,7 +175,7 @@
 	USERSKIN = None
 
 	skinlist = []
-	root = os.path.join(eEnv.resolve("${datadir}"),"enigma2")
+	root = os.path.join(eEnv.resolve("${datadir}"), "enigma2")
 
 	def __init__(self, session, args = None):
 		Screen.__init__(self, session)
@@ -194,7 +195,7 @@
 	USERSKIN = _("< User Skin >")
 
 	skinlist = []
-	root = os.path.join(eEnv.resolve("${datadir}"),"enigma2/display/")
+	root = os.path.join(eEnv.resolve("${datadir}"), "enigma2/display/")
 
 	def __init__(self, session, args = None):
 		Screen.__init__(self, session)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/SoftcamSetup.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/SoftcamSetup.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/SoftcamSetup.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/SoftcamSetup.py	2020-06-21 10:20:02.367327052 -0400
@@ -37,7 +37,7 @@
 				"green": self.save,
 				"red": self.cancel,
 				"blue": self.ppanelShortcut,
-			},-1)
+			}, -1)
 
 		self.list = [ ]
 		ConfigListScreen.__init__(self, self.list, session = session, on_change = self.changedEntry)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/SoftwareUpdate.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/SoftwareUpdate.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/SoftwareUpdate.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/SoftwareUpdate.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,9 +1,10 @@
 from boxbranding import getImageVersion, getImageBuild, getImageDistro, getMachineBrand, getMachineName, getMachineBuild
 from os import rename, path, remove
 from gettext import dgettext
-import urllib
 
 from enigma import eTimer, eDVBDB
+from six.moves import urllib
+import six
 
 import Components.Task
 from Screens.ChoiceBox import ChoiceBox
@@ -48,7 +49,7 @@
 			"right": self.pageDown,
 			"down": self.pageDown,
 			"up": self.pageUp
-		},-1)
+		}, -1)
 		self.onLayoutFinish.append(self.getlog)
 
 	def changelogtype(self):
@@ -72,8 +73,8 @@
 		global ocram
 		try:
 			sourcefile = 'http://www.openvix.co.uk/feeds/%s/%s/%s-git.log' % (getImageDistro(), getImageVersion(), self.logtype)
-			sourcefile,headers = urllib.urlretrieve(sourcefile)
-			rename(sourcefile,'/tmp/' + self.logtype + '-git.log')
+			sourcefile, headers = urllib.urlretrieve(sourcefile)
+			rename(sourcefile, '/tmp/' + self.logtype + '-git.log')
 			fd = open('/tmp/' + self.logtype + '-git.log', 'r')
 			releasenotes = fd.read()
 			fd.close()
@@ -81,7 +82,7 @@
 			releasenotes = '404 Not Found'
 		if '404 Not Found' not in releasenotes:
 			releasenotes = releasenotes.replace('[openvix] Zeus Release.', 'openvix: build 000')
-			releasenotes = releasenotes.replace('\nopenvix: build',"\n\nopenvix: build")
+			releasenotes = releasenotes.replace('\nopenvix: build', "\n\nopenvix: build")
 			releasenotes = releasenotes.split('\n\n')
 			ver = -1
 			releasever = ""
@@ -91,9 +92,9 @@
 				releasever = releasenotes[int(ver)].split('\n')
 				releasever = releasever[0].split(' ')
 				if len(releasever) > 2:
-					releasever = releasever[2].replace(':',"")
+					releasever = releasever[2].replace(':', "")
 				else:
-					releasever = releasever[0].replace(':',"")
+					releasever = releasever[0].replace(':', "")
 			if self.logtype == 'oe':
 				if int(getImageBuild()) == 1:
 					imagever = int(getImageBuild())-1
@@ -110,7 +111,7 @@
 				ver += 1
 				releasever = releasenotes[int(ver)].split('\n')
 				releasever = releasever[0].split(' ')
-				releasever = releasever[2].replace(':',"")
+				releasever = releasever[2].replace(':', "")
 			if not viewrelease and ocram:
 				viewrelease = ocram
 				ocram = ""
@@ -173,7 +174,7 @@
 		self.checkNetworkState()
 
 	def feedsStatus(self):
-		from urllib import urlopen
+		from six.moves.urllib.request import urlopen
 		import socket
 		self['tl_red'].hide()
 		self['tl_yellow'].hide()
@@ -205,7 +206,8 @@
 		self.CheckConsole = Console()
 		self.CheckConsole.ePopen(cmd1, self.checkNetworkStateFinished)
 
-	def checkNetworkStateFinished(self, result, retval,extra_args=None):
+	def checkNetworkStateFinished(self, result, retval, extra_args=None):
+		result = six.ensure_str(result)
 		if 'bad address' in result:
 			self.session.openWithCallback(self.close, MessageBox, _("Your %s %s is not connected to the internet, please check your network settings and try again.") % (getMachineBrand(), getMachineName()), type=MessageBox.TYPE_INFO, timeout=10, close_on_any_key=True)
 		elif ('wget returned 1' or 'wget returned 255' or '404 Not Found') in result:
@@ -248,7 +250,7 @@
 		if event == IpkgComponent.EVENT_DOWNLOAD:
 			self.status.setText(_("Downloading"))
 		elif event == IpkgComponent.EVENT_UPGRADE:
-			if self.sliderPackages.has_key(param):
+			if param in self.sliderPackages:
 				self.slider.setValue(self.sliderPackages[param])
 			self.package.setText(param)
 			self.status.setText(_("Upgrading") + ": %s/%s" % (self.packages, self.total_packages))
@@ -287,7 +289,7 @@
 				self.updating = False
 				self.ipkg.startCmd(IpkgComponent.CMD_UPGRADE_LIST)
 			elif self.ipkg.currentCommand == IpkgComponent.CMD_UPGRADE_LIST:
-				from urllib import urlopen
+				from six.moves.urllib.request import urlopen
 				import socket
 				currentTimeoutDefault = socket.getdefaulttimeout()
 				socket.setdefaulttimeout(3)
@@ -386,7 +388,7 @@
 			upgrademessage = self.session.openWithCallback(self.startActualUpgrade, ChoiceBox, title=message, list=choices, skin_name = "SoftwareUpdateChoices", var=self.trafficLight)
 			upgrademessage.setTitle(_('Software update'))
 		elif answer[1] == "changes":
-			self.session.openWithCallback(self.startActualUpgrade,SoftwareUpdateChanges)
+			self.session.openWithCallback(self.startActualUpgrade, SoftwareUpdateChanges)
 		elif answer[1] == "backup":
 			self.doSettingsBackup()
 		elif answer[1] == "imagebackup":
@@ -399,7 +401,7 @@
 			if (config.softwareupdate.autosettingsbackup.value and config.backupmanager.backuplocation.value) or (config.softwareupdate.autoimagebackup.value and config.imagemanager.backuplocation.value):
 				self.doAutoBackup()
 			else:
-				self.session.open(TryQuitMainloop,retvalue=42)
+				self.session.open(TryQuitMainloop, retvalue=42)
 				self.close()
 
 	def modificationCallback(self, res):
@@ -434,7 +436,7 @@
 		elif config.softwareupdate.autoimagebackup.value and config.imagemanager.backuplocation.value and not self.ImageBackupDone:
 			self.doImageBackup()
 		else:
-			self.session.open(TryQuitMainloop,retvalue=42)
+			self.session.open(TryQuitMainloop, retvalue=42)
 			self.close()
 
 	def showJobView(self, job):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Standby.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Standby.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Standby.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Standby.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import os
 from Screens.Screen import Screen
 from Components.ActionMap import ActionMap
@@ -9,7 +10,7 @@
 from GlobalActions import globalActionMap
 from enigma import eDVBVolumecontrol, eTimer, eDVBLocalTimeHandler, eServiceReference
 from boxbranding import getMachineBrand, getMachineName, getBoxType, getBrandOEM, getMachineBuild
-from Tools import Notifications
+import Tools.Notifications
 from time import localtime, time
 import Screens.InfoBar
 from gettext import dgettext
@@ -34,7 +35,7 @@
 	def __init__(self):
 		global TVinStandby
 		if TVinStandby is not None:
-			print "[Standby] only one TVstate instance is allowed!"
+			print("[Standby] only one TVstate instance is allowed!")
 		TVinStandby = self
 
 		try:
@@ -45,7 +46,7 @@
 			self.hdmicec_ok = False
 
 		if not self.hdmicec_ok:
-			print '[Standby] HDMI-CEC is not enabled or unavailable !!!'
+			print('[Standby] HDMI-CEC is not enabled or unavailable !!!')
 
 	def skipHdmiCecNow(self, value):
 		if self.hdmicec_ok:
@@ -101,13 +102,13 @@
 
 class Standby2(Screen):
 	def Power(self):
-		print "[Standby] leave standby"
+		print("[Standby] leave standby")
 		SystemInfo["StandbyState"] = False
 
 		if os.path.exists("/usr/script/StandbyLeave.sh"):
 			Console().ePopen("/usr/script/StandbyLeave.sh &")
 
-		if (getBrandOEM() in ('fulan','clap','dinobot') or getMachineBuild() in ('gbmv200','sf8008','sf8008m','ustym4kpro','beyonwizv2','viper4k')):
+		if (getBrandOEM() in ('fulan', 'clap', 'dinobot') or getMachineBuild() in ('gbmv200', 'sf8008', 'sf8008m', 'ustym4kpro', 'beyonwizv2', 'viper4k')):
 			try:
 				open("/proc/stb/hdmi/output", "w").write("on")
 			except:
@@ -133,25 +134,25 @@
 	def Power_long(self):
 		if (config.usage.on_short_powerpress.value == "standby_noTVshutdown"):
 			self.TVoff()
-			self.ignoreKeyBreakTimer.start(250,1)
+			self.ignoreKeyBreakTimer.start(250, 1)
 
 	def Power_repeat(self):
 		if (config.usage.on_short_powerpress.value == "standby_noTVshutdown") and self.ignoreKeyBreakTimer.isActive():
-			self.ignoreKeyBreakTimer.start(250,1)
+			self.ignoreKeyBreakTimer.start(250, 1)
 
 	def Power_break(self):
 		if (config.usage.on_short_powerpress.value == "standby_noTVshutdown") and not self.ignoreKeyBreakTimer.isActive():
 			self.Power()
 
 	def TVoff(self):
-		print "[Standby] TVoff"
+		print("[Standby] TVoff")
 		TVinStandby.skipHdmiCecNow(False)
 		TVinStandby.setTVstate('standby')
 
 	def setMute(self):
 		if eDVBVolumecontrol.getInstance().isMuted():
 			self.wasMuted = 1
-			print "[Standby] mute already active"
+			print("[Standby] mute already active")
 		else:
 			self.wasMuted = 0
 			eDVBVolumecontrol.getInstance().volumeToggleMute()
@@ -165,7 +166,7 @@
 		self.skinName = "Standby"
 		self.avswitch = AVSwitch()
 
-		print "[Standby] enter standby"
+		print("[Standby] enter standby")
 		SystemInfo["StandbyState"] = True
 
 		if os.path.exists("/usr/script/StandbyEnter.sh"):
@@ -224,7 +225,7 @@
 			self.avswitch.setInput("SCART")
 		else:
 			self.avswitch.setInput("AUX")
-		if (getBrandOEM() in ('fulan','clap','dinobot') or getMachineBuild() in ('gbmv200','sf8008','sf8008m','ustym4kpro','beyonwizv2','viper4k')):
+		if (getBrandOEM() in ('fulan', 'clap', 'dinobot') or getMachineBuild() in ('gbmv200', 'sf8008', 'sf8008m', 'ustym4kpro', 'beyonwizv2', 'viper4k')):
 			try:
 				open("/proc/stb/hdmi/output", "w").write("off")
 			except:
@@ -289,7 +290,7 @@
 			self.onClose.append(self.doStandby)
 
 	def doStandby(self):
-		Notifications.AddNotification(Screens.Standby.Standby2)
+		Tools.Notifications.AddNotification(Screens.Standby.Standby2)
 
 class StandbySummary(Screen):
 	skin = """
@@ -337,7 +338,7 @@
 	def __init__(self, session, retvalue=QUIT_SHUTDOWN, timeout=-1, default_yes = True):
 		self.retval = retvalue
 		self.ptsmainloopvalue = retvalue
-		recordings = session.nav.getRecordings(False,Components.RecordingConfig.recType(config.recording.warn_box_restart_rec_types.getValue()))
+		recordings = session.nav.getRecordings(False, Components.RecordingConfig.recType(config.recording.warn_box_restart_rec_types.getValue()))
 		jobs = len(job_manager.getPendingJobs())
 		inTimeshift = Screens.InfoBar.InfoBar and Screens.InfoBar.InfoBar.instance and Screens.InfoBar.InfoBar.ptsGetTimeshiftStatus(Screens.InfoBar.InfoBar.instance)
 		self.connected = False
@@ -396,7 +397,7 @@
 			return
 		else:
 			if event == iRecordableService.evEnd:
-				recordings = self.session.nav.getRecordings(False,Components.RecordingConfig.recType(config.recording.warn_box_restart_rec_types.getValue()))
+				recordings = self.session.nav.getRecordings(False, Components.RecordingConfig.recType(config.recording.warn_box_restart_rec_types.getValue()))
 				if not recordings: # no more recordings exist
 					rec_time = self.session.nav.RecordTimer.getNextRecordingTime()
 					if rec_time > 0 and (rec_time - time()) < 360:
@@ -417,13 +418,13 @@
 			if self.retval == QUIT_SHUTDOWN:
 				config.misc.DeepStandby.value = True
 			self.session.nav.stopService()
-			self.quitScreen = self.session.instantiateDialog(QuitMainloopScreen,retvalue=self.retval)
+			self.quitScreen = self.session.instantiateDialog(QuitMainloopScreen, retvalue=self.retval)
 			self.quitScreen.show()
-			print "[Standby] quitMainloop #1"
+			print("[Standby] quitMainloop #1")
 			quitMainloopCode = self.retval
 			if SystemInfo["Display"] and SystemInfo["LCDMiniTV"]:
 				# set LCDminiTV off / fix a deep-standby-crash on some boxes / gb4k 
-				print "[Standby] LCDminiTV off"
+				print("[Standby] LCDminiTV off")
 				setLCDModeMinitTV("0")
 			if getBoxType() == "vusolo4k":  #workaround for white display flash
 				open("/proc/stb/fp/oled_brightness", "w").write("0")
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/StartWizard.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/StartWizard.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/StartWizard.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/StartWizard.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,4 +1,5 @@
-from Wizard import wizardManager
+from __future__ import absolute_import
+from Screens.Wizard import wizardManager
 from Screens.WizardLanguage import WizardLanguage
 from Screens.VideoWizard import VideoWizard
 from Screens.Rc import Rc
@@ -9,7 +10,7 @@
 from Components.Pixmap import Pixmap
 from Components.config import config, ConfigBoolean, configfile
 
-from LanguageSelection import LanguageWizard
+from Screens.LanguageSelection import LanguageWizard
 
 config.misc.firstrun = ConfigBoolean(default = True)
 config.misc.languageselected = ConfigBoolean(default = True)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/StreamingClientsInfo.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/StreamingClientsInfo.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/StreamingClientsInfo.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/StreamingClientsInfo.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,4 +1,5 @@
-from Screen import Screen
+from __future__ import absolute_import
+from Screens.Screen import Screen
 from Components.ActionMap import ActionMap
 from Components.Button import Button
 from Components.ScrollLabel import ScrollLabel
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/SubservicesQuickzap.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/SubservicesQuickzap.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/SubservicesQuickzap.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/SubservicesQuickzap.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,9 +1,10 @@
+from __future__ import absolute_import
 from Screens.Screen import Screen
 from Components.ActionMap import NumberActionMap
 from Components.Label import Label
 from Screens.ChoiceBox import ChoiceBox
 from Screens.MessageBox import MessageBox
-from InfoBarGenerics import InfoBarShowHide, InfoBarMenu, InfoBarInstantRecord, InfoBarTimeshift, InfoBarSeek, InfoBarTimeshiftState, InfoBarExtensions, InfoBarSubtitleSupport, InfoBarAudioSelection
+from Screens.InfoBarGenerics import InfoBarShowHide, InfoBarMenu, InfoBarInstantRecord, InfoBarTimeshift, InfoBarSeek, InfoBarTimeshiftState, InfoBarExtensions, InfoBarSubtitleSupport, InfoBarAudioSelection
 from enigma import eServiceReference
 from Components.ServiceEventTracker import InfoBarBase
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/TaskList.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/TaskList.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/TaskList.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/TaskList.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 # taken from mytube plugin
 
+from __future__ import print_function
 from enigma import eTimer
 from Screens.Screen import Screen
 from Components.ActionMap import ActionMap
@@ -73,7 +74,7 @@
 					job.tasks[job.current_task].setProgress(51)
 				else:
 					job.tasks[job.current_task].setProgress(progress + 1)
-			self.tasklist.append((job,job.name,job.getStatustext(),progress,str(progress) + " %" ))
+			self.tasklist.append((job, job.name, job.getStatustext(), progress, str(progress) + " %" ))
 		self['tasklist'].setList(self.tasklist)
 		self['tasklist'].updateList(self.tasklist)
 		self['tasklist'].setIndex(idx)
@@ -84,14 +85,14 @@
 
 	def keyOK(self):
 		current = self["tasklist"].getCurrent()
-		print current
+		print(current)
 		if current:
 			job = current[0]
 			from Screens.TaskView import JobView
 			self.session.openWithCallback(self.JobViewCB, JobView, job)
 
 	def JobViewCB(self, why):
-		print "WHY---",why
+		print("WHY---", why)
 
 	def keyCancel(self):
 		self.close()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/TaskView.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/TaskView.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/TaskView.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/TaskView.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,11 +1,12 @@
+from __future__ import absolute_import
 from Screens.Screen import Screen
 from Components.ConfigList import ConfigListScreen
 from Components.config import ConfigSubsection, ConfigSelection, getConfigListEntry
 from Components.SystemInfo import SystemInfo
 from Components.Task import job_manager
-from InfoBarGenerics import InfoBarNotifications
+from Screens.InfoBarGenerics import InfoBarNotifications
 import Screens.Standby
-from Tools import Notifications
+import Tools.Notifications
 from boxbranding import getMachineBrand, getMachineName
 
 class JobView(InfoBarNotifications, Screen, ConfigListScreen):
@@ -134,21 +135,21 @@
 		from Screens.MessageBox import MessageBox
 		if self.settings.afterEvent.value == "deepstandby":
 			if not Screens.Standby.inTryQuitMainloop:
-				Notifications.AddNotificationWithCallback(self.sendTryQuitMainloopNotification, MessageBox, _("A sleep timer wants to shut down\nyour %s %s. Shutdown now?") % (getMachineBrand(), getMachineName()), timeout = 20)
+				Tools.Notifications.AddNotificationWithCallback(self.sendTryQuitMainloopNotification, MessageBox, _("A sleep timer wants to shut down\nyour %s %s. Shutdown now?") % (getMachineBrand(), getMachineName()), timeout = 20)
 		elif self.settings.afterEvent.value == "standby":
 			if not Screens.Standby.inStandby:
-				Notifications.AddNotificationWithCallback(self.sendStandbyNotification, MessageBox, _("A sleep timer wants to set your\n%s %s to standby. Do that now?") % (getMachineBrand(), getMachineName()), timeout = 20)
+				Tools.Notifications.AddNotificationWithCallback(self.sendStandbyNotification, MessageBox, _("A sleep timer wants to set your\n%s %s to standby. Do that now?") % (getMachineBrand(), getMachineName()), timeout = 20)
 
 	def checkNotifications(self):
 		InfoBarNotifications.checkNotifications(self)
-		if not Notifications.notifications:
+		if not Tools.Notifications.notifications:
 			if self.settings.afterEvent.value == "close" and self.job.status == self.job.FAILED:
 				self.close(False)
 
 	def sendStandbyNotification(self, answer):
 		if answer:
-			Notifications.AddNotification(Screens.Standby.Standby)
+			Tools.Notifications.AddNotification(Screens.Standby.Standby)
 
 	def sendTryQuitMainloopNotification(self, answer):
 		if answer:
-			Notifications.AddNotification(Screens.Standby.TryQuitMainloop, 1)
+			Tools.Notifications.AddNotification(Screens.Standby.TryQuitMainloop, 1)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/TimeDateInput.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/TimeDateInput.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/TimeDateInput.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/TimeDateInput.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,4 +1,5 @@
-from Screen import Screen
+from __future__ import absolute_import
+from Screens.Screen import Screen
 from Components.config import config, ConfigClock, ConfigDateTime, getConfigListEntry
 from Components.ActionMap import NumberActionMap
 from Components.ConfigList import ConfigListScreen
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/TimerEdit.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/TimerEdit.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/TimerEdit.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/TimerEdit.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Components.ActionMap import ActionMap
 from Components.Button import Button
 from Components.Label import Label
@@ -22,6 +23,7 @@
 from time import time, localtime
 from timer import TimerEntry as RealTimerEntry
 from enigma import eServiceCenter, eEPGCache
+from functools import cmp_to_key
 import Tools.CopyFiles
 import os
 
@@ -103,12 +105,12 @@
 				timersanitycheck = TimerSanityCheck(self.session.nav.RecordTimer.timer_list, cur)
 				if not timersanitycheck.check():
 					t.disable()
-					print "Sanity check failed"
+					print("Sanity check failed")
 					simulTimerList = timersanitycheck.getSimulTimerList()
 					if simulTimerList is not None:
 						self.session.openWithCallback(self.finishedEdit, TimerSanityConflict, simulTimerList)
 				else:
-					print "Sanity check passed"
+					print("Sanity check passed")
 					if timersanitycheck.doubleCheck():
 						t.disable()
 			else:
@@ -245,7 +247,7 @@
 		list.extend([(timer, False) for timer in self.session.nav.RecordTimer.timer_list])
 		list.extend([(timer, True) for timer in self.session.nav.RecordTimer.processed_timers])
 		if config.usage.timerlist_finished_timer_position.index: #end of list
-			list.sort(cmp = eol_compare)
+			list.sort(key=cmp_to_key(eol_compare))
 		else:
 			list.sort(key = lambda x: x[0].begin)
 
@@ -312,9 +314,9 @@
 		service = str(cur.service_ref.getServiceName())
 		t = localtime(cur.begin)
 		f = str(t.tm_year) + str(t.tm_mon).zfill(2) + str(t.tm_mday).zfill(2) + " " + str(t.tm_hour).zfill(2) + str(t.tm_min).zfill(2) + " - " + service + " - " + cur.name
-		f = f.replace(':','_')
-		f = f.replace(',','_')
-		f = f.replace('/','_')
+		f = f.replace(':', '_')
+		f = f.replace(',', '_')
+		f = f.replace('/', '_')
 
 		if not cur:
 			return
@@ -396,9 +398,9 @@
 		service = str(item.service_ref.getServiceName())
 		t = localtime(item.begin)
 		f = str(t.tm_year) + str(t.tm_mon).zfill(2) + str(t.tm_mday).zfill(2) + " " + str(t.tm_hour).zfill(2) + str(t.tm_min).zfill(2) + " - " + service + " - " + name
-		f = f.replace(':','_')
-		f = f.replace(',','_')
-		f = f.replace('/','_')
+		f = f.replace(':', '_')
+		f = f.replace(',', '_')
+		f = f.replace('/', '_')
 		path = resolveFilename(SCOPE_HDD)
 		self.removeTimer(True)
 		from enigma import eBackgroundFileEraser
@@ -460,7 +462,7 @@
 			else:
 				success = True
 			if success:
-				print "Sanity check passed"
+				print("Sanity check passed")
 				self.session.nav.RecordTimer.timeChanged(entry)
 
 			self.fillTimerList()
@@ -502,7 +504,7 @@
 	def __init__(self, session, timer):
 		Screen.__init__(self, session)
 		self.timer = timer
-		print "TimerSanityConflict"
+		print("TimerSanityConflict")
 
 		self["timer1"] = TimerList(self.getTimerList(timer[0]))
 		self.list = []
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/TimerEntry.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/TimerEntry.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/TimerEntry.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/TimerEntry.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,11 +1,12 @@
 # -*- coding: utf-8 -*-
+from __future__ import absolute_import
 from time import localtime, mktime, time, strftime
 from datetime import datetime
 
 from enigma import eEPGCache
 
 from Screens.Screen import Screen
-import ChannelSelection
+import Screens.ChannelSelection
 from ServiceReference import ServiceReference
 from Components.config import config, ConfigSelection, ConfigText, ConfigSubList, ConfigDateTime, ConfigClock, ConfigYesNo, getConfigListEntry
 from Components.ActionMap import NumberActionMap, ActionMap
@@ -26,6 +27,7 @@
 from Screens.Setup import SetupSummary
 from RecordTimer import AFTEREVENT
 from os import statvfs
+import six
 
 class TimerEntry(Screen, ConfigListScreen):
 	def __init__(self, session, timer):
@@ -142,9 +144,14 @@
 			shutdownString = _("shut down")
 		self.timerentry_afterevent = ConfigSelection(choices = [("nothing", _("do nothing")), ("standby", _("go to standby")), ("deepstandby", shutdownString), ("auto", _("auto"))], default = afterevent)
 		self.timerentry_recordingtype = ConfigSelection(choices = [("normal", _("normal")), ("descrambled+ecm", _("descramble and record ecm")), ("scrambled+ecm", _("don't descramble, record ecm"))], default = recordingtype)
-		self.timerentry_type = ConfigSelection(choices = [("once",_("once")), ("repeated", _("repeated"))], default = type)
-		self.timerentry_name = ConfigText(default = self.timer.name.replace('\xc2\x86', '').replace('\xc2\x87', '').encode("utf-8"), visible_width = 50, fixed_size = False)
-		self.timerentry_description_replaced = self.timer.description.replace('\xc2\x8a', ' ').encode("utf-8")
+		self.timerentry_type = ConfigSelection(choices = [("once", _("once")), ("repeated", _("repeated"))], default = type)
+		# FIME Do we need these 2 lines?
+		if six.PY3:
+			self.timerentry_name = ConfigText(default = self.timer.name.replace('\x86', '').replace('\x87', ''), visible_width = 50, fixed_size = False)
+			self.timerentry_description_replaced = self.timer.description.replace('\x8a', ' ')
+		else:
+			self.timerentry_name = ConfigText(default = self.timer.name.replace('\xc2\x86', '').replace('\xc2\x87', '').encode("utf-8"), visible_width = 50, fixed_size = False)
+			self.timerentry_description_replaced = self.timer.description.replace('\xc2\x8a', ' ').encode("utf-8")
 		self.timerentry_description = ConfigText(default = self.timerentry_description_replaced, visible_width = 50, fixed_size = False)
 		self.timerentry_tags = self.timer.tags[:]
 		# if no tags found, make name of event default tag set.
@@ -173,7 +180,7 @@
 
 		self.timerentry_repeatedbegindate = ConfigDateTime(default = self.timer.repeatedbegindate, formatstring = config.usage.date.full.value, increment = 86400)
 
-		self.timerentry_weekday = ConfigSelection(default = weekday_table[weekday], choices = [("mon",_("Monday")), ("tue", _("Tuesday")), ("wed",_("Wednesday")), ("thu", _("Thursday")), ("fri", _("Friday")), ("sat", _("Saturday")), ("sun", _("Sunday"))])
+		self.timerentry_weekday = ConfigSelection(default = weekday_table[weekday], choices = [("mon", _("Monday")), ("tue", _("Tuesday")), ("wed", _("Wednesday")), ("thu", _("Thursday")), ("fri", _("Friday")), ("sat", _("Saturday")), ("sun", _("Sunday"))])
 
 		self.timerentry_day = ConfigSubList()
 		for x in (0, 1, 2, 3, 4, 5, 6):
@@ -213,7 +220,7 @@
 				a = float(stat.f_blocks) * stat.f_bsize / 1024 / 1024 /1024
 				b = float(stat.f_bavail) * stat.f_bsize / 1024 / 1024 /1024
 				c = 100.0 * b / a
-				free = ("%0.f GB (%0.f %s) " + _("free diskspace")) % (b,c,"%")
+				free = ("%0.f GB (%0.f %s) " + _("free diskspace")) % (b, c, "%")
 				description = _("Current location")
 		except:
 			pass
@@ -293,20 +300,20 @@
 			if len(self["config"].getCurrent()) > 2 and self["config"].getCurrent()[2]:
 				self["description"].setText(self["config"].getCurrent()[2])
 			if isinstance(self["config"].getCurrent()[1], ConfigText):
-				if self.has_key("VKeyIcon"):
+				if "VKeyIcon" in self:
 					self["VirtualKB"].setEnabled(True)
 					self["VKeyIcon"].boolean = True
-				if self.has_key("HelpWindow"):
+				if "HelpWindow" in self:
 					if self["config"].getCurrent()[1].help_window and self["config"].getCurrent()[1].help_window.instance is not None:
 						helpwindowpos = self["HelpWindow"].getPosition()
 						from enigma import ePoint
-						self["config"].getCurrent()[1].help_window.instance.move(ePoint(helpwindowpos[0],helpwindowpos[1]))
+						self["config"].getCurrent()[1].help_window.instance.move(ePoint(helpwindowpos[0], helpwindowpos[1]))
 					else:
-						if self.has_key("VKeyIcon"):
+						if "VKeyIcon" in self:
 							self["VirtualKB"].setEnabled(False)
 							self["VKeyIcon"].boolean = False
 		else:
-			if self.has_key("VKeyIcon"):
+			if "VKeyIcon" in self:
 				self["VirtualKB"].setEnabled(False)
 				self["VKeyIcon"].boolean = False
 
@@ -533,7 +540,7 @@
 					ref = self.session.nav.getCurrentlyPlayingServiceOrGroup()
 					parent = self.timer.service_ref.ref
 					selection = 0
-					for x in range(n):
+					for x in list(range(n)):
 						i = event.getLinkageService(parent, x)
 						if i.toString() == ref.toString():
 							selection = x
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Timershift.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Timershift.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Timershift.py	2020-06-21 10:16:12.727443238 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Timershift.py	2020-06-21 10:20:02.367327052 -0400
@@ -11,7 +11,7 @@
 from Components.Sources.Boolean import Boolean
 from Components.Sources.StaticText import StaticText
 from Components.SystemInfo import SystemInfo
-
+import six
 
 class SetupSummary(Screen):
 	def __init__(self, session, parent):
@@ -34,15 +34,15 @@
 	def selectionChanged(self):
 		self["SetupEntry"].text = self.parent.getCurrentEntry()
 		self["SetupValue"].text = self.parent.getCurrentValue()
-		if hasattr(self.parent,"getCurrentDescription"):
+		if hasattr(self.parent, "getCurrentDescription"):
 			self.parent["description"].text = self.parent.getCurrentDescription()
-		if self.parent.has_key('footnote'):
-			if self.parent.getCurrentEntry().endswith('*'):
+		if 'footnote' in self.parent:
+			if six.ensure_str(self.parent.getCurrentEntry()).endswith('*'):
 				self.parent['footnote'].text = (_("* = Restart Required"))
 			else:
 				self.parent['footnote'].text = (_(" "))
 
-class TimeshiftSettings(Screen,ConfigListScreen):
+class TimeshiftSettings(Screen, ConfigListScreen):
 	def removeNotifier(self):
 		if config.usage.setup_level.notifiers:
 			config.usage.setup_level.notifiers.remove(self.levelChanged)
@@ -58,7 +58,7 @@
 			if x.get("key") != self.setup:
 				continue
 			self.addItems(list, x)
-			self.setup_title = x.get("title", "").encode("UTF-8")
+			self.setup_title = six.ensure_str(x.get("title", ""))
 			self.seperation = int(x.get('separation', '0'))
 
 	def __init__(self, session):
@@ -342,8 +342,8 @@
 				if requires and not SystemInfo.get(requires, False):
 					continue
 
-				item_text = _(x.get("text", "??").encode("UTF-8"))
-				item_description = _(x.get("description", " ").encode("UTF-8"))
+				item_text = _(six.ensure_str(x.get("text", "??")))
+				item_description = _(six.ensure_str(x.get("description", " ")))
 				b = eval(x.text or "")
 				if b == "":
 					continue
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/UserInterfacePositioner.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/UserInterfacePositioner.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/UserInterfacePositioner.py	2020-06-21 10:16:12.731444037 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/UserInterfacePositioner.py	2020-06-21 10:20:02.367327052 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Screen import Screen
 from Components.ActionMap import ActionMap
 from Components.config import config, configfile, getConfigListEntry
@@ -63,11 +64,11 @@
 		if SystemInfo["CanChangeOsdPosition"]:
 			setPositionParameter("height", configElement)
 	config.osd.dst_height.addNotifier(setOSDHeight)
-	print 'Setting OSD position: %s %s %s %s' %  (config.osd.dst_left.value, config.osd.dst_width.value, config.osd.dst_top.value, config.osd.dst_height.value)
+	print('Setting OSD position: %s %s %s %s' %  (config.osd.dst_left.value, config.osd.dst_width.value, config.osd.dst_top.value, config.osd.dst_height.value))
 
 	def setOSDAlpha(configElement):
 		if SystemInfo["CanChangeOsdAlpha"]:
-			print 'Setting OSD alpha:', str(configElement.value)
+			print('Setting OSD alpha:', str(configElement.value))
 			config.av.osd_alpha.setValue(configElement.value)
 			f = open("/proc/stb/video/alpha", "w")
 			f.write(str(configElement.value))
@@ -77,7 +78,7 @@
 	def set3DMode(configElement):
 		if SystemInfo["CanChange3DOsd"]:
 			value = configElement.value
-			print 'Setting 3D mode:',value
+			print('Setting 3D mode:', value)
 			try:
 				if SystemInfo["CanUse3DModeChoices"]:
 					f = open("/proc/stb/fb/3dmode_choices", "r")
@@ -99,7 +100,7 @@
 
 	def set3DZnorm(configElement):
 		if SystemInfo["CanChange3DOsd"]:
-			print 'Setting 3D depth:',configElement.value
+			print('Setting 3D depth:', configElement.value)
 			try:
 				f = open("/proc/stb/fb/znorm", "w")
 				f.write('%d' % int(configElement.value))
@@ -354,7 +355,7 @@
 		config.osd.dst_width.setValue(dst_width)
 		config.osd.dst_top.setValue(dst_top)
 		config.osd.dst_height.setValue(dst_height)
-		print 'Setting OSD position: %s %s %s %s' %  (config.osd.dst_left.value, config.osd.dst_width.value, config.osd.dst_top.value, config.osd.dst_height.value)
+		print('Setting OSD position: %s %s %s %s' %  (config.osd.dst_left.value, config.osd.dst_width.value, config.osd.dst_top.value, config.osd.dst_height.value))
 
 	def saveAll(self):
 		for x in self["config"].list:
@@ -492,7 +493,7 @@
 		config.osd.dst_width.setValue(dst_width)
 		config.osd.dst_top.setValue(dst_top)
 		config.osd.dst_height.setValue(dst_height)
-		print 'Setting OSD position: %s %s %s %s' %  (config.osd.dst_left.value, config.osd.dst_width.value, config.osd.dst_top.value, config.osd.dst_height.value)
+		print('Setting OSD position: %s %s %s %s' %  (config.osd.dst_left.value, config.osd.dst_width.value, config.osd.dst_top.value, config.osd.dst_height.value))
 
 	def saveAll(self):
 		for x in self["config"].list:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/VideoMode.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/VideoMode.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/VideoMode.py	2020-06-21 10:16:12.731444037 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/VideoMode.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from os import path
 
 from enigma import iPlayableService, iServiceInformation, eTimer, eServiceCenter, eServiceReference, eDVBDB
@@ -28,9 +29,9 @@
 def getConfig_videomode(getmode, getrate):
 	port = config.av.videoport.value
 	mode = getmode[port].value
-	res = mode.replace('p30','p')[:-1]
-	pol = mode.replace('p30','p')[-1:]
-	rate = getrate[mode].value.replace('Hz','')
+	res = mode.replace('p30', 'p')[:-1]
+	pol = mode.replace('p30', 'p')[-1:]
+	rate = getrate[mode].value.replace('Hz', '')
 	return port, mode, res, pol, rate
 
 def setProgressiveRate(vid_rate, new_rate, new_res, config_res, config_rate):
@@ -49,7 +50,7 @@
 			new_rate = config.av.autores_30p.value.split(',')[0]
 		else:
 			new_rate = config.av.autores_30p.value.split(',')[1]
-	if int(new_res) >= int(config_res) and config_rate not in ("auto","multi") and int(config_rate) < int(new_rate):
+	if int(new_res) >= int(config_res) and config_rate not in ("auto", "multi") and int(config_rate) < int(new_rate):
 		new_rate = config_rate
 	return new_rate
 
@@ -108,27 +109,27 @@
 			getConfigListEntry(_("Video output"), config.av.videoport, _("Configures which video output connector will be used."))
 		]
 		if config.av.videoport.value in ('HDMI', 'YPbPr', 'Scart-YPbPr') and not getAutoresPlugin_enabled(): #path.exists(resolveFilename(SCOPE_PLUGINS)+'SystemPlugins/AutoResolution'):
-			self.list.append(getConfigListEntry(_("Automatic resolution"), config.av.autores,_("If enabled the output resolution of the box will try to match the resolution of the video contents resolution")))
+			self.list.append(getConfigListEntry(_("Automatic resolution"), config.av.autores, _("If enabled the output resolution of the box will try to match the resolution of the video contents resolution")))
 			if config.av.autores.value in ('all', 'hd'):
-				self.list.append(getConfigListEntry(_("Delay time"), config.av.autores_delay,_("Set the time before checking video source for resolution information.")))
-				self.list.append(getConfigListEntry(_("Automatic resolution label"), config.av.autores_label_timeout,_("Allows you to adjust the amount of time the resolution information display on screen.")))
-				self.list.append(getConfigListEntry(_("Force de-interlace"), config.av.autores_deinterlace,_("If enabled the video will always be de-interlaced.")))
+				self.list.append(getConfigListEntry(_("Delay time"), config.av.autores_delay, _("Set the time before checking video source for resolution information.")))
+				self.list.append(getConfigListEntry(_("Automatic resolution label"), config.av.autores_label_timeout, _("Allows you to adjust the amount of time the resolution information display on screen.")))
+				self.list.append(getConfigListEntry(_("Force de-interlace"), config.av.autores_deinterlace, _("If enabled the video will always be de-interlaced.")))
 				self.list.append(getConfigListEntry(_('Always use smart1080p mode'), config.av.smart1080p, _("This option allows you to always use e.g. 1080p50 for TV/.ts, and 1080p24/p50/p60 for videos")))
 				if config.av.autores.value in 'hd':
-					self.list.append(getConfigListEntry(_("Show SD as"), config.av.autores_sd,_("This option allows you to choose how to display standard definition video on your TV.")))
-				self.list.append(getConfigListEntry(_("Show 480/576p 24fps as"), config.av.autores_480p24,_("This option allows you to choose how to display SD progressive 24Hz on your TV. (as not all TV's support these resolutions)")))
-				self.list.append(getConfigListEntry(_("Show 720p 24fps as"), config.av.autores_720p24,_("This option allows you to choose how to display 720p 24Hz on your TV. (as not all TV's support these resolutions)")))
-				self.list.append(getConfigListEntry(_("Show 1080p 24fps as"), config.av.autores_1080p24,_("This option allows you to choose how to display 1080p 24Hz on your TV. (as not all TV's support these resolutions)")))
-				self.list.append(getConfigListEntry(_("Show 1080p 25fps as"), config.av.autores_1080p25,_("This option allows you to choose how to display 1080p 25Hz on your TV. (as not all TV's support these resolutions)")))
-				self.list.append(getConfigListEntry(_("Show 1080p 30fps as"), config.av.autores_1080p30,_("This option allows you to choose how to display 1080p 30Hz on your TV. (as not all TV's support these resolutions)")))
+					self.list.append(getConfigListEntry(_("Show SD as"), config.av.autores_sd, _("This option allows you to choose how to display standard definition video on your TV.")))
+				self.list.append(getConfigListEntry(_("Show 480/576p 24fps as"), config.av.autores_480p24, _("This option allows you to choose how to display SD progressive 24Hz on your TV. (as not all TV's support these resolutions)")))
+				self.list.append(getConfigListEntry(_("Show 720p 24fps as"), config.av.autores_720p24, _("This option allows you to choose how to display 720p 24Hz on your TV. (as not all TV's support these resolutions)")))
+				self.list.append(getConfigListEntry(_("Show 1080p 24fps as"), config.av.autores_1080p24, _("This option allows you to choose how to display 1080p 24Hz on your TV. (as not all TV's support these resolutions)")))
+				self.list.append(getConfigListEntry(_("Show 1080p 25fps as"), config.av.autores_1080p25, _("This option allows you to choose how to display 1080p 25Hz on your TV. (as not all TV's support these resolutions)")))
+				self.list.append(getConfigListEntry(_("Show 1080p 30fps as"), config.av.autores_1080p30, _("This option allows you to choose how to display 1080p 30Hz on your TV. (as not all TV's support these resolutions)")))
 				if '2160p24' in iAVSwitch.readAvailableModes():
-					self.list.append(getConfigListEntry(_("Show 2160p 24fps as"), config.av.autores_2160p24,_("This option allows you to choose how to display 2160p 24Hz on your TV. (as not all TV's support these resolutions)")))
-					self.list.append(getConfigListEntry(_("Show 2160p 25fps as"), config.av.autores_2160p25,_("This option allows you to choose how to display 2160p 25Hz on your TV. (as not all TV's support these resolutions)")))
-					self.list.append(getConfigListEntry(_("Show 2160p 30fps as"), config.av.autores_2160p30,_("This option allows you to choose how to display 2160p 30Hz on your TV. (as not all TV's support these resolutions)")))
+					self.list.append(getConfigListEntry(_("Show 2160p 24fps as"), config.av.autores_2160p24, _("This option allows you to choose how to display 2160p 24Hz on your TV. (as not all TV's support these resolutions)")))
+					self.list.append(getConfigListEntry(_("Show 2160p 25fps as"), config.av.autores_2160p25, _("This option allows you to choose how to display 2160p 25Hz on your TV. (as not all TV's support these resolutions)")))
+					self.list.append(getConfigListEntry(_("Show 2160p 30fps as"), config.av.autores_2160p30, _("This option allows you to choose how to display 2160p 30Hz on your TV. (as not all TV's support these resolutions)")))
 
 			elif config.av.autores.value == 'simple':
-				self.list.append(getConfigListEntry(_("Delay time"), config.av.autores_delay,_("Set the time before checking video source for resolution information.")))
-				self.list.append(getConfigListEntry(_("Automatic resolution label"), config.av.autores_label_timeout,_("Allows you to adjust the amount of time the resolution information display on screen.")))
+				self.list.append(getConfigListEntry(_("Delay time"), config.av.autores_delay, _("Set the time before checking video source for resolution information.")))
+				self.list.append(getConfigListEntry(_("Automatic resolution label"), config.av.autores_label_timeout, _("Allows you to adjust the amount of time the resolution information display on screen.")))
 				self.prev_sd = self.prev_hd = self.prev_fhd = self.prev_uhd = ""
 				service = self.session.nav.getCurrentService()
 				info = service and service.info()
@@ -167,18 +168,18 @@
 					self.getVerify_videomode(config.av.autores_mode_uhd, config.av.autores_rate_uhd)
 					self.list.append(getConfigListEntry(pgettext(_("Video output mode for UHD"), _("%sMode for UHD (up to 2160p)") %self.prev_uhd), config.av.autores_mode_uhd[config.av.videoport.value], _("This option configures the video output mode (or resolution)."), "check_uhd"))
 					self.list.append(getConfigListEntry(_("%sRefresh rate for UHD") %self.prev_uhd, config.av.autores_rate_uhd[config.av.autores_mode_uhd[config.av.videoport.value].value], _("Configure the refresh rate of the screen."), "check_uhd"))
-				self.list.append(getConfigListEntry(_("Show 24p up to 720p / higher than 720p as"), config.av.autores_24p,_("Show 24p up to resolution 720p or higher than 720p as a different Framerate.")))
-				self.list.append(getConfigListEntry(_("Show 25p up to 720p / higher than 720p as"), config.av.autores_25p,_("Show 25p up to resolution 720p or higher than 720p as a different Framerate.")))
-				self.list.append(getConfigListEntry(_("Show 30p up to 720p / higher than 720p as"), config.av.autores_30p,_("Show 30p up to resolution 720p or higher than 720p as a different Framerate.")))
+				self.list.append(getConfigListEntry(_("Show 24p up to 720p / higher than 720p as"), config.av.autores_24p, _("Show 24p up to resolution 720p or higher than 720p as a different Framerate.")))
+				self.list.append(getConfigListEntry(_("Show 25p up to 720p / higher than 720p as"), config.av.autores_25p, _("Show 25p up to resolution 720p or higher than 720p as a different Framerate.")))
+				self.list.append(getConfigListEntry(_("Show 30p up to 720p / higher than 720p as"), config.av.autores_30p, _("Show 30p up to resolution 720p or higher than 720p as a different Framerate.")))
 			elif config.av.autores.value == 'native':
-				self.list.append(getConfigListEntry(_("Delay time"), config.av.autores_delay,_("Set the time before checking video source for resolution information.")))
-				self.list.append(getConfigListEntry(_("Automatic resolution label"), config.av.autores_label_timeout,_("Allows you to adjust the amount of time the resolution information display on screen.")))
+				self.list.append(getConfigListEntry(_("Delay time"), config.av.autores_delay, _("Set the time before checking video source for resolution information.")))
+				self.list.append(getConfigListEntry(_("Automatic resolution label"), config.av.autores_label_timeout, _("Allows you to adjust the amount of time the resolution information display on screen.")))
 				self.getVerify_videomode(config.av.autores_mode_sd, config.av.autores_rate_sd)
 				self.list.append(getConfigListEntry(pgettext(_("Lowest Video output mode"), _("Lowest Mode")), config.av.autores_mode_sd[config.av.videoport.value], _("This option configures the video output mode (or resolution).")))
 				self.list.append(getConfigListEntry(_("Refresh rate for 'Lowest Mode'"), config.av.autores_rate_sd[config.av.autores_mode_sd[config.av.videoport.value].value], _("Configure the refresh rate of the screen.")))
-				self.list.append(getConfigListEntry(_("Show 24p up to 720p / higher than 720p as"), config.av.autores_24p,_("Show 24p up to resolution 720p or higher than 720p as a different Framerate.")))
-				self.list.append(getConfigListEntry(_("Show 25p up to 720p / higher than 720p as"), config.av.autores_25p,_("Show 25p up to resolution 720p or higher than 720p as a different Framerate.")))
-				self.list.append(getConfigListEntry(_("Show 30p up to 720p / higher than 720p as"), config.av.autores_30p,_("Show 30p up to resolution 720p or higher than 720p as a different Framerate.")))
+				self.list.append(getConfigListEntry(_("Show 24p up to 720p / higher than 720p as"), config.av.autores_24p, _("Show 24p up to resolution 720p or higher than 720p as a different Framerate.")))
+				self.list.append(getConfigListEntry(_("Show 25p up to 720p / higher than 720p as"), config.av.autores_25p, _("Show 25p up to resolution 720p or higher than 720p as a different Framerate.")))
+				self.list.append(getConfigListEntry(_("Show 30p up to 720p / higher than 720p as"), config.av.autores_30p, _("Show 30p up to resolution 720p or higher than 720p as a different Framerate.")))
 				self.list.append(getConfigListEntry(_("Show unknown video format as"), config.av.autores_unknownres, _("Show unknown Videoresolution as next higher or as highest screen resolution.")))
 
 		# if we have modes for this port:
@@ -211,7 +212,7 @@
 			self.list.append(getConfigListEntry(_("Display 16:9 content as"), config.av.policy_169, _("When the content has an aspect ratio of 16:9, choose whether to scale/stretch the picture.")))
 
 		if config.av.videoport.value == "HDMI":
-			self.list.append(getConfigListEntry(_("Allow unsupported modes"), config.av.edid_override,_("This option allows you to use all HDMI Modes")))
+			self.list.append(getConfigListEntry(_("Allow unsupported modes"), config.av.edid_override, _("This option allows you to use all HDMI Modes")))
 		if config.av.videoport.value == "Scart":
 			self.list.append(getConfigListEntry(_("Color format"), config.av.colorformat, _("Configure which color format should be used on the SCART output.")))
 			if level >= 1:
@@ -223,28 +224,28 @@
 			self.list.append(getConfigListEntry(_("Scaler sharpness"), config.av.scaler_sharpness, _("This option configures the picture sharpness.")))
 
 		if SystemInfo["havecolorspace"]:
-			self.list.append(getConfigListEntry(_("HDMI Colorspace"), config.av.hdmicolorspace,_("This option allows you can config the Colorspace from Auto to RGB")))
+			self.list.append(getConfigListEntry(_("HDMI Colorspace"), config.av.hdmicolorspace, _("This option allows you can config the Colorspace from Auto to RGB")))
 
 		if SystemInfo["havecolorimetry"]:
-			self.list.append(getConfigListEntry(_("HDMI Colorimetry"), config.av.hdmicolorimetry,_("This option allows you can config the Colorimetry for HDR")))
+			self.list.append(getConfigListEntry(_("HDMI Colorimetry"), config.av.hdmicolorimetry, _("This option allows you can config the Colorimetry for HDR")))
 
 		if SystemInfo["havehdmicolordepth"]:
-			self.list.append(getConfigListEntry(_("HDMI Colordepth"), config.av.hdmicolordepth,_("This option allows you can config the Colordepth for UHD")))
+			self.list.append(getConfigListEntry(_("HDMI Colordepth"), config.av.hdmicolordepth, _("This option allows you can config the Colordepth for UHD")))
 
 		if SystemInfo["havehdmihdrtype"]:
-			self.list.append(getConfigListEntry(_("HDMI HDR Type"), config.av.hdmihdrtype,_("This option allows you can force the HDR Modes for UHD")))
+			self.list.append(getConfigListEntry(_("HDMI HDR Type"), config.av.hdmihdrtype, _("This option allows you can force the HDR Modes for UHD")))
 
 		if SystemInfo["Canedidchecking"]:
-			self.list.append(getConfigListEntry(_("Bypass HDMI EDID Check"), config.av.bypass_edid_checking,_("This option allows you to bypass HDMI EDID check")))
+			self.list.append(getConfigListEntry(_("Bypass HDMI EDID Check"), config.av.bypass_edid_checking, _("This option allows you to bypass HDMI EDID check")))
 
 		if SystemInfo["haveboxmode"]:
-			self.list.append(getConfigListEntry(_("Change Boxmode to control Hardware Chip Modes*"), config.av.boxmode,_("Switch Mode to enable HDR Modes or PIP Functions")))
+			self.list.append(getConfigListEntry(_("Change Boxmode to control Hardware Chip Modes*"), config.av.boxmode, _("Switch Mode to enable HDR Modes or PIP Functions")))
 
 		if SystemInfo["HDRSupport"]:
-			self.list.append(getConfigListEntry(_("HLG Support"), config.av.hlg_support,_("This option allows you can force the HLG Modes for UHD")))
-			self.list.append(getConfigListEntry(_("HDR10 Support"), config.av.hdr10_support,_("This option allows you can force the HDR10 Modes for UHD")))
-			self.list.append(getConfigListEntry(_("Allow 12bit"), config.av.allow_12bit,_("This option allows you can enable or disable the 12 Bit Color Mode")))
-			self.list.append(getConfigListEntry(_("Allow 10bit"), config.av.allow_10bit,_("This option allows you can enable or disable the 10 Bit Color Mode")))
+			self.list.append(getConfigListEntry(_("HLG Support"), config.av.hlg_support, _("This option allows you can force the HLG Modes for UHD")))
+			self.list.append(getConfigListEntry(_("HDR10 Support"), config.av.hdr10_support, _("This option allows you can force the HDR10 Modes for UHD")))
+			self.list.append(getConfigListEntry(_("Allow 12bit"), config.av.allow_12bit, _("This option allows you can enable or disable the 12 Bit Color Mode")))
+			self.list.append(getConfigListEntry(_("Allow 10bit"), config.av.allow_10bit, _("This option allows you can enable or disable the 10 Bit Color Mode")))
 
 		self["config"].list = self.list
 		self["config"].l.setList(self.list)
@@ -254,13 +255,13 @@
 	def getVerify_videomode(self, setmode, setrate):
 		config_port, config_mode, config_res, config_pol, config_rate = getConfig_videomode(config.av.videomode, config.av.videorate)
 		mode = setmode[config_port].value
-		res = mode.replace('p30','p')[:-1]
-		pol = mode.replace('p30','p')[-1:]
-		rate = setrate[mode].value.replace('Hz','')
+		res = mode.replace('p30', 'p')[:-1]
+		pol = mode.replace('p30', 'p')[-1:]
+		rate = setrate[mode].value.replace('Hz', '')
 
 		if int(res) > int(config_res) or (int(res) == int(config_res) and ((pol == 'p' and config_pol == 'i') or (config_mode == '2160p30' and mode == '2160p'))):
 			setmode[config_port].setValue(config_mode)
-		if config_rate not in ("auto","multi") and (rate in ("auto","multi") or int(config_rate) < int(rate)):
+		if config_rate not in ("auto", "multi") and (rate in ("auto", "multi") or int(config_rate) < int(rate)):
 			setrate[config_mode].setValue(config_rate)
 
 	def keyLeft(self):
@@ -293,12 +294,12 @@
 				config.av.autores_1080i_deinterlace.setValue(self.last_good_autores_extra[1])
 				config.av.autores_unknownres.setValue(self.last_good_autores_unknownres)
 				try:
-					if not self.current_mode in iAVSwitch.readAvailableModes(): raise TypeError, "No old video mode saved!"
+					if not self.current_mode in iAVSwitch.readAvailableModes(): raise TypeError("No old video mode saved!")
 					f = open("/proc/stb/video/videomode", "w")
 					f.write(self.current_mode)
 					f.close()
 				except Exception as e:
-					print "[VideoMode] failed to set old video mode!", e
+					print("[VideoMode] failed to set old video mode!", e)
 					self.hw.setMode(*self.last_good)
 			self.createSetup()
 		else:
@@ -391,7 +392,7 @@
 	def getCurrent_mode(self):
 		try:
 			f = open("/proc/stb/video/videomode")
-			mode = f.read()[:-1].replace('\n','')
+			mode = f.read()[:-1].replace('\n', '')
 			f.close()
 		except:
 			return None
@@ -507,13 +508,13 @@
 			))
 
 			if SystemInfo["Can3DSurround"]:
-				self.list.append(getConfigListEntry(_("3D Surround"), config.av.surround_3d,_("This option allows you to enable 3D Surround Sound.")))
+				self.list.append(getConfigListEntry(_("3D Surround"), config.av.surround_3d, _("This option allows you to enable 3D Surround Sound.")))
 
 			if SystemInfo["Can3DSpeaker"] and config.av.surround_3d.value != "none":
-				self.list.append(getConfigListEntry(_("3D Surround Speaker Position"), config.av.surround_3d_speaker,_("This option allows you to change the virtuell loadspeaker position.")))
+				self.list.append(getConfigListEntry(_("3D Surround Speaker Position"), config.av.surround_3d_speaker, _("This option allows you to change the virtuell loadspeaker position.")))
 
 			if SystemInfo["CanAutoVolume"]:
-				self.list.append(getConfigListEntry(_("Audio Auto Volume Level"), config.av.autovolume,_("This option configures you can set Auto Volume Level.")))
+				self.list.append(getConfigListEntry(_("Audio Auto Volume Level"), config.av.autovolume, _("This option configures you can set Auto Volume Level.")))
 			self.list.append(getConfigListEntry(_("Audio volume step size"), config.av.volume_stepsize, _("Configure the general audio volume step size (limit 1-10).")))
 			self.list.append(getConfigListEntry(_("Audio volume step size fast mode"), config.av.volume_stepsize_fastmode, _("Configure the fast mode audio volume step size (limit 1-10). Activated when volume key permanent press or press fast in a row.")))
 			self.list.append(getConfigListEntry(_("Hide mute notification"), config.av.volume_hide_mute, _("If muted, hide mute icon or mute information after few seconds.")))
@@ -681,10 +682,10 @@
 		# info: autoresolution preview or save settings call this function with session = None / ~338, ~374
 		global resolutionlabel
 		config_port, config_mode, config_res, config_pol, config_rate = getConfig_videomode(config.av.videomode, config.av.videorate)
-		config_mode = config_mode.replace('p30','p')
+		config_mode = config_mode.replace('p30', 'p')
 
 		f = open("/proc/stb/video/videomode")
-		current_mode = f.read()[:-1].replace('\n','')
+		current_mode = f.read()[:-1].replace('\n', '')
 		f.close()
 		if current_mode.upper() in ('PAL', 'NTSC'):
 			current_mode = current_mode.upper()
@@ -694,8 +695,8 @@
 			current_pol = 'i'
 		elif 'p' in current_mode:
 			current_pol = 'p'
-		current_res = current_pol and current_mode.split(current_pol)[0].replace('\n','') or ""
-		current_rate = current_pol and current_mode.split(current_pol)[0].replace('\n','') and current_mode.split(current_pol)[1].replace('\n','') or ""
+		current_res = current_pol and current_mode.split(current_pol)[0].replace('\n', '') or ""
+		current_rate = current_pol and current_mode.split(current_pol)[0].replace('\n', '') and current_mode.split(current_pol)[1].replace('\n', '') or ""
 
 		write_mode = None
 		new_mode = None
@@ -706,21 +707,21 @@
 		if path.exists("/proc/stb/vmpeg/0/yres"):
 			try:
 				f = open("/proc/stb/vmpeg/0/yres", "r")
-				video_height = int(f.read(),16)
+				video_height = int(f.read(), 16)
 				f.close()
 			except:
 				video_height = 0
 		if path.exists("/proc/stb/vmpeg/0/xres"):
 			try:
 				f = open("/proc/stb/vmpeg/0/xres", "r")
-				video_width = int(f.read(),16)
+				video_width = int(f.read(), 16)
 				f.close()
 			except:
 				video_width = 0
 		if path.exists("/proc/stb/vmpeg/0/progressive"):
 			try:
 				f = open("/proc/stb/vmpeg/0/progressive", "r")
-				video_pol = "p" if int(f.read(),16) else "i"
+				video_pol = "p" if int(f.read(), 16) else "i"
 				f.close()
 			except:
 				video_pol = "i"
@@ -745,7 +746,7 @@
 				video_pol = ("i", "p")[info.getInfo(iServiceInformation.sProgressive)]
 				video_rate = int(info.getInfo(iServiceInformation.sFrameRate))
 
-		print "[VideoMode] detect video height: %s, width: %s, pol: %s, rate: %s (current video mode: %s)" %(video_height,video_width,video_pol,video_rate,current_mode)
+		print("[VideoMode] detect video height: %s, width: %s, pol: %s, rate: %s (current video mode: %s)" %(video_height, video_width, video_pol, video_rate, current_mode))
 		if video_height and video_width and video_pol and video_rate:
 			label_rate = (video_rate + 500) / 1000
 			if video_pol == 'i': label_rate *= 2
@@ -791,33 +792,33 @@
 				autorestyp = 'simple'
 				new_rate = (video_rate + 500) / 1000
 				if video_height <= 576 and int(config_res) >= 576: #sd
-					if config.av.autores_rate_sd[config.av.autores_mode_sd[config.av.videoport.value].value].value in ("auto","multi"):
+					if config.av.autores_rate_sd[config.av.autores_mode_sd[config.av.videoport.value].value].value in ("auto", "multi"):
 						if video_pol == 'i': new_rate *= 2
 					else:
-						new_rate = config.av.autores_rate_sd[config.av.autores_mode_sd[config.av.videoport.value].value].value.replace('Hz','')
-					new_mode = config.av.autores_mode_sd[config_port].value.replace('p30','p')
+						new_rate = config.av.autores_rate_sd[config.av.autores_mode_sd[config.av.videoport.value].value].value.replace('Hz', '')
+					new_mode = config.av.autores_mode_sd[config_port].value.replace('p30', 'p')
 				elif video_height <= 720 and int(config_res) >= 720: #hd
-					if config.av.autores_rate_hd[config.av.autores_mode_hd[config.av.videoport.value].value].value in ("auto","multi"):
+					if config.av.autores_rate_hd[config.av.autores_mode_hd[config.av.videoport.value].value].value in ("auto", "multi"):
 						if video_pol == 'i': new_rate *= 2
 					else:
-						new_rate = config.av.autores_rate_hd[config.av.autores_mode_hd[config.av.videoport.value].value].value.replace('Hz','')
-					new_mode = config.av.autores_mode_hd[config_port].value.replace('p30','p')
+						new_rate = config.av.autores_rate_hd[config.av.autores_mode_hd[config.av.videoport.value].value].value.replace('Hz', '')
+					new_mode = config.av.autores_mode_hd[config_port].value.replace('p30', 'p')
 				elif video_height <= 1080 and int(config_res) >= 1080: #fhd
-					if config.av.autores_rate_fhd[config.av.autores_mode_fhd[config.av.videoport.value].value].value in ("auto","multi"):
+					if config.av.autores_rate_fhd[config.av.autores_mode_fhd[config.av.videoport.value].value].value in ("auto", "multi"):
 						if video_pol == 'i': new_rate *= 2
 					else:
-						new_rate = config.av.autores_rate_fhd[config.av.autores_mode_fhd[config.av.videoport.value].value].value.replace('Hz','')
-					new_mode = config.av.autores_mode_fhd[config_port].value.replace('p30','p')
+						new_rate = config.av.autores_rate_fhd[config.av.autores_mode_fhd[config.av.videoport.value].value].value.replace('Hz', '')
+					new_mode = config.av.autores_mode_fhd[config_port].value.replace('p30', 'p')
 					if new_mode == '1080p' and not config.av.autores_1080i_deinterlace.value and video_height == 1080 and video_pol == 'i':
 						new_mode = '1080i'
 				elif video_height <= 2160 and int(config_res) >= 2160: #uhd
-					if config.av.autores_rate_uhd[config.av.autores_mode_uhd[config.av.videoport.value].value].value in ("auto","multi"):
+					if config.av.autores_rate_uhd[config.av.autores_mode_uhd[config.av.videoport.value].value].value in ("auto", "multi"):
 						if video_pol == 'i': new_rate *= 2
 					else:
-						new_rate = config.av.autores_rate_uhd[config.av.autores_mode_uhd[config.av.videoport.value].value].value.replace('Hz','')
-					new_mode = config.av.autores_mode_uhd[config_port].value.replace('p30','p')
+						new_rate = config.av.autores_rate_uhd[config.av.autores_mode_uhd[config.av.videoport.value].value].value.replace('Hz', '')
+					new_mode = config.av.autores_mode_uhd[config_port].value.replace('p30', 'p')
 				else:
-					if config_rate not in ("auto","multi"): new_rate = config_rate
+					if config_rate not in ("auto", "multi"): new_rate = config_rate
 					new_mode = config_mode
 				new_rate = str(new_rate)
 
@@ -829,7 +830,7 @@
 				elif new_mode in iAVSwitch.readAvailableModes():
 					write_mode = new_mode
 				else:
-					if config_rate not in ("auto","multi") and int(new_rate) > int(config_rate): new_rate = config_rate
+					if config_rate not in ("auto", "multi") and int(new_rate) > int(config_rate): new_rate = config_rate
 					if config_mode+new_rate in iAVSwitch.readAvailableModes():
 						write_mode = config_mode+new_rate
 					else:
@@ -846,12 +847,12 @@
 
 				if video_height <= int(min_res):
 					if new_pol == 'i' and min_pol == 'p': new_pol = min_pol
-					if min_rate not in ("auto","multi") and new_rate < int(min_rate): new_rate = min_rate
+					if min_rate not in ("auto", "multi") and new_rate < int(min_rate): new_rate = min_rate
 					new_res = min_res
 				if video_height >= int(config_res) or int(new_res) >= int(config_res):
 					new_res = config_res
 					if video_pol == 'p' and config_pol == 'i': new_pol = config_pol
-					if config_rate not in ("auto","multi") and int(config_rate) < new_rate: new_rate = config_rate
+					if config_rate not in ("auto", "multi") and int(config_rate) < new_rate: new_rate = config_rate
 				new_rate = str(new_rate)
 
 				if new_pol == 'p':
@@ -888,7 +889,7 @@
 					elif new_res+min_pol in iAVSwitch.readAvailableModes():
 						write_mode = new_res+min_pol
 					else:
-						if config_rate not in ("auto","multi") and int(new_rate) > int(config_rate): new_rate = config_rate
+						if config_rate not in ("auto", "multi") and int(new_rate) > int(config_rate): new_rate = config_rate
 						if config_mode+new_rate in iAVSwitch.readAvailableModes():
 							write_mode = config_mode+new_rate
 						else:
@@ -897,7 +898,7 @@
 			elif config.av.autores.value == 'all' or (config.av.autores.value == 'hd' and int(new_res) >= 720):
 				autorestyp = 'all or hd'
 				if (config.av.autores_deinterlace.value and HardwareInfo().is_nextgen()) or (config.av.autores_deinterlace.value and not HardwareInfo().is_nextgen() and int(new_res) <= 720):
-					new_pol = new_pol.replace('i','p')
+					new_pol = new_pol.replace('i', 'p')
 				if new_res+new_pol+new_rate in iAVSwitch.readAvailableModes():
 					new_mode = new_res+new_pol+new_rate
 					if new_mode == '480p24' or new_mode == '576p24':
@@ -927,10 +928,10 @@
 			elif config.av.autores.value == 'hd' and int(new_res) <= 576:
 				autorestyp = 'hd'
 				if (config.av.autores_deinterlace.value and HardwareInfo().is_nextgen()) or (config.av.autores_deinterlace.value and not HardwareInfo().is_nextgen() and not config.av.autores_sd.value == '1080i'):
-					new_mode = config.av.autores_sd.value.replace('i','p')+new_rate
+					new_mode = config.av.autores_sd.value.replace('i', 'p')+new_rate
 				else:
 					if new_pol in 'p':
-						new_mode = config.av.autores_sd.value.replace('i','p')+new_rate
+						new_mode = config.av.autores_sd.value.replace('i', 'p')+new_rate
 					else:
 						new_mode = config.av.autores_sd.value+new_rate
 
@@ -952,9 +953,9 @@
 				write_mode = new_mode
 			else:
 				autorestyp = 'no match'
-				if path.exists('/proc/stb/video/videomode_%shz' % new_rate) and config_rate in ("auto","multi"):
+				if path.exists('/proc/stb/video/videomode_%shz' % new_rate) and config_rate in ("auto", "multi"):
 					f = open("/proc/stb/video/videomode_%shz" % new_rate, "r")
-					multi_videomode = f.read().replace('\n','')
+					multi_videomode = f.read().replace('\n', '')
 					f.close()
 					if multi_videomode and (current_mode != multi_videomode):
 						write_mode = multi_videomode
@@ -986,17 +987,17 @@
 					new_rate = '50'
 				elif (mypath.find('p60.') >= 0) or (mypath.find('60p.') >= 0):
 					new_rate = '60'
-				elif new_rate in ("auto","multi"):
+				elif new_rate in ("auto", "multi"):
 					new_rate = '' # omit frame rate specifier, e.g. '1080p' instead of '1080p50' if there is no clue
 				if mypath != '':
 					if mypath.endswith('.ts'):
-						print "DEBUG VIDEOMODE/ playing .ts file"
+						print("DEBUG VIDEOMODE/ playing .ts file")
 						new_rate = '50' # for .ts files
 					else:
-						print "DEBUG VIDEOMODE/ playing other (non .ts) file"
+						print("DEBUG VIDEOMODE/ playing other (non .ts) file")
 						# new_rate from above for all other videos
 				else:
-					print "DEBUG VIDEOMODE/ no path or no service reference, presumably live TV"
+					print("DEBUG VIDEOMODE/ no path or no service reference, presumably live TV")
 					new_rate = '50' # for TV / or no service reference, then stay at 1080p50
 
 				new_rate = new_rate.replace('25', '50')
@@ -1030,11 +1031,11 @@
 									f.write(write_mode)
 									f.close()
 									changeResolution = True
-								except Exception, e:
+								except Exception as e:
 									print("[VideoMode] write_mode exception:" + str(e))
 
 						if not changeResolution:
-							print "[VideoMode] setMode - port: %s, mode: %s is not available" % (config_port, write_mode)
+							print("[VideoMode] setMode - port: %s, mode: %s is not available" % (config_port, write_mode))
 							resolutionlabel["restxt"].setText(_("Video mode: %s not available") % write_mode)
 							# we try to go for not available 1080p24/1080p30/1080p60 to change to 1080p from 60hz_choices if available
 							# TODO: can we make it easier, or more important --> smaller ?
@@ -1048,13 +1049,13 @@
 											f.write(x)
 											f.close()
 											changeResolution = True
-										except Exception, e:
+										except Exception as e:
 											print("[VideoMode] write_mode exception:" + str(e))
 								if not changeResolution:
-									print "[VideoMode] setMode - port: %s, mode: 1080p is also not available" % config_port
+									print("[VideoMode] setMode - port: %s, mode: 1080p is also not available" % config_port)
 									resolutionlabel["restxt"].setText(_("Video mode: 1080p also not available"))
 								else:
-									print "[VideoMode] setMode - port: %s, mode: 1080p" % config_port
+									print("[VideoMode] setMode - port: %s, mode: 1080p" % config_port)
 									resolutionlabel["restxt"].setText(_("Video mode: 1080p"))
 							if (write_mode == "2160p24") or (write_mode == "2160p30") or (write_mode == "2160p60"):
 								for x in values:
@@ -1064,25 +1065,25 @@
 											f.write(x)
 											f.close()
 											changeResolution = True
-										except Exception, e:
+										except Exception as e:
 											print("[VideoMode] write_mode exception:" + str(e))
 								if not changeResolution:
-									print "[VideoMode] setMode - port: %s, mode: 2160p is also not available" % config_port
+									print("[VideoMode] setMode - port: %s, mode: 2160p is also not available" % config_port)
 									resolutionlabel["restxt"].setText(_("Video mode: 2160p also not available"))
 								else:
-									print "[VideoMode] setMode - port: %s, mode: 2160p" % config_port
+									print("[VideoMode] setMode - port: %s, mode: 2160p" % config_port)
 									resolutionlabel["restxt"].setText(_("Video mode: 2160p"))
 						else:
 							resolutionlabel["restxt"].setText(_("Video mode: %s") % write_mode)
-							print "[VideoMode] setMode - port: %s, mode: %s (autoresTyp: '%s')" % (config_port, write_mode, autorestyp)
+							print("[VideoMode] setMode - port: %s, mode: %s (autoresTyp: '%s')" % (config_port, write_mode, autorestyp))
 						if config.av.autores_label_timeout.value != '0':
 							resolutionlabel.show()
 						vf.close()
-				except Exception, e:
+				except Exception as e:
 					print("[VideoMode] read videomode_choices exception:" + str(e))
 			elif write_mode and current_mode != write_mode:
 				# the resolution remained stuck at a wrong setting after streaming when self.bufferfull was False (should be fixed now after adding BufferInfoStop)
-				print "[VideoMode] not changing from",current_mode,"to",write_mode,"as self.bufferfull is",self.bufferfull
+				print("[VideoMode] not changing from", current_mode, "to", write_mode, "as self.bufferfull is", self.bufferfull)
 
 		if write_mode and write_mode != current_mode or self.firstrun:
 			iAVSwitch.setAspect(config.av.aspect)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/VideoWizard.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/VideoWizard.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/VideoWizard.py	2020-06-21 10:16:12.731444037 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/VideoWizard.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Wizard import WizardSummary
 from Screens.WizardLanguage import WizardLanguage
 from Screens.Rc import Rc
@@ -113,20 +114,20 @@
 				if descr == 'Scart' and has_jack and not has_scart:
 					descr = 'Jack'
 				if port != "DVI-PC":
-					list.append((descr,port))
+					list.append((descr, port))
 		list.sort(key = lambda x: x[0])
-		print "listInputChannels:", list
+		print("listInputChannels:", list)
 		return list
 
 	def inputSelectionMade(self, index):
-		print "inputSelectionMade:", index
+		print("inputSelectionMade:", index)
 		self.port = index
 		self.inputSelect(index)
 
 	def inputSelectionMoved(self):
 		hw_type = HardwareInfo().get_device_name()
 		has_hdmi = HardwareInfo().has_hdmi()
-		print "input selection moved:", self.selection
+		print("input selection moved:", self.selection)
 		self.inputSelect(self.selection)
 		if self["portpic"].instance is not None:
 			picname = self.selection
@@ -139,9 +140,9 @@
 			self["portpic"].instance.setPixmapFromFile(resolveFilename(SCOPE_ACTIVE_SKIN, "icons/" + picname + ".png"))
 
 	def inputSelect(self, port):
-		print "inputSelect:", port
+		print("inputSelect:", port)
 		modeList = self.hw.getModeList(self.selection)
-		print "modeList:", modeList
+		print("modeList:", modeList)
 		self.port = port
 		if len(modeList) > 0:
 			ratesList = self.listRates(modeList[0][0])
@@ -149,25 +150,25 @@
 
 	def listModes(self):
 		list = []
-		print "modes for port", self.port
+		print("modes for port", self.port)
 		for mode in self.hw.getModeList(self.port):
 			#if mode[0] != "PC":
 				list.append((mode[0], mode[0]))
-		print "modeslist:", list
+		print("modeslist:", list)
 		return list
 
 	def modeSelectionMade(self, index):
-		print "modeSelectionMade:", index
+		print("modeSelectionMade:", index)
 		self.mode = index
 		self.modeSelect(index)
 
 	def modeSelectionMoved(self):
-		print "mode selection moved:", self.selection
+		print("mode selection moved:", self.selection)
 		self.modeSelect(self.selection)
 
 	def modeSelect(self, mode):
 		ratesList = self.listRates(mode)
-		print "ratesList:", ratesList
+		print("ratesList:", ratesList)
 		if self.port == "HDMI" and mode in ("720p", "1080i", "1080p"):
 			self.rate = "multi"
 			self.hw.setMode(port = self.port, mode = mode, rate = "multi")
@@ -178,15 +179,15 @@
 		if querymode is None:
 			querymode = self.mode
 		list = []
-		print "modes for port", self.port, "and mode", querymode
+		print("modes for port", self.port, "and mode", querymode)
 		for mode in self.hw.getModeList(self.port):
-			print mode
+			print(mode)
 			if mode[0] == querymode:
 				for rate in mode[1]:
 					if rate in ("auto") and not SystemInfo["have24hz"]:
 						continue
 					if self.port == "DVI-PC":
-						print "rate:", rate
+						print("rate:", rate)
 						if rate == "640x480":
 							list.insert(0, (rate, rate))
 							continue
@@ -194,12 +195,12 @@
 		return list
 
 	def rateSelectionMade(self, index):
-		print "rateSelectionMade:", index
+		print("rateSelectionMade:", index)
 		self.rate = index
 		self.rateSelect(index)
 
 	def rateSelectionMoved(self):
-		print "rate selection moved:", self.selection
+		print("rate selection moved:", self.selection)
 		self.rateSelect(self.selection)
 
 	def rateSelect(self, rate):
@@ -208,14 +209,14 @@
 	def showTestCard(self, selection = None):
 		if selection is None:
 			selection = self.selection
-		print "set config.misc.showtestcard to", {'yes': True, 'no': False}[selection]
+		print("set config.misc.showtestcard to", {'yes': True, 'no': False}[selection])
 		if selection == "yes":
 			config.misc.showtestcard.value = True
 		else:
 			config.misc.showtestcard.value = False
 
 	def keyNumberGlobal(self, number):
-		if number in (1,2,3):
+		if number in (1, 2, 3):
 			if number == 1:
 				self.hw.saveMode("HDMI", "720p", "multi")
 			elif number == 2:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/VirtualKeyBoard.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/VirtualKeyBoard.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/VirtualKeyBoard.py	2020-06-21 10:16:12.731444037 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/VirtualKeyBoard.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,6 +1,8 @@
+from __future__ import division
 from copy import copy, deepcopy
 
 from enigma import BT_SCALE, RT_HALIGN_CENTER, RT_HALIGN_LEFT, RT_HALIGN_RIGHT, RT_VALIGN_BOTTOM, RT_VALIGN_CENTER, RT_VALIGN_TOP, eListboxPythonMultiContent, getPrevAsciiCode, gFont
+import six
 
 from skin import fonts, parameters
 from Components.ActionMap import HelpableNumberActionMap
@@ -8,7 +10,7 @@
 from Components.Label import Label
 from Components.Language import language
 from Components.MenuList import MenuList
-from Components.MultiContent import MultiContentEntryText, MultiContentEntryPixmapAlphaBlend
+from Components.MultiContent import MultiContentEntryText, MultiContentEntryPixmapAlphaTest
 from Components.Sources.StaticText import StaticText
 from Screens.ChoiceBox import ChoiceBox
 from Screens.HelpMenu import HelpableScreen
@@ -36,7 +38,7 @@
 		MenuList.__init__(self, list, enableWrapAround, eListboxPythonMultiContent)
 		font = fonts.get("VirtualKeyBoard", ("Regular", 28, 45))
 		self.l.setFont(0, gFont(font[0], font[1]))
-		self.l.setFont(1, gFont(font[0], font[1] * 5 / 9))  # Smaller font is 56% the height of bigger font
+		self.l.setFont(1, gFont(font[0], font[1] * 5 // 9))  # Smaller font is 56% the height of bigger font
 		self.l.setItemHeight(font[2])
 
 
@@ -522,7 +524,7 @@
 		}, -2, description=_("Virtual KeyBoard Functions"))
 		self.lang = language.getLanguage()
 		self["prompt"] = Label(prompt)
-		self["text"] = Input(text=text, maxSize=maxSize, visible_width=visible_width, type=type, currPos=len(text.decode("utf-8", "ignore")) if currPos is None else currPos, allMarked=allMarked)
+		self["text"] = Input(text=text, maxSize=maxSize, visible_width=visible_width, type=type, currPos=len(six.ensure_text(text, errors='ignore')) if currPos is None else currPos, allMarked=allMarked)
 		self["list"] = VirtualKeyBoardList([])
 		self["mode"] = Label(_("INS"))
 		self["locale"] = Label(_("Locale") + ": " + self.lang)
@@ -940,9 +942,9 @@
 		res = [keys]
 		text = []
 		offset = 14 - self.keyboardWidth  # 14 represents the maximum buttons per row as defined here and in the skin (14 x self.width).
-		x = self.width * offset / 2
+		x = self.width * offset // 2
 		if offset % 2:
-			x += self.width / 2
+			x += self.width // 2
 		xHighlight = x
 		prevKey = None
 		for key in keys:
@@ -953,26 +955,26 @@
 					x += self.width * width
 				else:
 					w = self.bg_l.size().width()
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(x, 0), size=(w, self.height), png=self.bg_l))
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(x, 0), size=(w, self.height), png=self.bg_l))
 					x += w
 					w = self.bg_m.size().width() + (self.width * (width - 1))
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(x, 0), size=(w, self.height), png=self.bg_m, flags=BT_SCALE))
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(x, 0), size=(w, self.height), png=self.bg_m, flags=BT_SCALE))
 					x += w
 					w = self.bg_r.size().width()
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(x, 0), size=(w, self.height), png=self.bg_r))
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(x, 0), size=(w, self.height), png=self.bg_r))
 					x += w
 				highlight = self.keyHighlights.get(key.upper(), (None, None, None))  # Check if the cell needs to be highlighted.
 				if highlight[0] is None or highlight[1] is None or highlight[2] is None:  # If available display the cell highlight.
 					xHighlight += self.width * width
 				else:
 					w = highlight[0].size().width()
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(xHighlight, 0), size=(w, self.height), png=highlight[0]))
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(xHighlight, 0), size=(w, self.height), png=highlight[0]))
 					xHighlight += w
 					w = highlight[1].size().width() + (self.width * (width - 1))
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(xHighlight, 0), size=(w, self.height), png=highlight[1], flags=BT_SCALE))
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(xHighlight, 0), size=(w, self.height), png=highlight[1], flags=BT_SCALE))
 					xHighlight += w
 					w = highlight[2].size().width()
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(xHighlight, 0), size=(w, self.height), png=highlight[2]))
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(xHighlight, 0), size=(w, self.height), png=highlight[2]))
 					xHighlight += w
 				if self.alignment[0] == 1:  # Determine the cell alignment.
 					alignH = RT_HALIGN_LEFT
@@ -1000,22 +1002,22 @@
 					left = xData
 					wImage = image.size().width()
 					if alignH == RT_HALIGN_CENTER:
-						left += (w - wImage) / 2
+						left += (w - wImage) // 2
 					elif alignH == RT_HALIGN_RIGHT:
 						left += w - wImage
 					top = self.padding[1]
 					hImage = image.size().height()
 					if alignV == RT_VALIGN_CENTER:
-						top += (h - hImage) / 2
+						top += (h - hImage) // 2
 					elif alignV == RT_VALIGN_BOTTOM:
 						top += h - hImage
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(left, top), size=(wImage, hImage), png=image))
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(left, top), size=(wImage, hImage), png=image))
 					# print "[VirtualKeyBoard] DEBUG: Left=%d, Top=%d, Width=%d, Height=%d, Image Width=%d, Image Height=%d" % (left, top, w, h, wImage, hImage)
 				else:  # Display the cell text.
 					if len(key) > 1:  # NOTE: UTF8 / Unicode glyphs only count as one character here.
-						text.append(MultiContentEntryText(pos=(xData, self.padding[1]), size=(w, h), font=1, flags=alignH | alignV, text=key.encode("utf-8"), color=self.shiftColors[self.shiftLevel]))
+						text.append(MultiContentEntryText(pos=(xData, self.padding[1]), size=(w, h), font=1, flags=alignH | alignV, text=six.ensure_str(key), color=self.shiftColors[self.shiftLevel]))
 					else:
-						text.append(MultiContentEntryText(pos=(xData, self.padding[1]), size=(w, h), font=0, flags=alignH | alignV, text=key.encode("utf-8"), color=self.shiftColors[self.shiftLevel]))
+						text.append(MultiContentEntryText(pos=(xData, self.padding[1]), size=(w, h), font=0, flags=alignH | alignV, text=six.ensure_str(key), color=self.shiftColors[self.shiftLevel]))
 			prevKey = key
 			self.index += 1
 		return res + text
@@ -1024,26 +1026,26 @@
 		if self.sel_l is None or self.sel_m is None or self.sel_r is None:
 			return
 		if self.previousSelectedKey is not None:
-			del self.list[self.previousSelectedKey / self.keyboardWidth][-3:]
+			del self.list[self.previousSelectedKey // self.keyboardWidth][-3:]
 		if self.selectedKey > self.maxKey:
 			self.selectedKey = self.maxKey
 		start, width = self.findStartAndWidth(self.selectedKey)
 		x = start * self.width
 		w = self.sel_l.size().width()
-		self.list[self.selectedKey / self.keyboardWidth].append(MultiContentEntryPixmapAlphaBlend(pos=(x, 0), size=(w, self.height), png=self.sel_l))
+		self.list[self.selectedKey // self.keyboardWidth].append(MultiContentEntryPixmapAlphaTest(pos=(x, 0), size=(w, self.height), png=self.sel_l))
 		x += w
 		w = self.sel_m.size().width() + (self.width * (width - 1))
-		self.list[self.selectedKey / self.keyboardWidth].append(MultiContentEntryPixmapAlphaBlend(pos=(x, 0), size=(w, self.height), png=self.sel_m, flags=BT_SCALE))
+		self.list[self.selectedKey // self.keyboardWidth].append(MultiContentEntryPixmapAlphaTest(pos=(x, 0), size=(w, self.height), png=self.sel_m, flags=BT_SCALE))
 		x += w
 		w = self.sel_r.size().width()
-		self.list[self.selectedKey / self.keyboardWidth].append(MultiContentEntryPixmapAlphaBlend(pos=(x, 0), size=(w, self.height), png=self.sel_r))
+		self.list[self.selectedKey // self.keyboardWidth].append(MultiContentEntryPixmapAlphaTest(pos=(x, 0), size=(w, self.height), png=self.sel_r))
 		self.previousSelectedKey = self.selectedKey
 		self["list"].setList(self.list)
 
 	def findStartAndWidth(self, key):
 		if key > self.maxKey:
 			key = self.maxKey
-		row = key / self.keyboardWidth
+		row = key // self.keyboardWidth
 		key = key % self.keyboardWidth
 		start = key
 		while start:
@@ -1061,10 +1063,10 @@
 
 	def processSelect(self):
 		self.smsChar = None
-		text = self.keyList[self.shiftLevel][self.selectedKey / self.keyboardWidth][self.selectedKey % self.keyboardWidth].encode("UTF-8")
+		text = six.ensure_str(self.keyList[self.shiftLevel][self.selectedKey // self.keyboardWidth][self.selectedKey % self.keyboardWidth])
 		cmd = self.cmds.get(text.upper(), None)
 		if cmd is None:
-			self['text'].char(text.encode('UTF-8'))
+			self['text'].char(six.ensure_str(text))
 		else:
 			exec(cmd)
 		if text not in (u"SHIFT", u"SHIFTICON") and self.shiftHold != -1:
@@ -1078,7 +1080,7 @@
 
 	def localeMenu(self):
 		languages = []
-		for locale, data in self.locales.iteritems():
+		for locale, data in six.iteritems(self.locales):
 			languages.append((data[0] + "  -  " + data[1] + "  (" + locale + ")", locale))
 		languages = sorted(languages)
 		index = 0
@@ -1150,7 +1152,7 @@
 		self.smsChar = None
 		self.selectedKey -= self.keyboardWidth
 		if self.selectedKey < 0:
-			self.selectedKey = self.maxKey / self.keyboardWidth * self.keyboardWidth + self.selectedKey % self.keyboardWidth
+			self.selectedKey = self.maxKey // self.keyboardWidth * self.keyboardWidth + self.selectedKey % self.keyboardWidth
 			if self.selectedKey > self.maxKey:
 				self.selectedKey -= self.keyboardWidth
 		self.markSelectedKey()
@@ -1160,7 +1162,7 @@
 		start, width = self.findStartAndWidth(self.selectedKey)
 		if width > 1:
 			width = self.selectedKey % self.keyboardWidth - start + 1
-		self.selectedKey = self.selectedKey / self.keyboardWidth * self.keyboardWidth + (self.selectedKey + self.keyboardWidth - width) % self.keyboardWidth
+		self.selectedKey = self.selectedKey // self.keyboardWidth * self.keyboardWidth + (self.selectedKey + self.keyboardWidth - width) % self.keyboardWidth
 		if self.selectedKey > self.maxKey:
 			self.selectedKey = self.maxKey
 		self.markSelectedKey()
@@ -1170,9 +1172,9 @@
 		start, width = self.findStartAndWidth(self.selectedKey)
 		if width > 1:
 			width = start + width - self.selectedKey % self.keyboardWidth
-		self.selectedKey = self.selectedKey / self.keyboardWidth * self.keyboardWidth + (self.selectedKey + width) % self.keyboardWidth
+		self.selectedKey = self.selectedKey // self.keyboardWidth * self.keyboardWidth + (self.selectedKey + width) % self.keyboardWidth
 		if self.selectedKey > self.maxKey:
-			self.selectedKey = self.selectedKey / self.keyboardWidth * self.keyboardWidth
+			self.selectedKey = self.selectedKey // self.keyboardWidth * self.keyboardWidth
 		self.markSelectedKey()
 
 	def down(self):
@@ -1188,7 +1190,7 @@
 
 	def keyGotAscii(self):
 		self.smsChar = None
-		if self.selectAsciiKey(str(unichr(getPrevAsciiCode()).encode("utf-8"))):
+		if six.ensure_str(self.selectAsciiKey(str(six.unichr(getPrevAsciiCode())))):
 			self.processSelect()
 
 	def selectAsciiKey(self, char):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Volume.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Volume.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Volume.py	2020-06-21 10:16:12.731444037 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Volume.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Components.Label import Label
 from Components.VolumeBar import VolumeBar
 from Screens.Screen import Screen
@@ -10,6 +11,6 @@
 		self["VolumeText"] = Label("")
 
 	def setValue(self, vol):
-		print "[Volume] Volume set to %d." % vol
+		print("[Volume] Volume set to %d." % vol)
 		self.volumeBar.setValue(vol)
 		self["VolumeText"].text = str(vol)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Wizard.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Wizard.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/Wizard.py	2020-06-21 10:16:12.731444037 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/Wizard.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from boxbranding import getMachineBrand, getMachineName
 from xml.sax import make_parser
 from xml.sax.handler import ContentHandler
@@ -33,7 +34,7 @@
 	instance = None
 
 	def createSummary(self):
-		print "WizardCreateSummary"
+		print("WizardCreateSummary")
 		return WizardSummary
 
 	class parseWizard(ContentHandler):
@@ -48,44 +49,44 @@
 			self.currContent = name
 			if name == "step":
 				self.lastStep += 1
-				if attrs.has_key('id'):
+				if 'id' in attrs:
 					id = str(attrs.get('id'))
 				else:
 					id = ""
 				#print "id:", id
-				if attrs.has_key('nextstep'):
+				if 'nextstep' in attrs:
 					nextstep = str(attrs.get('nextstep'))
 				else:
 					nextstep = None
-				if attrs.has_key('timeout'):
+				if 'timeout' in attrs:
 					timeout = int(attrs.get('timeout'))
 				else:
 					timeout = None
-				if attrs.has_key('timeoutaction'):
+				if 'timeoutaction' in attrs:
 					timeoutaction = str(attrs.get('timeoutaction'))
 				else:
 					timeoutaction = 'nextpage'
 
-				if attrs.has_key('timeoutstep'):
+				if 'timeoutstep' in attrs:
 					timeoutstep = str(attrs.get('timeoutstep'))
 				else:
 					timeoutstep = ''
 				self.wizard[self.lastStep] = {"id": id, "condition": "", "text": "", "timeout": timeout, "timeoutaction": timeoutaction, "timeoutstep": timeoutstep, "list": [], "config": {"screen": None, "args": None, "type": "" }, "code": "", "codeafter": "", "code_async": "", "codeafter_async": "", "nextstep": nextstep}
-				if attrs.has_key('laststep'):
+				if 'laststep' in attrs:
 					self.wizard[self.lastStep]["laststep"] = str(attrs.get('laststep'))
 			elif name == "text":
 				self.wizard[self.lastStep]["text"] = str(attrs.get('value')).replace("\\n", "\n")
 			elif name == "displaytext":
 				self.wizard[self.lastStep]["displaytext"] = str(attrs.get('value')).replace("\\n", "\n")
 			elif name == "list":
-				if attrs.has_key('type'):
+				if 'type' in attrs:
 					if attrs["type"] == "dynamic":
 						self.wizard[self.lastStep]["dynamiclist"] = attrs.get("source")
 					#self.wizard[self.lastStep]["list"].append(("Hallo", "test"))
-				if attrs.has_key("evaluation"):
+				if "evaluation" in attrs:
 					#print "evaluation"
 					self.wizard[self.lastStep]["listevaluation"] = attrs.get("evaluation")
-				if attrs.has_key("onselect"):
+				if "onselect" in attrs:
 					self.wizard[self.lastStep]["onselect"] = attrs.get("onselect")
 			elif name == "listentry":
 				self.wizard[self.lastStep]["list"].append((str(attrs.get('caption')), str(attrs.get('step'))))
@@ -94,21 +95,21 @@
 				self.wizard[self.lastStep]["config"]["type"] = type
 				if type == "ConfigList" or type == "standalone":
 					try:
-						exec "from Screens." + str(attrs.get('module')) + " import *"
+						exec("from Screens." + str(attrs.get('module')) + " import *")
 					except:
-						exec "from " + str(attrs.get('module')) + " import *"
+						exec("from " + str(attrs.get('module')) + " import *")
 
 					self.wizard[self.lastStep]["config"]["screen"] = eval(str(attrs.get('screen')))
-					if attrs.has_key('args'):
+					if 'args' in attrs:
 						#print "has args"
 						self.wizard[self.lastStep]["config"]["args"] = str(attrs.get('args'))
 				elif type == "dynamic":
 					self.wizard[self.lastStep]["config"]["source"] = str(attrs.get('source'))
-					if attrs.has_key('evaluation'):
+					if 'evaluation' in attrs:
 						self.wizard[self.lastStep]["config"]["evaluation"] = str(attrs.get('evaluation'))
 			elif name == "code":
-				self.async_code = attrs.has_key('async') and str(attrs.get('async')) == "yes"
-				if attrs.has_key('pos') and str(attrs.get('pos')) == "after":
+				self.async_code = 'async' in attrs and str(attrs.get('async')) == "yes"
+				if 'pos' in attrs and str(attrs.get('pos')) == "after":
 					self.codeafter = True
 				else:
 					self.codeafter = False
@@ -310,9 +311,9 @@
 	def getStepWithID(self, id):
 # 		print "getStepWithID:", id
 		count = 0
-		for x in self.wizard.keys():
+		for x in list(self.wizard.keys()):
 			if self.wizard[x]["id"] == id:
-				print "result:", count
+				print("result:", count)
 				return count
 			count += 1
 # 		print "result: nothing"
@@ -333,7 +334,7 @@
 			if len(self.wizard[currStep]["evaluatedlist"]) > 0:
 # 				print "current:", self["list"].current
 				nextStep = self["list"].current[1]
-				if self.wizard[currStep].has_key("listevaluation"):
+				if "listevaluation" in self.wizard[currStep]:
 					exec("self." + self.wizard[self.currStep]["listevaluation"] + "('" + nextStep + "')")
 				else:
 					self.currStep = self.getStepWithID(nextStep)
@@ -413,8 +414,8 @@
 			self.handleInputHelpers()
 		elif self.showList and len(self.wizard[self.currStep]["evaluatedlist"]) > 0:
 			self["list"].selectPrevious()
-			if self.wizard[self.currStep].has_key("onselect"):
-				print "current:", self["list"].current
+			if "onselect" in self.wizard[self.currStep]:
+				print("current:", self["list"].current)
 				self.selection = self["list"].current[-1]
 				#self.selection = self.wizard[self.currStep]["evaluatedlist"][self["list"].l.getCurrentSelectionIndex()][1]
 				exec("self." + self.wizard[self.currStep]["onselect"] + "()")
@@ -429,7 +430,7 @@
 		elif self.showList and len(self.wizard[self.currStep]["evaluatedlist"]) > 0:
 			#self["list"].instance.moveSelection(self["list"].instance.moveDown)
 			self["list"].selectNext()
-			if self.wizard[self.currStep].has_key("onselect"):
+			if "onselect" in self.wizard[self.currStep]:
 # 				print "current:", self["list"].current
 				#self.selection = self.wizard[self.currStep]["evaluatedlist"][self["list"].l.getCurrentSelectionIndex()][1]
 				#exec("self." + self.wizard[self.currStep]["onselect"] + "()")
@@ -476,9 +477,9 @@
 		if self.showConfig and self.wizard[self.currStep]["config"]["screen"] is not None:
 			self["config"].instance.moveSelection(self["config"].instance.moveUp)
 		elif self.showList and len(self.wizard[self.currStep]["evaluatedlist"]) > 0:
-			if self.wizard[self.currStep].has_key("onselect"):
+			if "onselect" in self.wizard[self.currStep]:
 				self.selection = self["list"].current[-1]
-				print "self.selection:", self.selection
+				print("self.selection:", self.selection)
 				exec("self." + self.wizard[self.currStep]["onselect"] + "()")
 
 	def resetCounter(self):
@@ -487,12 +488,12 @@
 	def runCode(self, code):
 		if code != "":
 # 			print "code", code
-			exec code
+			exec(code)
 			return True
 		return False
 
 	def getTranslation(self, text):
-		return _(text).replace("%s %s","%s %s" % (getMachineBrand(), getMachineName()))
+		return _(text).replace("%s %s", "%s %s" % (getMachineBrand(), getMachineName()))
 
 	def updateText(self, firstset = False):
 		text = self.getTranslation(self.wizard[self.currStep]["text"])
@@ -525,7 +526,7 @@
 		exec (self.wizard[self.currStep]["condition"])
 		if not self.condition:
 # 			print "keys*******************:", self.wizard[self.currStep].keys()
-			if self.wizard[self.currStep].has_key("laststep"): # exit wizard, if condition of laststep doesn't hold
+			if "laststep" in self.wizard[self.currStep]: # exit wizard, if condition of laststep doesn't hold
 				self.markDone()
 				self.exit()
 				return
@@ -534,7 +535,7 @@
 				self.updateValues()
 			self.first = True
 		else:
-			if self.wizard[self.currStep].has_key("displaytext"):
+			if "displaytext" in self.wizard[self.currStep]:
 				displaytext = self.getTranslation(self.wizard[self.currStep]["displaytext"])
 # 				print "set LCD text"
 				for x in self.lcdCallbacks:
@@ -554,7 +555,7 @@
 
 # 			print "wizard text", self.getTranslation(self.wizard[self.currStep]["text"])
 			self.updateText(firstset = True)
-			if self.wizard[self.currStep].has_key("displaytext"):
+			if "displaytext" in self.wizard[self.currStep]:
 				displaytext = self.getTranslation(self.wizard[self.currStep]["displaytext"])
 # 				print "set LCD text"
 				for x in self.lcdCallbacks:
@@ -588,13 +589,13 @@
 					rootrenderer = renderer
 					while renderer.source is not None:
 						if renderer.source is self["list"]:
-							print "setZPosition"
+							print("setZPosition")
 							rootrenderer.instance.setZPosition(1)
 						renderer = renderer.source
 
 				#self["list"].instance.setZPosition(1)
 				self.list = []
-				if self.wizard[self.currStep].has_key("dynamiclist"):
+				if "dynamiclist" in self.wizard[self.currStep]:
 # 					print "dynamic list, calling",  self.wizard[self.currStep]["dynamiclist"]
 					newlist = eval("self." + self.wizard[self.currStep]["dynamiclist"] + "()")
 					#self.wizard[self.currStep]["evaluatedlist"] = []
@@ -613,19 +614,19 @@
 				self["list"].hide()
 
 			if self.showConfig:
-				print "showing config"
+				print("showing config")
 # 				self["config"].instance.setZPosition(1)
 				if self.wizard[self.currStep]["config"]["type"] == "dynamic":
-					print "config type is dynamic"
+					print("config type is dynamic")
 					self["config"].instance.setZPosition(2)
 					self["config"].l.setList(eval("self." + self.wizard[self.currStep]["config"]["source"])())
 				elif self.wizard[self.currStep]["config"]["screen"] is not None:
 					if self.wizard[self.currStep]["config"]["type"] == "standalone":
-						print "Type is standalone"
+						print("Type is standalone")
 						self.session.openWithCallback(self.ok, self.wizard[self.currStep]["config"]["screen"])
 					else:
 						self["config"].instance.setZPosition(2)
-						print "wizard screen", self.wizard[self.currStep]["config"]["screen"]
+						print("wizard screen", self.wizard[self.currStep]["config"]["screen"])
 						if self.wizard[self.currStep]["config"]["args"] is None:
 							self.configInstance = self.session.instantiateDialog(self.wizard[self.currStep]["config"]["screen"])
 						else:
@@ -634,17 +635,17 @@
 						self["config"].l.setList(self.configInstance["config"].list)
 						callbacks = self.configInstance["config"].onSelectionChanged
 						self.configInstance["config"].destroy()
-						print "clearConfigList", self.configInstance["config"], self["config"]
+						print("clearConfigList", self.configInstance["config"], self["config"])
 						self.configInstance["config"] = self["config"]
 						self.configInstance["config"].onSelectionChanged = callbacks
-						print "clearConfigList", self.configInstance["config"], self["config"]
+						print("clearConfigList", self.configInstance["config"], self["config"])
 				else:
 					self["config"].l.setList([])
 					self.handleInputHelpers()
 
 
 			else:
-				if self.has_key("config"):
+				if "config" in self:
 					self["config"].hide()
 
 	def timeoutCounterFired(self):
@@ -662,20 +663,20 @@
 	def handleInputHelpers(self):
 		if self["config"].getCurrent() is not None:
 			if isinstance(self["config"].getCurrent()[1], ConfigText) or isinstance(self["config"].getCurrent()[1], ConfigPassword):
-				if self.has_key("VKeyIcon"):
+				if "VKeyIcon" in self:
 					self["VirtualKB"].setEnabled(True)
 					self["VKeyIcon"].boolean = True
-				if self.has_key("HelpWindow"):
+				if "HelpWindow" in self:
 					if self["config"].getCurrent()[1].help_window.instance is not None:
 						helpwindowpos = self["HelpWindow"].getPosition()
 						from enigma import ePoint
-						self["config"].getCurrent()[1].help_window.instance.move(ePoint(helpwindowpos[0],helpwindowpos[1]))
+						self["config"].getCurrent()[1].help_window.instance.move(ePoint(helpwindowpos[0], helpwindowpos[1]))
 			else:
-				if self.has_key("VKeyIcon"):
+				if "VKeyIcon" in self:
 					self["VirtualKB"].setEnabled(False)
 					self["VKeyIcon"].boolean = False
 		else:
-			if self.has_key("VKeyIcon"):
+			if "VKeyIcon" in self:
 				self["VirtualKB"].setEnabled(False)
 				self["VKeyIcon"].boolean = False
 
@@ -687,11 +688,11 @@
 	def VirtualKeyBoardCallback(self, callback = None):
 		if callback is not None and len(callback):
 			if isinstance(self["config"].getCurrent()[1], ConfigText) or isinstance(self["config"].getCurrent()[1], ConfigPassword):
-				if self.has_key("HelpWindow"):
+				if "HelpWindow" in self:
 					if self["config"].getCurrent()[1].help_window.instance is not None:
 						helpwindowpos = self["HelpWindow"].getPosition()
 						from enigma import ePoint
-						self["config"].getCurrent()[1].help_window.instance.move(ePoint(helpwindowpos[0],helpwindowpos[1]))
+						self["config"].getCurrent()[1].help_window.instance.move(ePoint(helpwindowpos[0], helpwindowpos[1]))
 			self["config"].instance.moveSelectionTo(self.currentConfigIndex)
 			self["config"].setCurrentIndex(self.currentConfigIndex)
 			self["config"].getCurrent()[1].setValue(callback)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/WizardLanguage.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/WizardLanguage.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Screens/WizardLanguage.py	2020-06-21 10:16:12.731444037 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Screens/WizardLanguage.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Screens.Wizard import Wizard
 from Components.Label import Label
 from Components.Language import language
@@ -14,7 +15,7 @@
 		self.languageSelect()
 
 	def languageSelect(self):
-		print "languageSelect"
+		print("languageSelect")
 		newlanguage = language.getActiveLanguageIndex() + 1
 		if newlanguage >= len(language.getLanguageList()):
 			newlanguage = 0
@@ -23,11 +24,11 @@
 		self.updateTexts()
 
 	def updateLanguageDescription(self):
-		print language.getLanguageList()[language.getActiveLanguageIndex()]
+		print(language.getLanguageList()[language.getActiveLanguageIndex()])
 		self["languagetext"].setText(self.getTranslation(language.getLanguageList()[language.getActiveLanguageIndex()][1][0]))
 
 	def updateTexts(self):
-		print "updateTexts"
+		print("updateTexts")
 		self.updateText(firstset = True)
 		self.updateValues()
 		self.updateLanguageDescription()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/BugHunting.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/BugHunting.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/BugHunting.py	2020-06-21 10:16:12.731444037 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/BugHunting.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import sys
 import inspect
 
@@ -6,7 +7,7 @@
 	if deep is None or deep == 0:
 		deep=1
 	frames = []
-	for x in range(2,3+deep):
+	for x in list(range(2, 3+deep)):
 		try:
 			frames.append(sys._getframe(x))
 		except:
@@ -21,20 +22,20 @@
 	if deep is None or deep == 0:
 		deep=1
 	frames = getFrames(abs(deep))
-	print "\033[36m%s:%s" %(frames[0].f_code.co_filename, frames[0].f_code.co_firstlineno),
+	print("\033[36m%s:%s" %(frames[0].f_code.co_filename, frames[0].f_code.co_firstlineno), end=' ')
 	if deep >= 0:
-		for x in range(0,len(frames)):
+		for x in list(range(0, len(frames))):
 			if not x:
-				print "\033[96m%s" %(frames[x].f_code.co_name),
+				print("\033[96m%s" %(frames[x].f_code.co_name), end=' ')
 			else:
-				print "\033[94m<-- \033[95m%s(%s:%s)" %(frames[x].f_code.co_name, frames[x].f_code.co_filename.split("/")[-1], frames[x].f_lineno),
+				print("\033[94m<-- \033[95m%s(%s:%s)" %(frames[x].f_code.co_name, frames[x].f_code.co_filename.split("/")[-1], frames[x].f_lineno), end=' ')
 	else:
-		for x in range(len(frames)-1,-1,-1):
+		for x in list(range(len(frames)-1, -1, -1)):
 			if not x:
-				print "\033[96m%s" %(frames[x].f_code.co_name),
+				print("\033[96m%s" %(frames[x].f_code.co_name), end=' ')
 			else:
-				print "\033[95m%s(%s:%s) \033[94m-->" %(frames[x].f_code.co_name, frames[x].f_code.co_filename.split("/")[-1], frames[x].f_lineno),
-	print "\033[0m"
+				print("\033[95m%s(%s:%s) \033[94m-->" %(frames[x].f_code.co_name, frames[x].f_code.co_filename.split("/")[-1], frames[x].f_lineno), end=' ')
+	print("\033[0m")
 	del frames
 
 def printCallSequenceRawData(deep=1):
@@ -42,11 +43,11 @@
 		deep=1
 	deep = abs(deep)
 	frames = getFrames(deep)
-	print "\033[36m%s:%s" %(frames[0].f_code.co_filename, frames[0].f_code.co_firstlineno),
-	for x in range(0,len(frames)):
+	print("\033[36m%s:%s" %(frames[0].f_code.co_filename, frames[0].f_code.co_firstlineno), end=' ')
+	for x in list(range(0, len(frames))):
 		if not x:
-			print "\033[96m%s \033[33m%s" %(frames[x].f_code.co_name, inspect.getargvalues(frames[x]))
+			print("\033[96m%s \033[33m%s" %(frames[x].f_code.co_name, inspect.getargvalues(frames[x])))
 		else:
-			print "\033[94m<-- \033[95m%s(%s:%s)\033[33m%s" %(frames[x].f_code.co_name, frames[x].f_code.co_filename.split("/")[-1], frames[x].f_lineno, inspect.getargvalues(frames[x]))
-	print "\033[0m",
+			print("\033[94m<-- \033[95m%s(%s:%s)\033[33m%s" %(frames[x].f_code.co_name, frames[x].f_code.co_filename.split("/")[-1], frames[x].f_lineno, inspect.getargvalues(frames[x])))
+	print("\033[0m", end=' ')
 	del frames
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/CIHelper.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/CIHelper.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/CIHelper.py	2020-06-21 10:16:12.731444037 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/CIHelper.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from xml.etree.cElementTree import parse
 from Tools.XMLTools import elementsWithTag, mergeText, stringToXML
 from enigma import eDVBCIInterfaces, eDVBCI_UI, eEnv, eServiceCenter, eServiceReference
@@ -5,6 +6,7 @@
 import NavigationInstance 
 
 import os
+import six
 
 class CIHelper:
 
@@ -22,7 +24,7 @@
 				Len = len(definitions)
 				return Len > 0 and definitions[Len-1].text or default
 
-			for ci in range(NUM_CI):
+			for ci in list(range(NUM_CI)):
 				filename = eEnv.resolve("${sysconfdir}/enigma2/ci") + str(ci) + ".xml"
 
 				if not os.path.exists(filename):
@@ -34,34 +36,34 @@
 					read_providers=[]
 					usingcaid=[]
 					for slot in tree.findall("slot"):
-						read_slot = getValue(slot.findall("id"), False).encode("UTF-8")
+						read_slot = six.ensure_str(getValue(slot.findall("id"), False))
 
 						for caid in slot.findall("caid"):
-							read_caid = caid.get("id").encode("UTF-8")
-							usingcaid.append(long(read_caid,16))
+							read_caid = six.ensure_str(caid.get("id"))
+							usingcaid.append(int(read_caid, 16))
 
 						for service in slot.findall("service"):
-							read_service_ref = service.get("ref").encode("UTF-8")
+							read_service_ref = six.ensure_str(service.get("ref"))
 							read_services.append (read_service_ref)
 
 						for provider in slot.findall("provider"):
-							read_provider_name = provider.get("name").encode("UTF-8")
-							read_provider_dvbname = provider.get("dvbnamespace").encode("UTF-8")
-							read_providers.append((read_provider_name,long(read_provider_dvbname,16)))
+							read_provider_name = six.ensure_str(provider.get("name"))
+							read_provider_dvbname = six.ensure_str(provider.get("dvbnamespace"))
+							read_providers.append((read_provider_name, int(read_provider_dvbname, 16)))
 
 						self.CI_ASSIGNMENT_LIST.append((int(read_slot), (read_services, read_providers, usingcaid)))
 				except:
-					print "[CI_ASSIGNMENT %d] error parsing xml..." % ci
+					print("[CI_ASSIGNMENT %d] error parsing xml..." % ci)
 
 			services = []
 			providers = []
 			for item in self.CI_ASSIGNMENT_LIST:
-				print "[CI_Activate] activate CI%d with following settings:" % item[0]
-				print item[1]
+				print("[CI_Activate] activate CI%d with following settings:" % item[0])
+				print(item[1])
 				try:
-					eDVBCIInterfaces.getInstance().setDescrambleRules(item[0],item[1])
+					eDVBCIInterfaces.getInstance().setDescrambleRules(item[0], item[1])
 				except:
-					print "[CI_Activate_Config_CI%d] error setting DescrambleRules..." %item[0]
+					print("[CI_Activate_Config_CI%d] error setting DescrambleRules..." %item[0])
 				for x in item[1][0]:
 					services.append(x)
 				for x in item[1][1]:
@@ -84,7 +86,7 @@
 		if len(providers):
 			serviceHandler = eServiceCenter.getInstance()
 			for x in providers:
-				refstr = '1:7:0:0:0:0:0:0:0:0:(provider == "%s") && (type == 1) || (type == 17) || (type == 22) || (type == 25) || (type == 31) || (type == 134) || (type == 195) ORDER BY name:%s' % (x,x)
+				refstr = '1:7:0:0:0:0:0:0:0:0:(provider == "%s") && (type == 1) || (type == 17) || (type == 22) || (type == 25) || (type == 31) || (type == 134) || (type == 195) ORDER BY name:%s' % (x, x)
 				myref = eServiceReference(refstr)
 				servicelist = serviceHandler.list(myref)
 				if not servicelist is None:
@@ -109,7 +111,7 @@
 			no_ci = eDVBCIInterfaces.getInstance().getNumOfSlots()
 			if no_ci > 0:
 				self.CI_MULTIDESCRAMBLE = False
-				for ci in range(no_ci):
+				for ci in list(range(no_ci)):
 					appname = eDVBCI_UI.getInstance().getAppName(ci)
 					if appname in self.CI_MULTIDESCRAMBLE_MODULES:
 						self.CI_MULTIDESCRAMBLE = True
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/CopyFiles.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/CopyFiles.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/CopyFiles.py	2020-06-21 10:16:12.731444037 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/CopyFiles.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from Components.Task import PythonTask, Task, Job, job_manager as JobManager
 from Tools.Directories import fileExists
 from enigma import eTimer
@@ -9,11 +10,11 @@
 		self.fileList = fileList
 
 	def work(self):
-		print "[DeleteFolderTask] files ", self.fileList
+		print("[DeleteFolderTask] files ", self.fileList)
 		errors = []
 		try:
 			rmtree(self.fileList)
-		except Exception, e:
+		except Exception as e:
 			errors.append(e)
 		if errors:
 			raise errors[0]
@@ -21,13 +22,13 @@
 class CopyFileJob(Job):
 	def __init__(self, srcfile, destfile, name):
 		Job.__init__(self, _("Copying files"))
-		cmdline = 'cp -Rf "%s" "%s"' % (srcfile,destfile)
+		cmdline = 'cp -Rf "%s" "%s"' % (srcfile, destfile)
 		AddFileProcessTask(self, cmdline, srcfile, destfile, name)
 
 class MoveFileJob(Job):
 	def __init__(self, srcfile, destfile, name):
 		Job.__init__(self, _("Moving files"))
-		cmdline = 'mv -f "%s" "%s"' % (srcfile,destfile)
+		cmdline = 'mv -f "%s" "%s"' % (srcfile, destfile)
 		AddFileProcessTask(self, cmdline, srcfile, destfile, name)
 
 class AddFileProcessTask(Task):
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Directories.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Directories.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Directories.py	2020-06-21 10:16:12.731444037 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Directories.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
 import errno
 import inspect
 import os
@@ -6,6 +7,7 @@
 from enigma import eEnv, getDesktop
 from re import compile
 from stat import S_IMODE
+import six
 
 pathExists = os.path.exists
 isMount = os.path.ismount  # Only used in OpenATV /lib/python/Plugins/SystemPlugins/NFIFlash/downloader.py.
@@ -79,13 +81,13 @@
 		if path_prefix:
 			base = os.path.join(path_prefix, base[2:])
 		else:
-			print "[Directories] Warning: resolveFilename called with base starting with '~/' but 'path_prefix' is None!"
+			print("[Directories] Warning: resolveFilename called with base starting with '~/' but 'path_prefix' is None!")
 	# Don't further resolve absolute paths.
 	if base.startswith("/"):
 		return os.path.normpath(base)
 	# If an invalid scope is specified log an error and return None.
 	if scope not in defaultPaths:
-		print "[Directories] Error: Invalid scope=%d provided to resolveFilename!" % scope
+		print("[Directories] Error: Invalid scope=%d provided to resolveFilename!" % scope)
 		return None
 	# Ensure that the defaultPaths directories that should exist do exist.
 	path, flag = defaultPaths.get(scope)
@@ -93,7 +95,7 @@
 		try:
 			os.makedirs(path)
 		except (IOError, OSError) as err:
-			print "[Directories] Error %d: Couldn't create directory '%s' (%s)" % (err.errno, path, err.strerror)
+			print("[Directories] Error %d: Couldn't create directory '%s' (%s)" % (err.errno, path, err.strerror))
 			return None
 	# Remove any suffix data and restore it at the end.
 	suffix = None
@@ -102,8 +104,8 @@
 		base = data[0]
 		suffix = data[1]
 	path = base
-	# If base is "" then set path to the scope.  Otherwise use the scope to resolve the base filename.
-	if base is "":
+	# If base == "" then set path to the scope.  Otherwise use the scope to resolve the base filename.
+	if base == "":
 		path, flags = defaultPaths.get(scope)
 		# If the scope is SCOPE_CURRENT_SKIN or SCOPE_ACTIVE_SKIN append the current skin to the scope path.
 		if scope in (SCOPE_CURRENT_SKIN, SCOPE_ACTIVE_SKIN):
@@ -217,7 +219,7 @@
 		rightPath = rightPath[:-1]
 	left = leftPath.split(os.sep)
 	right = rightPath.split(os.sep)
-	for segment in range(len(left)):
+	for segment in list(range(len(left))):
 		if left[segment] != right[segment]:
 			return False
 	return True
@@ -236,7 +238,7 @@
 					biggest = size
 					path = candidate[1]
 		except (IOError, OSError) as err:
-			print "[Directories] Error %d: Couldn't get free space for '%s' (%s)" % (err.errno, candidate[1], err.strerror)
+			print("[Directories] Error %d: Couldn't get free space for '%s' (%s)" % (err.errno, candidate[1], err.strerror))
 	return path
 
 def defaultRecordingLocation(candidate=None):
@@ -317,7 +319,10 @@
 	# but must not truncate in the middle of a multi-byte utf8 character!
 	# So convert the truncation to unicode and back, ignoring errors, the
 	# result will be valid utf8 and so xml parsing will be OK.
-	filename = unicode(filename[:247], "utf8", "ignore").encode("utf8", "ignore")
+	if six.PY2:
+		filename = six.ensure_str(six.text_type(filename[:247], "utf8", "ignore"), "utf8", "ignore")
+	else:
+		filename = filename[:247]
 	if dirname is not None:
 		if not dirname.startswith("/"):
 			dirname = os.path.join(defaultRecordingLocation(), dirname)
@@ -368,7 +373,7 @@
 				break
 			f2.write(buf)
 	except (IOError, OSError) as err:
-		print "[Directories] Error %d: Copying file '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror)
+		print("[Directories] Error %d: Copying file '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror))
 		status = -1
 	if f1 is not None:
 		f1.close()
@@ -379,13 +384,13 @@
 		try:
 			os.chmod(dst, S_IMODE(st.st_mode))
 		except (IOError, OSError) as err:
-			print "[Directories] Error %d: Setting modes from '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror)
+			print("[Directories] Error %d: Setting modes from '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror))
 		try:
 			os.utime(dst, (st.st_atime, st.st_mtime))
 		except (IOError, OSError) as err:
-			print "[Directories] Error %d: Setting times from '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror)
+			print("[Directories] Error %d: Setting times from '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror))
 	except (IOError, OSError) as err:
-		print "[Directories] Error %d: Obtaining stats from '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror)
+		print("[Directories] Error %d: Obtaining stats from '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror))
 	return status
 
 def copytree(src, dst, symlinks=False):
@@ -408,19 +413,19 @@
 			else:
 				copyfile(srcname, dstname)
 		except (IOError, OSError) as err:
-			print "[Directories] Error %d: Copying tree '%s' to '%s'! (%s)" % (err.errno, srcname, dstname, err.strerror)
+			print("[Directories] Error %d: Copying tree '%s' to '%s'! (%s)" % (err.errno, srcname, dstname, err.strerror))
 	try:
 		st = os.stat(src)
 		try:
 			os.chmod(dst, S_IMODE(st.st_mode))
 		except (IOError, OSError) as err:
-			print "[Directories] Error %d: Setting modes from '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror)
+			print("[Directories] Error %d: Setting modes from '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror))
 		try:
 			os.utime(dst, (st.st_atime, st.st_mtime))
 		except (IOError, OSError) as err:
-			print "[Directories] Error %d: Setting times from '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror)
+			print("[Directories] Error %d: Setting times from '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror))
 	except (IOError, OSError) as err:
-		print "[Directories] Error %d: Obtaining stats from '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror)
+		print("[Directories] Error %d: Obtaining stats from '%s' to '%s'! (%s)" % (err.errno, src, dst, err.strerror))
 
 # Renames files or if source and destination are on different devices moves them in background
 # input list of (source, destination)
@@ -434,22 +439,22 @@
 			movedList.append(item)
 	except (IOError, OSError) as err:
 		if err.errno == errno.EXDEV:  # Invalid cross-device link
-			print "[Directories] Warning: Cannot rename across devices, trying slower move."
+			print("[Directories] Warning: Cannot rename across devices, trying slower move.")
 			from Tools.CopyFiles import moveFiles as extMoveFiles  # OpenViX, OpenATV, Beyonwiz
 			# from Screens.CopyFiles import moveFiles as extMoveFiles  # OpenPLi
 			extMoveFiles(fileList, item[0])
-			print "[Directories] Moving files in background."
+			print("[Directories] Moving files in background.")
 		else:
-			print "[Directories] Error %d: Moving file '%s' to '%s'! (%s)" % (err.errno, item[0], item[1], err.strerror)
+			print("[Directories] Error %d: Moving file '%s' to '%s'! (%s)" % (err.errno, item[0], item[1], err.strerror))
 			errorFlag = True
 	if errorFlag:
-		print "[Directories] Reversing renamed files due to error."
+		print("[Directories] Reversing renamed files due to error.")
 		for item in movedList:
 			try:
 				os.rename(item[1], item[0])
 			except (IOError, OSError) as err:
-				print "[Directories] Error %d: Renaming '%s' to '%s'! (%s)" % (err.errno, item[1], item[0], err.strerror)
-				print "[Directories] Failed to undo move:", item
+				print("[Directories] Error %d: Renaming '%s' to '%s'! (%s)" % (err.errno, item[1], item[0], err.strerror))
+				print("[Directories] Failed to undo move:", item)
 
 def getSize(path, pattern=".*"):
 	path_size = 0
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Downloader.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Downloader.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Downloader.py	2020-06-21 10:16:12.731444037 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Downloader.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
 from boxbranding import getMachineBrand, getMachineName
 
 from twisted.web import client
@@ -12,8 +13,8 @@
 		self.deferred = defer.Deferred()
 
 	def noPage(self, reason):
-		if self.status == "304":
-			print reason.getErrorMessage()
+		if self.status == b"304":
+			print(reason.getErrorMessage())
 			client.HTTPDownloader.page(self, "")
 		else:
 			client.HTTPDownloader.noPage(self, reason)
@@ -21,16 +22,16 @@
 			self.error_callback(reason.getErrorMessage(), self.status)
 
 	def gotHeaders(self, headers):
-		if self.status == "200":
-			if headers.has_key("content-length"):
-				self.totalbytes = int(headers["content-length"][0])
+		if self.status == b"200":
+			if b"content-length" in headers:
+				self.totalbytes = int(headers[b"content-length"][0])
 			else:
 				self.totalbytes = 0
 			self.currentbytes = 0.0
 		return client.HTTPDownloader.gotHeaders(self, headers)
 
 	def pagePart(self, packet):
-		if self.status == "200":
+		if self.status == b"200":
 			self.currentbytes += len(packet)
 		if self.totalbytes and self.progress_callback:
 			self.progress_callback(self.currentbytes, self.totalbytes)
@@ -48,11 +49,14 @@
 			scheme, host, port, path = client._parse(url)
 		else:
 			# _URI class renamed to URI in 15.0.0
- 			try:
- 				from twisted.web.client import _URI as URI
- 			except ImportError:
- 				from twisted.web.client import URI
- 			uri = URI.fromBytes(url)
+			try:
+				from twisted.web.client import _URI as URI
+			except ImportError:
+				from twisted.web.client import URI
+			# twisted wants bytes
+			if isinstance(url, str):
+				url = url.encode("UTF-8")
+			uri = URI.fromBytes(url)
 			scheme = uri.scheme
 			host = uri.host
 			port = uri.port
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/FindPicon.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/FindPicon.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/FindPicon.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/FindPicon.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 ##
 ## Picon renderer by Gruffy .. some speedups by Ghost
 ##
@@ -54,7 +55,7 @@
 			break
 	pos = sname.rfind(':')
 	if pos != -1:
-		sname = sname[:pos].rstrip(':').replace(':','_')
+		sname = sname[:pos].rstrip(':').replace(':', '_')
 	pngname = nameCache.get(sname, "")
 	if pngname == "":
 		pngname = findFile(sname)
@@ -64,8 +65,8 @@
 			if service and service is not None:
 				info = serviceHandler.info(service)
 				if info and info is not None:
-					service_name = info.getName(service).replace('\xc2\x86','').replace('\xc2\x87', '').replace('/', '_')
-					print service_name
+					service_name = info.getName(service).replace('\xc2\x86', '').replace('\xc2\x87', '').replace('/', '_')
+					print(service_name)
 					pngname = findFile(service_name)
 		if pngname == "" and sname.startswith("4097_"):
 			pngname = findFile(sname.replace("4097_", "1_", 1))
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/FuzzyDate.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/FuzzyDate.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/FuzzyDate.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/FuzzyDate.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from time import localtime, time
 
 def FuzzyTime(t, inPast = False):
@@ -31,8 +32,8 @@
 
 if __name__ == "__main__":
 	def _(x): return x
-	print "now: %s %s" % FuzzyTime(time())
-	for i in range(1, 14):
-		print "+%2s day(s):  %s " % (i, FuzzyTime(time() + 86400 * i))
-	for i in range(1, 14):
-		print "-%2s day(s):  %s " % (i, FuzzyTime(time() - 86400 * i, True))
+	print("now: %s %s" % FuzzyTime(time()))
+	for i in list(range(1, 14)):
+		print("+%2s day(s):  %s " % (i, FuzzyTime(time() + 86400 * i)))
+	for i in list(range(1, 14)):
+		print("-%2s day(s):  %s " % (i, FuzzyTime(time() - 86400 * i, True)))
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Geolocation.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Geolocation.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Geolocation.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Geolocation.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,7 +1,11 @@
+from __future__ import print_function
 from json import loads
-from urllib2 import URLError, urlopen
 
 from Components.config import ConfigYesNo, config
+from six.moves.urllib.request import urlopen
+
+from six.moves.urllib.error import URLError
+
 
 # Data available from http://ip-api.com/json/:
 #
@@ -53,23 +57,23 @@
 					geolocation = loads(response)
 				status = geolocation.get("status", None)
 				if status and status == "success":
-					print "[Geolocation] Geolocation data initialised."
+					print("[Geolocation] Geolocation data initialised.")
 					config.misc.enableGeolocation.value = False
 					config.misc.enableGeolocation.save()
 				else:
-					print "[Geolocation] Error: Geolocation lookup returned a '%s' status!  Message '%s' returned." % (status, geolocation.get("message", None))
+					print("[Geolocation] Error: Geolocation lookup returned a '%s' status!  Message '%s' returned." % (status, geolocation.get("message", None)))
 			except URLError as err:
 				if hasattr(err, 'code'):
-					print "[Geolocation] Error: Geolocation data not available! (Code: %s)" % err.code
+					print("[Geolocation] Error: Geolocation data not available! (Code: %s)" % err.code)
 				if hasattr(err, 'reason'):
-					print "[Geolocation] Error: Geolocation data not available! (Reason: %s)" % err.reason
+					print("[Geolocation] Error: Geolocation data not available! (Reason: %s)" % err.reason)
 			except ValueError:
-				print "[Geolocation] Error: Geolocation data returned can not be processed!"
+				print("[Geolocation] Error: Geolocation data returned can not be processed!")
 		else:
-			print "[Geolocation] Note: Geolocation has already been run for this boot."
+			print("[Geolocation] Note: Geolocation has already been run for this boot.")
 	else:
 		geolocation = {}
-		print "[Geolocation] Warning: Geolocation has been disabled by user configuration!"
+		print("[Geolocation] Warning: Geolocation has been disabled by user configuration!")
 
 def RefreshGeolocation():
 	global geolocation
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/GetEcmInfo.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/GetEcmInfo.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/GetEcmInfo.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/GetEcmInfo.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,8 +1,9 @@
 import os
 import time
+import six
 
 ECM_INFO = '/tmp/ecm.info'
-EMPTY_ECM_INFO = '','0','0','0'
+EMPTY_ECM_INFO = '', '0', '0', '0'
 
 old_ecm_time = time.time()
 info = {}
@@ -23,14 +24,17 @@
 			info = {}
 			ecm = ''
 		if ecm_time != old_ecm_time:
-			oecmi1 = info.get('ecminterval1','')
-			oecmi0 = info.get('ecminterval0','')
+			oecmi1 = info.get('ecminterval1', '')
+			oecmi0 = info.get('ecminterval0', '')
 			info = {}
 			info['ecminterval2'] = oecmi1
 			info['ecminterval1'] = oecmi0
 			old_ecm_time = ecm_time
 			try:
-				ecm = open(ECM_INFO, 'rb').readlines()
+				if six.PY2:
+					ecm = open(ECM_INFO, 'rb').readlines()
+				else:
+					ecm = open(ECM_INFO, 'r').readlines()
 			except:
 				ecm = ''
 			for line in ecm:
@@ -78,7 +82,10 @@
 					if info['decode'] == 'Network':
 						cardid = 'id:' + info.get('prov', '')
 						try:
-							share = open('/tmp/share.info', 'rb').readlines()
+							if six.PY2:
+								share = open('/tmp/share.info', 'rb').readlines()
+							else:
+								share = open('/tmp/share.info', 'r').readlines()
 							for line in share:
 								if cardid in line:
 									self.textvalue = line.strip()
@@ -139,4 +146,4 @@
 			decCI='0'
 			provid='0'
 			ecmpid='0'
-		return self.textvalue,decCI,provid,ecmpid
+		return self.textvalue, decCI, provid, ecmpid
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/HardwareInfo.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/HardwareInfo.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/HardwareInfo.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/HardwareInfo.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from boxbranding import getBoxType, getBrandOEM, getMachineName
 from Components.About import about
 
@@ -24,21 +25,21 @@
 			except:
 				pass
 		except:
-			print "----------------"
-			print "you should upgrade to new drivers for the hardware detection to work properly"
-			print "----------------"
-			print "fallback to detect hardware via /proc/cpuinfo!!"
+			print("----------------")
+			print("you should upgrade to new drivers for the hardware detection to work properly")
+			print("----------------")
+			print("fallback to detect hardware via /proc/cpuinfo!!")
 			try:
 				rd = open("/proc/cpuinfo", "r").read()
 				if "Brcm4380 V4.2" in rd:
 					HardwareInfo.device_name = "dm8000"
-					print "dm8000 detected!"
+					print("dm8000 detected!")
 				elif "Brcm7401 V0.0" in rd:
 					HardwareInfo.device_name = "dm800"
-					print "dm800 detected!"
+					print("dm800 detected!")
 				elif "MIPS 4KEc V4.8" in rd:
 					HardwareInfo.device_name = "dm7025"
-					print "dm7025 detected!"
+					print("dm7025 detected!")
 			except:
 				pass
 
@@ -62,7 +63,7 @@
 
 	def linux_kernel(self):
 		try:
-			return open("/proc/version","r").read().split(' ', 4)[2].split('-',2)[0]
+			return open("/proc/version", "r").read().split(' ', 4)[2].split('-', 2)[0]
 		except:
 			return "unknown"
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/IO.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/IO.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/IO.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/IO.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,7 +1,8 @@
+from __future__ import print_function
 from os import fchmod, fsync, path, rename, unlink
 from tempfile import NamedTemporaryFile
 
-def saveFile(filename, data, mode=0644):
+def saveFile(filename, data, mode=0o644):
 	tmpFilename = None
 	try:
 		f = NamedTemporaryFile(prefix='.%s.' % path.basename(filename), dir=path.dirname(filename), delete=False)
@@ -17,7 +18,7 @@
 		f.close()
 		rename(tmpFilename, filename)
 	except Exception as e:
-		print 'saveFile: failed to write to %s: %s' % (filename, e)
+		print('saveFile: failed to write to %s: %s' % (filename, e))
 		if tmpFilename and path.exists(tmpFilename):
 			unlink(tmpFilename)
 		return False
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/ISO639.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/ISO639.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/ISO639.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/ISO639.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,4 +1,6 @@
 # -*- coding: iso-8859-2 -*-
+import six
+
 LanguageCodes = { }
 
 LanguageCodes["aar"] = LanguageCodes["aa"] = ("Afar", "Hamitic")
@@ -444,16 +446,16 @@
 		if depth == self.PRIMARY:
 			wanted_languages = [ "Undetermined", "English", "German", "Arabic", "Catalan", "Croatian", "Czech", "Danish", "Dutch", "Estonian", "Finnish", "French", "Greek", "Hungarian", "Lithuanian", "Latvian", "Icelandic", "Italian", "Norwegian", "Polish", "Portuguese", "Russian", "Serbian", "Slovakian", "Slovenian", "Spanish", "Swedish", "Turkish", "Ukrainian" ]
 		elif depth == self.SECONDARY:
-			for key, val in LanguageCodes.iteritems():
+			for key, val in six.iteritems(LanguageCodes):
 				if len(key) == 2:
 					wanted_languages.append(val[0])
 		else:
-			for key, val in LanguageCodes.iteritems():
+			for key, val in six.iteritems(LanguageCodes):
 				if len(key) == 3:
 					wanted_languages.append(val[0])
 
 		self.idlist_by_name = {}
-		for key, val in LanguageCodes.iteritems():
+		for key, val in six.iteritems(LanguageCodes):
 			val = val[0]
 			if val not in wanted_languages:
 				continue
@@ -464,7 +466,7 @@
 
 		self.name_and_shortid_by_longid = {}
 		self.name_by_shortid = {}
-		for lang, id_list in self.idlist_by_name.iteritems():
+		for lang, id_list in six.iteritems(self.idlist_by_name):
 			long_ids = []
 			short_id = None
 			for id in id_list:
@@ -480,27 +482,27 @@
 		from Components.Language import language as syslanguage
 		syslang = syslanguage.getLanguage()[:2]
 		choices = []
-		for lang, id_list in self.idlist_by_name.iteritems():
+		for lang, id_list in six.iteritems(self.idlist_by_name):
 			if syslang not in id_list and 'en' not in id_list:
 				choices.append((lang, lang))
 		choices.sort()
-		choices.insert(0,(self.name_by_shortid[syslang], self.name_by_shortid[syslang]))
+		choices.insert(0, (self.name_by_shortid[syslang], self.name_by_shortid[syslang]))
 		if syslang != "en":
-			choices.insert(1,(self.name_by_shortid["en"], self.name_by_shortid["en"]))
+			choices.insert(1, (self.name_by_shortid["en"], self.name_by_shortid["en"]))
 		return choices
 
 	def determineLanguage(self, string):
 		string = string.lower()
 		language = "Undetermined"
 		for word in ("stereo", "audio", "description", "2ch", "dolby digital", "2.0"):
-			string = string.replace(word,"").strip()
+			string = word.replace("").strip()
 		if len(string) == 2 and string in self.name_by_shortid:
 			language = self.name_by_shortid[string]
 		elif len(string) == 3 and string in self.name_and_shortid_by_longid:
 			language = self.name_and_shortid_by_longid[string][1]
 		elif len(string) >= 3:
 			string = string.capitalize()
-			for key in self.idlist_by_name.keys():
+			for key in list(self.idlist_by_name.keys()):
 				if key == string or _(key) == string:
 					language = key
 		return language
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/KeyBindings.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/KeyBindings.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/KeyBindings.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/KeyBindings.py	2020-06-21 10:20:02.371327601 -0400
@@ -145,7 +145,7 @@
 		KEYIDS["KEY_SLEEP"]: ("SLEEP",),
 		KEYIDS["KEY_SUBTITLE"]: ("SUBTITLE",),
 		KEYIDS["KEY_HELP"]: ("HELP",),
-		KEYIDS["KEY_VMODE"]: ("VMODE",),
+		KEYIDS["KEY_VMODE"]: ("VMODE",)
 	},
 	{       # XP1000
 		KEYIDS["BTN_0"]: ("UP", "fp"),
@@ -194,7 +194,7 @@
 		KEYIDS["KEY_VMODE"]: ("VMODE",),
 		KEYIDS["KEY_PROGRAM"]: ("TIMER",),
 		KEYIDS["KEY_SLEEP"]: ("SLEEP",),
-		KEYIDS["KEY_EPG"]: ("EPG",),
+		KEYIDS["KEY_EPG"]: ("EPG",)
 	},
 	{       # Formuler F1
 		KEYIDS["BTN_0"]: ("UP", "fp"),
@@ -243,7 +243,7 @@
 		KEYIDS["KEY_BACK"]: ("RECALL",),
 		KEYIDS["KEY_CONTEXT_MENU"]: ("CONTEXT",),
 		KEYIDS["KEY_EPG"]: ("EPG",),
-		KEYIDS["KEY_BOOKMARKS"]: ("PLAYLIST",),
+		KEYIDS["KEY_BOOKMARKS"]: ("PLAYLIST",)
 	},
 ]
 
@@ -274,4 +274,4 @@
 def removeKeyBindings(domain):
 	# remove all entries of domain 'domain'
 	for x in keyBindings:
-		keyBindings[x] = filter(lambda e: e[1] != domain, keyBindings[x])
+		keyBindings[x] = [e for e in keyBindings[x] if e[1] != domain]
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Log.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Log.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Log.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Log.py	2020-06-21 10:20:02.371327601 -0400
@@ -1,5 +1,7 @@
+from __future__ import print_function
+from __future__ import absolute_import
 from sys import _getframe
-from LogConfig import LogConfig, LOG_TYPE_DEBUG, LOG_TYPE_INFO, LOG_TYPE_WARNING, LOG_TYPE_ERROR, LOG_LEVEL_ERROR, LOG_LEVEL_WARNING, LOG_LEVEL_INFO, LOG_LEVEL_DEBUG
+from Tools.LogConfig import LogConfig, LOG_TYPE_DEBUG, LOG_TYPE_INFO, LOG_TYPE_WARNING, LOG_TYPE_ERROR, LOG_LEVEL_ERROR, LOG_LEVEL_WARNING, LOG_LEVEL_INFO, LOG_LEVEL_DEBUG
 
 class Log(object):
 	@staticmethod
@@ -64,4 +66,4 @@
 			elif type == LOG_TYPE_DEBUG:
 				msg = "\033[0;37m%s\033[1;m" % msg
 
-		print msg
+		print(msg)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/LogConfig.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/LogConfig.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/LogConfig.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/LogConfig.py	2020-06-21 10:20:02.371327601 -0400
@@ -19,7 +19,7 @@
 			from Components.config import config, ConfigSubsection, ConfigOnOff, ConfigSelection
 			config.log = ConfigSubsection()
 			config.log.level = ConfigSelection(
-				choices={ str(LOG_LEVEL_DEBUG) : "DEBUG", str(LOG_LEVEL_INFO) : "INFO", str(LOG_LEVEL_WARNING) : "WARNING", str(LOG_LEVEL_ERROR) : "ERROR",  }, default=str(LOG_LEVEL_INFO))
+				choices={ str(LOG_LEVEL_DEBUG): "DEBUG", str(LOG_LEVEL_INFO): "INFO", str(LOG_LEVEL_WARNING): "WARNING", str(LOG_LEVEL_ERROR): "ERROR",  }, default=str(LOG_LEVEL_INFO))
 			config.log.verbose = ConfigOnOff(default=False)
 			config.log.colored = ConfigOnOff(default=True)
 			LogConfig._initialized = True
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Multiboot.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Multiboot.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Multiboot.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Multiboot.py	2020-06-21 10:20:02.375328151 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import glob
 import shutil
 import subprocess
@@ -18,7 +19,7 @@
 		if path.exists(device):
 			Console().ePopen("mount %s %s" % (device, Imagemount))
 			if path.isfile(path.join(Imagemount, "STARTUP")):
-				print '[Multiboot] Startupdevice found:', device
+				print('[Multiboot] Startupdevice found:', device)
 				return device
 			Console().ePopen("umount %s" % Imagemount)
 	if not path.ismount(Imagemount):
@@ -36,7 +37,7 @@
 		for file in glob.glob(path.join(Imagemount, "STARTUP_*")):
 			if "STARTUP_RECOVERY" in file:
 				SystemInfo["RecoveryMode"] = True
-				print "[multiboot] [getMultibootslots] RecoveryMode is set to:%s" % SystemInfo["RecoveryMode"]
+				print("[multiboot] [getMultibootslots] RecoveryMode is set to:%s" % SystemInfo["RecoveryMode"])
 			slotnumber = file.rsplit("_", 3 if "BOXMODE" in file else 1)[1]
 			if slotnumber.isdigit() and slotnumber not in bootslots:
 				slot = {}
@@ -55,14 +56,14 @@
 								slot["kernel"] = "%sp%s" % (device.split("p")[0], int(device.split("p")[1]) - 1)
 							if "rootsubdir" in line:
 								SystemInfo["HasRootSubdir"] = True
-								print "[multiboot] [getMultibootslots] HasRootSubdir is set to:%s" % SystemInfo["HasRootSubdir"]
+								print("[multiboot] [getMultibootslots] HasRootSubdir is set to:%s" % SystemInfo["HasRootSubdir"])
 								slot["rootsubdir"] = getparam(line, "rootsubdir")
 								slot["kernel"] = getparam(line, "kernel")
 
 						break
 				if slot:
 					bootslots[int(slotnumber)] = slot
-		print "[multiboot1] getMultibootslots bootslots = %s" %bootslots
+		print("[multiboot1] getMultibootslots bootslots = %s" %bootslots)
 		Console().ePopen("umount %s" % Imagemount)
 		if not path.ismount(Imagemount):
 			rmdir(Imagemount)
@@ -75,7 +76,7 @@
 			return int(slot[0])
 		else:
 			device = getparam(open("/sys/firmware/devicetree/base/chosen/bootargs", "r").read(), "root")
-			for slot in SystemInfo["canMultiBoot"].keys():
+			for slot in list(SystemInfo["canMultiBoot"].keys()):
 				if SystemInfo["canMultiBoot"][slot]["device"] == device:
 					return slot
 def GetCurrentKern():
@@ -135,7 +136,7 @@
 
 	def __init__(self, callback):
 		if SystemInfo["canMultiBoot"]:
-			self.slots = sorted(SystemInfo["canMultiBoot"].keys())
+			self.slots = sorted(list(SystemInfo["canMultiBoot"].keys()))
 			self.callback = callback
 			self.imagelist = {}
 			if not path.isdir(Imagemount):
@@ -250,12 +251,12 @@
 	def readBrandingFile(self):  # Reads boxbranding.so and updates self.output
 		output = eval(subprocess.check_output(["python", path.join(self.tmp_path, self.helper_file)]))
 		if output:
-			for att in self.output.keys():
+			for att in list(self.output.keys()):
 				self.output[att] = output[att]
 
 	def addBrandingMethods(self):  # This creates reader.getBoxType(), reader.getImageDevBuild(), etc
 		loc = {}
-		for att in self.output.keys():
+		for att in list(self.output.keys()):
 			exec("def %s(self): return self.output[\"%s\"]" % (att, att), None, loc)
 		for name, value in loc.items():
 			setattr(boxbranding_reader, name, value)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Notifications.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Notifications.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Notifications.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Notifications.py	2020-06-21 10:20:02.375328151 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 notifications = [ ]
 
 notificationAdded = [ ]
@@ -6,7 +7,7 @@
 current_notifications = [ ]
 
 def __AddNotification(fnc, screen, id, *args, **kwargs):
-	if ".MessageBox'>" in `screen`:
+	if ".MessageBox'>" in repr(screen):
 		kwargs["simple"] = True
 	notifications.append((fnc, screen, args, kwargs, id))
 	for x in notificationAdded:
@@ -33,15 +34,15 @@
 
 def RemovePopup(id):
 	# remove similiar notifications
-	print "RemovePopup, id =", id
+	print("RemovePopup, id =", id)
 	for x in notifications:
 		if x[4] and x[4] == id:
-			print "(found in notifications)"
+			print("(found in notifications)")
 			notifications.remove(x)
 
 	for x in current_notifications:
 		if x[0] == id:
-			print "(found in current notifications)"
+			print("(found in current notifications)")
 			x[1].close()
 
 from Screens.MessageBox import MessageBox
@@ -49,11 +50,11 @@
 def AddPopup(text, type, timeout, id = None):
 	if id is not None:
 		RemovePopup(id)
-	print "AddPopup, id =", id
+	print("AddPopup, id =", id)
 	AddNotificationWithID(id, MessageBox, text = text, type = type, timeout = timeout, close_on_any_key = True)
 
 def AddPopupWithCallback(fnc, text, type, timeout, id = None):
 	if id is not None:
 		RemovePopup(id)
-	print "AddPopup, id =", id
+	print("AddPopup, id =", id)
 	AddNotificationWithIDCallback(fnc, id, MessageBox, text = text, type = type, timeout = timeout, close_on_any_key = False)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/NumericalTextInput.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/NumericalTextInput.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/NumericalTextInput.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/NumericalTextInput.py	2020-06-21 10:20:02.375328151 -0400
@@ -1,6 +1,6 @@
 from enigma import eTimer
-
 from Components.Language import language
+import six
 
 MAP_SEARCH_UPCASE = "SearchUpper"  # NOTE: Legacy interface for previous and deprecated versions of NumericalTextInput.
 MAP_SEARCH = "SearchLower"
@@ -221,12 +221,12 @@
 			self.mapping = []
 			index = MODES.get(str(mode).upper(), 0)
 			self.mapping = []
-			for num in range(0, 10):
+			for num in list(range(0, 10)):
 				self.mapping.append((MAPPINGS[num][index]))
 			locale = LOCALES.get(language.getLanguage(), None)
-			if locale is not None and index in range(0, 6):
+			if locale is not None and index in list(range(0, 6)):
 				index = index % 3
-				for num in range(0, 10):
+				for num in list(range(0, 10)):
 					if locale[num][index] is not None:
 						self.mapping[num] = locale[num][index]
 			self.mapping = tuple(self.mapping)
@@ -274,4 +274,4 @@
 		return self.mapping[num][self.pos]
 
 	def setUseableChars(self, useable):
-		self.useableChars = unicode(useable)
+		self.useableChars = six.text_type(useable)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Profile.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Profile.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Profile.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Profile.py	2020-06-21 10:20:02.375328151 -0400
@@ -1,6 +1,8 @@
+from __future__ import print_function
+from __future__ import absolute_import
 # the implementation here is a bit crappy.
 import time
-from Directories import resolveFilename, SCOPE_CONFIG
+from Tools.Directories import resolveFilename, SCOPE_CONFIG
 from boxbranding import getBoxType
 
 boxtype = getBoxType()
@@ -26,12 +28,12 @@
 		total_time = t
 		profile_data[id] = t
 except:
-	print "no profile data available"
+	print("no profile data available")
 
 try:
 	profile_file = open(resolveFilename(SCOPE_CONFIG, "profile"), "w")
 except IOError:
-	print "WARNING: couldn't open profile file!"
+	print("WARNING: couldn't open profile file!")
 
 def profile(id):
 	now = time.time() - profile_start
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/RedirectOutput.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/RedirectOutput.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/RedirectOutput.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/RedirectOutput.py	2020-06-21 10:20:02.375328151 -0400
@@ -1,16 +1,18 @@
 import sys
-
 from enigma import ePythonOutput
 
-
 class EnigmaLog:
 	def __init__(self, level):
 		self.level = level
 		self.line = ""
 
 	def write(self, data):
-		if isinstance(data, unicode):
-			data = data.encode(encoding="UTF-8", errors="ignore")
+		if sys.version_info[0] >= 3:
+			if isinstance(data, bytes):
+				data = data.encode(encoding="UTF-8", errors="ignore")
+		else:
+			if isinstance(data, unicode):
+				data = data.encode(encoding="UTF-8", errors="ignore")
 		self.line += data
 		if "\n" in data:
 			# ePythonOutput(self.line, self.level)  # OpenPLi, OpenViX
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/ServiceReference.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/ServiceReference.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/ServiceReference.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/ServiceReference.py	2020-06-21 10:20:02.375328151 -0400
@@ -15,7 +15,7 @@
 # '(type == serviceTypes[0]) || (type == serviceTypes[1]) || ...'
 
 def makeServiceQueryStr(serviceTypes):
-	return ' || '.join(map(lambda x: '(type == %d)' % x, serviceTypes))
+	return ' || '.join(['(type == %d)' % x for x in serviceTypes])
 
 def serviceRefAppendPath(sref, path):
 	nsref = eServiceReference(sref)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/StbHardware.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/StbHardware.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/StbHardware.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/StbHardware.py	2020-06-21 10:20:02.375328151 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from time import time, localtime, gmtime
 from os import path
 from fcntl import ioctl
@@ -12,16 +13,16 @@
 			file = open("/proc/stb/info/micomver", "r")
 			ret = file.readline().strip()
 			file.close()
-		elif getBoxType() in ('dm7080','dm820','dm520','dm525','dm900','dm920'):
+		elif getBoxType() in ('dm7080', 'dm820', 'dm520', 'dm525', 'dm900', 'dm920'):
 			ret = open("/proc/stb/fp/version", "r").read()
-		else:	
-			ret = long(open("/proc/stb/fp/version", "r").read())
+		else:
+			ret = int(open("/proc/stb/fp/version", "r").read())
 	except IOError:
 		try:
 			fp = open("/dev/dbox/fp0")
-			ret = ioctl(fp.fileno(),0)
+			ret = ioctl(fp.fileno(), 0)
 		except IOError:
-			print "getFPVersion failed!"
+			print("getFPVersion failed!")
 	return ret
 
 def setFPWakeuptime(wutime):
@@ -35,18 +36,18 @@
 			ioctl(fp.fileno(), 6, pack('L', wutime)) # set wake up
 			fp.close()
 		except IOError:
-			print "setFPWakeupTime failed!"
+			print("setFPWakeupTime failed!")
 
 def setRTCoffset():
 	forsleep = (localtime(time()).tm_hour-gmtime(time()).tm_hour)*3600
-	print "[RTC] set RTC offset to %s sec." % (forsleep)
+	print("[RTC] set RTC offset to %s sec." % (forsleep))
 	try:
 		open("/proc/stb/fp/rtc_offset", "w").write(str(forsleep))
 	except IOError:
-		print "setRTCoffset failed!"
+		print("setRTCoffset failed!")
 
 def setRTCtime(wutime):
-        if path.exists("/proc/stb/fp/rtc_offset"):
+	if path.exists("/proc/stb/fp/rtc_offset"):
 		setRTCoffset()
 	try:
 		f = open("/proc/stb/fp/rtc", "w")
@@ -58,13 +59,13 @@
 			ioctl(fp.fileno(), 0x101, pack('L', wutime)) # set wake up
 			fp.close()
 		except IOError:
-			print "setRTCtime failed!"
+			print("setRTCtime failed!")
 
 def getFPWakeuptime():
 	ret = 0
 	try:
 		f = open("/proc/stb/fp/wakeup_time", "r")
-		ret = long(f.read())
+		ret = int(f.read())
 		f.close()
 	except IOError:
 		try:
@@ -72,7 +73,7 @@
 			ret = unpack('L', ioctl(fp.fileno(), 5, '    '))[0] # get wakeuptime
 			fp.close()
 		except IOError:
-			print "getFPWakeupTime failed!"
+			print("getFPWakeupTime failed!")
 	return ret
 
 wasTimerWakeup = None
@@ -99,7 +100,7 @@
 			wasTimerWakeup = unpack('B', ioctl(fp.fileno(), 9, ' '))[0] and True or False
 			fp.close()
 		except IOError:
-			print "wasTimerWakeup failed!"
+			print("wasTimerWakeup failed!")
 			isError = True
 
 	if wasTimerWakeup:
@@ -120,4 +121,4 @@
 			ioctl(fp.fileno(), 10)
 			fp.close()
 		except IOError:
-			print "clearFPWasTimerWakeup failed!"
+			print("clearFPWasTimerWakeup failed!")
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Transponder.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Transponder.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Transponder.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Transponder.py	2020-06-21 10:20:02.375328151 -0400
@@ -1,21 +1,27 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+from __future__ import print_function
 from enigma import eDVBFrontendParametersSatellite, eDVBFrontendParametersCable, eDVBFrontendParametersTerrestrial, eDVBFrontendParametersATSC
 from Components.NimManager import nimmanager
+import six
+
+SIGN = '°' if six.PY3 else str('\xc2\xb0')
 
 def orbpos(pos):
-	return pos > 3600 and "N/A" or "%d.%d\xc2\xb0%s" % (pos > 1800 and ((3600 - pos) / 10, (3600 - pos) % 10, "W") or (pos / 10, pos % 10, "E"))
+	return pos > 3600 and "N/A" or "%d.%d" + SIGN + "%s" % (pos > 1800 and ((3600 - pos) / 10, (3600 - pos) % 10, "W") or (pos / 10, pos % 10, "E"))
 
 def getTunerDescription(nim):
 	try:
 		return nimmanager.getTerrestrialDescription(nim)
 	except:
-		print "[ChannelNumber] nimmanager.getTerrestrialDescription(nim) failed, nim:", nim
+		print("[ChannelNumber] nimmanager.getTerrestrialDescription(nim) failed, nim:", nim)
 	return ""
 
 def getMHz(frequency):
-	if str(frequency).endswith('MHz'):
-		return float(frequency.split()[0])
 	return (frequency+50000)/100000/10.
 
+# Note: newly added region add into ImportChannels to getTerrestrialRegion()
+#	due using for fallback tuner too
 def getChannelNumber(frequency, nim):
 	if nim == "DVB-T":
 		for n in nimmanager.nim_slots:
@@ -32,6 +38,8 @@
 			elif 470 <= f < 863: 	# IV,V
 				d = (f + 2) % 8
 				return str(int(f - 470) / 8 + 21) + (d < 3.5 and "-" or d > 4.5 and "+" or "")
+		elif "Zealand" in descr and 506 <= f <= 700:
+			return str(int(f - 506) / 8 + 25)
 		elif "Australia" in descr:
 			d = (f + 1) % 7
 			ds = (d < 3 and "-" or d > 4 and "+" or "")
@@ -57,7 +65,19 @@
 			return (177500 + 7000*(channel- 5))*1000
 		elif 21 <= channel <= 69:
 			return (474000 + 8000*(channel-21))*1000
-	return 474000000
+	elif "Zealand" in descr and 25 <= channel <= 50:
+			return (506000 + 8000 * (int(channel) - 25)) * 1000
+	else:	# Australian rules
+		res = 474000000
+		if channel != "9A":
+			ch = int(channel)
+			if 6 <= ch <= 9:
+				res = (177500 + 7000 * (ch - 6)) * 1000
+			elif 10 <= ch <= 12:
+				res = (212500 + 7000 * (ch - 10)) * 1000
+			elif 28 <= ch <= 69:
+				res = (529500 + 7000 * (ch - 28)) * 1000
+		return res
 
 def ConvertToHumanReadable(tp, tunertype = None):
 	ret = { }
@@ -104,8 +124,6 @@
 		ret["system"] = {
 			eDVBFrontendParametersSatellite.System_DVB_S : "DVB-S",
 			eDVBFrontendParametersSatellite.System_DVB_S2 : "DVB-S2"}.get(tp.get("system"))
-		ret["frequency"] = (tp.get("frequency") and ('%s MHz' % str(tp.get("frequency")/1000.))) or '0 MHz'
-		ret["symbol_rate"] = (tp.get("symbol_rate") and tp.get("symbol_rate")/1000) or 0
 		if ret["system"] == "DVB-S2":
 			ret["rolloff"] = {
 				eDVBFrontendParametersSatellite.RollOff_alpha_0_35 : "0.35",
@@ -154,7 +172,6 @@
 		ret["system"] = {
 			eDVBFrontendParametersCable.System_DVB_C_ANNEX_A : "DVB-C",
 			eDVBFrontendParametersCable.System_DVB_C_ANNEX_C : "DVB-C ANNEX C"}.get(tp.get("system"))
-		ret["frequency"] = (tp.get("frequency") and str(tp.get("frequency")/1000) + ' MHz') or '0 MHz'
 	elif tunertype == "DVB-T":
 		ret["tuner_type"] = _("Terrestrial")
 		ret["bandwidth"] = {
@@ -165,7 +182,6 @@
 			6000000 : "6 MHz",
 			5000000 : "5 MHz",
 			1712000 : "1.712 MHz"}.get(tp.get("bandwidth"))
-		#print 'bandwidth:',tp.get("bandwidth")
 		ret["code_rate_lp"] = {
 			eDVBFrontendParametersTerrestrial.FEC_Auto : _("Auto"),
 			eDVBFrontendParametersTerrestrial.FEC_1_2 : "1/2",
@@ -177,7 +193,6 @@
 			eDVBFrontendParametersTerrestrial.FEC_6_7 : "6/7",
 			eDVBFrontendParametersTerrestrial.FEC_7_8 : "7/8",
 			eDVBFrontendParametersTerrestrial.FEC_8_9 : "8/9"}.get(tp.get("code_rate_lp"))
-		#print 'code_rate_lp:',tp.get("code_rate_lp")
 		ret["code_rate_hp"] = {
 			eDVBFrontendParametersTerrestrial.FEC_Auto : _("Auto"),
 			eDVBFrontendParametersTerrestrial.FEC_1_2 : "1/2",
@@ -189,14 +204,12 @@
 			eDVBFrontendParametersTerrestrial.FEC_6_7 : "6/7",
 			eDVBFrontendParametersTerrestrial.FEC_7_8 : "7/8",
 			eDVBFrontendParametersTerrestrial.FEC_8_9 : "8/9"}.get(tp.get("code_rate_hp"))
-		#print 'code_rate_hp:',tp.get("code_rate_hp")
 		ret["constellation"] = {
 			eDVBFrontendParametersTerrestrial.Modulation_Auto : _("Auto"),
 			eDVBFrontendParametersTerrestrial.Modulation_QPSK : "QPSK",
 			eDVBFrontendParametersTerrestrial.Modulation_QAM16 : "QAM16",
 			eDVBFrontendParametersTerrestrial.Modulation_QAM64 : "QAM64",
 			eDVBFrontendParametersTerrestrial.Modulation_QAM256 : "QAM256"}.get(tp.get("constellation"))
-		#print 'constellation:',tp.get("constellation")
 		ret["transmission_mode"] = {
 			eDVBFrontendParametersTerrestrial.TransmissionMode_Auto : _("Auto"),
 			eDVBFrontendParametersTerrestrial.TransmissionMode_1k : "1k",
@@ -205,7 +218,6 @@
 			eDVBFrontendParametersTerrestrial.TransmissionMode_8k : "8k",
 			eDVBFrontendParametersTerrestrial.TransmissionMode_16k : "16k",
 			eDVBFrontendParametersTerrestrial.TransmissionMode_32k : "32k"}.get(tp.get("transmission_mode"))
-		#print 'transmission_mode:',tp.get("transmission_mode")
 		ret["guard_interval"] = {
 			eDVBFrontendParametersTerrestrial.GuardInterval_Auto : _("Auto"),
 			eDVBFrontendParametersTerrestrial.GuardInterval_19_256 : "19/256",
@@ -215,26 +227,20 @@
 			eDVBFrontendParametersTerrestrial.GuardInterval_1_16 : "1/16",
 			eDVBFrontendParametersTerrestrial.GuardInterval_1_8 : "1/8",
 			eDVBFrontendParametersTerrestrial.GuardInterval_1_4 : "1/4"}.get(tp.get("guard_interval"))
-		#print 'guard_interval:',tp.get("guard_interval")
 		ret["hierarchy_information"] = {
 			eDVBFrontendParametersTerrestrial.Hierarchy_Auto : _("Auto"),
 			eDVBFrontendParametersTerrestrial.Hierarchy_None : _("None"),
 			eDVBFrontendParametersTerrestrial.Hierarchy_1 : "1",
 			eDVBFrontendParametersTerrestrial.Hierarchy_2 : "2",
 			eDVBFrontendParametersTerrestrial.Hierarchy_4 : "4"}.get(tp.get("hierarchy_information"))
-		#print 'hierarchy_information:',tp.get("hierarchy_information")
 		ret["inversion"] = {
 			eDVBFrontendParametersTerrestrial.Inversion_Unknown : _("Auto"),
 			eDVBFrontendParametersTerrestrial.Inversion_On : _("On"),
 			eDVBFrontendParametersTerrestrial.Inversion_Off : _("Off")}.get(tp.get("inversion"))
-		#print 'inversion:',tp.get("inversion")
 		ret["system"] = {
 			eDVBFrontendParametersTerrestrial.System_DVB_T_T2 : "DVB-T/T2",
 			eDVBFrontendParametersTerrestrial.System_DVB_T : "DVB-T",
 			eDVBFrontendParametersTerrestrial.System_DVB_T2 : "DVB-T2"}.get(tp.get("system"))
-#		print 'system:',tp.get("system")
-		ret["frequency"] = (tp.get("frequency") and ('%s MHz' % str(tp.get("frequency")/1000000.))) or '0 MHz'
-#		print 'frequency:',tp.get("frequency")
 		ret["channel"] = _("CH%s") % getChannelNumber(tp.get("frequency"), "DVB-T")
 	elif tunertype == "ATSC":
 		ret["tuner_type"] = "ATSC"
@@ -255,8 +261,8 @@
 			eDVBFrontendParametersATSC.System_ATSC : "ATSC",
 			eDVBFrontendParametersATSC.System_DVB_C_ANNEX_B : "DVB-C ANNEX B"}.get(tp.get("system"))
 	elif tunertype != "None":
-		print "ConvertToHumanReadable: no or unknown tunertype in tpdata dict for tunertype:", tunertype
-	for k,v in tp.items():
+		print("[Transponder] ConvertToHumanReadable: no or unknown tunertype in tpdata dict for tunertype:", tunertype)
+	for k, v in list(tp.items()):
 		if k not in ret:
 			ret[k] = v
 	return ret
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Trashcan.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Trashcan.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/Trashcan.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/Trashcan.py	2020-06-21 10:20:02.375328151 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import Components.Task
 from Components.config import config
 from Components import Harddisk
@@ -12,7 +13,7 @@
 	# Returns trash folder without symlinks
 	try:
 		if path is None or os.path.realpath(path) == '/media/autofs':
-			print 'path is none'
+			print('path is none')
 			return ""
 		else:
 			if '/movie' in path:
@@ -55,7 +56,7 @@
 		self.gotRecordEvent(None, None)
 
 	def gotRecordEvent(self, service, event):
-		self.recordings = len(self.session.nav.getRecordings(False,pNavigation.isRealRecording))
+		self.recordings = len(self.session.nav.getRecordings(False, pNavigation.isRealRecording))
 		if event == enigma.iRecordableService.evEnd:
 			self.cleanIfIdle()
 
@@ -71,7 +72,7 @@
 		# RecordTimer calls this when preparing a recording. That is a
 		# nice moment to clean up.
 		if self.recordings:
-			print "[Trashcan] Recording in progress", self.recordings
+			print("[Trashcan] Recording in progress", self.recordings)
 			return
 		ctimeLimit = time.time() - (config.usage.movielist_trashcan_days.value * 3600 * 24)
 		reserveBytes = 1024*1024*1024 * int(config.usage.movielist_trashcan_reserve.value)
@@ -92,22 +93,22 @@
 		task.openFiles(ctimeLimit, reserveBytes)
 		Components.Task.job_manager.AddJob(job)
 	elif isCleaning:
-		print "[Trashcan] Cleanup already running"
+		print("[Trashcan] Cleanup already running")
 	else:
-		print "[Trashcan] Disabled skipping check."
+		print("[Trashcan] Disabled skipping check.")
 
 def cleanAll(path=None):
 	trash = getTrashFolder(path)
 	if not os.path.isdir(trash):
-		print "[Trashcan] No trash.", trash
+		print("[Trashcan] No trash.", trash)
 		return 0
 	for root, dirs, files in os.walk(trash, topdown=False):
 		for name in files:
 			fn = os.path.join(root, name)
 			try:
 				enigma.eBackgroundFileEraser.getInstance().erase(fn)
-			except Exception, e:
-				print "[Trashcan] Failed to erase %s:"% name, e
+			except Exception as e:
+				print("[Trashcan] Failed to erase %s:"% name, e)
 		# Remove empty directories if possible
 		for name in dirs:
 			try:
@@ -127,7 +128,7 @@
 	def work(self):
 		mounts=[]
 		matches = []
-		print "[Trashcan] probing folders"
+		print("[Trashcan] probing folders")
 		f = open('/proc/mounts', 'r')
 		for line in f.readlines():
 			parts = line.strip().split()
@@ -142,20 +143,20 @@
 		f.close()
 
 		for mount in mounts:
-			if os.path.isdir(os.path.join(mount,'.Trash')):
-				matches.append(os.path.join(mount,'.Trash'))
-			if os.path.isdir(os.path.join(mount,'movie/.Trash')):
-				matches.append(os.path.join(mount,'movie/.Trash'))
+			if os.path.isdir(os.path.join(mount, '.Trash')):
+				matches.append(os.path.join(mount, '.Trash'))
+			if os.path.isdir(os.path.join(mount, 'movie/.Trash')):
+				matches.append(os.path.join(mount, 'movie/.Trash'))
 
-		print "[Trashcan] found following trashcan's:",matches
+		print("[Trashcan] found following trashcan's:", matches)
 		if len(matches):
 			for trashfolder in matches:
-				print "[Trashcan] looking in trashcan",trashfolder
+				print("[Trashcan] looking in trashcan", trashfolder)
 				trashsize = get_size(trashfolder)
 				diskstat = os.statvfs(trashfolder)
 				free = diskstat.f_bfree * diskstat.f_bsize
 				bytesToRemove = self.reserveBytes - free
-				print "[Trashcan] " + str(trashfolder) + ": Size:",trashsize
+				print("[Trashcan] " + str(trashfolder) + ": Size:", trashsize)
 				candidates = []
 				size = 0
 				for root, dirs, files in os.walk(trashfolder, topdown=False):
@@ -169,8 +170,8 @@
 							else:
 								candidates.append((st.st_ctime, fn, st.st_size))
 								size += st.st_size
-						except Exception, e:
-							print "[Trashcan] Failed to stat %s:"% name, e
+						except Exception as e:
+							print("[Trashcan] Failed to stat %s:"% name, e)
 					# Remove empty directories if possible
 					for name in dirs:
 						try:
@@ -189,7 +190,7 @@
 							pass
 						bytesToRemove -= st_size
 						size -= st_size
-					print "[Trashcan] " + str(trashfolder) + ": Size now:",size
+					print("[Trashcan] " + str(trashfolder) + ": Size now:", size)
 
 class TrashInfo(VariableText, GUIComponent):
 	FREE = 0
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/UnitConversions.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/UnitConversions.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/UnitConversions.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/UnitConversions.py	2020-06-21 10:20:02.375328151 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 class UnitMultipliers:
 	Si = (
 		("", 10 ** 0),
@@ -85,4 +86,4 @@
 	scaler = UnitScaler(**kwargs)
 	for arg in sys.argv:
 		val = eval(arg)
-		print arg, val, scaler(val)
+		print(arg, val, scaler(val))
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/WeatherID.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/WeatherID.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/WeatherID.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/WeatherID.py	2020-06-21 10:20:02.375328151 -0400
@@ -2,12 +2,15 @@
 
 # source: https://code.google.com/p/python-weather-api/
 
-from urllib2 import urlopen, URLError
-from urllib import urlencode
 import sys
 import re
 import json
 
+from six.moves.urllib.error import URLError
+from six.moves.urllib.parse import urlencode
+from six.moves.urllib.request import urlopen
+
+
 WOEID_SEARCH_URL     = 'http://query.yahooapis.com/v1/public/yql'
 WOEID_QUERY_STRING   = 'select line1, line2, line3, line4, woeid from geo.placefinder where text="%s"'
 
@@ -41,12 +44,12 @@
 
 	woeid_data = {}
 	woeid_data['count'] = yahoo_woeid_result['query']['count']
-	for i in xrange(yahoo_woeid_result['query']['count']):
+	for i in list(range(yahoo_woeid_result['query']['count'])):
 		try:
 			place_data = result[i]
 		except KeyError:
 			place_data = result
-		name_lines = [place_data[tag] for tag in ['line1','line2','line3','line4'] if place_data[tag] is not None]
+		name_lines = [place_data[tag] for tag in ['line1', 'line2', 'line3', 'line4'] if place_data[tag] is not None]
 		place_name = ', '.join(name_lines)
 		woeid_data[i] = (place_data['woeid'], place_name)
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/camcontrol.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/camcontrol.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/Tools/camcontrol.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/Tools/camcontrol.py	2020-06-21 10:20:02.375328151 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import os
 import enigma
 
@@ -8,7 +9,7 @@
 		self.name = name
 		self.link = '/etc/init.d/' + name
 		if not os.path.exists(self.link):
-			print "[CamControl] No softcam link?", self.link
+			print("[CamControl] No softcam link?", self.link)
 
 	def getList(self):
 		result = []
@@ -29,16 +30,16 @@
 
 	def command(self, cmd):
 		if os.path.exists(self.link):
-			print "Executing", self.link + ' ' + cmd
+			print("Executing", self.link + ' ' + cmd)
 			enigma.eConsoleAppContainer().execute(self.link + ' ' + cmd)
 
 	def select(self, which):
-		print "Selecting CAM:", which
+		print("Selecting CAM:", which)
 		if not which:
 			which = "None"
 		dst = self.name + '.' + which
 		if not os.path.exists('/etc/init.d/' + dst):
-			print "[CamControl] init script does not exist:", dst
+			print("[CamControl] init script does not exist:", dst)
 			return 
 		try:
 			os.unlink(self.link)
@@ -47,7 +48,7 @@
 		try:
 			os.symlink(dst, self.link);
 		except:
-			print "Failed to create symlink for softcam:", dst
+			print("Failed to create symlink for softcam:", dst)
 			import sys
-			print sys.exc_info()[:2]
+			print(sys.exc_info()[:2])
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/connections.h /home/osboxes/Schreibtisch/test/enigma2/lib/python/connections.h
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/connections.h	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/connections.h	2020-06-21 10:20:02.375328151 -0400
@@ -30,9 +30,10 @@
 	return PyString_FromString(c);
 }
 
+// Only used by console which might transfer binary data(screenshots). So use Bytes instead of Unicode
 inline PyObject *PyFrom(std::pair<const char*, int>& p)
 {
-	return PyString_FromStringAndSize(p.first, p.second);
+	return PyBytes_FromStringAndSize(p.first, p.second);
 }
 
 template <class R>
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/enigma_py_patcher.py /home/osboxes/Schreibtisch/test/enigma2/lib/python/enigma_py_patcher.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/enigma_py_patcher.py	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/enigma_py_patcher.py	2020-06-21 10:20:02.375328151 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 #read the comment to this file in lib/service/iservice.h !!
 import sys
 import os
@@ -22,7 +23,7 @@
 			str = str[:pos]+str[pos+6:]
 
 	if oldstr != str:
-		print "!!! Patch enigma.py line %d\n%s\n%s" %(line, oldstr[:len(oldstr)-1], str)
+		print("!!! Patch enigma.py line %d\n%s\n%s" %(line, oldstr[:len(oldstr)-1], str))
 
 	dest.write(str)
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/python.cpp /home/osboxes/Schreibtisch/test/enigma2/lib/python/python.cpp
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/python.cpp	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/python.cpp	2020-06-21 10:20:02.375328151 -0400
@@ -2,9 +2,15 @@
                 /* avoid warnigs :) */
 #undef _POSIX_C_SOURCE
 #define _POSIX_C_SOURCE 200112L
-extern "C" void init_enigma();
+#if PY_MAJOR_VERSION >= 3
+extern "C" PyObject* PyInit__enigma(void);
+extern "C" PyObject* PyInit_eBaseImpl(void);
+extern "C" PyObject* PyInit_eConsoleImpl(void);
+#else
+extern "C" void init_enigma(void);
 extern "C" void eBaseInit(void);
 extern "C" void eConsoleInit(void);
+#endif
 extern void quitMainloop(int exitCode);
 extern void bsodFatal(const char *component);
 extern bool bsodRestart();
@@ -124,12 +130,20 @@
 
 //	Py_OptimizeFlag = 1;
 
+#if PY_MAJOR_VERSION >= 3
+	PyImport_AppendInittab("_enigma", PyInit__enigma);
+	PyImport_AppendInittab("eBaseImpl", PyInit_eBaseImpl);
+	PyImport_AppendInittab("eConsoleImpl", PyInit_eConsoleImpl);
+#endif
+
 	Py_Initialize();
 	PyEval_InitThreads();
 
+#if PY_MAJOR_VERSION < 3
 	init_enigma();
 	eBaseInit();
 	eConsoleInit();
+#endif
 }
 
 ePython::~ePython()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/python.h /home/osboxes/Schreibtisch/test/enigma2/lib/python/python.h
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/python.h	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/python.h	2020-06-21 10:20:02.375328151 -0400
@@ -6,8 +6,24 @@
 
 #include <string>
 #include <lib/base/object.h>
+#include "Python.h"
 
 #if !defined(SKIP_PART1) && !defined(SWIG)
+
+#if PY_MAJOR_VERSION >= 3
+#define PyStringObject PyUnicodeObject
+#define PyString_FromStringAndSize PyUnicode_FromStringAndSize
+#define PyString_AS_STRING PyUnicode_AsUTF8
+#define PyString_AsString PyUnicode_AsUTF8
+#define PyString_Check PyUnicode_Check
+
+#define PyInt_AsLong PyLong_AsLong
+#define PyInt_Check PyLong_Check
+#define PyInt_AsUnsignedLongMask PyLong_AsUnsignedLongMask
+
+#define PyExc_StandardError PyExc_Exception
+#endif
+
 class ePyObject
 {
 	PyObject *m_ob;
@@ -235,21 +251,33 @@
 
 inline ePyObject Impl_PyString_FromString(const char* file, int line, const char *str)
 {
+#if PY_MAJOR_VERSION >= 3
+	return ePyObject(PyUnicode_FromString(str), file, line);
+#else
 	return ePyObject(PyString_FromString(str), file, line);
+#endif
 }
 
 inline ePyObject Impl_PyString_FromFormat(const char* file, int line, const char *fmt, ...)
 {
 	va_list ap;
 	va_start(ap, fmt);
+#if PY_MAJOR_VERSION >= 3
+	PyObject *ob = PyUnicode_FromFormatV(fmt, ap);
+#else
 	PyObject *ob = PyString_FromFormatV(fmt, ap);
+#endif
 	va_end(ap);
 	return ePyObject(ob, file, line);
 }
 
 inline ePyObject Impl_PyInt_FromLong(const char* file, int line, long val)
 {
+#if PY_MAJOR_VERSION >= 3
+	return ePyObject(PyLong_FromLong(val), file, line);
+#else
 	return ePyObject(PyInt_FromLong(val), file, line);
+#endif
 }
 
 inline ePyObject Impl_PyLong_FromLong(const char* file, int line, long val)
@@ -316,21 +344,33 @@
 
 inline ePyObject Impl_PyString_FromString(const char *str)
 {
+#if PY_MAJOR_VERSION >= 3
+	return PyUnicode_FromString(str);
+#else
 	return PyString_FromString(str);
+#endif
 }
 
 inline ePyObject Impl_PyString_FromFormat(const char *fmt, ...)
 {
 	va_list ap;
 	va_start(ap, fmt);
+#if PY_MAJOR_VERSION >= 3
+	PyObject *ob = PyUnicode_FromFormatV(fmt, ap);
+#else
 	PyObject *ob = PyString_FromFormatV(fmt, ap);
+#endif
 	va_end(ap);
 	return ePyObject(ob);
 }
 
 inline ePyObject Impl_PyInt_FromLong(long val)
 {
+#if PY_MAJOR_VERSION >= 3
+	return PyLong_FromLong(val);
+#else
 	return PyInt_FromLong(val);
+#endif
 }
 
 inline ePyObject Impl_PyLong_FromLong(long val)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/python_base.i /home/osboxes/Schreibtisch/test/enigma2/lib/python/python_base.i
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/python_base.i	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/python_base.i	2020-06-21 10:20:02.375328151 -0400
@@ -39,7 +39,7 @@
 		PyObject_ClearWeakRefs((PyObject *) self);
 	eTimerPy_clear(self);
 	self->tm->Release();
-	self->ob_type->tp_free((PyObject*)self);
+	Py_TYPE(self)->tp_free((PyObject*)self);
 }
 
 static PyObject *
@@ -171,8 +171,7 @@
 };
 
 static PyTypeObject eTimerPyType = {
-	PyObject_HEAD_INIT(NULL)
-	0, /*ob_size*/
+	PyVarObject_HEAD_INIT(NULL, 0)
 	"eBaseImpl.eTimer", /*tp_name*/
 	sizeof(eTimerPy), /*tp_basicsize*/
 	0, /*tp_itemsize*/
@@ -246,7 +245,7 @@
 		PyObject_ClearWeakRefs((PyObject *) self);
 	eSocketNotifierPy_clear(self);
 	self->sn->Release();
-	self->ob_type->tp_free((PyObject*)self);
+	Py_TYPE(self)->tp_free((PyObject*)self);
 }
 
 static PyObject *
@@ -356,8 +355,7 @@
 };
 
 static PyTypeObject eSocketNotifierPyType = {
-	PyObject_HEAD_INIT(NULL)
-	0, /*ob_size*/
+	PyVarObject_HEAD_INIT(NULL, 0)
 	"eBaseImpl.eSocketNotifier", /*tp_name*/
 	sizeof(eSocketNotifierPy), /*tp_basicsize*/
 	0, /*tp_itemsize*/
@@ -401,6 +399,21 @@
 	{NULL}  /* Sentinel */
 };
 
+#if PY_MAJOR_VERSION >= 3
+	static struct PyModuleDef eBase_moduledef = {
+	PyModuleDef_HEAD_INIT,
+	"eBaseImpl",																			/* m_name */
+	"Module that implements some enigma classes with working cyclic garbage collection.",	/* m_doc */
+	-1,																						/* m_siz
+	base_module_methods,																	/* m_methods */
+	NULL,																					/* m_reload */
+	NULL,																					/* m_traverse */
+	NULL,																					/* m_clear */
+	NULL,																					/* m_free */
+	};
+#endif
+
+#if PY_MAJOR_VERSION < 3
 void eBaseInit(void)
 {
 	PyObject* m = Py_InitModule3("eBaseImpl", base_module_methods,
@@ -420,6 +433,29 @@
 		PyModule_AddObject(m, "eSocketNotifier", (PyObject*)&eSocketNotifierPyType);
 	}
 }
+#endif
+
+#if PY_MAJOR_VERSION >= 3
+PyObject* PyInit_eBaseImpl(void)
+{
+	PyObject* m = PyModule_Create(&eBase_moduledef);
+
+	if (m == NULL)
+		return NULL;
+
+	if (!PyType_Ready(&eTimerPyType))
+	{
+		Org_Py_INCREF((PyObject*)&eTimerPyType);
+		PyModule_AddObject(m, "eTimer", (PyObject*)&eTimerPyType);
+	}
+	if (!PyType_Ready(&eSocketNotifierPyType))
+	{
+		Org_Py_INCREF((PyObject*)&eSocketNotifierPyType);
+		PyModule_AddObject(m, "eSocketNotifier", (PyObject*)&eSocketNotifierPyType);
+	}
+	return m;
+}
+#endif
 }
 
 %}
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/python_console.i /home/osboxes/Schreibtisch/test/enigma2/lib/python/python_console.i
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/python_console.i	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/python_console.i	2020-06-21 10:20:02.375328151 -0400
@@ -124,7 +124,7 @@
 		PyObject_ClearWeakRefs((PyObject *) self);
 	eConsolePy_clear(self);
 	self->cont->Release();
-	self->ob_type->tp_free((PyObject*)self);
+	Py_TYPE(self)->tp_free((PyObject*)self);
 }
 
 static PyObject *
@@ -335,8 +335,7 @@
 };
 
 static PyTypeObject eConsolePyType = {
-	PyObject_HEAD_INIT(NULL)
-	0, /*ob_size*/
+	PyVarObject_HEAD_INIT(NULL, 0)
 	"eConsoleImpl.eConsoleAppContainer", /*tp_name*/
 	sizeof(eConsolePy), /*tp_basicsize*/
 	0, /*tp_itemsize*/
@@ -380,6 +379,21 @@
 	{NULL}  /* Sentinel */
 };
 
+#if PY_MAJOR_VERSION >= 3
+	static struct PyModuleDef eConsole_moduledef = {
+	PyModuleDef_HEAD_INIT,
+	"eConsoleImpl",																			/* m_name */
+	"Module that implements eConsoleAppContainer with working cyclic garbage collection.",	/* m_doc */
+	-1,																						/* m_siz
+	console_module_methods,																	/* m_methods */
+	NULL,																					/* m_reload */
+	NULL,																					/* m_traverse */
+	NULL,																					/* m_clear */
+	NULL,																					/* m_free */
+	};
+#endif
+
+#if PY_MAJOR_VERSION < 3
 void eConsoleInit(void)
 {
 	PyObject* m = Py_InitModule3("eConsoleImpl", console_module_methods,
@@ -394,5 +408,23 @@
 		PyModule_AddObject(m, "eConsoleAppContainer", (PyObject*)&eConsolePyType);
 	}
 }
+#endif
+
+#if PY_MAJOR_VERSION >= 3
+PyObject* PyInit_eConsoleImpl(void)
+{
+	PyObject* m = PyModule_Create(&eConsole_moduledef);
+
+	if (m == NULL)
+		return NULL;
+
+	if (!PyType_Ready(&eConsolePyType))
+	{
+		Org_Py_INCREF((PyObject*)&eConsolePyType);
+		PyModule_AddObject(m, "eConsoleAppContainer", (PyObject*)&eConsolePyType);
+	}
+	return m;
+}
+#endif
 }
 %}
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/python_service.i /home/osboxes/Schreibtisch/test/enigma2/lib/python/python_service.i
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/python/python_service.i	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/python/python_service.i	2020-06-21 10:20:02.375328151 -0400
@@ -116,7 +116,11 @@
 				data = info->getBuffer(size);
 				if (data && size)
 				{
+%#if PY_MAJOR_VERSION >= 3
+					return PyMemoryView_FromMemory((char*)data, size, PyBUF_READ);
+%#else
 					return PyBuffer_FromMemory(data, size);
+%#endif
 				}
 				else
 				{
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/service/event.cpp /home/osboxes/Schreibtisch/test/enigma2/lib/service/event.cpp
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/service/event.cpp	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/service/event.cpp	2020-06-21 10:17:46.636211719 -0400
@@ -82,18 +82,16 @@
 						m_short_description = "";
 					}
 					m_extended_description += convertDVBUTF8(eed->getText(), table, tsidonid);
+					const ExtendedEventList *itemlist = eed->getItems();
+					for (ExtendedEventConstIterator it = itemlist->begin(); it != itemlist->end(); ++it)
+					{
+						m_extended_description_items += '\n';
+						m_extended_description_items += convertDVBUTF8((*it)->getItemDescription(), table, tsidonid);
+						m_extended_description_items += ": ";
+						m_extended_description_items += convertDVBUTF8((*it)->getItem(), table, tsidonid);
+					}
 					retval=1;
 				}
-#if 0
-				const ExtendedEventList *itemlist = eed->getItems();
-				for (ExtendedEventConstIterator it = itemlist->begin(); it != itemlist->end(); ++it)
-				{
-					m_extended_description += '\n';
-					m_extended_description += convertDVBUTF8((*it)->getItemDescription());
-					m_extended_description += ' ';
-					m_extended_description += convertDVBUTF8((*it)->getItem());
-				}
-#endif
 				break;
 			}
 			default:
@@ -171,6 +169,14 @@
 	}
 	if ( m_extended_description.find(m_short_description) == 0 )
 		m_short_description="";
+
+	if ( ! m_extended_description_items.empty() )
+	{
+		m_extended_description += '\n';
+		m_extended_description += m_extended_description_items;
+		m_extended_description_items = "";
+	}
+
 	return retval;
 }
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/service/event.h /home/osboxes/Schreibtisch/test/enigma2/lib/service/event.h
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/service/event.h	2020-06-21 10:16:12.735444836 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/service/event.h	2020-06-21 10:17:46.640212429 -0400
@@ -82,7 +82,7 @@
 	time_t m_begin;
 	int m_duration;
 	int m_event_id;
-	std::string m_event_name, m_short_description, m_extended_description, m_extra_event_data, m_epg_source;
+	std::string m_event_name, m_short_description, m_extended_description, m_extra_event_data, m_epg_source, m_extended_description_items;
 	static std::string m_language, m_language_alternative;
 	// .. additional info
 public:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/lib/service/servicedvd.cpp /home/osboxes/Schreibtisch/test/enigma2/lib/service/servicedvd.cpp
--- /home/osboxes/Schreibtisch/test/enigma2-start/lib/service/servicedvd.cpp	2020-06-21 10:16:12.739445635 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/lib/service/servicedvd.cpp	2020-06-21 10:20:02.375328151 -0400
@@ -1171,8 +1171,26 @@
 
 eAutoInitPtr<eServiceFactoryDVD> init_eServiceFactoryDVD(eAutoInitNumbers::service+1, "eServiceFactoryDVD");
 
+#if PY_MAJOR_VERSION >= 3
+	static struct PyModuleDef servicedvd_moduledef = {
+		PyModuleDef_HEAD_INIT,
+		"servicedvd",	/* m_name */
+		"servicedvd",	/* m_doc */
+		-1,				/* m_size */
+		NULL,			/* m_methods */
+		NULL,			/* m_reload */
+		NULL,			/* m_traverse */
+		NULL,			/* m_clear */
+		NULL,			/* m_free */
+	};
+#endif
+
 PyMODINIT_FUNC
 initservicedvd(void)
 {
+#if PY_MAJOR_VERSION >= 3
+	PyModule_Create(&servicedvd_moduledef);
+#else
 	Py_InitModule("servicedvd", NULL);
+#endif
 }
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/m4/ax_python_devel.m4 /home/osboxes/Schreibtisch/test/enigma2/m4/ax_python_devel.m4
--- /home/osboxes/Schreibtisch/test/enigma2-start/m4/ax_python_devel.m4	2020-06-21 10:16:12.739445635 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/m4/ax_python_devel.m4	2020-06-21 10:20:02.375328151 -0400
@@ -1,5 +1,5 @@
 # ===========================================================================
-#      http://www.gnu.org/software/autoconf-archive/ax_python_devel.html
+#     https://www.gnu.org/software/autoconf-archive/ax_python_devel.html
 # ===========================================================================
 #
 # SYNOPSIS
@@ -12,8 +12,8 @@
 #   in your configure.ac.
 #
 #   This macro checks for Python and tries to get the include path to
-#   'Python.h'. It provides the $(PYTHON_CPPFLAGS) and $(PYTHON_LDFLAGS)
-#   output variables. It also exports $(PYTHON_EXTRA_LIBS) and
+#   'Python.h'. It provides the $(PYTHON_CPPFLAGS) and $(PYTHON_LIBS) output
+#   variables. It also exports $(PYTHON_EXTRA_LIBS) and
 #   $(PYTHON_EXTRA_LDFLAGS) for embedding Python in your code.
 #
 #   You can search for some particular version of Python by passing a
@@ -34,11 +34,12 @@
 # LICENSE
 #
 #   Copyright (c) 2009 Sebastian Huber <sebastian-huber@web.de>
-#   Copyright (c) 2009 Alan W. Irwin <irwin@beluga.phys.uvic.ca>
+#   Copyright (c) 2009 Alan W. Irwin
 #   Copyright (c) 2009 Rafael Laboissiere <rafael@laboissiere.net>
-#   Copyright (c) 2009 Andrew Collier <colliera@ukzn.ac.za>
+#   Copyright (c) 2009 Andrew Collier
 #   Copyright (c) 2009 Matteo Settenvini <matteo@member.fsf.org>
 #   Copyright (c) 2009 Horst Knorr <hk_classes@knoda.org>
+#   Copyright (c) 2013 Daniel Mullner <muellner@math.stanford.edu>
 #
 #   This program is free software: you can redistribute it and/or modify it
 #   under the terms of the GNU General Public License as published by the
@@ -51,7 +52,7 @@
 #   Public License for more details.
 #
 #   You should have received a copy of the GNU General Public License along
-#   with this program. If not, see <http://www.gnu.org/licenses/>.
+#   with this program. If not, see <https://www.gnu.org/licenses/>.
 #
 #   As a special exception, the respective Autoconf Macro's copyright owner
 #   gives unlimited permission to copy, distribute and modify the configure
@@ -66,7 +67,7 @@
 #   modified version of the Autoconf Macro, you may extend this special
 #   exception to the GPL to apply to your modified version as well.
 
-#serial 8
+#serial 21
 
 AU_ALIAS([AC_PYTHON_DEVEL], [AX_PYTHON_DEVEL])
 AC_DEFUN([AX_PYTHON_DEVEL],[
@@ -98,7 +99,7 @@
 This version of the AC@&t@_PYTHON_DEVEL macro
 doesn't work properly with versions of Python before
 2.1.0. You may need to re-run configure, setting the
-variables PYTHON_CPPFLAGS, PYTHON_LDFLAGS, PYTHON_SITE_PKG,
+variables PYTHON_CPPFLAGS, PYTHON_LIBS, PYTHON_SITE_PKG,
 PYTHON_EXTRA_LIBS and PYTHON_EXTRA_LDFLAGS by hand.
 Moreover, to disable this check, set PYTHON_NOVERSIONCHECK
 to something else than an empty string.
@@ -136,7 +137,7 @@
 	#
 	AC_MSG_CHECKING([for the distutils Python package])
 	ac_distutils_result=`$PYTHON -c "import distutils" 2>&1`
-	if test -z "$ac_distutils_result"; then
+	if test $? -eq 0; then
 		AC_MSG_RESULT([yes])
 	else
 		AC_MSG_RESULT([no])
@@ -153,8 +154,14 @@
 	if test -z "$PYTHON_CPPFLAGS"; then
 		python_path=`$PYTHON -c "import distutils.sysconfig; \
 			print (distutils.sysconfig.get_python_inc ());"`
+		plat_python_path=`$PYTHON -c "import distutils.sysconfig; \
+			print (distutils.sysconfig.get_python_inc (plat_specific=1));"`
 		if test -n "${python_path}"; then
-			python_path="-I$python_path"
+			if test "${plat_python_path}" != "${python_path}"; then
+				python_path="-I$python_path -I$plat_python_path"
+			else
+				python_path="-I$python_path"
+			fi
 		fi
 		PYTHON_CPPFLAGS=$python_path
 	fi
@@ -165,7 +172,7 @@
 	# Check for Python library path
 	#
 	AC_MSG_CHECKING([for Python library path])
-	if test -z "$PYTHON_LDFLAGS"; then
+	if test -z "$PYTHON_LIBS"; then
 		# (makes two attempts to ensure we've got a version number
 		# from the interpreter)
 		ac_python_version=`cat<<EOD | $PYTHON -
@@ -173,11 +180,9 @@
 # join all versioning strings, on some systems
 # major/minor numbers could be in different list elements
 from distutils.sysconfig import *
-ret = ''
-for e in get_config_vars ('VERSION'):
-	if (e != None):
-		ret += e
-print (ret)
+e = get_config_var('VERSION')
+if e is not None:
+	print(e)
 EOD`
 
 		if test -z "$ac_python_version"; then
@@ -198,55 +203,49 @@
 
 # There should be only one
 import distutils.sysconfig
-for e in distutils.sysconfig.get_config_vars ('LIBDIR'):
-	if e != None:
-		print (e)
-		break
+e = distutils.sysconfig.get_config_var('LIBDIR')
+if e is not None:
+	print (e)
 EOD`
 
-		# Before checking for libpythonX.Y, we need to know
-		# the extension the OS we're on uses for libraries
-		# (we take the first one, if there's more than one fix me!):
-		ac_python_soext=`$PYTHON -c \
-		  "import distutils.sysconfig; \
-		  print (distutils.sysconfig.get_config_vars('SO')[[0]])"`
-
 		# Now, for the library:
-		ac_python_soname=`$PYTHON -c \
-		  "import distutils.sysconfig; \
-		  print (distutils.sysconfig.get_config_vars('LDLIBRARY')[[0]])"`
+		ac_python_library=`cat<<EOD | $PYTHON -
 
-		# Strip away extension from the end to canonicalize its name:
-		ac_python_library=`echo "$ac_python_soname" | sed "s/${ac_python_soext}$//"`
+import distutils.sysconfig
+c = distutils.sysconfig.get_config_vars()
+if 'LDVERSION' in c:
+	print ('python'+c[['LDVERSION']])
+else:
+	print ('python'+c[['VERSION']])
+EOD`
 
 		# This small piece shamelessly adapted from PostgreSQL python macro;
 		# credits goes to momjian, I think. I'd like to put the right name
 		# in the credits, if someone can point me in the right direction... ?
 		#
-		if test -n "$ac_python_libdir" -a -n "$ac_python_library" \
-			-a x"$ac_python_library" != x"$ac_python_soname"
+		if test -n "$ac_python_libdir" -a -n "$ac_python_library"
 		then
 			# use the official shared library
 			ac_python_library=`echo "$ac_python_library" | sed "s/^lib//"`
-			PYTHON_LDFLAGS="-L$ac_python_libdir -l$ac_python_library"
+			PYTHON_LIBS="-L$ac_python_libdir -l$ac_python_library"
 		else
 			# old way: use libpython from python_configdir
 			ac_python_libdir=`$PYTHON -c \
 			  "from distutils.sysconfig import get_python_lib as f; \
 			  import os; \
 			  print (os.path.join(f(plat_specific=1, standard_lib=1), 'config'));"`
-			PYTHON_LDFLAGS="-L$ac_python_libdir -lpython$ac_python_version"
+			PYTHON_LIBS="-L$ac_python_libdir -lpython$ac_python_version"
 		fi
 
-		if test -z "PYTHON_LDFLAGS"; then
+		if test -z "PYTHON_LIBS"; then
 			AC_MSG_ERROR([
   Cannot determine location of your Python DSO. Please check it was installed with
-  dynamic libraries enabled, or try setting PYTHON_LDFLAGS by hand.
+  dynamic libraries enabled, or try setting PYTHON_LIBS by hand.
 			])
 		fi
 	fi
-	AC_MSG_RESULT([$PYTHON_LDFLAGS])
-	AC_SUBST([PYTHON_LDFLAGS])
+	AC_MSG_RESULT([$PYTHON_LIBS])
+	AC_SUBST([PYTHON_LIBS])
 
 	#
 	# Check for site packages
@@ -266,7 +265,7 @@
 	if test -z "$PYTHON_EXTRA_LIBS"; then
 	   PYTHON_EXTRA_LIBS=`$PYTHON -c "import distutils.sysconfig; \
                 conf = distutils.sysconfig.get_config_var; \
-                print (conf('LOCALMODLIBS') + ' ' + conf('LIBS'))"`
+                print (conf('LIBS') + ' ' + conf('SYSLIBS'))"`
 	fi
 	AC_MSG_RESULT([$PYTHON_EXTRA_LIBS])
 	AC_SUBST(PYTHON_EXTRA_LIBS)
@@ -289,8 +288,10 @@
 	AC_MSG_CHECKING([consistency of all components of python development environment])
 	# save current global flags
 	ac_save_LIBS="$LIBS"
+	ac_save_LDFLAGS="$LDFLAGS"
 	ac_save_CPPFLAGS="$CPPFLAGS"
-	LIBS="$ac_save_LIBS $PYTHON_LDFLAGS $PYTHON_EXTRA_LDFLAGS $PYTHON_EXTRA_LIBS"
+	LIBS="$ac_save_LIBS $PYTHON_LIBS $PYTHON_EXTRA_LIBS $PYTHON_EXTRA_LIBS"
+	LDFLAGS="$ac_save_LDFLAGS $PYTHON_EXTRA_LDFLAGS"
 	CPPFLAGS="$ac_save_CPPFLAGS $PYTHON_CPPFLAGS"
 	AC_LANG_PUSH([C])
 	AC_LINK_IFELSE([
@@ -301,6 +302,7 @@
 	# turn back to default flags
 	CPPFLAGS="$ac_save_CPPFLAGS"
 	LIBS="$ac_save_LIBS"
+	LDFLAGS="$ac_save_LDFLAGS"
 
 	AC_MSG_RESULT([$pythonexists])
 
@@ -308,8 +310,8 @@
 	   AC_MSG_FAILURE([
   Could not link test program to Python. Maybe the main Python library has been
   installed in some non-standard library path. If so, pass it to configure,
-  via the LDFLAGS environment variable.
-  Example: ./configure LDFLAGS="-L/usr/non-standard-path/python/lib"
+  via the LIBS environment variable.
+  Example: ./configure LIBS="-L/usr/non-standard-path/python/lib"
   ============================================================================
    ERROR!
    You probably have to install the development version of the Python package
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/main/Makefile.am /home/osboxes/Schreibtisch/test/enigma2/main/Makefile.am
--- /home/osboxes/Schreibtisch/test/enigma2-start/main/Makefile.am	2020-06-21 10:16:12.739445635 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/main/Makefile.am	2020-06-21 10:20:02.375328151 -0400
@@ -41,7 +41,7 @@
 	@LIBSDL_LIBS@ \
 	@LIBXINE_LIBS@ \
 	@PTHREAD_LIBS@ \
-	@PYTHON_LDFLAGS@ \
+	@PYTHON_LIBS@ \
 	@LIBDDVD_LIBS@ \
 	@ALSA_LIBS@ \
 	@AMCODEC_LIBS@ \
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/mytest.py /home/osboxes/Schreibtisch/test/enigma2/mytest.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/mytest.py	2020-06-21 10:16:12.739445635 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/mytest.py	2020-06-21 10:20:02.375328151 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import sys
 import os
 from time import time
@@ -97,11 +98,11 @@
 
 def useSyncUsingChanged(configelement):
 	if config.misc.SyncTimeUsing.value == "0":
-		print "[Time By]: Transponder"
+		print("[Time By]: Transponder")
 		enigma.eDVBLocalTimeHandler.getInstance().setUseDVBTime(True)
 		enigma.eEPGCache.getInstance().timeUpdated()
 	else:
-		print "[Time By]: NTP"
+		print("[Time By]: NTP")
 		enigma.eDVBLocalTimeHandler.getInstance().setUseDVBTime(False)
 		enigma.eEPGCache.getInstance().timeUpdated()
 config.misc.SyncTimeUsing.addNotifier(useSyncUsingChanged)
@@ -109,11 +110,11 @@
 def NTPserverChanged(configelement):
 	if config.misc.NTPserver.value == "pool.ntp.org":
 		return
-	print "[NTPDATE] save /etc/default/ntpdate"
+	print("[NTPDATE] save /etc/default/ntpdate")
 	f = open("/etc/default/ntpdate", "w")
 	f.write('NTPSERVERS="' + config.misc.NTPserver.value + '"')
 	f.close()
-	os.chmod("/etc/default/ntpdate", 0755)
+	os.chmod("/etc/default/ntpdate", 0o755)
 	from Components.Console import Console
 	Console = Console()
 	Console.ePopen('/usr/bin/ntpdate-sync')
@@ -121,6 +122,9 @@
 
 profile("Twisted")
 try:
+	import twisted.python.runtime
+	twisted.python.runtime.platform.supportsThreads = lambda: True
+
 	import e2reactor
 	e2reactor.install()
 
@@ -129,7 +133,7 @@
 	def runReactor():
 		reactor.run(installSignalHandlers=False)
 except ImportError:
-	print "twisted not available"
+	print("twisted not available")
 	def runReactor():
 		enigma.runMainloop()
 
@@ -160,13 +164,13 @@
 			dump(val, p + "(dict)/" + entry)
 	if hasattr(dir, "__dict__"):
 		for name, value in dir.__dict__.items():
-			if not had.has_key(str(value)):
+			if str(value) not in had:
 				had[str(value)] = 1
 				dump(value, p + "/" + str(name))
 			else:
-				print p + "/" + str(name) + ":" + str(dir.__class__) + "(cycle)"
+				print(p + "/" + str(name) + ":" + str(dir.__class__) + "(cycle)")
 	else:
-		print p + ":" + str(dir)
+		print(p + ":" + str(dir))
 
 # + ":" + str(dir.__class__)
 
@@ -227,7 +231,7 @@
 			try:
 				p(reason=0, session=self)
 			except:
-				print "Plugin raised exception at WHERE_SESSIONSTART"
+				print("Plugin raised exception at WHERE_SESSIONSTART")
 				import traceback
 				traceback.print_exc()
 
@@ -356,7 +360,7 @@
 
 	def close(self, screen, *retval):
 		if not self.in_exec:
-			print "close after exec!"
+			print("close after exec!")
 			return
 
 		# be sure that the close is for the right dialog!
@@ -412,7 +416,7 @@
 		recordings = self.session.nav.getRecordingsCheckBeforeActivateDeepStandby()
 		if recordings:
 			from Screens.MessageBox import MessageBox
-			self.session.openWithCallback(self.gotoStandby,MessageBox,_("Recording(s) are in progress or coming up in few seconds!\nEntering standby, after recording the box will shutdown."), type = MessageBox.TYPE_INFO, close_on_any_key = True, timeout = 10)
+			self.session.openWithCallback(self.gotoStandby, MessageBox, _("Recording(s) are in progress or coming up in few seconds!\nEntering standby, after recording the box will shutdown."), type = MessageBox.TYPE_INFO, close_on_any_key = True, timeout = 10)
 		elif not Screens.Standby.inTryQuitMainloop and self.session.current_dialog and self.session.current_dialog.ALLOW_SUSPEND:
 			self.session.open(Screens.Standby.TryQuitMainloop, 1)
 
@@ -430,7 +434,7 @@
 		if action == "shutdown":
 			self.shutdown()
 		elif action == "show_menu":
-			print "Show shutdown Menu"
+			print("Show shutdown Menu")
 			root = mdom.getroot()
 			for x in root.findall("menu"):
 				y = x.find("id")
@@ -583,16 +587,16 @@
 			os.system('rm -f /media/hdd/images/config/autorestore')
 		screensToRun = [ p.__call__ for p in plugins.getPlugins(PluginDescriptor.WHERE_WIZARD) ]
 		screensToRun += wizardManager.getWizards()
-	
+
 	screensToRun.append((100, InfoBar.InfoBar))
 	screensToRun.sort()
-	print screensToRun
+	print(screensToRun)
 
 	enigma.ePythonConfigQuery.setQueryFunc(configfile.getResolvedKey)
 
 	def runNextScreen(session, screensToRun, *result):
 		if result:
-			print "[mytest.py] quitMainloop #3"
+			print("[mytest.py] quitMainloop #3")
 			enigma.quitMainloop(*result)
 			return
 
@@ -611,7 +615,7 @@
 	profile("Init:PowerKey")
 	power = PowerKey(session)
 	
-	if boxtype in ('alien5','osninopro','osnino','osninoplus','alphatriple','spycat4kmini','tmtwin4k','mbmicrov2','revo4k','force3uhd','wetekplay', 'wetekplay2', 'wetekhub', 'dm7020hd', 'dm7020hdv2', 'osminiplus', 'osmega', 'sf3038', 'spycat', 'e4hd', 'e4hdhybrid', 'mbmicro', 'et7500', 'mixosf5', 'mixosf7', 'mixoslumi', 'gi9196m', 'maram9', 'ixussone', 'ixusszero', 'uniboxhd1', 'uniboxhd2', 'uniboxhd3', 'sezam5000hd', 'mbtwin', 'sezam1000hd', 'mbmini', 'atemio5x00', 'beyonwizt3', '9910lx', '9911lx', '9920lx') or getBrandOEM() in ('fulan') or getMachineBuild() in ('u41','dags7362','dags73625','dags5','ustym4kpro','beyonwizv2','viper4k','sf8008','sf8008m','cc1','gbmv200'):
+	if boxtype in ('alien5', 'osninopro', 'osnino', 'osninoplus', 'alphatriple', 'spycat4kmini', 'tmtwin4k', 'mbmicrov2', 'revo4k', 'force3uhd', 'wetekplay', 'wetekplay2', 'wetekhub', 'dm7020hd', 'dm7020hdv2', 'osminiplus', 'osmega', 'sf3038', 'spycat', 'e4hd', 'e4hdhybrid', 'mbmicro', 'et7500', 'mixosf5', 'mixosf7', 'mixoslumi', 'gi9196m', 'maram9', 'ixussone', 'ixusszero', 'uniboxhd1', 'uniboxhd2', 'uniboxhd3', 'sezam5000hd', 'mbtwin', 'sezam1000hd', 'mbmini', 'atemio5x00', 'beyonwizt3', '9910lx', '9911lx', '9920lx') or getBrandOEM() in ('fulan') or getMachineBuild() in ('u41', 'dags7362', 'dags73625', 'dags5', 'ustym4kpro', 'beyonwizv2', 'viper4k', 'sf8008', 'sf8008m', 'cc1', 'gbmv200'):
 		profile("VFDSYMBOLS")
 		import Components.VfdSymbols
 		Components.VfdSymbols.SymbolsCheck(session)
@@ -635,11 +639,11 @@
 		f.write('-E2-')
 		f.close()
 
-	print "lastshutdown=%s		(True = last shutdown was OK)" % config.usage.shutdownOK.value
-	print "NOK shutdown action=%s" % config.usage.shutdownNOK_action.value
-	print "bootup action=%s" % config.usage.boot_action.value
+	print("lastshutdown=%s		(True = last shutdown was OK)" % config.usage.shutdownOK.value)
+	print("NOK shutdown action=%s" % config.usage.shutdownNOK_action.value)
+	print("bootup action=%s" % config.usage.boot_action.value)
 	if not config.usage.shutdownOK.value and not config.usage.shutdownNOK_action.value == 'normal' or not config.usage.boot_action.value == 'normal':
-		print "last shutdown = %s" % config.usage.shutdownOK.value
+		print("last shutdown = %s" % config.usage.shutdownOK.value)
 		import Screens.PowerLost
 		Screens.PowerLost.PowerLost(session)
 
@@ -649,12 +653,12 @@
 		configfile.save()
 
 	# kill showiframe if it is running (sh4 hack...)
-	if getMachineBuild() in ('spark' , 'spark7162'):
+	if getMachineBuild() in ('spark', 'spark7162'):
 		os.system("killall -9 showiframe")
 
 	runReactor()
 
-	print "[mytest.py] normal shutdown"
+	print("[mytest.py] normal shutdown")
 	config.misc.startCounter.save()
 	config.usage.shutdownOK.setValue(True)
 	config.usage.shutdownOK.save()
@@ -665,7 +669,7 @@
 	nowTime = time()
 #	if not config.misc.SyncTimeUsing.value == "0" or getBrandOEM() == 'gigablue':
 	if not config.misc.SyncTimeUsing.value == "0" or boxtype.startswith('gb') or getBrandOEM().startswith('ini'):
-		print "dvb time sync disabled... so set RTC now to current linux time!", strftime("%Y/%m/%d %H:%M", localtime(nowTime))
+		print("dvb time sync disabled... so set RTC now to current linux time!", strftime("%Y/%m/%d %H:%M", localtime(nowTime)))
 		setRTCtime(nowTime)
 
 	#recordtimer
@@ -721,7 +725,7 @@
 	]
 	wakeupList.sort()
 
-	print "="*100
+	print("="*100)
 	if wakeupList and wakeupList[0][0] > 0:
 		startTime = wakeupList[0]
 		# wakeup time before timer begins
@@ -744,23 +748,23 @@
 			nextPluginName = " (%s)" % nextPluginName
 		else:
 			nextPluginName = ""
-		print "[mytest.py] set next wakeup type to '%s'%s %s" % ({0:"record-timer",1:"zap-timer",2:"power-timer",3:"plugin-timer"}[startTime[1]], nextPluginName, {0:"and starts normal",1:"and starts in standby"}[setStandby])
+		print("[mytest.py] set next wakeup type to '%s'%s %s" % ({0:"record-timer",1:"zap-timer",2:"power-timer",3:"plugin-timer"}[startTime[1]], nextPluginName, {0:"and starts normal",1:"and starts in standby"}[setStandby]))
 		if forceNextRecord:
-			print "[mytest.py] set from 'vps-plugin' or just before a 'record-timer' starts, set 'record-timer' wakeup flag"
-		print "[mytest.py] set next wakeup time to", strftime("%a, %Y/%m/%d %H:%M:%S", localtime(wptime))
+			print("[mytest.py] set from 'vps-plugin' or just before a 'record-timer' starts, set 'record-timer' wakeup flag")
+		print("[mytest.py] set next wakeup time to", strftime("%a, %Y/%m/%d %H:%M:%S", localtime(wptime)))
 		#set next wakeup
 		setFPWakeuptime(wptime)
 		#set next standby only after shutdown in deep standby
 		if Screens.Standby.quitMainloopCode != 1 and Screens.Standby.quitMainloopCode != 45:
 			setStandby = 2 # 0=no standby, but get in standby if wakeup to timer start > 60 sec (not for plugin-timer, here is no standby), 1=standby, 2=no standby, when before was not in deep-standby
-		config.misc.nextWakeup.value = "%d,%d,%d,%d,%d,%d,%d" % (int(nowTime),wptime,startTime[0],startTime[1],setStandby,nextRecordTime,forceNextRecord)
+		config.misc.nextWakeup.value = "%d,%d,%d,%d,%d,%d,%d" % (int(nowTime), wptime, startTime[0], startTime[1], setStandby, nextRecordTime, forceNextRecord)
 	else:
 		config.misc.nextWakeup.value = "%d,-1,-1,0,0,-1,0" % (int(nowTime))
 		if not boxtype.startswith('azboxm'): #skip for Azbox (mini)ME - setting wakeup time to past reboots box 
 			setFPWakeuptime(int(nowTime) - 3600) #minus one hour -> overwrite old wakeup time
-		print "[mytest.py] no set next wakeup time"
+		print("[mytest.py] no set next wakeup time")
 	config.misc.nextWakeup.save()
-	print "="*100
+	print("="*100)
 
 	profile("stopService")
 	session.nav.stopService()
@@ -840,21 +844,21 @@
 			f.write('0')
 			f.close()
 	except:
-		print "Error disable enable_clock for ini5000 boxes"
+		print("Error disable enable_clock for ini5000 boxes")
 
 if boxtype in ('dm7080', 'dm820', 'dm900', 'dm920', 'gb7252'):
-	f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor","r")
+	f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor", "r")
 	check=f.read()
 	f.close()
 	if check.startswith("on"):
-		f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor","w")
+		f=open("/proc/stb/hdmi-rx/0/hdmi_rx_monitor", "w")
 		f.write("off")
 		f.close()
-	f=open("/proc/stb/audio/hdmi_rx_monitor","r")
+	f=open("/proc/stb/audio/hdmi_rx_monitor", "r")
 	check=f.read()
 	f.close()
 	if check.startswith("on"):
-		f=open("/proc/stb/audio/hdmi_rx_monitor","w")
+		f=open("/proc/stb/audio/hdmi_rx_monitor", "w")
 		f.write("off")
 		f.close()
 
@@ -891,9 +895,9 @@
 
 	Components.ParentalControl.parentalControl.save()
 except:
-	print 'EXCEPTION IN PYTHON STARTUP CODE:'
-	print '-'*60
+	print('EXCEPTION IN PYTHON STARTUP CODE:')
+	print('-'*60)
 	print_exc(file=stdout)
-	print "[mytest.py] quitMainloop #4"
+	print("[mytest.py] quitMainloop #4")
 	enigma.quitMainloop(5)
-	print '-'*60
+	print('-'*60)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/po/xml2po.py /home/osboxes/Schreibtisch/test/enigma2/po/xml2po.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/po/xml2po.py	2020-06-21 10:16:12.819461611 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/po/xml2po.py	2020-06-21 10:20:02.383329250 -0400
@@ -1,7 +1,9 @@
 #!/usr/bin/python
+# -*- coding: utf-8 -*-
+from __future__ import print_function
 import sys
 import os
-import string
+import six
 import re
 from xml.sax import make_parser
 from xml.sax.handler import ContentHandler, property_lexical_handler
@@ -28,7 +30,7 @@
 	def startElement(self, name, attrs):
 		for x in ["text", "title", "value", "caption", "description"]:
 			try:
-				k = str(attrs[x].encode('utf-8'))
+				k = six.ensure_str(attrs[x])
 				if k.strip() != "" and not self.ishex.match(k):
 					attrlist.add((k, self.last_comment))
 					self.last_comment = None
@@ -55,14 +57,14 @@
 	attrlist = list(attrlist)
 	attrlist.sort(key=lambda a: a[0])
 
-	for (k,c) in attrlist:
-		print
-		print '#: ' + arg
-		string.replace(k, "\\n", "\"\n\"")
+	for (k, c) in attrlist:
+		print()
+		print('#: ' + arg)
+		k.replace("\\n", "\"\n\"")
 		if c:
 			for l in c.split('\n'):
-				print "#. ", l
-		print 'msgid "' + str(k) + '"'
-		print 'msgstr ""'
+				print("#. ", l)
+		print('msgid "' + six.ensure_str(k) + '"')
+		print('msgstr ""')
 
 	attrlist = set()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/pyo_patcher.py /home/osboxes/Schreibtisch/test/enigma2/pyo_patcher.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/pyo_patcher.py	2020-06-21 10:16:12.819461611 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/pyo_patcher.py	2020-06-21 10:20:02.383329250 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import os
 
 filename = "/usr/lib/enigma2/python/Plugins/Extensions/MediaPortal/plugin.pyo"
@@ -16,7 +17,7 @@
 	str = str.replace('dm920N', 'dn920N')
 	
 	if oldstr != str:
-		print "!!! Patch pyo line %d" %(line)
+		print("!!! Patch pyo line %d" %(line))
 
 	dest.write(str)
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/skin.py /home/osboxes/Schreibtisch/test/enigma2/skin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/skin.py	2020-06-21 10:16:12.819461611 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/skin.py	2020-06-21 10:20:02.383329250 -0400
@@ -1,5 +1,8 @@
+from __future__ import division
+from __future__ import print_function
 import errno
 import xml.etree.cElementTree
+import six
 
 from boxbranding import getBoxType
 from enigma import addFont, eLabel, ePixmap, ePoint, eRect, eSize, eWindow, eWindowStyleManager, eWindowStyleSkinned, getDesktop, gFont, getFontFaces, gRGB
@@ -49,7 +52,7 @@
 config.skin = ConfigSubsection()
 skin = resolveFilename(SCOPE_SKIN, DEFAULT_SKIN)
 if not isfile(skin):
-	print "[Skin] Error: Default skin '%s' is not readable or is not a file!  Using emergency skin." % skin
+	print("[Skin] Error: Default skin '%s' is not readable or is not a file!  Using emergency skin." % skin)
 	DEFAULT_SKIN = EMERGENCY_SKIN
 config.skin.primary_skin = ConfigText(default=DEFAULT_SKIN)
 config.skin.display_skin = ConfigText(default=DEFAULT_DISPLAY_SKIN)
@@ -80,18 +83,18 @@
 		lastpath = ''
 		for skin in sorted(glob.glob('/usr/lib/enigma2/python/Plugins/Extensions/*/ActivateSkinSettings.py*')):
 			try:
-				print '[RESTORE_SKIN] restore skin from "%s" ...' % skin
+				print('[RESTORE_SKIN] restore skin from "%s" ...' % skin)
 				skinpath, ext = path.splitext(skin)
-				if skinpath == lastpath or not ext in '.pyo':
-					print '[RESTORE_SKIN] ...skip!'
+				if skinpath == lastpath or not ext in ('.py', '.pyc', '.pyo'):
+					print('[RESTORE_SKIN] ...skip!')
 					continue
 				lastpath = skinpath
-				if getattr(__import__(skin.replace('/usr/lib/enigma2/python/','').replace(ext,'').replace('/','.'), fromlist=['ActivateSkinSettings']), 'ActivateSkinSettings')().WriteSkin(True):
-					print '[RESTORE_SKIN] ... failed!'
+				if getattr(__import__(skin.replace('/usr/lib/enigma2/python/', '').replace(ext, '').replace('/', '.'), fromlist=['ActivateSkinSettings']), 'ActivateSkinSettings')().WriteSkin(True):
+					print('[RESTORE_SKIN] ... failed!')
 				else:
-					print '[RESTORE_SKIN] ... done!'
-			except Exception, err:
-				print '[RESTORE_SKIN] ...error occurred: ', err
+					print('[RESTORE_SKIN] ... done!')
+			except Exception as err:
+				print('[RESTORE_SKIN] ...error occurred: ', err)
 	##################################################################################################
 	runCallbacks = False
 	# Add the emergency skin.  This skin should provide enough functionality
@@ -108,7 +111,7 @@
 		if loadSkin(config.skin.primary_skin.value, scope=SCOPE_CURRENT_SKIN, desktop=getDesktop(GUI_SKIN_ID), screenID=GUI_SKIN_ID):
 			currentPrimarySkin = config.skin.primary_skin.value
 			break
-		print "[Skin] Error: Adding %s GUI skin '%s' has failed!" % (name, config.skin.primary_skin.value)
+		print("[Skin] Error: Adding %s GUI skin '%s' has failed!" % (name, config.skin.primary_skin.value))
 		result.append(skin)
 	# Add the front panel / display / lcd skin.
 	result = []
@@ -119,16 +122,17 @@
 		if loadSkin(config.skin.display_skin.value, scope=SCOPE_CURRENT_LCDSKIN, desktop=getDesktop(DISPLAY_SKIN_ID), screenID=DISPLAY_SKIN_ID):
 			currentDisplaySkin = config.skin.display_skin.value
 			break
-		print "[Skin] Error: Adding %s display skin '%s' has failed!" % (name, config.skin.display_skin.value)
+		print("[Skin] Error: Adding %s display skin '%s' has failed!" % (name, config.skin.display_skin.value))
 		result.append(skin)
 	# Add the activated optional skin parts.
-	partsDir = resolveFilename(SCOPE_CURRENT_SKIN, pathjoin(dirname(currentPrimarySkin), "mySkin", ""))
-	if pathExists(partsDir) and currentPrimarySkin != DEFAULT_SKIN:
-		for file in sorted(listdir(partsDir)):
-			if file.startswith("skin_") and file.endswith(".xml"):
-				partsFile = pathjoin(partsDir, file)
-				if not loadSkin(partsFile, scope=SCOPE_CURRENT_SKIN, desktop=getDesktop(GUI_SKIN_ID), screenID=GUI_SKIN_ID):
-					print "[Skin] Error: Failed to load modular skin file '%s'!" % partsFile
+	if currentPrimarySkin != None:
+		partsDir = resolveFilename(SCOPE_CURRENT_SKIN, pathjoin(dirname(currentPrimarySkin), "mySkin", ""))
+		if pathExists(partsDir) and currentPrimarySkin != DEFAULT_SKIN:
+			for file in sorted(listdir(partsDir)):
+				if file.startswith("skin_") and file.endswith(".xml"):
+					partsFile = pathjoin(partsDir, file)
+					if not loadSkin(partsFile, scope=SCOPE_CURRENT_SKIN, desktop=getDesktop(GUI_SKIN_ID), screenID=GUI_SKIN_ID):
+						print("[Skin] Error: Failed to load modular skin file '%s'!" % partsFile)
 	# Add an optional skin related user skin "user_skin_<SkinName>.xml".  If there is
 	# not a skin related user skin then try to add am optional generic user skin.
 	result = None
@@ -150,12 +154,12 @@
 def loadSkin(filename, scope=SCOPE_SKIN, desktop=getDesktop(GUI_SKIN_ID), screenID=GUI_SKIN_ID):
 	global windowStyles
 	filename = resolveFilename(scope, filename)
-	print "[Skin] Loading skin file '%s'." % filename
+	print("[Skin] Loading skin file '%s'." % filename)
 	try:
 		with open(filename, "r") as fd:  # This open gets around a possible file handle leak in Python's XML parser.
 			try:
 				domSkin = xml.etree.cElementTree.parse(fd).getroot()
-				# print "[Skin] DEBUG: Extracting non screen blocks from '%s'.  (scope='%s')" % (filename, scope)
+				# print("[Skin] DEBUG: Extracting non screen blocks from '%s'.  (scope='%s')" % (filename, scope))
 				# For loadSingleSkinData colors, bordersets etc. are applied one after
 				# the other in order of ascending priority.
 				loadSingleSkinData(desktop, screenID, domSkin, filename, scope=scope)
@@ -165,19 +169,19 @@
 						if name:  # Without a name, it's useless!
 							sid = element.attrib.get("id", None)
 							if sid is None or sid == screenID:  # If there is a screen ID is it for this display.
-								# print "[Skin] DEBUG: Extracting screen '%s' from '%s'.  (scope='%s')" % (name, filename, scope)
+								 # print("[Skin] DEBUG: Extracting screen '%s' from '%s'.  (scope='%s')" % (name, filename, scope))
 								domScreens[name] = (element, "%s/" % dirname(filename))
 					elif element.tag == "windowstyle":  # Process the windowstyle element.
 						id = element.attrib.get("id", None)
 						if id is not None:  # Without an id, it is useless!
 							id = int(id)
-							# print "[Skin] DEBUG: Processing a windowstyle ID='%s'." % id
+							# print("[Skin] DEBUG: Processing a windowstyle ID='%s'." % id)
 							domStyle = xml.etree.cElementTree.ElementTree(xml.etree.cElementTree.Element("skin"))
 							domStyle.getroot().append(element)
-							windowStyles[id] = (desktop, screenID, domStyle, filename, scope)
+							windowStyles[id] = (desktop, screenID, domStyle.getroot(), filename, scope)
 					# Element is not a screen or windowstyle element so no need for it any longer.
 				reloadWindowStyles()  # Reload the window style to ensure all skin changes are taken into account.
-				print "[Skin] Loading skin file '%s' complete." % filename
+				print("[Skin] Loading skin file '%s' complete." % filename)
 				if runCallbacks:
 					for method in self.callbacks:
 						if method:
@@ -187,19 +191,19 @@
 				fd.seek(0)
 				content = fd.readlines()
 				line, column = err.position
-				print "[Skin] XML Parse Error: '%s' in '%s'!" % (err, filename)
+				print("[Skin] XML Parse Error: '%s' in '%s'!" % (err, filename))
 				data = content[line - 1].replace("\t", " ").rstrip()
-				print "[Skin] XML Parse Error: '%s'" % data
-				print "[Skin] XML Parse Error: '%s^%s'" % ("-" * column, " " * (len(data) - column - 1))
+				print("[Skin] XML Parse Error: '%s'" % data)
+				print("[Skin] XML Parse Error: '%s^%s'" % ("-" * column, " " * (len(data) - column - 1)))
 			except Exception as err:
-				print "[Skin] Error: Unable to parse skin data in '%s' - '%s'!" % (filename, err)
+				print("[Skin] Error: Unable to parse skin data in '%s' - '%s'!" % (filename, err))
 	except (IOError, OSError) as err:
 		if err.errno == errno.ENOENT:  # No such file or directory
-			print "[Skin] Warning: Skin file '%s' does not exist!" % filename
+			print("[Skin] Warning: Skin file '%s' does not exist!" % filename)
 		else:
-			print "[Skin] Error %d: Opening skin file '%s'! (%s)" % (err.errno, filename, err.strerror)
+			print("[Skin] Error %d: Opening skin file '%s'! (%s)" % (err.errno, filename, err.strerror))
 	except Exception as err:
-		print "[Skin] Error: Unexpected error opening skin file '%s'! (%s)" % (filename, err)
+		print("[Skin] Error: Unexpected error opening skin file '%s'! (%s)" % (filename, err))
 	return False
 
 def reloadSkins():
@@ -264,7 +268,7 @@
 def parseCoordinate(s, e, size=0, font=None):
 	s = s.strip()
 	if s == "center":  # For speed as this can be common case.
-		val = 0 if not size else (e - size) / 2
+		val = 0 if not size else (e - size) // 2
 	elif s == "*":
 		return None
 	else:
@@ -287,7 +291,7 @@
 				val = int(s)  # For speed try a simple number first.
 			except ValueError:
 				val = int(eval(s))
-	# print "[Skin] DEBUG: parseCoordinate s='%s', e='%s', size=%s, font='%s', val='%s'." % (s, e, size, font, val)
+	# print("[Skin] DEBUG: parseCoordinate s='%s', e='%s', size=%s, font='%s', val='%s'." % (s, e, size, font, val))
 	if val < 0:
 		val = 0
 	return val
@@ -319,7 +323,7 @@
 		parentsize = getParentSize(object, desktop)
 	xval = parseCoordinate(x, parentsize.width(), size and size.width() or 0)
 	yval = parseCoordinate(y, parentsize.height(), size and size.height() or 0)
-	return (xval * scale[0][0] / scale[0][1], yval * scale[1][0] / scale[1][1])
+	return (xval * scale[0][0] // scale[0][1], yval * scale[1][0] // scale[1][1])
 
 def parsePosition(s, scale, object=None, desktop=None, size=None):
 	return ePoint(*parseValuePair(s, scale, object, desktop, size))
@@ -340,10 +344,10 @@
 	except KeyError:
 		if name not in getFontFaces():
 			f = fonts["Body"]
-			print "[Skin] Error: Font '%s' (in '%s') is not defined!  Using 'Body' font ('%s') instead." % (name, s, f[0])
+			print("[Skin] Error: Font '%s' (in '%s') is not defined!  Using 'Body' font ('%s') instead." % (name, s, f[0]))
 			name = f[0]
 			size = f[1] if size is None else size
-	return gFont(name, int(size) * scale[0][0] / scale[0][1])
+	return gFont(name, int(size) * scale[0][0] // scale[0][1])
 
 def parseColor(s):
 	if s[0] != "#":
@@ -402,18 +406,18 @@
 			# listbox; when the scrollbar setting is applied after the size, a scrollbar
 			# will not be shown until the selection moves for the first time.
 			if attrib == "size":
-				size = value.encode("utf-8")
+				size = six.ensure_str(value)
 			elif attrib == "position":
-				pos = value.encode("utf-8")
+				pos = six.ensure_str(value)
 			elif attrib == "font":
-				font = value.encode("utf-8")
+				font = six.ensure_str(value)
 				skinAttributes.append((attrib, font))
 			else:
-				skinAttributes.append((attrib, value.encode("utf-8")))
-	if pos is not None:
+				skinAttributes.append((attrib, six.ensure_str(value)))
+	if pos != None:
 		pos, size = context.parse(pos, size, font)
 		skinAttributes.append(("position", pos))
-	if size is not None:
+	if size != None:
 		skinAttributes.append(("size", size))
 
 
@@ -427,11 +431,11 @@
 		try:
 			getattr(self, attrib)(value)
 		except AttributeError:
-			print "[Skin] Attribute '%s' (with value of '%s') in object of type '%s' is not implemented!" % (attrib, value, self.guiObject.__class__.__name__)
+			print("[Skin] Attribute '%s' (with value of '%s') in object of type '%s' is not implemented!" % (attrib, value, self.guiObject.__class__.__name__))
 		except SkinError as err:
-			print "[Skin] Error:", err
+			print("[Skin] Error:", err)
 		except Exception:
-			print "[Skin] Attribute '%s' with wrong (or unknown) value '%s' in object of type '%s'!" % (attrib, value, self.guiObject.__class__.__name__)
+			print("[Skin] Attribute '%s' with wrong (or unknown) value '%s' in object of type '%s'!" % (attrib, value, self.guiObject.__class__.__name__))
 
 	def applyAll(self, attrs):
 		for attrib, value in attrs:
@@ -471,7 +475,7 @@
 				"disable_onhide": 0x01
 			}[value])
 		except KeyError:
-			print "[Skin] Error: Invalid animationMode '%s'!  Must be one of 'disable', 'off', 'offshow', 'offhide', 'onshow' or 'onhide'." % value
+			print("[Skin] Error: Invalid animationMode '%s'!  Must be one of 'disable', 'off', 'offshow', 'offhide', 'onshow' or 'onhide'." % value)
 
 	def title(self, value):
 		self.guiObject.setTitle(_(value))
@@ -520,7 +524,7 @@
 				"blend": 2
 			}[value])
 		except KeyError:
-			print "[Skin] Error: Invalid alphatest '%s'!  Must be one of 'on', 'off' or 'blend'." % value
+			print("[Skin] Error: Invalid alphatest '%s'!  Must be one of 'on', 'off' or 'blend'." % value)
 
 	def scale(self, value):
 		value = 1 if value.lower() in ("1", "enabled", "on", "scale", "true", "yes") else 0
@@ -537,7 +541,7 @@
 				"orRightToLeft": (self.guiObject.orHorizontal, True)
 			}[value])
 		except KeyError:
-			print "[Skin] Error: Invalid orientation '%s'!  Must be one of 'orVertical', 'orTopToBottom', 'orBottomToTop', 'orHorizontal', 'orLeftToRight' or 'orRightToLeft'." % value
+			print("[Skin] Error: Invalid orientation '%s'!  Must be one of 'orVertical', 'orTopToBottom', 'orBottomToTop', 'orHorizontal', 'orLeftToRight' or 'orRightToLeft'." % value)
 
 	def valign(self, value):
 		try:
@@ -547,7 +551,7 @@
 				"bottom": self.guiObject.alignBottom
 			}[value])
 		except KeyError:
-			print "[Skin] Error: Invalid valign '%s'!  Must be one of 'top', 'center' or 'bottom'." % value
+			print("[Skin] Error: Invalid valign '%s'!  Must be one of 'top', 'center' or 'bottom'." % value)
 
 	def halign(self, value):
 		try:
@@ -558,13 +562,13 @@
 				"block": self.guiObject.alignBlock
 			}[value])
 		except KeyError:
-			print "[Skin] Error: Invalid halign '%s'!  Must be one of 'left', 'center', 'right' or 'block'." % value
+			print("[Skin] Error: Invalid halign '%s'!  Must be one of 'left', 'center', 'right' or 'block'." % value)
 
 	def textOffset(self, value):
 		if value in variables:
 			value = variables[value]
 		x, y = value.split(",")
-		self.guiObject.setTextOffset(ePoint(int(x) * self.scaleTuple[0][0] / self.scaleTuple[0][1], int(y) * self.scaleTuple[1][0] / self.scaleTuple[1][1]))
+		self.guiObject.setTextOffset(ePoint(int(x) * self.scaleTuple[0][0] // self.scaleTuple[0][1], int(y) * self.scaleTuple[1][0] // self.scaleTuple[1][1]))
 
 	def flags(self, value):
 		if value in variables:
@@ -575,7 +579,7 @@
 				fv = eWindow.__dict__[f]
 				self.guiObject.setFlag(fv)
 			except KeyError:
-				print "[Skin] Error: Invalid flag '%s'!" % f
+				print("[Skin] Error: Invalid flag '%s'!" % f)
 
 	def backgroundColor(self, value):
 		self.guiObject.setBackgroundColor(parseColor(value))
@@ -643,7 +647,7 @@
 				"showLeft": self.guiObject.showLeft
 			}[value])
 		except KeyError:
-			print "[Skin] Error: Invalid scrollbarMode '%s'!  Must be one of 'showOnDemand', 'showAlways', 'showNever' or 'showLeft'." % value
+			print("[Skin] Error: Invalid scrollbarMode '%s'!  Must be one of 'showOnDemand', 'showAlways', 'showNever' or 'showLeft'." % value)
 
 	def enableWrapAround(self, value):
 		value = True if value.lower() in ("1", "enabled", "enablewraparound", "on", "true", "yes") else False
@@ -701,7 +705,7 @@
 				yres = int(yres) if yres else 576
 				bpp = res.attrib.get("bpp")
 				bpp = int(bpp) if bpp else 32
-				# print "[Skin] DEBUG: Resolution xres=%d, yres=%d, bpp=%d." % (xres, yres, bpp)
+				# print("[Skin] DEBUG: Resolution xres=%d, yres=%d, bpp=%d." % (xres, yres, bpp))
 				from enigma import gMainDC
 				gMainDC.getInstance().setResolution(xres, yres)
 				desktop.resize(eSize(xres, yres))
@@ -734,7 +738,7 @@
 			color = color.attrib.get("value")
 			if name and color:
 				colors[name] = parseColor(color)
-				# print "[Skin] DEBUG: Color name='%s', color='%s'." % (name, color)
+				# print("[Skin] DEBUG: Color name='%s', color='%s'." % (name, color))
 			else:
 				raise SkinError("Tag 'color' needs a name and color, got name='%s' and color='%s'" % (name, color))
 	for tag in domSkin.findall("fonts"):
@@ -753,7 +757,7 @@
 			if isfile(filename):
 				addFont(filename, name, scale, isReplacement, render)
 				# Log provided by C++ addFont code.
-				# print "[Skin] Add font: Font path='%s', name='%s', scale=%d, isReplacement=%s, render=%d." % (filename, name, scale, isReplacement, render)
+				# print("[Skin] Add font: Font path='%s', name='%s', scale=%d, isReplacement=%s, render=%d." % (filename, name, scale, isReplacement, render))
 			else:
 				raise SkinError("Font file '%s' not found" % filename)
 		fallbackFont = resolveFilename(SCOPE_FONTS, "fallback.font", path_prefix=pathSkin)
@@ -769,7 +773,7 @@
 				height = int(alias.attrib.get("height", size))  # To be calculated some day.
 				width = int(alias.attrib.get("width", size))
 				fonts[name] = (font, size, height, width)
-				# print "[Skin] Add font alias: name='%s', font='%s', size=%d, height=%s, width=%d." % (name, font, size, height, width)
+				# print("[Skin] Add font alias: name='%s', font='%s', size=%d, height=%s, width=%d." % (name, font, size, height, width))
 			except Exception as err:
 				raise SkinError("Bad font alias: '%s'" % str(err))
 	for tag in domSkin.findall("parameters"):
@@ -777,7 +781,7 @@
 			try:
 				name = parameter.attrib.get("name")
 				value = parameter.attrib.get("value")
-				parameters[name] = map(parseParameter, [x.strip() for x in value.split(",")]) if "," in value else parseParameter(value)
+				parameters[name] = list(map(parseParameter, [x.strip() for x in value.split(",")])) if "," in value else parseParameter(value)
 			except Exception as err:
 				raise SkinError("Bad parameter: '%s'" % str(err))
 	for tag in domSkin.findall("menus"):
@@ -786,7 +790,7 @@
 			image = setup.attrib.get("image")
 			if key and image:
 				menus[key] = image
-				# print "[Skin] DEBUG: Menu key='%s', image='%s'." % (key, image)
+				# print("[Skin] DEBUG: Menu key='%s', image='%s'." % (key, image))
 			else:
 				raise SkinError("Tag menu needs key and image, got key='%s' and image='%s'" % (key, image))
 	for tag in domSkin.findall("setups"):
@@ -795,7 +799,7 @@
 			image = setup.attrib.get("image")
 			if key and image:
 				setups[key] = image
-				# print "[Skin] DEBUG: Setup key='%s', image='%s'." % (key, image)
+				# print("[Skin] DEBUG: Setup key='%s', image='%s'." % (key, image))
 			else:
 				raise SkinError("Tag setup needs key and image, got key='%s' and image='%s'" % (key, image))
 	for tag in domSkin.findall("constant-widgets"):
@@ -848,7 +852,7 @@
 			font = parseFont(title.attrib.get("font"), ((1, 1), (1, 1)))
 		style.setTitleFont(font)
 		style.setTitleOffset(offset)
-		# print "[Skin] DEBUG: WindowStyle font, offset -", font, offset
+		# print("[Skin] DEBUG: WindowStyle font, offset -", font, offset)
 		for borderset in tag.findall("borderset"):
 			bsName = str(borderset.attrib.get("name"))
 			for pixmap in borderset.findall("pixmap"):
@@ -860,7 +864,7 @@
 						style.setPixmap(eWindowStyleSkinned.__dict__[bsName], eWindowStyleSkinned.__dict__[bpName], png)
 					except Exception:
 						pass
-				# print "[Skin] DEBUG: WindowStyle borderset name, filename -", bpName, filename
+				# print("[Skin] DEBUG: WindowStyle borderset name, filename -", bpName, filename)
 		for color in tag.findall("color"):
 			colorType = color.attrib.get("name")
 			color = parseColor(color.attrib.get("color"))
@@ -868,7 +872,7 @@
 				style.setColor(eWindowStyleSkinned.__dict__["col" + colorType], color)
 			except Exception:
 				raise SkinError("Unknown color type '%s'" % colorType)
-			# print "[Skin] DEBUG: WindowStyle color type, color -", type, color
+			# print("[Skin] DEBUG: WindowStyle color type, color -", type, color)
 		x = eWindowStyleManager.getInstance()
 		x.setStyle(styleId, style)
 	for tag in domSkin.findall("margin"):
@@ -1015,7 +1019,7 @@
 		myScreen = getattr(screen, "parsedSkin", None)
 	if myScreen is None and getattr(screen, "skin", None):  # Try uncompiled embedded skin.
 		skin = screen.skin
-		print "[Skin] Parsing embedded skin '%s'." % name
+		print("[Skin] Parsing embedded skin '%s'." % name)
 		if isinstance(skin, tuple):
 			for s in skin:
 				candidate = xml.etree.cElementTree.fromstring(s)
@@ -1025,13 +1029,13 @@
 						myScreen = candidate
 						break
 			else:
-				print "[Skin] No suitable screen found!"
+				print("[Skin] No suitable screen found!")
 		else:
 			myScreen = xml.etree.cElementTree.fromstring(skin)
 		if myScreen:
 			screen.parsedSkin = myScreen
 	if myScreen is None:
-		print "[Skin] No skin to read or screen to display."
+		print("[Skin] No skin to read or screen to display.")
 		myScreen = screen.parsedSkin = xml.etree.cElementTree.fromstring("<screen></screen>")
 	screen.skinAttributes = []
 	skinPath = getattr(screen, "skin_path", path)
@@ -1075,7 +1079,7 @@
 			raise SkinError("The widget has no name and no source")
 			return
 		if wname:
-			# print "[Skin] DEBUG: Widget name='%s'." % wname
+			# print("[Skin] DEBUG: Widget name='%s'." % wname)
 			usedComponents.add(wname)
 			try:  # Get corresponding "gui" object.
 				attributes = screen[wname].skinAttributes = []
@@ -1084,7 +1088,7 @@
 			# assert screen[wname] is not Source
 			collectAttributes(attributes, widget, context, skinPath, ignore=("name",))
 		elif wsource:
-			# print "[Skin] DEBUG: Widget source='%s'." % wsource
+			# print("[Skin] DEBUG: Widget source='%s'." % wsource)
 			while True:  # Get corresponding source until we found a non-obsolete source.
 				# Parse our current "wsource", which might specify a "related screen" before the dot,
 				# for example to reference a parent, global or session-global screen.
@@ -1093,16 +1097,16 @@
 				while len(path) > 1:
 					scr = screen.getRelatedScreen(path[0])
 					if scr is None:
-						# print "[Skin] DEBUG: wsource='%s', name='%s'." % (wsource, name)
+						# print("[Skin] DEBUG: wsource='%s', name='%s'." % (wsource, name))
 						raise SkinError("Specified related screen '%s' was not found in screen '%s'" % (wsource, name))
 					path = path[1:]
 				source = scr.get(path[0])  # Resolve the source.
 				if isinstance(source, ObsoleteSource):
 					# If we found an "obsolete source", issue warning, and resolve the real source.
-					print "[Skin] WARNING: SKIN '%s' USES OBSOLETE SOURCE '%s', USE '%s' INSTEAD!" % (name, wsource, source.newSource)
-					print "[Skin] OBSOLETE SOURCE WILL BE REMOVED %s, PLEASE UPDATE!" % source.removalDate
+					print("[Skin] WARNING: SKIN '%s' USES OBSOLETE SOURCE '%s', USE '%s' INSTEAD!" % (name, wsource, source.newSource))
+					print("[Skin] OBSOLETE SOURCE WILL BE REMOVED %s, PLEASE UPDATE!" % source.removalDate)
 					if source.description:
-						print "[Skin] Source description: '%s'." % source.description
+						print("[Skin] Source description: '%s'." % source.description)
 					wsource = source.new_source
 				else:
 					break  # Otherwise, use the source.
@@ -1114,12 +1118,12 @@
 			for converter in widget.findall("convert"):
 				ctype = converter.get("type")
 				assert ctype, "[Skin] The 'convert' tag needs a 'type' attribute!"
-				# print "[Skin] DEBUG: Converter='%s'." % ctype
+				# print("[Skin] DEBUG: Converter='%s'." % ctype)
 				try:
 					parms = converter.text.strip()
 				except Exception:
 					parms = ""
-				# print "[Skin] DEBUG: Params='%s'." % parms
+				# print("[Skin] DEBUG: Params='%s'." % parms)
 				try:
 					converterClass = my_import(".".join(("Components", "Converter", ctype))).__dict__.get(ctype)
 				except ImportError:
@@ -1182,7 +1186,7 @@
 			try:
 				p(w, context)
 			except SkinError as err:
-				print "[Skin] Error in screen '%s' widget '%s' %s!" % (name, w.tag, str(err))
+				print("[Skin] Error in screen '%s' widget '%s' %s!" % (name, w.tag, str(err)))
 
 	def processPanel(widget, context):
 		n = widget.attrib.get("name")
@@ -1190,7 +1194,7 @@
 			try:
 				s = domScreens[n]
 			except KeyError:
-				print "[Skin] Error: Unable to find screen '%s' referred in screen '%s'!" % (n, name)
+				print("[Skin] Error: Unable to find screen '%s' referred in screen '%s'!" % (n, name))
 			else:
 				processScreen(s[0], context)
 		layout = widget.attrib.get("layout")
@@ -1220,12 +1224,12 @@
 		posY = "?" if context.y is None else str(context.y)
 		sizeW = "?" if context.w is None else str(context.w)
 		sizeH = "?" if context.h is None else str(context.h)
-		print "[Skin] Processing screen '%s'%s, position=(%s, %s), size=(%s x %s) for module '%s'." % (name, msg, posX, posY, sizeW, sizeH, screen.__class__.__name__)
+		print("[Skin] Processing screen '%s'%s, position=(%s, %s), size=(%s x %s) for module '%s'." % (name, msg, posX, posY, sizeW, sizeH, screen.__class__.__name__))
 		context.x = 0  # Reset offsets, all components are relative to screen coordinates.
 		context.y = 0
 		processScreen(myScreen, context)
 	except Exception as err:
-		print "[Skin] Error in screen '%s' %s!" % (name, str(err))
+		print("[Skin] Error in screen '%s' %s!" % (name, str(err)))
 
 	from Components.GUIComponent import GUIComponent
 	unusedComponents = [x for x in set(screen.keys()) - usedComponents if isinstance(x, GUIComponent)]
@@ -1262,7 +1266,7 @@
 	return None
 
 def dump(x, i=0):
-	print " " * i + str(x)
+	print(" " * i + str(x))
 	try:
 		for n in x.childNodes:
 			dump(n, i + 1)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tests/enigma.py /home/osboxes/Schreibtisch/test/enigma2/tests/enigma.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tests/enigma.py	2020-06-21 10:16:12.819461611 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tests/enigma.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 # fake-enigma
 
 class slot:
@@ -23,10 +24,10 @@
 	def __init__(self):
 		self.timeout = slot()
 		self.next_activation = None
-		print "NEW TIMER"
+		print("NEW TIMER")
 
 	def start(self, msec, singleshot = False):
-		print "start timer", msec
+		print("start timer", msec)
 		self.next_activation = time.time() + msec / 1000.0
 		self.msec = msec
 		self.singleshot = singleshot
@@ -49,7 +50,7 @@
 	assert len(running_timers), "no running timers, so nothing will ever happen!"
 	running_timers.sort(key=lambda x: x.next_activation)
 
-	print "running:", running_timers
+	print("running:", running_timers)
 
 	next_timer = running_timers[0]
 
@@ -190,22 +191,22 @@
 		eAVSwitch.instance = self
 
 	def setColorFormat(self, value):
-		print "[eAVSwitch] color format set to %d" % value
+		print("[eAVSwitch] color format set to %d" % value)
 
 	def setAspectRatio(self, value):
-		print "[eAVSwitch] aspect ratio set to %d" % value
+		print("[eAVSwitch] aspect ratio set to %d" % value)
 
 	def setWSS(self, value):
-		print "[eAVSwitch] wss set to %d" % value
+		print("[eAVSwitch] wss set to %d" % value)
 
 	def setSlowblank(self, value):
-		print "[eAVSwitch] wss set to %d" % value
+		print("[eAVSwitch] wss set to %d" % value)
 
 	def setVideomode(self, value):
-		print "[eAVSwitch] wss set to %d" % value
+		print("[eAVSwitch] wss set to %d" % value)
 
 	def setInput(self, value):
-		print "[eAVSwitch] wss set to %d" % value
+		print("[eAVSwitch] wss set to %d" % value)
 
 eAVSwitch()
 
@@ -222,22 +223,22 @@
 		eRFmod.instance = self
 
 	def setFunction(self, value):
-		print "[eRFmod] set function to %d" % value
+		print("[eRFmod] set function to %d" % value)
 
 	def setTestmode(self, value):
-		print "[eRFmod] set testmode to %d" % value
+		print("[eRFmod] set testmode to %d" % value)
 
 	def setSoundFunction(self, value):
-		print "[eRFmod] set sound function to %d" % value
+		print("[eRFmod] set sound function to %d" % value)
 
 	def setSoundCarrier(self, value):
-		print "[eRFmod] set sound carrier to %d" % value
+		print("[eRFmod] set sound carrier to %d" % value)
 
 	def setChannel(self, value):
-		print "[eRFmod] set channel to %d" % value
+		print("[eRFmod] set channel to %d" % value)
 
 	def setFinetune(self, value):
-		print "[eRFmod] set finetune to %d" % value
+		print("[eRFmod] set finetune to %d" % value)
 
 eRFmod()
 
@@ -253,16 +254,16 @@
 		eDBoxLCD.instance = self
 
 	def setLCDBrightness(self, value):
-		print "[eDBoxLCD] set brightness to %d" % value
+		print("[eDBoxLCD] set brightness to %d" % value)
 
 	def setLCDContrast(self, value):
-		print "[eDBoxLCD] set contrast to %d" % value
+		print("[eDBoxLCD] set contrast to %d" % value)
 
 	def setLED(self, value):
-		print "[eDBoxLCD] set led button to %d" % value
+		print("[eDBoxLCD] set led button to %d" % value)
 
 	def setInverted(self, value):
-		print "[eDBoxLCD] set inverted to %d" % value
+		print("[eDBoxLCD] set inverted to %d" % value)
 
 eDBoxLCD()
 
@@ -285,9 +286,9 @@
 
 ##################### ENIGMA CHROOT
 
-print "import directories"
+print("import directories")
 import Tools.Directories
-print "done"
+print("done")
 
 chroot="."
 
@@ -299,9 +300,9 @@
 
 ##################### ENIGMA CONFIG
 
-print "import config"
+print("import config")
 import Components.config
-print "done"
+print("done")
 
 my_config = [
 "config.skin.primary_skin=None\n"
@@ -319,17 +320,17 @@
 ##################### ENIGMA STARTUP:
 
 def init_nav():
-	print "init nav"
+	print("init nav")
 	import Navigation, NavigationInstance
 	NavigationInstance.instance = Navigation.Navigation()
 
 def init_record_config():
-	print "init recording"
+	print("init recording")
 	import Components.RecordingConfig
 	Components.RecordingConfig.InitRecordingConfig()
 
 def init_parental_control():
-	print "init parental"
+	print("init parental")
 	from Components.ParentalControl import InitParentalControl
 	InitParentalControl()
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tests/events.py /home/osboxes/Schreibtisch/test/enigma2/tests/events.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tests/events.py	2020-06-21 10:16:12.819461611 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tests/events.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import time
 import tests
 
@@ -5,7 +6,7 @@
 
 def event(self, name, args, kwargs):
 	global recorded_events
-	print "*EVENT*", time.time(), self, name, args, kwargs
+	print("*EVENT*", time.time(), self, name, args, kwargs)
 	recorded_events.append((time.time(), self, name, args, kwargs))
 
 def eventfnc(f):
@@ -40,24 +41,24 @@
 		expected = f.read()
 		f.close()
 	except:
-		print "NO TEST RESULT FOUND, creating new"
+		print("NO TEST RESULT FOUND, creating new")
 		f = open(test_name + ".new_results", "wb")
 		f.write(results)
 		f.close()
 
-	print results
+	print(results)
 
 	if expected is not None:
-		print "expected:"
+		print("expected:")
 		if expected != results:
 			f = open(test_name + ".bogus_results", "wb")
 			f.write(results)
 			f.close()
 			raise tests.TestError("test data does not match")
 		else:
-			print "test compared ok"
+			print("test compared ok")
 	else:
-		print "no test data to compare with."
+		print("no test data to compare with.")
 
 def log(fnc, base_time = 0, test_name = "test", *args, **kwargs):
 	import fake_time
@@ -67,6 +68,6 @@
 	try:
 		fnc(*args, **kwargs)
 		event(None, "test_completed", [], {"test_name": test_name})
-	except tests.TestError,c:
+	except tests.TestError as c:
 		event(None, "test_failed", [], {"test_name": test_name, "reason": str(c)})
 	end_log(test_name)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tests/fake_time.py /home/osboxes/Schreibtisch/test/enigma2/tests/fake_time.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tests/fake_time.py	2020-06-21 10:16:12.819461611 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tests/fake_time.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import time
 
 real_time = None
@@ -26,6 +27,6 @@
 def my_sleep(sleep):
 	global time_offset
 	time_offset -= sleep
-	print "(faking %f seconds)" % sleep
+	print("(faking %f seconds)" % sleep)
 
 time.sleep = my_sleep
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tests/test_timer.py /home/osboxes/Schreibtisch/test/enigma2/tests/test_timer.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tests/test_timer.py	2020-06-21 10:16:12.819461611 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tests/test_timer.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import time
 
 import enigma
@@ -12,8 +13,8 @@
 	at = time.time()
 
 	t = NavigationInstance.instance.RecordTimer
-	print t
-	print "old mwt:", t.MaxWaitTime
+	print(t)
+	print("old mwt:", t.MaxWaitTime)
 	t.MaxWaitTime = 86400 * 1000
 
 	t.processed_timers = [ ]
@@ -45,25 +46,25 @@
 	# run virtual environment
 	enigma.run(sim_length)
 
-	print "done."
+	print("done.")
 
 	timers = t.processed_timers  + t.timer_list
 
-	print "start: %s" % (time.ctime(at + 10))
+	print("start: %s" % (time.ctime(at + 10)))
 
 	assert len(timers) == 1
 
 	for t in timers:
-		print "begin=%d, end=%d, repeated=%d, state=%d" % (t.begin - at, t.end - at, t.repeated, t.state)
-		print "begin: %s" % (time.ctime(t.begin))
-		print "end: %s" % (time.ctime(t.end))
+		print("begin=%d, end=%d, repeated=%d, state=%d" % (t.begin - at, t.end - at, t.repeated, t.state))
+		print("begin: %s" % (time.ctime(t.begin)))
+		print("end: %s" % (time.ctime(t.end)))
 
 	# if repeat, check if the calculated repeated time of day matches the initial time of day
 	if repeat:
 		t_initial = time.localtime(at + timer_start)
 		t_repeated = time.localtime(timers[0].begin)
-		print t_initial
-		print t_repeated
+		print(t_initial)
+		print(t_repeated)
 
 	if t_initial[3:6] != t_repeated[3:6]:
 		raise tests.TestError("repeated timer time of day does not match")
@@ -88,5 +89,5 @@
 time.tzset()
 
 #log(test_timer, test_name = "test_timer_repeating", base_time = calendar.timegm((2007, 3, 1, 12, 0, 0)), repeat=0x7f, sim_length = 86400 * 7)
-log(test_timer, test_name = "test_timer_repeating_dst_skip", base_time = calendar.timegm((2007, 03, 20, 0, 0, 0)), timer_start = 3600, repeat=0x7f, sim_length = 86400 * 7)
+log(test_timer, test_name = "test_timer_repeating_dst_skip", base_time = calendar.timegm((2007, 0o3, 20, 0, 0, 0)), timer_start = 3600, repeat=0x7f, sim_length = 86400 * 7)
 #log(test_timer, test_name = "test_timer_repeating_dst_start", base_time = calendar.timegm((2007, 03, 20, 0, 0, 0)), timer_start = 10000, repeat=0x7f, sim_length = 86400 * 7)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/timer.py /home/osboxes/Schreibtisch/test/enigma2/timer.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/timer.py	2020-06-21 10:16:12.819461611 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/timer.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from bisect import insort
 from time import time, localtime, mktime
 from enigma import eTimer, eActionMap
@@ -108,10 +109,10 @@
 	# check if a timer entry must be skipped
 	def shouldSkip(self):
 		if self.disabled:
-			if self.end <= time() and not "PowerTimerEntry" in `self`:
+			if self.end <= time() and not "PowerTimerEntry" in repr(self):
 				self.disabled = False
 			return True
-		if "PowerTimerEntry" in `self`:
+		if "PowerTimerEntry" in repr(self):
 			if (self.timerType == 3 or self.timerType == 4) and self.autosleeprepeat != 'once':
 				return False
 			elif self.begin >= time() and (self.timerType == 3 or self.timerType == 4) and self.autosleeprepeat == 'once':
@@ -228,7 +229,7 @@
 	def calcNextActivation(self):
 		now = time()
 		if self.lastActivation > now:
-			print "[timer.py] timewarp - re-evaluating all processed timers."
+			print("[timer.py] timewarp - re-evaluating all processed timers.")
 			tl = self.processed_timers
 			self.processed_timers = [ ]
 			for x in tl:
@@ -262,12 +263,12 @@
 			try:
 				self.timer_list.remove(timer)
 			except:
-				print "[timer] Failed to remove, not in list"
+				print("[timer] Failed to remove, not in list")
 				return
 		# give the timer a chance to re-enqueue
 		if timer.state == TimerEntry.StateEnded:
 			timer.state = TimerEntry.StateWaiting
-		elif "PowerTimerEntry" in `timer` and (timer.timerType == 3 or timer.timerType == 4):
+		elif "PowerTimerEntry" in repr(timer) and (timer.timerType == 3 or timer.timerType == 4):
 			if timer.state > 0:
 				eActionMap.getInstance().unbindAction('', timer.keyPressed)
 			timer.state = TimerEntry.StateWaiting
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tools/create_picon_e1_to_e2.py /home/osboxes/Schreibtisch/test/enigma2/tools/create_picon_e1_to_e2.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tools/create_picon_e1_to_e2.py	2020-06-21 10:16:12.819461611 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tools/create_picon_e1_to_e2.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 #
 # create links for picon
 #   usage: create_picon_providers lamedb
@@ -17,7 +18,7 @@
 	name = name.replace('\xc2\x87', '').replace('\xc2\x86', '')
 
 	fields = f[2].split(',')
-	if len(fields) and fields[0][0] is 'p':
+	if len(fields) and fields[0][0] == 'p':
 		provider = fields[0].split(':')[1]
 	else:
 		provider = 'unknown'
@@ -48,11 +49,11 @@
 	filename = filename.replace('\n', '')
 	provider = provider.replace('\n', '')
 
-	for i in range(len(filename)):
+	for i in list(range(len(filename))):
 		if ord(filename[i]) > 127:
 			filename = filename[0:i] + '_' + filename[i + 1:]
 
-	for i in range(len(provider)):
+	for i in list(range(len(provider))):
 		if ord(provider[i]) > 127:
 			provider = provider[0:i] + '_' + provider[i + 1:]
 
@@ -66,7 +67,7 @@
 	except:
 		pass
 
-	print sat[0:2] + '.' + sat[-1:] + 'E' + '_' + "%X" % ref[0] + '.png'
+	print(sat[0:2] + '.' + sat[-1:] + 'E' + '_' + "%X" % ref[0] + '.png')
 	try:
 		os.rename(sat[0:-1] + 'E' + '_' + "%X" % ref[0] + '.png', sat + '/' + servicetype + '/' + filename)
 	except:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tools/create_picon_links.py /home/osboxes/Schreibtisch/test/enigma2/tools/create_picon_links.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tools/create_picon_links.py	2020-06-21 10:16:12.819461611 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tools/create_picon_links.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 #
 # create links for picon
 #   usage: create_picon_links lamedb
@@ -32,12 +33,12 @@
 	filename = filename.replace('/', '_').replace('\\', '_').replace('&', '_').replace('\'', '').replace('"', '').replace('`', '')
 	filename = filename.replace('\n', '')
 
-	for i in range(len(filename)):
+	for i in list(range(len(filename))):
 		if ord(filename[i]) > 127:
 			filename = filename[0:i] + '_' + filename[i + 1:]
 
 	if os.access(filename, os.F_OK) and not os.access(linkname, os.F_OK):
 		os.symlink(filename, linkname)
 	else:
-		print "could not find %s (%s)" % (filename, name)
+		print("could not find %s (%s)" % (filename, name))
 	f =f[3:]
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tools/create_picon_providers.py /home/osboxes/Schreibtisch/test/enigma2/tools/create_picon_providers.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tools/create_picon_providers.py	2020-06-21 10:16:12.819461611 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tools/create_picon_providers.py	2020-06-21 10:20:02.387329800 -0400
@@ -17,7 +17,7 @@
 	name = name.replace('\xc2\x87', '').replace('\xc2\x86', '')
 
 	fields = f[2].split(',')
-	if len(fields) and fields[0][0] is 'p':
+	if len(fields) and fields[0][0] == 'p':
 		provider = fields[0].split(':')[1]
 	else:
 		provider = 'unknown'
@@ -48,11 +48,11 @@
 	filename = filename.replace('\n', '')
 	provider = provider.replace('\n', '')
 
-	for i in range(len(filename)):
+	for i in list(range(len(filename))):
 		if ord(filename[i]) > 127:
 			filename = filename[0:i] + '_' + filename[i + 1:]
 
-	for i in range(len(provider)):
+	for i in list(range(len(provider))):
 		if ord(provider[i]) > 127:
 			provider = provider[0:i] + '_' + provider[i + 1:]
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tools/create_picon_sats.py /home/osboxes/Schreibtisch/test/enigma2/tools/create_picon_sats.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tools/create_picon_sats.py	2020-06-21 10:16:12.819461611 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tools/create_picon_sats.py	2020-06-21 10:20:02.387329800 -0400
@@ -19,7 +19,7 @@
 	name = name.replace('\xc2\x87', '').replace('\xc2\x86', '')
 
 	fields = f[2].split(',')
-	if len(fields) and fields[0][0] is 'p':
+	if len(fields) and fields[0][0] == 'p':
 		provider = fields[0].split(':')[1]
 	else:
 		provider = 'unknown'
@@ -49,11 +49,11 @@
 	filename = filename.replace('\n', '')
 	provider = provider.replace('\n', '')
 
-	for i in range(len(filename)):
+	for i in list(range(len(filename))):
 		if ord(filename[i]) > 127:
 			filename = filename[0:i] + '_' + filename[i + 1:]
 
-	for i in range(len(provider)):
+	for i in list(range(len(provider))):
 		if ord(provider[i]) > 127:
 			provider = provider[0:i] + '_' + provider[i + 1:]
 
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tools/genmetaindex.py /home/osboxes/Schreibtisch/test/enigma2/tools/genmetaindex.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tools/genmetaindex.py	2020-06-21 10:16:12.823462411 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tools/genmetaindex.py	2020-06-21 10:20:02.387329800 -0400
@@ -3,6 +3,7 @@
 from xml.etree.ElementTree import ElementTree, Element
 
 root = Element("index")
+encoding = ("unicode" if sys.version_info[0] >= 3 else "utf-8")
 
 for file in sys.argv[1:]:
 	p = ElementTree()
@@ -47,4 +48,4 @@
 
 indent(root)
 
-ElementTree(root).write(sys.stdout)
+ElementTree(root).write(sys.stdout, encoding=encoding)
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tools/host_tools/FormatConverter/datasource.py /home/osboxes/Schreibtisch/test/enigma2/tools/host_tools/FormatConverter/datasource.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tools/host_tools/FormatConverter/datasource.py	2020-06-21 10:16:12.823462411 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tools/host_tools/FormatConverter/datasource.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from input import inputChoices
 
 class datasource:
@@ -19,10 +20,10 @@
 
 	def printAll(self):
 		for sat in self.transponderlist.keys():
-			print "***********"
-			print "sat:", sat, self.satnames[sat]
+			print("***********")
+			print("sat:", sat, self.satnames[sat])
 			for transponder in self.transponderlist[sat]:
-				print transponder
+				print(transponder)
 
 	def clear(self):
 		self.transponderlist = {}
@@ -35,7 +36,7 @@
 		pass
 
 	def addSat(self, satname, satpos):
-		if not self.transponderlist.has_key(satpos):
+		if satpos not in self.transponderlist:
 			self.transponderlist[satpos] = []
 			self.satnames[satpos] = satname
 
@@ -65,25 +66,25 @@
 		while choice is not None:
 			choice = inputChoices(["select source", "select destination", "copy now!"])
 			if choice == 0:
-				print "\nselect source:"
+				print("\nselect source:")
 				self.source = self.selectDatasource()
 			elif choice == 1:
-				print "\nselect destination"
+				print("\nselect destination")
 				self.destination = self.selectDatasource()
 			elif choice == 2:
 				self.docopymerge(action)
 
 	def docopymerge(self, action = "copy"):
 		if self.source is None:
-			print "select a source first!"
+			print("select a source first!")
 		elif self.destination is None:
-			print "select a destination first!"
+			print("select a destination first!")
 		else:
 			if action == "copy":
-				print "copying ",
+				print("copying ", end=' ')
 			elif action == "merge":
-				print "merging ",
-			print "from %s to %s" % (self.source.getName(), self.destination.getName())
+				print("merging ", end=' ')
+			print("from %s to %s" % (self.source.getName(), self.destination.getName()))
 			countsat = 0
 			counttransponder = 0
 			if action == "copy":
@@ -94,7 +95,7 @@
 				for transponder in self.source.transponderlist[satpos]:
 					counttransponder += 1
 					self.destination.addTransponder(satpos, transponder)
-			print "copied %d sats with %d transponders" % (countsat, counttransponder)
+			print("copied %d sats with %d transponders" % (countsat, counttransponder))
 
 	def selectDatasource(self):
 		list = []
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tools/host_tools/FormatConverter/input.py /home/osboxes/Schreibtisch/test/enigma2/tools/host_tools/FormatConverter/input.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tools/host_tools/FormatConverter/input.py	2020-06-21 10:16:12.823462411 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tools/host_tools/FormatConverter/input.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import sys
 
 def inputText():
@@ -10,9 +11,9 @@
 		repeat = False
 		count = 0
 		for item in list:
-			print count, "-", item
+			print(count, "-", item)
 			count += 1
-		print backcmd, "-", backtext
+		print(backcmd, "-", backtext)
 		input = inputText()
 		if input == backcmd:
 			return None
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tools/host_tools/FormatConverter/lamedb.py /home/osboxes/Schreibtisch/test/enigma2/tools/host_tools/FormatConverter/lamedb.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tools/host_tools/FormatConverter/lamedb.py	2020-06-21 10:16:12.823462411 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tools/host_tools/FormatConverter/lamedb.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from datasource import datasource
 
 class lamedb(datasource):
@@ -22,7 +23,7 @@
 		versionstring = lines[0].split('/')
 		version = int(versionstring[1])
 		if 3 > version or 4 < version:
-			print "unsupported lamedb version"
+			print("unsupported lamedb version")
 			return
 
 		transpondersreading = False
@@ -39,7 +40,7 @@
 				if ord(line[0]) == 9:
 					transponder = line.strip().split(' ')[1].split(':')
 					sat = transponder[4]
-					if not sats.has_key(sat):
+					if sat not in sats:
 						sats[sat] = []
 					sats[sat].append((transponder, tsid, onid))
 					tsid = None
@@ -52,7 +53,7 @@
 		satlist.sort()
 
 		for sat in satlist:
-			print sat
+			print(sat)
 			self.addSat(sat, sat)
 			transponders = sats[sat]
 			transponders.sort(key = lambda a: a[0])
@@ -60,7 +61,7 @@
 				transponder = transpondertuple[0]
 				tsid = transpondertuple[1]
 				onid = transpondertuple[2]
-				print transponder, tsid, onid
+				print(transponder, tsid, onid)
 				tmp_transponder = {"frequency": transponder[0], "symbol_rate": transponder[1], "polarization": transponder[2], "fec": transponder[3]}
 				if version == 3:
 					if len(transponder) > 6:
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tools/host_tools/FormatConverter/lamedb2satxml.py /home/osboxes/Schreibtisch/test/enigma2/tools/host_tools/FormatConverter/lamedb2satxml.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tools/host_tools/FormatConverter/lamedb2satxml.py	2020-06-21 10:16:12.823462411 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tools/host_tools/FormatConverter/lamedb2satxml.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,4 +1,5 @@
 #!/usr/bin/python
+from __future__ import print_function
 from datasource import genericdatasource
 from satxml import satxml
 from lamedb import lamedb
@@ -6,7 +7,7 @@
 import sys
 
 if len(sys.argv) != 3:
-	print "usage: %s <lamedb> <satellites.xml>" % sys.argv[0]
+	print("usage: %s <lamedb> <satellites.xml>" % sys.argv[0])
 	sys.exit()
 
 gen = genericdatasource()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tools/host_tools/FormatConverter/main.py /home/osboxes/Schreibtisch/test/enigma2/tools/host_tools/FormatConverter/main.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tools/host_tools/FormatConverter/main.py	2020-06-21 10:16:12.823462411 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tools/host_tools/FormatConverter/main.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,4 +1,5 @@
 #!/usr/bin/python
+from __future__ import print_function
 import os
 
 from datasource import genericdatasource
@@ -22,14 +23,14 @@
 while True:
 	os.system("/usr/bin/clear")
 	list = []
-	for index in range(len(datasources)):
+	for index in list(range(len(datasources))):
 		list.append(datasources[index].getName() + (" (%d sats)" % len(datasources[index].transponderlist.keys())))
 	index = inputChoices(list, "q", "quit")
 	if index is None:
 		break
 
 	while True:
-		print datasources[index].getStatus()
+		print(datasources[index].getStatus())
 		list = []
 		for action in datasources[index].getCapabilities():
 			list.append(action[0])
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tools/host_tools/FormatConverter/satxml.py /home/osboxes/Schreibtisch/test/enigma2/tools/host_tools/FormatConverter/satxml.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tools/host_tools/FormatConverter/satxml.py	2020-06-21 10:16:12.823462411 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tools/host_tools/FormatConverter/satxml.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import os
 from datasource import datasource
 from xml.dom import minidom
@@ -10,7 +11,7 @@
 		datasource.__init__(self)
 
 		if not os.path.isfile(filename):
-			print "File %s doesn't exist. Creating it." % filename
+			print("File %s doesn't exist. Creating it." % filename)
 
 	def getStatus(self):
 		text = datasource.getStatus(self)
@@ -23,20 +24,20 @@
 		return "satellites.xml"
 
 	def setFilename(self):
-		print "Please give a filename <satellites.xml>:"
+		print("Please give a filename <satellites.xml>:")
 		filename = inputText()
 		if filename == "":
 			self.filename = "satellites.xml"
 		else:
 			self.filename = filename
-		print "Filename set to %s" % self.filename
+		print("Filename set to %s" % self.filename)
 
 	def read(self):
 		basicsatxml = minidom.parse(self.filename)
 
 		for sat in basicsatxml.firstChild.childNodes:
 			if sat.nodeType == sat.ELEMENT_NODE and sat.localName == "sat":
-				print sat.localName
+				print(sat.localName)
 				satname = str(sat.getAttribute("name"))
 				satpos = str(sat.getAttribute("position"))
 				self.addSat(satname, satpos)
@@ -50,14 +51,14 @@
 								parameters[param] = entry
 						if len(parameters.keys()) > 1:
 							self.addTransponder(satpos, parameters)
-		print self.transponderlist
+		print(self.transponderlist)
 
 	def write(self):
 		satxml = Document()
 		satellites = satxml.createElement("satellites")
 		satxml.appendChild(satellites)
 		satlist = self.transponderlist.keys()
-		print self.transponderlist
+		print(self.transponderlist)
 		satlist.sort()
 
 		for sat in satlist:
@@ -73,11 +74,11 @@
 				xmltransponder = satxml.createElement("transponder")
 				paramlist = ["frequency", "symbol_rate", "polarization", "fec", "system", "modulation", "tsid", "onid"]
 				for param in paramlist:
-					if transponder.has_key(param):
+					if param in transponder:
 						xmltransponder.setAttribute(param, transponder[param])
 				xmlsat.appendChild(xmltransponder)
 		prettyxml = satxml.toprettyxml()
-		print prettyxml
+		print(prettyxml)
 		file = open(self.filename, "w")
 		file.write(prettyxml)
 		file.close()
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/tools/svg2skin.py /home/osboxes/Schreibtisch/test/enigma2/tools/svg2skin.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/tools/svg2skin.py	2020-06-21 10:16:12.823462411 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/tools/svg2skin.py	2020-06-21 10:20:02.387329800 -0400
@@ -9,6 +9,7 @@
 #
 # tested only with a single inkscape-generated SVG.
 
+from __future__ import print_function
 import sys
 from xml.sax import make_parser
 from xml.sax.handler import ContentHandler
@@ -77,7 +78,7 @@
 			font = ' font="Regular;%d"' % px(styles["font-size"])
 		else:
 			font = ""
-		print """\t\t<widget source="%s" render="Label" position="%d,%d" size="%d,%d" %s />""" % (id, x, y, width, height, font)
+		print("""\t\t<widget source="%s" render="Label" position="%d,%d" size="%d,%d" %s />""" % (id, x, y, width, height, font))
 
 parser = make_parser()
 contentHandler = parseXML()
@@ -86,6 +87,6 @@
 parser.parse(sys.argv[1])
 bboxi = tuple([int(x) for x in contentHandler.bbox])
 contentHandler.find_bbox = False
-print '\t<screen name="" position="%d,%d" size="%d,%d" title="">' % bboxi
+print('\t<screen name="" position="%d,%d" size="%d,%d" title="">' % bboxi)
 parser.parse(sys.argv[1])
-print '\t</screen>'
+print('\t</screen>')
diff -U 3 -H -d -r -N -- /home/osboxes/Schreibtisch/test/enigma2-start/upgrade.py /home/osboxes/Schreibtisch/test/enigma2/upgrade.py
--- /home/osboxes/Schreibtisch/test/enigma2-start/upgrade.py	2020-06-21 10:16:12.823462411 -0400
+++ /home/osboxes/Schreibtisch/test/enigma2/upgrade.py	2020-06-21 10:20:02.387329800 -0400
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import os
 from subprocess import Popen, PIPE
 
@@ -25,7 +26,7 @@
 	global opkgDestinations
 	if mountpoint not in opkgDestinations:
 		opkgDestinations.append(mountpoint)
-		print "[Ipkg] Added to OPKG destinations:", mountpoint
+		print("[Ipkg] Added to OPKG destinations:", mountpoint)
 
 mounts = os.listdir('/media')
 for mount in mounts:
@@ -42,8 +43,8 @@
 
 def getValue(line):
 	dummy = line.split('=')
-	if len(dummy) <> 2:
-		print "Error: Wrong formatted settings file"
+	if len(dummy) != 2:
+		print("Error: Wrong formatted settings file")
 		exit
 	if dummy[1] == "false":
 		return False
@@ -56,8 +57,8 @@
 p = Popen("opkg list-upgradable", stdout=PIPE, stderr=PIPE, shell=True)
 stdout, stderr = p.communicate()
 
-if stderr <> "":
-	print "Error occurred:", stderr
+if stderr != "":
+	print("Error occurred:", stderr)
 	exit
 
 # read configuration
@@ -66,7 +67,7 @@
 	lines = f.readlines()
 	f.close()
 except:
-	print "Error opening /etc/enigma2/settings file"
+	print("Error opening /etc/enigma2/settings file")
 
 for line in lines:
 	if line.startswith("config.plugins.softwaremanager.overwriteSettingsFiles"):
